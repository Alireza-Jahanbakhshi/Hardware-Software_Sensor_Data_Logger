
Sensor_Data_Logger_PRJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af1c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800b108  0800b108  0001b108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b634  0800b634  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b634  0800b634  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b634  0800b634  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b634  0800b634  0001b634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b638  0800b638  0001b638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b63c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  200001e0  0800b81c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  0800b81c  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127f1  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031f0  00000000  00000000  000329fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  00035bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a8  00000000  00000000  00036f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d1f4  00000000  00000000  000380a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156d7  00000000  00000000  0005529c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2ca5  00000000  00000000  0006a973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010d618  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063bc  00000000  00000000  0010d668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	0800b0ec 	.word	0x0800b0ec

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	0800b0ec 	.word	0x0800b0ec

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_fmul>:
 8000238:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000240:	bf1e      	ittt	ne
 8000242:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000246:	ea92 0f0c 	teqne	r2, ip
 800024a:	ea93 0f0c 	teqne	r3, ip
 800024e:	d06f      	beq.n	8000330 <__aeabi_fmul+0xf8>
 8000250:	441a      	add	r2, r3
 8000252:	ea80 0c01 	eor.w	ip, r0, r1
 8000256:	0240      	lsls	r0, r0, #9
 8000258:	bf18      	it	ne
 800025a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800025e:	d01e      	beq.n	800029e <__aeabi_fmul+0x66>
 8000260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000264:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000268:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800026c:	fba0 3101 	umull	r3, r1, r0, r1
 8000270:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000274:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000278:	bf3e      	ittt	cc
 800027a:	0049      	lslcc	r1, r1, #1
 800027c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000280:	005b      	lslcc	r3, r3, #1
 8000282:	ea40 0001 	orr.w	r0, r0, r1
 8000286:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800028a:	2afd      	cmp	r2, #253	; 0xfd
 800028c:	d81d      	bhi.n	80002ca <__aeabi_fmul+0x92>
 800028e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000296:	bf08      	it	eq
 8000298:	f020 0001 	biceq.w	r0, r0, #1
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002a6:	bf08      	it	eq
 80002a8:	0249      	lsleq	r1, r1, #9
 80002aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002b2:	3a7f      	subs	r2, #127	; 0x7f
 80002b4:	bfc2      	ittt	gt
 80002b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002be:	4770      	bxgt	lr
 80002c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c4:	f04f 0300 	mov.w	r3, #0
 80002c8:	3a01      	subs	r2, #1
 80002ca:	dc5d      	bgt.n	8000388 <__aeabi_fmul+0x150>
 80002cc:	f112 0f19 	cmn.w	r2, #25
 80002d0:	bfdc      	itt	le
 80002d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002d6:	4770      	bxle	lr
 80002d8:	f1c2 0200 	rsb	r2, r2, #0
 80002dc:	0041      	lsls	r1, r0, #1
 80002de:	fa21 f102 	lsr.w	r1, r1, r2
 80002e2:	f1c2 0220 	rsb	r2, r2, #32
 80002e6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002ea:	ea5f 0031 	movs.w	r0, r1, rrx
 80002ee:	f140 0000 	adc.w	r0, r0, #0
 80002f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002f6:	bf08      	it	eq
 80002f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002fc:	4770      	bx	lr
 80002fe:	f092 0f00 	teq	r2, #0
 8000302:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000306:	bf02      	ittt	eq
 8000308:	0040      	lsleq	r0, r0, #1
 800030a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800030e:	3a01      	subeq	r2, #1
 8000310:	d0f9      	beq.n	8000306 <__aeabi_fmul+0xce>
 8000312:	ea40 000c 	orr.w	r0, r0, ip
 8000316:	f093 0f00 	teq	r3, #0
 800031a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800031e:	bf02      	ittt	eq
 8000320:	0049      	lsleq	r1, r1, #1
 8000322:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000326:	3b01      	subeq	r3, #1
 8000328:	d0f9      	beq.n	800031e <__aeabi_fmul+0xe6>
 800032a:	ea41 010c 	orr.w	r1, r1, ip
 800032e:	e78f      	b.n	8000250 <__aeabi_fmul+0x18>
 8000330:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000334:	ea92 0f0c 	teq	r2, ip
 8000338:	bf18      	it	ne
 800033a:	ea93 0f0c 	teqne	r3, ip
 800033e:	d00a      	beq.n	8000356 <__aeabi_fmul+0x11e>
 8000340:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000344:	bf18      	it	ne
 8000346:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800034a:	d1d8      	bne.n	80002fe <__aeabi_fmul+0xc6>
 800034c:	ea80 0001 	eor.w	r0, r0, r1
 8000350:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f090 0f00 	teq	r0, #0
 800035a:	bf17      	itett	ne
 800035c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000360:	4608      	moveq	r0, r1
 8000362:	f091 0f00 	teqne	r1, #0
 8000366:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800036a:	d014      	beq.n	8000396 <__aeabi_fmul+0x15e>
 800036c:	ea92 0f0c 	teq	r2, ip
 8000370:	d101      	bne.n	8000376 <__aeabi_fmul+0x13e>
 8000372:	0242      	lsls	r2, r0, #9
 8000374:	d10f      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000376:	ea93 0f0c 	teq	r3, ip
 800037a:	d103      	bne.n	8000384 <__aeabi_fmul+0x14c>
 800037c:	024b      	lsls	r3, r1, #9
 800037e:	bf18      	it	ne
 8000380:	4608      	movne	r0, r1
 8000382:	d108      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000384:	ea80 0001 	eor.w	r0, r0, r1
 8000388:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800038c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000390:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000394:	4770      	bx	lr
 8000396:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800039a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_dmul>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8de 	bleq	80008f4 <__aeabi_dmul+0x1dc>
 8000738:	442c      	add	r4, r5
 800073a:	ea81 0603 	eor.w	r6, r1, r3
 800073e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800074a:	bf18      	it	ne
 800074c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000758:	d038      	beq.n	80007cc <__aeabi_dmul+0xb4>
 800075a:	fba0 ce02 	umull	ip, lr, r0, r2
 800075e:	f04f 0500 	mov.w	r5, #0
 8000762:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800076a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800076e:	f04f 0600 	mov.w	r6, #0
 8000772:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000776:	f09c 0f00 	teq	ip, #0
 800077a:	bf18      	it	ne
 800077c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800078c:	d204      	bcs.n	8000798 <__aeabi_dmul+0x80>
 800078e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000792:	416d      	adcs	r5, r5
 8000794:	eb46 0606 	adc.w	r6, r6, r6
 8000798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800079c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007b0:	bf88      	it	hi
 80007b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007b6:	d81e      	bhi.n	80007f6 <__aeabi_dmul+0xde>
 80007b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007bc:	bf08      	it	eq
 80007be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007c2:	f150 0000 	adcs.w	r0, r0, #0
 80007c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007d0:	ea46 0101 	orr.w	r1, r6, r1
 80007d4:	ea40 0002 	orr.w	r0, r0, r2
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e0:	bfc2      	ittt	gt
 80007e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ea:	bd70      	popgt	{r4, r5, r6, pc}
 80007ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f0:	f04f 0e00 	mov.w	lr, #0
 80007f4:	3c01      	subs	r4, #1
 80007f6:	f300 80ab 	bgt.w	8000950 <__aeabi_dmul+0x238>
 80007fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007fe:	bfde      	ittt	le
 8000800:	2000      	movle	r0, #0
 8000802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000806:	bd70      	pople	{r4, r5, r6, pc}
 8000808:	f1c4 0400 	rsb	r4, r4, #0
 800080c:	3c20      	subs	r4, #32
 800080e:	da35      	bge.n	800087c <__aeabi_dmul+0x164>
 8000810:	340c      	adds	r4, #12
 8000812:	dc1b      	bgt.n	800084c <__aeabi_dmul+0x134>
 8000814:	f104 0414 	add.w	r4, r4, #20
 8000818:	f1c4 0520 	rsb	r5, r4, #32
 800081c:	fa00 f305 	lsl.w	r3, r0, r5
 8000820:	fa20 f004 	lsr.w	r0, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea40 0002 	orr.w	r0, r0, r2
 800082c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000838:	fa21 f604 	lsr.w	r6, r1, r4
 800083c:	eb42 0106 	adc.w	r1, r2, r6
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 040c 	rsb	r4, r4, #12
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f304 	lsl.w	r3, r0, r4
 8000858:	fa20 f005 	lsr.w	r0, r0, r5
 800085c:	fa01 f204 	lsl.w	r2, r1, r4
 8000860:	ea40 0002 	orr.w	r0, r0, r2
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800086c:	f141 0100 	adc.w	r1, r1, #0
 8000870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000874:	bf08      	it	eq
 8000876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f1c4 0520 	rsb	r5, r4, #32
 8000880:	fa00 f205 	lsl.w	r2, r0, r5
 8000884:	ea4e 0e02 	orr.w	lr, lr, r2
 8000888:	fa20 f304 	lsr.w	r3, r0, r4
 800088c:	fa01 f205 	lsl.w	r2, r1, r5
 8000890:	ea43 0302 	orr.w	r3, r3, r2
 8000894:	fa21 f004 	lsr.w	r0, r1, r4
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	fa21 f204 	lsr.w	r2, r1, r4
 80008a0:	ea20 0002 	bic.w	r0, r0, r2
 80008a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ac:	bf08      	it	eq
 80008ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f094 0f00 	teq	r4, #0
 80008b8:	d10f      	bne.n	80008da <__aeabi_dmul+0x1c2>
 80008ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	eb41 0101 	adc.w	r1, r1, r1
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3c01      	subeq	r4, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1a6>
 80008ce:	ea41 0106 	orr.w	r1, r1, r6
 80008d2:	f095 0f00 	teq	r5, #0
 80008d6:	bf18      	it	ne
 80008d8:	4770      	bxne	lr
 80008da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	eb43 0303 	adc.w	r3, r3, r3
 80008e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008e8:	bf08      	it	eq
 80008ea:	3d01      	subeq	r5, #1
 80008ec:	d0f7      	beq.n	80008de <__aeabi_dmul+0x1c6>
 80008ee:	ea43 0306 	orr.w	r3, r3, r6
 80008f2:	4770      	bx	lr
 80008f4:	ea94 0f0c 	teq	r4, ip
 80008f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fc:	bf18      	it	ne
 80008fe:	ea95 0f0c 	teqne	r5, ip
 8000902:	d00c      	beq.n	800091e <__aeabi_dmul+0x206>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	d1d1      	bne.n	80008b4 <__aeabi_dmul+0x19c>
 8000910:	ea81 0103 	eor.w	r1, r1, r3
 8000914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000922:	bf06      	itte	eq
 8000924:	4610      	moveq	r0, r2
 8000926:	4619      	moveq	r1, r3
 8000928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092c:	d019      	beq.n	8000962 <__aeabi_dmul+0x24a>
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	d102      	bne.n	800093a <__aeabi_dmul+0x222>
 8000934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000938:	d113      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	d105      	bne.n	800094c <__aeabi_dmul+0x234>
 8000940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000944:	bf1c      	itt	ne
 8000946:	4610      	movne	r0, r2
 8000948:	4619      	movne	r1, r3
 800094a:	d10a      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	bd70      	pop	{r4, r5, r6, pc}
 8000962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800096a:	bd70      	pop	{r4, r5, r6, pc}

0800096c <__aeabi_ddiv>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800097a:	bf1d      	ittte	ne
 800097c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000980:	ea94 0f0c 	teqne	r4, ip
 8000984:	ea95 0f0c 	teqne	r5, ip
 8000988:	f000 f8a7 	bleq	8000ada <__aeabi_ddiv+0x16e>
 800098c:	eba4 0405 	sub.w	r4, r4, r5
 8000990:	ea81 0e03 	eor.w	lr, r1, r3
 8000994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800099c:	f000 8088 	beq.w	8000ab0 <__aeabi_ddiv+0x144>
 80009a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009c4:	429d      	cmp	r5, r3
 80009c6:	bf08      	it	eq
 80009c8:	4296      	cmpeq	r6, r2
 80009ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009d2:	d202      	bcs.n	80009da <__aeabi_ddiv+0x6e>
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	1ab6      	subs	r6, r6, r2
 80009dc:	eb65 0503 	sbc.w	r5, r5, r3
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a4c:	d018      	beq.n	8000a80 <__aeabi_ddiv+0x114>
 8000a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a6a:	d1c0      	bne.n	80009ee <__aeabi_ddiv+0x82>
 8000a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a70:	d10b      	bne.n	8000a8a <__aeabi_ddiv+0x11e>
 8000a72:	ea41 0100 	orr.w	r1, r1, r0
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a7e:	e7b6      	b.n	80009ee <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a84:	bf04      	itt	eq
 8000a86:	4301      	orreq	r1, r0
 8000a88:	2000      	moveq	r0, #0
 8000a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a8e:	bf88      	it	hi
 8000a90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a94:	f63f aeaf 	bhi.w	80007f6 <__aeabi_dmul+0xde>
 8000a98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a9c:	bf04      	itt	eq
 8000a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aa6:	f150 0000 	adcs.w	r0, r0, #0
 8000aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000abc:	bfc2      	ittt	gt
 8000abe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000acc:	f04f 0e00 	mov.w	lr, #0
 8000ad0:	3c01      	subs	r4, #1
 8000ad2:	e690      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ad4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad8:	e68d      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	bf08      	it	eq
 8000ae4:	ea95 0f0c 	teqeq	r5, ip
 8000ae8:	f43f af3b 	beq.w	8000962 <__aeabi_dmul+0x24a>
 8000aec:	ea94 0f0c 	teq	r4, ip
 8000af0:	d10a      	bne.n	8000b08 <__aeabi_ddiv+0x19c>
 8000af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000af6:	f47f af34 	bne.w	8000962 <__aeabi_dmul+0x24a>
 8000afa:	ea95 0f0c 	teq	r5, ip
 8000afe:	f47f af25 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	e72c      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b08:	ea95 0f0c 	teq	r5, ip
 8000b0c:	d106      	bne.n	8000b1c <__aeabi_ddiv+0x1b0>
 8000b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b12:	f43f aefd 	beq.w	8000910 <__aeabi_dmul+0x1f8>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e722      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b26:	f47f aec5 	bne.w	80008b4 <__aeabi_dmul+0x19c>
 8000b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b2e:	f47f af0d 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b36:	f47f aeeb 	bne.w	8000910 <__aeabi_dmul+0x1f8>
 8000b3a:	e712      	b.n	8000962 <__aeabi_dmul+0x24a>

08000b3c <__gedf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b40:	e006      	b.n	8000b50 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__ledf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpdf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b66:	d01b      	beq.n	8000ba0 <__cmpdf2+0x54>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b6e:	bf0c      	ite	eq
 8000b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b74:	ea91 0f03 	teqne	r1, r3
 8000b78:	bf02      	ittt	eq
 8000b7a:	ea90 0f02 	teqeq	r0, r2
 8000b7e:	2000      	moveq	r0, #0
 8000b80:	4770      	bxeq	lr
 8000b82:	f110 0f00 	cmn.w	r0, #0
 8000b86:	ea91 0f03 	teq	r1, r3
 8000b8a:	bf58      	it	pl
 8000b8c:	4299      	cmppl	r1, r3
 8000b8e:	bf08      	it	eq
 8000b90:	4290      	cmpeq	r0, r2
 8000b92:	bf2c      	ite	cs
 8000b94:	17d8      	asrcs	r0, r3, #31
 8000b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b9a:	f040 0001 	orr.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__cmpdf2+0x64>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d107      	bne.n	8000bc0 <__cmpdf2+0x74>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d1d6      	bne.n	8000b68 <__cmpdf2+0x1c>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d0d3      	beq.n	8000b68 <__cmpdf2+0x1c>
 8000bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdrcmple>:
 8000bc8:	4684      	mov	ip, r0
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4662      	mov	r2, ip
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	e000      	b.n	8000bd8 <__aeabi_cdcmpeq>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cdcmpeq>:
 8000bd8:	b501      	push	{r0, lr}
 8000bda:	f7ff ffb7 	bl	8000b4c <__cmpdf2>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	bf48      	it	mi
 8000be2:	f110 0f00 	cmnmi.w	r0, #0
 8000be6:	bd01      	pop	{r0, pc}

08000be8 <__aeabi_dcmpeq>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff fff4 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2001      	moveq	r0, #1
 8000bf4:	2000      	movne	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmplt>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffea 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c04:	bf34      	ite	cc
 8000c06:	2001      	movcc	r0, #1
 8000c08:	2000      	movcs	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmple>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffe0 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c18:	bf94      	ite	ls
 8000c1a:	2001      	movls	r0, #1
 8000c1c:	2000      	movhi	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpge>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffce 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpgt>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffc4 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c40:	bf34      	ite	cc
 8000c42:	2001      	movcc	r0, #1
 8000c44:	2000      	movcs	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpun>:
 8000c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x10>
 8000c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c5a:	d10a      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c64:	d102      	bne.n	8000c6c <__aeabi_dcmpun+0x20>
 8000c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c6a:	d102      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0001 	mov.w	r0, #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2iz>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c80:	d215      	bcs.n	8000cae <__aeabi_d2iz+0x36>
 8000c82:	d511      	bpl.n	8000ca8 <__aeabi_d2iz+0x30>
 8000c84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d912      	bls.n	8000cb4 <__aeabi_d2iz+0x3c>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cb2:	d105      	bne.n	8000cc0 <__aeabi_d2iz+0x48>
 8000cb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cb8:	bf08      	it	eq
 8000cba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2uiz>:
 8000cc8:	004a      	lsls	r2, r1, #1
 8000cca:	d211      	bcs.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000ccc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cd0:	d211      	bcs.n	8000cf6 <__aeabi_d2uiz+0x2e>
 8000cd2:	d50d      	bpl.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000cd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cdc:	d40e      	bmi.n	8000cfc <__aeabi_d2uiz+0x34>
 8000cde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ce2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ce6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cea:	fa23 f002 	lsr.w	r0, r3, r2
 8000cee:	4770      	bx	lr
 8000cf0:	f04f 0000 	mov.w	r0, #0
 8000cf4:	4770      	bx	lr
 8000cf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cfa:	d102      	bne.n	8000d02 <__aeabi_d2uiz+0x3a>
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d00:	4770      	bx	lr
 8000d02:	f04f 0000 	mov.w	r0, #0
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2f>:
 8000d08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d10:	bf24      	itt	cs
 8000d12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d1a:	d90d      	bls.n	8000d38 <__aeabi_d2f+0x30>
 8000d1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d3c:	d121      	bne.n	8000d82 <__aeabi_d2f+0x7a>
 8000d3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d42:	bfbc      	itt	lt
 8000d44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d48:	4770      	bxlt	lr
 8000d4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d52:	f1c2 0218 	rsb	r2, r2, #24
 8000d56:	f1c2 0c20 	rsb	ip, r2, #32
 8000d5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d62:	bf18      	it	ne
 8000d64:	f040 0001 	orrne.w	r0, r0, #1
 8000d68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d74:	ea40 000c 	orr.w	r0, r0, ip
 8000d78:	fa23 f302 	lsr.w	r3, r3, r2
 8000d7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d80:	e7cc      	b.n	8000d1c <__aeabi_d2f+0x14>
 8000d82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d86:	d107      	bne.n	8000d98 <__aeabi_d2f+0x90>
 8000d88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d96:	4770      	bxne	lr
 8000d98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <__aeabi_frsub>:
 8000da8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000dac:	e002      	b.n	8000db4 <__addsf3>
 8000dae:	bf00      	nop

08000db0 <__aeabi_fsub>:
 8000db0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000db4 <__addsf3>:
 8000db4:	0042      	lsls	r2, r0, #1
 8000db6:	bf1f      	itttt	ne
 8000db8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000dbc:	ea92 0f03 	teqne	r2, r3
 8000dc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000dc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dc8:	d06a      	beq.n	8000ea0 <__addsf3+0xec>
 8000dca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000dce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000dd2:	bfc1      	itttt	gt
 8000dd4:	18d2      	addgt	r2, r2, r3
 8000dd6:	4041      	eorgt	r1, r0
 8000dd8:	4048      	eorgt	r0, r1
 8000dda:	4041      	eorgt	r1, r0
 8000ddc:	bfb8      	it	lt
 8000dde:	425b      	neglt	r3, r3
 8000de0:	2b19      	cmp	r3, #25
 8000de2:	bf88      	it	hi
 8000de4:	4770      	bxhi	lr
 8000de6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000dea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000df2:	bf18      	it	ne
 8000df4:	4240      	negne	r0, r0
 8000df6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000dfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000dfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e02:	bf18      	it	ne
 8000e04:	4249      	negne	r1, r1
 8000e06:	ea92 0f03 	teq	r2, r3
 8000e0a:	d03f      	beq.n	8000e8c <__addsf3+0xd8>
 8000e0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000e10:	fa41 fc03 	asr.w	ip, r1, r3
 8000e14:	eb10 000c 	adds.w	r0, r0, ip
 8000e18:	f1c3 0320 	rsb	r3, r3, #32
 8000e1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000e20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e24:	d502      	bpl.n	8000e2c <__addsf3+0x78>
 8000e26:	4249      	negs	r1, r1
 8000e28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e30:	d313      	bcc.n	8000e5a <__addsf3+0xa6>
 8000e32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e36:	d306      	bcc.n	8000e46 <__addsf3+0x92>
 8000e38:	0840      	lsrs	r0, r0, #1
 8000e3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e3e:	f102 0201 	add.w	r2, r2, #1
 8000e42:	2afe      	cmp	r2, #254	; 0xfe
 8000e44:	d251      	bcs.n	8000eea <__addsf3+0x136>
 8000e46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e4e:	bf08      	it	eq
 8000e50:	f020 0001 	biceq.w	r0, r0, #1
 8000e54:	ea40 0003 	orr.w	r0, r0, r3
 8000e58:	4770      	bx	lr
 8000e5a:	0049      	lsls	r1, r1, #1
 8000e5c:	eb40 0000 	adc.w	r0, r0, r0
 8000e60:	3a01      	subs	r2, #1
 8000e62:	bf28      	it	cs
 8000e64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e68:	d2ed      	bcs.n	8000e46 <__addsf3+0x92>
 8000e6a:	fab0 fc80 	clz	ip, r0
 8000e6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e72:	ebb2 020c 	subs.w	r2, r2, ip
 8000e76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e7a:	bfaa      	itet	ge
 8000e7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e80:	4252      	neglt	r2, r2
 8000e82:	4318      	orrge	r0, r3
 8000e84:	bfbc      	itt	lt
 8000e86:	40d0      	lsrlt	r0, r2
 8000e88:	4318      	orrlt	r0, r3
 8000e8a:	4770      	bx	lr
 8000e8c:	f092 0f00 	teq	r2, #0
 8000e90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000e94:	bf06      	itte	eq
 8000e96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000e9a:	3201      	addeq	r2, #1
 8000e9c:	3b01      	subne	r3, #1
 8000e9e:	e7b5      	b.n	8000e0c <__addsf3+0x58>
 8000ea0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ea8:	bf18      	it	ne
 8000eaa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eae:	d021      	beq.n	8000ef4 <__addsf3+0x140>
 8000eb0:	ea92 0f03 	teq	r2, r3
 8000eb4:	d004      	beq.n	8000ec0 <__addsf3+0x10c>
 8000eb6:	f092 0f00 	teq	r2, #0
 8000eba:	bf08      	it	eq
 8000ebc:	4608      	moveq	r0, r1
 8000ebe:	4770      	bx	lr
 8000ec0:	ea90 0f01 	teq	r0, r1
 8000ec4:	bf1c      	itt	ne
 8000ec6:	2000      	movne	r0, #0
 8000ec8:	4770      	bxne	lr
 8000eca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ece:	d104      	bne.n	8000eda <__addsf3+0x126>
 8000ed0:	0040      	lsls	r0, r0, #1
 8000ed2:	bf28      	it	cs
 8000ed4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ede:	bf3c      	itt	cc
 8000ee0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ee4:	4770      	bxcc	lr
 8000ee6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000eea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000eee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef2:	4770      	bx	lr
 8000ef4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ef8:	bf16      	itet	ne
 8000efa:	4608      	movne	r0, r1
 8000efc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f00:	4601      	movne	r1, r0
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	bf06      	itte	eq
 8000f06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f0a:	ea90 0f01 	teqeq	r0, r1
 8000f0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f12:	4770      	bx	lr

08000f14 <__aeabi_ui2f>:
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e004      	b.n	8000f24 <__aeabi_i2f+0x8>
 8000f1a:	bf00      	nop

08000f1c <__aeabi_i2f>:
 8000f1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f20:	bf48      	it	mi
 8000f22:	4240      	negmi	r0, r0
 8000f24:	ea5f 0c00 	movs.w	ip, r0
 8000f28:	bf08      	it	eq
 8000f2a:	4770      	bxeq	lr
 8000f2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f30:	4601      	mov	r1, r0
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	e01c      	b.n	8000f72 <__aeabi_l2f+0x2a>

08000f38 <__aeabi_ul2f>:
 8000f38:	ea50 0201 	orrs.w	r2, r0, r1
 8000f3c:	bf08      	it	eq
 8000f3e:	4770      	bxeq	lr
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	e00a      	b.n	8000f5c <__aeabi_l2f+0x14>
 8000f46:	bf00      	nop

08000f48 <__aeabi_l2f>:
 8000f48:	ea50 0201 	orrs.w	r2, r0, r1
 8000f4c:	bf08      	it	eq
 8000f4e:	4770      	bxeq	lr
 8000f50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f54:	d502      	bpl.n	8000f5c <__aeabi_l2f+0x14>
 8000f56:	4240      	negs	r0, r0
 8000f58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f5c:	ea5f 0c01 	movs.w	ip, r1
 8000f60:	bf02      	ittt	eq
 8000f62:	4684      	moveq	ip, r0
 8000f64:	4601      	moveq	r1, r0
 8000f66:	2000      	moveq	r0, #0
 8000f68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f6c:	bf08      	it	eq
 8000f6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f76:	fabc f28c 	clz	r2, ip
 8000f7a:	3a08      	subs	r2, #8
 8000f7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f80:	db10      	blt.n	8000fa4 <__aeabi_l2f+0x5c>
 8000f82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f86:	4463      	add	r3, ip
 8000f88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f8c:	f1c2 0220 	rsb	r2, r2, #32
 8000f90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	eb43 0002 	adc.w	r0, r3, r2
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f102 0220 	add.w	r2, r2, #32
 8000fa8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fac:	f1c2 0220 	rsb	r2, r2, #32
 8000fb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000fb8:	eb43 0002 	adc.w	r0, r3, r2
 8000fbc:	bf08      	it	eq
 8000fbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_d2lz>:
 8000fc4:	b538      	push	{r3, r4, r5, lr}
 8000fc6:	4605      	mov	r5, r0
 8000fc8:	460c      	mov	r4, r1
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4628      	mov	r0, r5
 8000fd0:	4621      	mov	r1, r4
 8000fd2:	f7ff fe13 	bl	8000bfc <__aeabi_dcmplt>
 8000fd6:	b928      	cbnz	r0, 8000fe4 <__aeabi_d2lz+0x20>
 8000fd8:	4628      	mov	r0, r5
 8000fda:	4621      	mov	r1, r4
 8000fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fe0:	f000 b80a 	b.w	8000ff8 <__aeabi_d2ulz>
 8000fe4:	4628      	mov	r0, r5
 8000fe6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000fea:	f000 f805 	bl	8000ff8 <__aeabi_d2ulz>
 8000fee:	4240      	negs	r0, r0
 8000ff0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ff4:	bd38      	pop	{r3, r4, r5, pc}
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_d2ulz>:
 8000ff8:	b5d0      	push	{r4, r6, r7, lr}
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <__aeabi_d2ulz+0x34>)
 8000ffe:	4606      	mov	r6, r0
 8001000:	460f      	mov	r7, r1
 8001002:	f7ff fb89 	bl	8000718 <__aeabi_dmul>
 8001006:	f7ff fe5f 	bl	8000cc8 <__aeabi_d2uiz>
 800100a:	4604      	mov	r4, r0
 800100c:	f7ff fb0a 	bl	8000624 <__aeabi_ui2d>
 8001010:	2200      	movs	r2, #0
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <__aeabi_d2ulz+0x38>)
 8001014:	f7ff fb80 	bl	8000718 <__aeabi_dmul>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4630      	mov	r0, r6
 800101e:	4639      	mov	r1, r7
 8001020:	f7ff f9c2 	bl	80003a8 <__aeabi_dsub>
 8001024:	f7ff fe50 	bl	8000cc8 <__aeabi_d2uiz>
 8001028:	4621      	mov	r1, r4
 800102a:	bdd0      	pop	{r4, r6, r7, pc}
 800102c:	3df00000 	.word	0x3df00000
 8001030:	41f00000 	.word	0x41f00000

08001034 <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0308 	add.w	r3, r7, #8
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]

  //By default the line is high
  lineUp();
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6818      	ldr	r0, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	889b      	ldrh	r3, [r3, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	4619      	mov	r1, r3
 8001056:	f001 fb90 	bl	800277a <HAL_GPIO_WritePin>

  //Setting the port to exit
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	889b      	ldrh	r3, [r3, #4]
 800105e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//open drain
 8001060:	2311      	movs	r3, #17
 8001062:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Pull-up to nutrition
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	79db      	ldrb	r3, [r3, #7]
 8001068:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //High port speed
 800106a:	2303      	movs	r3, #3
 800106c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f107 0208 	add.w	r2, r7, #8
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f001 f9d3 	bl	8002424 <HAL_GPIO_Init>
}
 800107e:	bf00      	nop
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]

  //Input port setting
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	889b      	ldrh	r3, [r3, #4]
 80010a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Pull-up to nutrition
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	79db      	ldrb	r3, [r3, #7]
 80010aa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f107 0208 	add.w	r2, r7, #8
 80010b4:	4611      	mov	r1, r2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 f9b4 	bl	8002424 <HAL_GPIO_Init>
}
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
	DHT_data data = {-128.0f, -128.0f};
 80010ce:	4a76      	ldr	r2, [pc, #472]	; (80012a8 <DHT_getData+0x1e4>)
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010d8:	e883 0003 	stmia.w	r3, {r0, r1}
	
	#if DHT_POLLING_CONTROL == 1
	/* Limitation on the frequency of polling the sensor */
	//Determining the polling interval depending on the sensor
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	799b      	ldrb	r3, [r3, #6]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d103      	bne.n	80010ec <DHT_getData+0x28>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 80010e4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010e8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80010ea:	e002      	b.n	80010f2 <DHT_getData+0x2e>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 80010ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f0:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	//If the interval is small, then return the last known good value
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 80010f2:	f001 f889 	bl	8002208 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	1ad2      	subs	r2, r2, r3
 80010fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001100:	429a      	cmp	r2, r3
 8001102:	d212      	bcs.n	800112a <DHT_getData+0x66>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00e      	beq.n	800112a <DHT_getData+0x66>
		data.hum = sensor->lastHum;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	617b      	str	r3, [r7, #20]
		data.temp = sensor->lastTemp;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	61bb      	str	r3, [r7, #24]
		return data;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	461a      	mov	r2, r3
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001124:	e882 0003 	stmia.w	r2, {r0, r1}
 8001128:	e166      	b.n	80013f8 <DHT_getData+0x334>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 800112a:	f001 f86d 	bl	8002208 <HAL_GetTick>
 800112e:	4603      	mov	r3, r0
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	609a      	str	r2, [r3, #8]
	#endif

	/* Requesting data from the sensor */
	//Translation of the pin "to the exit"
	goToOutput(sensor);
 8001136:	6838      	ldr	r0, [r7, #0]
 8001138:	f7ff ff7c 	bl	8001034 <goToOutput>
	//Data line down 18ms
	lineDown();
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	889b      	ldrh	r3, [r3, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	4619      	mov	r1, r3
 8001148:	f001 fb17 	bl	800277a <HAL_GPIO_WritePin>
	Delay(18);
 800114c:	2012      	movs	r0, #18
 800114e:	f001 f865 	bl	800221c <HAL_Delay>
	//Lifting the line, transferring the port "to the input"
	lineUp();
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	889b      	ldrh	r3, [r3, #4]
 800115a:	2201      	movs	r2, #1
 800115c:	4619      	mov	r1, r3
 800115e:	f001 fb0c 	bl	800277a <HAL_GPIO_WritePin>
	goToInput(sensor);
 8001162:	6838      	ldr	r0, [r7, #0]
 8001164:	f7ff ff8f 	bl	8001086 <goToInput>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
	#ifdef DHT_IRQ_CONTROL
	//Turn off interrupts so that nothing interferes with data processing
	__disable_irq();
	#endif
	/* Waiting for a response from the sensor */
	uint16_t timeout = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	84bb      	strh	r3, [r7, #36]	; 0x24
	//Waiting for recession
	while(getLine()) {
 8001170:	e01a      	b.n	80011a8 <DHT_getData+0xe4>
		timeout++;
 8001172:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001174:	3301      	adds	r3, #1
 8001176:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (timeout > DHT_TIMEOUT) {
 8001178:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800117a:	f242 7210 	movw	r2, #10000	; 0x2710
 800117e:	4293      	cmp	r3, r2
 8001180:	d912      	bls.n	80011a8 <DHT_getData+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 8001182:	b662      	cpsie	i
}
 8001184:	bf00      	nop
			__enable_irq();
			#endif
			//If the sensor did not respond, then it definitely does not exist.
			//Resetting the Last Known Good Value to
			//don't get phantom values
			sensor->lastHum = -128.0f;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 800118c:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 8001194:	60da      	str	r2, [r3, #12]

			return data;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	461a      	mov	r2, r3
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011a2:	e882 0003 	stmia.w	r2, {r0, r1}
 80011a6:	e127      	b.n	80013f8 <DHT_getData+0x334>
	while(getLine()) {
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	889b      	ldrh	r3, [r3, #4]
 80011b0:	4619      	mov	r1, r3
 80011b2:	4610      	mov	r0, r2
 80011b4:	f001 faca 	bl	800274c <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d0d9      	beq.n	8001172 <DHT_getData+0xae>
		}
	}
	timeout = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	84bb      	strh	r3, [r7, #36]	; 0x24
	//Waiting for the rise
	while(!getLine()) {
 80011c2:	e01a      	b.n	80011fa <DHT_getData+0x136>
		timeout++;
 80011c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011c6:	3301      	adds	r3, #1
 80011c8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (timeout > DHT_TIMEOUT) {
 80011ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011cc:	f242 7210 	movw	r2, #10000	; 0x2710
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d912      	bls.n	80011fa <DHT_getData+0x136>
  __ASM volatile ("cpsie i" : : : "memory");
 80011d4:	b662      	cpsie	i
}
 80011d6:	bf00      	nop
			__enable_irq();
			#endif
			//If the sensor did not respond, then it definitely does not exist.
			//Resetting the Last Known Good Value to
			//don't get phantom values
			sensor->lastHum = -128.0f;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 80011de:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 80011e6:	60da      	str	r2, [r3, #12]

			return data;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	461a      	mov	r2, r3
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011f4:	e882 0003 	stmia.w	r2, {r0, r1}
 80011f8:	e0fe      	b.n	80013f8 <DHT_getData+0x334>
	while(!getLine()) {
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	889b      	ldrh	r3, [r3, #4]
 8001202:	4619      	mov	r1, r3
 8001204:	4610      	mov	r0, r2
 8001206:	f001 faa1 	bl	800274c <HAL_GPIO_ReadPin>
 800120a:	4603      	mov	r3, r0
 800120c:	2b01      	cmp	r3, #1
 800120e:	d1d9      	bne.n	80011c4 <DHT_getData+0x100>
		}
	}
	timeout = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	84bb      	strh	r3, [r7, #36]	; 0x24
	//Waiting for recession
	while(getLine()) {
 8001214:	e012      	b.n	800123c <DHT_getData+0x178>
		timeout++;
 8001216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001218:	3301      	adds	r3, #1
 800121a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (timeout > DHT_TIMEOUT) {
 800121c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800121e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001222:	4293      	cmp	r3, r2
 8001224:	d90a      	bls.n	800123c <DHT_getData+0x178>
  __ASM volatile ("cpsie i" : : : "memory");
 8001226:	b662      	cpsie	i
}
 8001228:	bf00      	nop
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	461a      	mov	r2, r3
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001236:	e882 0003 	stmia.w	r2, {r0, r1}
 800123a:	e0dd      	b.n	80013f8 <DHT_getData+0x334>
	while(getLine()) {
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	889b      	ldrh	r3, [r3, #4]
 8001244:	4619      	mov	r1, r3
 8001246:	4610      	mov	r0, r2
 8001248:	f001 fa80 	bl	800274c <HAL_GPIO_ReadPin>
 800124c:	4603      	mov	r3, r0
 800124e:	2b01      	cmp	r3, #1
 8001250:	d0e1      	beq.n	8001216 <DHT_getData+0x152>
		}
	}
	
	/* Reading the response from the sensor */
	uint8_t rawData[5] = {0,0,0,0,0};
 8001252:	4a16      	ldr	r2, [pc, #88]	; (80012ac <DHT_getData+0x1e8>)
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	e892 0003 	ldmia.w	r2, {r0, r1}
 800125c:	6018      	str	r0, [r3, #0]
 800125e:	3304      	adds	r3, #4
 8001260:	7019      	strb	r1, [r3, #0]
	for(uint8_t a = 0; a < 5; a++) {
 8001262:	2300      	movs	r3, #0
 8001264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001268:	e05d      	b.n	8001326 <DHT_getData+0x262>
		for(uint8_t b = 7; b != 255; b--) {
 800126a:	2307      	movs	r3, #7
 800126c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001270:	e050      	b.n	8001314 <DHT_getData+0x250>
			uint16_t hT = 0, lT = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	843b      	strh	r3, [r7, #32]
 8001276:	2300      	movs	r3, #0
 8001278:	83fb      	strh	r3, [r7, #30]
			//While the line is low, the lT variable increment
			while(!getLine() && lT != 65535) lT++;
 800127a:	e002      	b.n	8001282 <DHT_getData+0x1be>
 800127c:	8bfb      	ldrh	r3, [r7, #30]
 800127e:	3301      	adds	r3, #1
 8001280:	83fb      	strh	r3, [r7, #30]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	889b      	ldrh	r3, [r3, #4]
 800128a:	4619      	mov	r1, r3
 800128c:	4610      	mov	r0, r2
 800128e:	f001 fa5d 	bl	800274c <HAL_GPIO_ReadPin>
 8001292:	4603      	mov	r3, r0
 8001294:	2b01      	cmp	r3, #1
 8001296:	d004      	beq.n	80012a2 <DHT_getData+0x1de>
 8001298:	8bfb      	ldrh	r3, [r7, #30]
 800129a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800129e:	4293      	cmp	r3, r2
 80012a0:	d1ec      	bne.n	800127c <DHT_getData+0x1b8>
			//While the line is high, hT variable increment
			timeout = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	84bb      	strh	r3, [r7, #36]	; 0x24
			while(getLine()&& hT != 65535) hT++;
 80012a6:	e006      	b.n	80012b6 <DHT_getData+0x1f2>
 80012a8:	0800b108 	.word	0x0800b108
 80012ac:	0800b110 	.word	0x0800b110
 80012b0:	8c3b      	ldrh	r3, [r7, #32]
 80012b2:	3301      	adds	r3, #1
 80012b4:	843b      	strh	r3, [r7, #32]
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	889b      	ldrh	r3, [r3, #4]
 80012be:	4619      	mov	r1, r3
 80012c0:	4610      	mov	r0, r2
 80012c2:	f001 fa43 	bl	800274c <HAL_GPIO_ReadPin>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d104      	bne.n	80012d6 <DHT_getData+0x212>
 80012cc:	8c3b      	ldrh	r3, [r7, #32]
 80012ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d1ec      	bne.n	80012b0 <DHT_getData+0x1ec>
			//If hT is greater than lT, then one has arrived
			if(hT > lT) rawData[a] |= (1<<b);
 80012d6:	8c3a      	ldrh	r2, [r7, #32]
 80012d8:	8bfb      	ldrh	r3, [r7, #30]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d915      	bls.n	800130a <DHT_getData+0x246>
 80012de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80012e2:	3328      	adds	r3, #40	; 0x28
 80012e4:	443b      	add	r3, r7
 80012e6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80012ea:	b25a      	sxtb	r2, r3
 80012ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80012f0:	2101      	movs	r1, #1
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b25a      	sxtb	r2, r3
 80012fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	3328      	adds	r3, #40	; 0x28
 8001304:	443b      	add	r3, r7
 8001306:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for(uint8_t b = 7; b != 255; b--) {
 800130a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800130e:	3b01      	subs	r3, #1
 8001310:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001314:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001318:	2bff      	cmp	r3, #255	; 0xff
 800131a:	d1aa      	bne.n	8001272 <DHT_getData+0x1ae>
	for(uint8_t a = 0; a < 5; a++) {
 800131c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001320:	3301      	adds	r3, #1
 8001322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001326:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800132a:	2b04      	cmp	r3, #4
 800132c:	d99d      	bls.n	800126a <DHT_getData+0x1a6>
  __ASM volatile ("cpsie i" : : : "memory");
 800132e:	b662      	cpsie	i
}
 8001330:	bf00      	nop
	//Enabling interrupts after receiving data
	__enable_irq();
    #endif

	/* Data integrity check */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 8001332:	7b3a      	ldrb	r2, [r7, #12]
 8001334:	7b7b      	ldrb	r3, [r7, #13]
 8001336:	4413      	add	r3, r2
 8001338:	b2da      	uxtb	r2, r3
 800133a:	7bbb      	ldrb	r3, [r7, #14]
 800133c:	4413      	add	r3, r2
 800133e:	b2da      	uxtb	r2, r3
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	4413      	add	r3, r2
 8001344:	b2da      	uxtb	r2, r3
 8001346:	7c3b      	ldrb	r3, [r7, #16]
 8001348:	429a      	cmp	r2, r3
 800134a:	d147      	bne.n	80013dc <DHT_getData+0x318>
		//If the checksum matches, then convert and return the resulting values
		if (sensor->type == DHT22) {
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	799b      	ldrb	r3, [r3, #6]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d133      	bne.n	80013bc <DHT_getData+0x2f8>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8001354:	7b3b      	ldrb	r3, [r7, #12]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	7b7a      	ldrb	r2, [r7, #13]
 800135a:	4313      	orrs	r3, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fddd 	bl	8000f1c <__aeabi_i2f>
 8001362:	4603      	mov	r3, r0
 8001364:	4926      	ldr	r1, [pc, #152]	; (8001400 <DHT_getData+0x33c>)
 8001366:	4618      	mov	r0, r3
 8001368:	f7fe ff66 	bl	8000238 <__aeabi_fmul>
 800136c:	4603      	mov	r3, r0
 800136e:	617b      	str	r3, [r7, #20]
			//Check for negative temperature
			if(!(rawData[2] & (1<<7))) {
 8001370:	7bbb      	ldrb	r3, [r7, #14]
 8001372:	b25b      	sxtb	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0e      	blt.n	8001396 <DHT_getData+0x2d2>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8001378:	7bbb      	ldrb	r3, [r7, #14]
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	4313      	orrs	r3, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fdcb 	bl	8000f1c <__aeabi_i2f>
 8001386:	4603      	mov	r3, r0
 8001388:	491d      	ldr	r1, [pc, #116]	; (8001400 <DHT_getData+0x33c>)
 800138a:	4618      	mov	r0, r3
 800138c:	f7fe ff54 	bl	8000238 <__aeabi_fmul>
 8001390:	4603      	mov	r3, r0
 8001392:	61bb      	str	r3, [r7, #24]
 8001394:	e012      	b.n	80013bc <DHT_getData+0x2f8>
			}	else {
				rawData[2] &= ~(1<<7);
 8001396:	7bbb      	ldrb	r3, [r7, #14]
 8001398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800139c:	b2db      	uxtb	r3, r3
 800139e:	73bb      	strb	r3, [r7, #14]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 80013a0:	7bbb      	ldrb	r3, [r7, #14]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fdb7 	bl	8000f1c <__aeabi_i2f>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4914      	ldr	r1, [pc, #80]	; (8001404 <DHT_getData+0x340>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7fe ff40 	bl	8000238 <__aeabi_fmul>
 80013b8:	4603      	mov	r3, r0
 80013ba:	61bb      	str	r3, [r7, #24]
			}
		}
		if (sensor->type == DHT11) {
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	799b      	ldrb	r3, [r3, #6]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10b      	bne.n	80013dc <DHT_getData+0x318>
			data.hum = (float)rawData[0];
 80013c4:	7b3b      	ldrb	r3, [r7, #12]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fda4 	bl	8000f14 <__aeabi_ui2f>
 80013cc:	4603      	mov	r3, r0
 80013ce:	617b      	str	r3, [r7, #20]
			data.temp = (float)rawData[2];
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fd9e 	bl	8000f14 <__aeabi_ui2f>
 80013d8:	4603      	mov	r3, r0
 80013da:	61bb      	str	r3, [r7, #24]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	461a      	mov	r2, r3
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013f4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	3dcccccd 	.word	0x3dcccccd
 8001404:	bdcccccd 	.word	0xbdcccccd

08001408 <lcd_strobe>:
static void lcd_wait_until_not_busy();
static void lcd_strobe(void);
static void lcd_write_nibble(uint8_t c);

static void lcd_strobe(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	// E = ENABLED;
	HAL_GPIO_WritePin(E_PORT, E_PIN, GPIO_PIN_SET);
 800140c:	2201      	movs	r2, #1
 800140e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <lcd_strobe+0x20>)
 8001414:	f001 f9b1 	bl	800277a <HAL_GPIO_WritePin>

	// E = DISABLED;
	HAL_GPIO_WritePin(E_PORT, E_PIN, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800141e:	4802      	ldr	r0, [pc, #8]	; (8001428 <lcd_strobe+0x20>)
 8001420:	f001 f9ab 	bl	800277a <HAL_GPIO_WritePin>
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40011400 	.word	0x40011400

0800142c <lcd_wait_until_not_busy>:

static void lcd_wait_until_not_busy()
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
	volatile uint32_t i;

	for (i = 0UL; i < 5000UL; i++)
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	e003      	b.n	8001440 <lcd_wait_until_not_busy+0x14>
	{
		__asm__("NOP");
 8001438:	bf00      	nop
	for (i = 0UL; i < 5000UL; i++)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3301      	adds	r3, #1
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f241 3287 	movw	r2, #4999	; 0x1387
 8001446:	4293      	cmp	r3, r2
 8001448:	d9f6      	bls.n	8001438 <lcd_wait_until_not_busy+0xc>
	}
}
 800144a:	bf00      	nop
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <lcd_puts>:
{
  lcd_write_command(0x01U);
}

void lcd_puts(uint8_t row, uint8_t column, const char *s)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	603a      	str	r2, [r7, #0]
 8001460:	71fb      	strb	r3, [r7, #7]
 8001462:	460b      	mov	r3, r1
 8001464:	71bb      	strb	r3, [r7, #6]
	size_t i;
	size_t length = strlen(s);
 8001466:	6838      	ldr	r0, [r7, #0]
 8001468:	f7fe fede 	bl	8000228 <strlen>
 800146c:	60b8      	str	r0, [r7, #8]

	if (row == 0U)
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d106      	bne.n	8001482 <lcd_puts+0x2c>
	{
		lcd_write_command(0x80U + column);
 8001474:	79bb      	ldrb	r3, [r7, #6]
 8001476:	3b80      	subs	r3, #128	; 0x80
 8001478:	b2db      	uxtb	r3, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f858 	bl	8001530 <lcd_write_command>
 8001480:	e005      	b.n	800148e <lcd_puts+0x38>
	}
	else
	{
        lcd_write_command(0xc0U + column);
 8001482:	79bb      	ldrb	r3, [r7, #6]
 8001484:	3b40      	subs	r3, #64	; 0x40
 8001486:	b2db      	uxtb	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	f000 f851 	bl	8001530 <lcd_write_command>
    }

    for (i = 0U; i < length; i++)
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	e009      	b.n	80014a8 <lcd_puts+0x52>
    {
        lcd_write_data(s[i]);
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4413      	add	r3, r2
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f000 f869 	bl	8001574 <lcd_write_data>
    for (i = 0U; i < length; i++)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3301      	adds	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d3f1      	bcc.n	8001494 <lcd_puts+0x3e>
    }
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <lcd_write_nibble>:

static void lcd_write_nibble(uint8_t c)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(D4_PORT, D4_PIN, (GPIO_PinState)(c & 0x01U));
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	461a      	mov	r2, r3
 80014d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d4:	4815      	ldr	r0, [pc, #84]	; (800152c <lcd_write_nibble+0x70>)
 80014d6:	f001 f950 	bl	800277a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_PORT, D5_PIN, (GPIO_PinState)((c >> 1) & 0x01U));
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	085b      	lsrs	r3, r3, #1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	461a      	mov	r2, r3
 80014e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ec:	480f      	ldr	r0, [pc, #60]	; (800152c <lcd_write_nibble+0x70>)
 80014ee:	f001 f944 	bl	800277a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_PORT, D6_PIN, (GPIO_PinState)((c >> 2) & 0x01U));
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	089b      	lsrs	r3, r3, #2
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001504:	4809      	ldr	r0, [pc, #36]	; (800152c <lcd_write_nibble+0x70>)
 8001506:	f001 f938 	bl	800277a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PORT, D7_PIN, (GPIO_PinState)((c >> 3) & 0x01U));
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	08db      	lsrs	r3, r3, #3
 800150e:	b2db      	uxtb	r3, r3
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	b2db      	uxtb	r3, r3
 8001516:	461a      	mov	r2, r3
 8001518:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800151c:	4803      	ldr	r0, [pc, #12]	; (800152c <lcd_write_nibble+0x70>)
 800151e:	f001 f92c 	bl	800277a <HAL_GPIO_WritePin>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40011400 	.word	0x40011400

08001530 <lcd_write_command>:

static void lcd_write_command(uint8_t c)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
	lcd_wait_until_not_busy();
 800153a:	f7ff ff77 	bl	800142c <lcd_wait_until_not_busy>

	// RS = COMMAND
	HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001544:	480a      	ldr	r0, [pc, #40]	; (8001570 <lcd_write_command+0x40>)
 8001546:	f001 f918 	bl	800277a <HAL_GPIO_WritePin>

	lcd_write_nibble(c >> 4);
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ffb3 	bl	80014bc <lcd_write_nibble>
    lcd_strobe();
 8001556:	f7ff ff57 	bl	8001408 <lcd_strobe>
	lcd_write_nibble(c);
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ffad 	bl	80014bc <lcd_write_nibble>
    lcd_strobe();
 8001562:	f7ff ff51 	bl	8001408 <lcd_strobe>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40011400 	.word	0x40011400

08001574 <lcd_write_data>:

static void lcd_write_data(uint8_t c)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
	// wait until previous operation is finished
	lcd_wait_until_not_busy();
 800157e:	f7ff ff55 	bl	800142c <lcd_wait_until_not_busy>

	// RS = DATA
	HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_SET);
 8001582:	2201      	movs	r2, #1
 8001584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001588:	480a      	ldr	r0, [pc, #40]	; (80015b4 <lcd_write_data+0x40>)
 800158a:	f001 f8f6 	bl	800277a <HAL_GPIO_WritePin>

	lcd_write_nibble(c >> 4);
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	b2db      	uxtb	r3, r3
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff91 	bl	80014bc <lcd_write_nibble>
    lcd_strobe();
 800159a:	f7ff ff35 	bl	8001408 <lcd_strobe>
	lcd_write_nibble(c);
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff8b 	bl	80014bc <lcd_write_nibble>
    lcd_strobe();
 80015a6:	f7ff ff2f 	bl	8001408 <lcd_strobe>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40011400 	.word	0x40011400

080015b8 <lcd_init>:
		lcd_write_data(bytes[row]);
	}
}

void lcd_init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	// pins E_PORT:E_PIN, RS_PORT:RS_PIN and RW_PORT:RW_PIN all default to zero on reset so don't need setting here

    HAL_Delay(15U);
 80015bc:	200f      	movs	r0, #15
 80015be:	f000 fe2d 	bl	800221c <HAL_Delay>
    lcd_write_nibble(0x03U);
 80015c2:	2003      	movs	r0, #3
 80015c4:	f7ff ff7a 	bl	80014bc <lcd_write_nibble>
    lcd_strobe();
 80015c8:	f7ff ff1e 	bl	8001408 <lcd_strobe>
    HAL_Delay(5U);
 80015cc:	2005      	movs	r0, #5
 80015ce:	f000 fe25 	bl	800221c <HAL_Delay>
    lcd_strobe();
 80015d2:	f7ff ff19 	bl	8001408 <lcd_strobe>
    HAL_Delay(200U);
 80015d6:	20c8      	movs	r0, #200	; 0xc8
 80015d8:	f000 fe20 	bl	800221c <HAL_Delay>
    lcd_strobe();
 80015dc:	f7ff ff14 	bl	8001408 <lcd_strobe>
    HAL_Delay(1U);
 80015e0:	2001      	movs	r0, #1
 80015e2:	f000 fe1b 	bl	800221c <HAL_Delay>
	lcd_write_nibble(0x02U);
 80015e6:	2002      	movs	r0, #2
 80015e8:	f7ff ff68 	bl	80014bc <lcd_write_nibble>
    lcd_strobe();
 80015ec:	f7ff ff0c 	bl	8001408 <lcd_strobe>
	lcd_write_command(0x28U);
 80015f0:	2028      	movs	r0, #40	; 0x28
 80015f2:	f7ff ff9d 	bl	8001530 <lcd_write_command>
	HAL_Delay(40U);
 80015f6:	2028      	movs	r0, #40	; 0x28
 80015f8:	f000 fe10 	bl	800221c <HAL_Delay>
    lcd_write_command(0x06U);
 80015fc:	2006      	movs	r0, #6
 80015fe:	f7ff ff97 	bl	8001530 <lcd_write_command>
    lcd_write_command(0x0cU);
 8001602:	200c      	movs	r0, #12
 8001604:	f7ff ff94 	bl	8001530 <lcd_write_command>
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}

0800160c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b09c      	sub	sp, #112	; 0x70
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001612:	f000 fdd1 	bl	80021b8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001616:	f000 f84d 	bl	80016b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800161a:	f000 fa03 	bl	8001a24 <MX_GPIO_Init>
  MX_RTC_Init();
 800161e:	f000 f8a9 	bl	8001774 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8001622:	f000 f8f1 	bl	8001808 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 8001626:	f000 f90f 	bl	8001848 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800162a:	f000 f9d1 	bl	80019d0 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800162e:	f004 ff25 	bl	800647c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	DHT_sensor sensor = {
 8001632:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <main+0x9c>)
 8001644:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001646:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800164a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	GPIOD,
	GPIO_PIN_14,
	DHT11,
	GPIO_NOPULL };

	lcd_init();
 800164e:	f7ff ffb3 	bl	80015b8 <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  my_data = DHT_getData(&sensor);
 8001652:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001656:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fd31 	bl	80010c4 <DHT_getData>
	  sprintf(msg1 , "Humidity is : %f",my_data.hum);
 8001662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ffff 	bl	8000668 <__aeabi_f2d>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001672:	490e      	ldr	r1, [pc, #56]	; (80016ac <main+0xa0>)
 8001674:	f005 ff7e 	bl	8007574 <siprintf>
	  lcd_puts(0,0,msg1);
 8001678:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800167c:	461a      	mov	r2, r3
 800167e:	2100      	movs	r1, #0
 8001680:	2000      	movs	r0, #0
 8001682:	f7ff fee8 	bl	8001456 <lcd_puts>
	  sprintf(msg2,"Temprature is : %f",my_data.temp);
 8001686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ffed 	bl	8000668 <__aeabi_f2d>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	1d38      	adds	r0, r7, #4
 8001694:	4906      	ldr	r1, [pc, #24]	; (80016b0 <main+0xa4>)
 8001696:	f005 ff6d 	bl	8007574 <siprintf>
	  lcd_puts(1,0,msg2);
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	461a      	mov	r2, r3
 800169e:	2100      	movs	r1, #0
 80016a0:	2001      	movs	r0, #1
 80016a2:	f7ff fed8 	bl	8001456 <lcd_puts>
	  my_data = DHT_getData(&sensor);
 80016a6:	e7d4      	b.n	8001652 <main+0x46>
 80016a8:	40011400 	.word	0x40011400
 80016ac:	0800b118 	.word	0x0800b118
 80016b0:	0800b12c 	.word	0x0800b12c

080016b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b096      	sub	sp, #88	; 0x58
 80016b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016be:	2228      	movs	r2, #40	; 0x28
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f005 f8dc 	bl	8006880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	611a      	str	r2, [r3, #16]
 80016e6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80016e8:	2309      	movs	r3, #9
 80016ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016f2:	2300      	movs	r3, #0
 80016f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f6:	2301      	movs	r3, #1
 80016f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016fa:	2301      	movs	r3, #1
 80016fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fe:	2302      	movs	r3, #2
 8001700:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001706:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001708:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800170c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001712:	4618      	mov	r0, r3
 8001714:	f001 f878 	bl	8002808 <HAL_RCC_OscConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800171e:	f000 fa45 	bl	8001bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001722:	230f      	movs	r3, #15
 8001724:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001726:	2302      	movs	r3, #2
 8001728:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800172e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	2102      	movs	r1, #2
 800173e:	4618      	mov	r0, r3
 8001740:	f001 fae4 	bl	8002d0c <HAL_RCC_ClockConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800174a:	f000 fa2f 	bl	8001bac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800174e:	2301      	movs	r3, #1
 8001750:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001756:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4618      	mov	r0, r3
 800175c:	f001 fc9e 	bl	800309c <HAL_RCCEx_PeriphCLKConfig>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001766:	f000 fa21 	bl	8001bac <Error_Handler>
  }
}
 800176a:	bf00      	nop
 800176c:	3758      	adds	r7, #88	; 0x58
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	2100      	movs	r1, #0
 800177e:	460a      	mov	r2, r1
 8001780:	801a      	strh	r2, [r3, #0]
 8001782:	460a      	mov	r2, r1
 8001784:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001786:	2300      	movs	r3, #0
 8001788:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800178a:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <MX_RTC_Init+0x8c>)
 800178c:	4a1d      	ldr	r2, [pc, #116]	; (8001804 <MX_RTC_Init+0x90>)
 800178e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <MX_RTC_Init+0x8c>)
 8001792:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001796:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <MX_RTC_Init+0x8c>)
 800179a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800179e:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017a0:	4817      	ldr	r0, [pc, #92]	; (8001800 <MX_RTC_Init+0x8c>)
 80017a2:	f001 fe15 	bl	80033d0 <HAL_RTC_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80017ac:	f000 f9fe 	bl	8001bac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 80017b0:	2312      	movs	r3, #18
 80017b2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x14;
 80017b4:	2314      	movs	r3, #20
 80017b6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x17;
 80017b8:	2317      	movs	r3, #23
 80017ba:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2201      	movs	r2, #1
 80017c0:	4619      	mov	r1, r3
 80017c2:	480f      	ldr	r0, [pc, #60]	; (8001800 <MX_RTC_Init+0x8c>)
 80017c4:	f001 fe9a 	bl	80034fc <HAL_RTC_SetTime>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80017ce:	f000 f9ed 	bl	8001bac <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80017d2:	2301      	movs	r3, #1
 80017d4:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80017d6:	2301      	movs	r3, #1
 80017d8:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80017da:	2301      	movs	r3, #1
 80017dc:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x22;
 80017de:	2322      	movs	r3, #34	; 0x22
 80017e0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80017e2:	463b      	mov	r3, r7
 80017e4:	2201      	movs	r2, #1
 80017e6:	4619      	mov	r1, r3
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_RTC_Init+0x8c>)
 80017ea:	f001 ff1f 	bl	800362c <HAL_RTC_SetDate>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80017f4:	f000 f9da 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200001fc 	.word	0x200001fc
 8001804:	40002800 	.word	0x40002800

08001808 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <MX_SDIO_SD_Init+0x38>)
 800180e:	4a0d      	ldr	r2, [pc, #52]	; (8001844 <MX_SDIO_SD_Init+0x3c>)
 8001810:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <MX_SDIO_SD_Init+0x38>)
 8001814:	2200      	movs	r2, #0
 8001816:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <MX_SDIO_SD_Init+0x38>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <MX_SDIO_SD_Init+0x38>)
 8001820:	2200      	movs	r2, #0
 8001822:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <MX_SDIO_SD_Init+0x38>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <MX_SDIO_SD_Init+0x38>)
 800182c:	2200      	movs	r2, #0
 800182e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <MX_SDIO_SD_Init+0x38>)
 8001832:	2200      	movs	r2, #0
 8001834:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000210 	.word	0x20000210
 8001844:	40018000 	.word	0x40018000

08001848 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b096      	sub	sp, #88	; 0x58
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	611a      	str	r2, [r3, #16]
 8001876:	615a      	str	r2, [r3, #20]
 8001878:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	2220      	movs	r2, #32
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f004 fffd 	bl	8006880 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001886:	4b50      	ldr	r3, [pc, #320]	; (80019c8 <MX_TIM1_Init+0x180>)
 8001888:	4a50      	ldr	r2, [pc, #320]	; (80019cc <MX_TIM1_Init+0x184>)
 800188a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1107-1;
 800188c:	4b4e      	ldr	r3, [pc, #312]	; (80019c8 <MX_TIM1_Init+0x180>)
 800188e:	f240 4252 	movw	r2, #1106	; 0x452
 8001892:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001894:	4b4c      	ldr	r3, [pc, #304]	; (80019c8 <MX_TIM1_Init+0x180>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 800189a:	4b4b      	ldr	r3, [pc, #300]	; (80019c8 <MX_TIM1_Init+0x180>)
 800189c:	22fe      	movs	r2, #254	; 0xfe
 800189e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a0:	4b49      	ldr	r3, [pc, #292]	; (80019c8 <MX_TIM1_Init+0x180>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018a6:	4b48      	ldr	r3, [pc, #288]	; (80019c8 <MX_TIM1_Init+0x180>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ac:	4b46      	ldr	r3, [pc, #280]	; (80019c8 <MX_TIM1_Init+0x180>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018b2:	4845      	ldr	r0, [pc, #276]	; (80019c8 <MX_TIM1_Init+0x180>)
 80018b4:	f003 f8a0 	bl	80049f8 <HAL_TIM_Base_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80018be:	f000 f975 	bl	8001bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018cc:	4619      	mov	r1, r3
 80018ce:	483e      	ldr	r0, [pc, #248]	; (80019c8 <MX_TIM1_Init+0x180>)
 80018d0:	f003 fb60 	bl	8004f94 <HAL_TIM_ConfigClockSource>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80018da:	f000 f967 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018de:	483a      	ldr	r0, [pc, #232]	; (80019c8 <MX_TIM1_Init+0x180>)
 80018e0:	f003 f93a 	bl	8004b58 <HAL_TIM_PWM_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80018ea:	f000 f95f 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018fa:	4619      	mov	r1, r3
 80018fc:	4832      	ldr	r0, [pc, #200]	; (80019c8 <MX_TIM1_Init+0x180>)
 80018fe:	f003 feed 	bl	80056dc <HAL_TIMEx_MasterConfigSynchronization>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001908:	f000 f950 	bl	8001bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800190c:	2360      	movs	r3, #96	; 0x60
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001914:	2300      	movs	r3, #0
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001918:	2300      	movs	r3, #0
 800191a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001920:	2300      	movs	r3, #0
 8001922:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001924:	2300      	movs	r3, #0
 8001926:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192c:	2200      	movs	r2, #0
 800192e:	4619      	mov	r1, r3
 8001930:	4825      	ldr	r0, [pc, #148]	; (80019c8 <MX_TIM1_Init+0x180>)
 8001932:	f003 fa71 	bl	8004e18 <HAL_TIM_PWM_ConfigChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800193c:	f000 f936 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001944:	2204      	movs	r2, #4
 8001946:	4619      	mov	r1, r3
 8001948:	481f      	ldr	r0, [pc, #124]	; (80019c8 <MX_TIM1_Init+0x180>)
 800194a:	f003 fa65 	bl	8004e18 <HAL_TIM_PWM_ConfigChannel>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001954:	f000 f92a 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195c:	2208      	movs	r2, #8
 800195e:	4619      	mov	r1, r3
 8001960:	4819      	ldr	r0, [pc, #100]	; (80019c8 <MX_TIM1_Init+0x180>)
 8001962:	f003 fa59 	bl	8004e18 <HAL_TIM_PWM_ConfigChannel>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800196c:	f000 f91e 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001974:	220c      	movs	r2, #12
 8001976:	4619      	mov	r1, r3
 8001978:	4813      	ldr	r0, [pc, #76]	; (80019c8 <MX_TIM1_Init+0x180>)
 800197a:	f003 fa4d 	bl	8004e18 <HAL_TIM_PWM_ConfigChannel>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001984:	f000 f912 	bl	8001bac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800199c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	4619      	mov	r1, r3
 80019aa:	4807      	ldr	r0, [pc, #28]	; (80019c8 <MX_TIM1_Init+0x180>)
 80019ac:	f003 ff02 	bl	80057b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80019b6:	f000 f8f9 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019ba:	4803      	ldr	r0, [pc, #12]	; (80019c8 <MX_TIM1_Init+0x180>)
 80019bc:	f000 f9ba 	bl	8001d34 <HAL_TIM_MspPostInit>

}
 80019c0:	bf00      	nop
 80019c2:	3758      	adds	r7, #88	; 0x58
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000294 	.word	0x20000294
 80019cc:	40012c00 	.word	0x40012c00

080019d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <MX_USART1_UART_Init+0x4c>)
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <MX_USART1_UART_Init+0x50>)
 80019d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <MX_USART1_UART_Init+0x4c>)
 80019dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <MX_USART1_UART_Init+0x4c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <MX_USART1_UART_Init+0x4c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <MX_USART1_UART_Init+0x4c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <MX_USART1_UART_Init+0x4c>)
 80019f6:	220c      	movs	r2, #12
 80019f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <MX_USART1_UART_Init+0x4c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <MX_USART1_UART_Init+0x4c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_USART1_UART_Init+0x4c>)
 8001a08:	f003 ff37 	bl	800587a <HAL_UART_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a12:	f000 f8cb 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200002dc 	.word	0x200002dc
 8001a20:	40013800 	.word	0x40013800

08001a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2a:	f107 0318 	add.w	r3, r7, #24
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a38:	4b4d      	ldr	r3, [pc, #308]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	4a4c      	ldr	r2, [pc, #304]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a3e:	f043 0310 	orr.w	r3, r3, #16
 8001a42:	6193      	str	r3, [r2, #24]
 8001a44:	4b4a      	ldr	r3, [pc, #296]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a50:	4b47      	ldr	r3, [pc, #284]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4a46      	ldr	r2, [pc, #280]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a5a:	6193      	str	r3, [r2, #24]
 8001a5c:	4b44      	ldr	r3, [pc, #272]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a68:	4b41      	ldr	r3, [pc, #260]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	4a40      	ldr	r2, [pc, #256]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a6e:	f043 0304 	orr.w	r3, r3, #4
 8001a72:	6193      	str	r3, [r2, #24]
 8001a74:	4b3e      	ldr	r3, [pc, #248]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a80:	4b3b      	ldr	r3, [pc, #236]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	4a3a      	ldr	r2, [pc, #232]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a8a:	6193      	str	r3, [r2, #24]
 8001a8c:	4b38      	ldr	r3, [pc, #224]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a98:	4b35      	ldr	r3, [pc, #212]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	4a34      	ldr	r2, [pc, #208]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a9e:	f043 0320 	orr.w	r3, r3, #32
 8001aa2:	6193      	str	r3, [r2, #24]
 8001aa4:	4b32      	ldr	r3, [pc, #200]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 0320 	and.w	r3, r3, #32
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	213c      	movs	r1, #60	; 0x3c
 8001ab4:	482f      	ldr	r0, [pc, #188]	; (8001b74 <MX_GPIO_Init+0x150>)
 8001ab6:	f000 fe60 	bl	800277a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	210d      	movs	r1, #13
 8001abe:	482e      	ldr	r0, [pc, #184]	; (8001b78 <MX_GPIO_Init+0x154>)
 8001ac0:	f000 fe5b 	bl	800277a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RS_Pin|E_Pin|D4_Pin|D5_Pin
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 8001aca:	482c      	ldr	r0, [pc, #176]	; (8001b7c <MX_GPIO_Init+0x158>)
 8001acc:	f000 fe55 	bl	800277a <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pins : PF2 PF3 PF4 PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001ad0:	233c      	movs	r3, #60	; 0x3c
 8001ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001adc:	2302      	movs	r3, #2
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ae0:	f107 0318 	add.w	r3, r7, #24
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4823      	ldr	r0, [pc, #140]	; (8001b74 <MX_GPIO_Init+0x150>)
 8001ae8:	f000 fc9c 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001aec:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001af2:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <MX_GPIO_Init+0x15c>)
 8001af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001afa:	f107 0318 	add.w	r3, r7, #24
 8001afe:	4619      	mov	r1, r3
 8001b00:	481c      	ldr	r0, [pc, #112]	; (8001b74 <MX_GPIO_Init+0x150>)
 8001b02:	f000 fc8f 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED2_Pin;
 8001b06:	230d      	movs	r3, #13
 8001b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2302      	movs	r3, #2
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b16:	f107 0318 	add.w	r3, r7, #24
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4816      	ldr	r0, [pc, #88]	; (8001b78 <MX_GPIO_Init+0x154>)
 8001b1e:	f000 fc81 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBTN2_Pin PBTN3_Pin PBTN1_Pin */
  GPIO_InitStruct.Pin = PBTN2_Pin|PBTN3_Pin|PBTN1_Pin;
 8001b22:	2338      	movs	r3, #56	; 0x38
 8001b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	f107 0318 	add.w	r3, r7, #24
 8001b32:	4619      	mov	r1, r3
 8001b34:	4813      	ldr	r0, [pc, #76]	; (8001b84 <MX_GPIO_Init+0x160>)
 8001b36:	f000 fc75 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin E_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin PD14 */
  GPIO_InitStruct.Pin = RS_Pin|E_Pin|D4_Pin|D5_Pin
 8001b3a:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 8001b3e:	61bb      	str	r3, [r7, #24]
                          |D6_Pin|D7_Pin|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b40:	2301      	movs	r3, #1
 8001b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b4c:	f107 0318 	add.w	r3, r7, #24
 8001b50:	4619      	mov	r1, r3
 8001b52:	480a      	ldr	r0, [pc, #40]	; (8001b7c <MX_GPIO_Init+0x158>)
 8001b54:	f000 fc66 	bl	8002424 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2017      	movs	r0, #23
 8001b5e:	f000 fc36 	bl	80023ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b62:	2017      	movs	r0, #23
 8001b64:	f000 fc4f 	bl	8002406 <HAL_NVIC_EnableIRQ>

}
 8001b68:	bf00      	nop
 8001b6a:	3728      	adds	r7, #40	; 0x28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40011c00 	.word	0x40011c00
 8001b78:	40011000 	.word	0x40011000
 8001b7c:	40011400 	.word	0x40011400
 8001b80:	10110000 	.word	0x10110000
 8001b84:	40010800 	.word	0x40010800

08001b88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b9a:	f000 fb23 	bl	80021e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40001400 	.word	0x40001400

08001bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb0:	b672      	cpsid	i
}
 8001bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <Error_Handler+0x8>
	...

08001bb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <HAL_MspInit+0x40>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <HAL_MspInit+0x40>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6193      	str	r3, [r2, #24]
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_MspInit+0x40>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_MspInit+0x40>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_MspInit+0x40>)
 8001bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be0:	61d3      	str	r3, [r2, #28]
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_MspInit+0x40>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	40021000 	.word	0x40021000

08001bfc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0b      	ldr	r2, [pc, #44]	; (8001c38 <HAL_RTC_MspInit+0x3c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d110      	bne.n	8001c30 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001c0e:	f000 fdef 	bl	80027f0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_RTC_MspInit+0x40>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <HAL_RTC_MspInit+0x40>)
 8001c18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c1c:	61d3      	str	r3, [r2, #28]
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <HAL_RTC_MspInit+0x40>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c2a:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_RTC_MspInit+0x44>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c30:	bf00      	nop
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40002800 	.word	0x40002800
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	4242043c 	.word	0x4242043c

08001c44 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0318 	add.w	r3, r7, #24
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a22      	ldr	r2, [pc, #136]	; (8001ce8 <HAL_SD_MspInit+0xa4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d13c      	bne.n	8001cde <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001c64:	4b21      	ldr	r3, [pc, #132]	; (8001cec <HAL_SD_MspInit+0xa8>)
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	4a20      	ldr	r2, [pc, #128]	; (8001cec <HAL_SD_MspInit+0xa8>)
 8001c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c6e:	6153      	str	r3, [r2, #20]
 8001c70:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <HAL_SD_MspInit+0xa8>)
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <HAL_SD_MspInit+0xa8>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	4a1a      	ldr	r2, [pc, #104]	; (8001cec <HAL_SD_MspInit+0xa8>)
 8001c82:	f043 0310 	orr.w	r3, r3, #16
 8001c86:	6193      	str	r3, [r2, #24]
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <HAL_SD_MspInit+0xa8>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_SD_MspInit+0xa8>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a14      	ldr	r2, [pc, #80]	; (8001cec <HAL_SD_MspInit+0xa8>)
 8001c9a:	f043 0320 	orr.w	r3, r3, #32
 8001c9e:	6193      	str	r3, [r2, #24]
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_SD_MspInit+0xa8>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f003 0320 	and.w	r3, r3, #32
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001cac:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cba:	f107 0318 	add.w	r3, r7, #24
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	480b      	ldr	r0, [pc, #44]	; (8001cf0 <HAL_SD_MspInit+0xac>)
 8001cc2:	f000 fbaf 	bl	8002424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd2:	f107 0318 	add.w	r3, r7, #24
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <HAL_SD_MspInit+0xb0>)
 8001cda:	f000 fba3 	bl	8002424 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001cde:	bf00      	nop
 8001ce0:	3728      	adds	r7, #40	; 0x28
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40018000 	.word	0x40018000
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40011000 	.word	0x40011000
 8001cf4:	40011400 	.word	0x40011400

08001cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <HAL_TIM_Base_MspInit+0x34>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d10b      	bne.n	8001d22 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_TIM_Base_MspInit+0x38>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <HAL_TIM_Base_MspInit+0x38>)
 8001d10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d14:	6193      	str	r3, [r2, #24]
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_TIM_Base_MspInit+0x38>)
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	40012c00 	.word	0x40012c00
 8001d30:	40021000 	.word	0x40021000

08001d34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 030c 	add.w	r3, r7, #12
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a19      	ldr	r2, [pc, #100]	; (8001db4 <HAL_TIM_MspPostInit+0x80>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d12a      	bne.n	8001daa <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_TIM_MspPostInit+0x84>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	4a17      	ldr	r2, [pc, #92]	; (8001db8 <HAL_TIM_MspPostInit+0x84>)
 8001d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d5e:	6193      	str	r3, [r2, #24]
 8001d60:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_TIM_MspPostInit+0x84>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin|BLUE_Pin|BUZZER_Pin;
 8001d6c:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001d70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2302      	movs	r3, #2
 8001d78:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d7a:	f107 030c 	add.w	r3, r7, #12
 8001d7e:	4619      	mov	r1, r3
 8001d80:	480e      	ldr	r0, [pc, #56]	; (8001dbc <HAL_TIM_MspPostInit+0x88>)
 8001d82:	f000 fb4f 	bl	8002424 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <HAL_TIM_MspPostInit+0x8c>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	61fb      	str	r3, [r7, #28]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	4a06      	ldr	r2, [pc, #24]	; (8001dc0 <HAL_TIM_MspPostInit+0x8c>)
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001daa:	bf00      	nop
 8001dac:	3720      	adds	r7, #32
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40012c00 	.word	0x40012c00
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40011800 	.word	0x40011800
 8001dc0:	40010000 	.word	0x40010000

08001dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0310 	add.w	r3, r7, #16
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <HAL_UART_MspInit+0x8c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d131      	bne.n	8001e48 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_UART_MspInit+0x90>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	4a1a      	ldr	r2, [pc, #104]	; (8001e54 <HAL_UART_MspInit+0x90>)
 8001dea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dee:	6193      	str	r3, [r2, #24]
 8001df0:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <HAL_UART_MspInit+0x90>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfc:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <HAL_UART_MspInit+0x90>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <HAL_UART_MspInit+0x90>)
 8001e02:	f043 0304 	orr.w	r3, r3, #4
 8001e06:	6193      	str	r3, [r2, #24]
 8001e08:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_UART_MspInit+0x90>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f107 0310 	add.w	r3, r7, #16
 8001e26:	4619      	mov	r1, r3
 8001e28:	480b      	ldr	r0, [pc, #44]	; (8001e58 <HAL_UART_MspInit+0x94>)
 8001e2a:	f000 fafb 	bl	8002424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3c:	f107 0310 	add.w	r3, r7, #16
 8001e40:	4619      	mov	r1, r3
 8001e42:	4805      	ldr	r0, [pc, #20]	; (8001e58 <HAL_UART_MspInit+0x94>)
 8001e44:	f000 faee 	bl	8002424 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e48:	bf00      	nop
 8001e4a:	3720      	adds	r7, #32
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40013800 	.word	0x40013800
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40010800 	.word	0x40010800

08001e5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08e      	sub	sp, #56	; 0x38
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001e72:	4b34      	ldr	r3, [pc, #208]	; (8001f44 <HAL_InitTick+0xe8>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	4a33      	ldr	r2, [pc, #204]	; (8001f44 <HAL_InitTick+0xe8>)
 8001e78:	f043 0320 	orr.w	r3, r3, #32
 8001e7c:	61d3      	str	r3, [r2, #28]
 8001e7e:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <HAL_InitTick+0xe8>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e8a:	f107 0210 	add.w	r2, r7, #16
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f001 f8b3 	bl	8003000 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d103      	bne.n	8001eac <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ea4:	f001 f884 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8001ea8:	6378      	str	r0, [r7, #52]	; 0x34
 8001eaa:	e004      	b.n	8001eb6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001eac:	f001 f880 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb8:	4a23      	ldr	r2, [pc, #140]	; (8001f48 <HAL_InitTick+0xec>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	0c9b      	lsrs	r3, r3, #18
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001ec4:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <HAL_InitTick+0xf0>)
 8001ec6:	4a22      	ldr	r2, [pc, #136]	; (8001f50 <HAL_InitTick+0xf4>)
 8001ec8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <HAL_InitTick+0xf0>)
 8001ecc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ed0:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001ed2:	4a1e      	ldr	r2, [pc, #120]	; (8001f4c <HAL_InitTick+0xf0>)
 8001ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed6:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001ed8:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <HAL_InitTick+0xf0>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ede:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <HAL_InitTick+0xf0>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee4:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <HAL_InitTick+0xf0>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001eea:	4818      	ldr	r0, [pc, #96]	; (8001f4c <HAL_InitTick+0xf0>)
 8001eec:	f002 fd84 	bl	80049f8 <HAL_TIM_Base_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001ef6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d11b      	bne.n	8001f36 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001efe:	4813      	ldr	r0, [pc, #76]	; (8001f4c <HAL_InitTick+0xf0>)
 8001f00:	f002 fdca 	bl	8004a98 <HAL_TIM_Base_Start_IT>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001f0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d111      	bne.n	8001f36 <HAL_InitTick+0xda>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f12:	2037      	movs	r0, #55	; 0x37
 8001f14:	f000 fa77 	bl	8002406 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b0f      	cmp	r3, #15
 8001f1c:	d808      	bhi.n	8001f30 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	2037      	movs	r0, #55	; 0x37
 8001f24:	f000 fa53 	bl	80023ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f28:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <HAL_InitTick+0xf8>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e002      	b.n	8001f36 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3738      	adds	r7, #56	; 0x38
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40021000 	.word	0x40021000
 8001f48:	431bde83 	.word	0x431bde83
 8001f4c:	20000320 	.word	0x20000320
 8001f50:	40001400 	.word	0x40001400
 8001f54:	20000004 	.word	0x20000004

08001f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f5c:	e7fe      	b.n	8001f5c <NMI_Handler+0x4>

08001f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f62:	e7fe      	b.n	8001f62 <HardFault_Handler+0x4>

08001f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <MemManage_Handler+0x4>

08001f6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6e:	e7fe      	b.n	8001f6e <BusFault_Handler+0x4>

08001f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <UsageFault_Handler+0x4>

08001f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr

08001f82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr

08001f8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr

08001f9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr

08001fa6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001faa:	2040      	movs	r0, #64	; 0x40
 8001fac:	f000 fbfe 	bl	80027ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001fb0:	2080      	movs	r0, #128	; 0x80
 8001fb2:	f000 fbfb 	bl	80027ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001fb6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fba:	f000 fbf7 	bl	80027ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001fbe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001fc2:	f000 fbf3 	bl	80027ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001fd0:	4802      	ldr	r0, [pc, #8]	; (8001fdc <TIM7_IRQHandler+0x10>)
 8001fd2:	f002 fe19 	bl	8004c08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000320 	.word	0x20000320

08001fe0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
	return 1;
 8001fe4:	2301      	movs	r3, #1
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <_kill>:

int _kill(int pid, int sig)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ff8:	f004 fc18 	bl	800682c <__errno>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2216      	movs	r2, #22
 8002000:	601a      	str	r2, [r3, #0]
	return -1;
 8002002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <_exit>:

void _exit (int status)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002016:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ffe7 	bl	8001fee <_kill>
	while (1) {}		/* Make sure we hang here */
 8002020:	e7fe      	b.n	8002020 <_exit+0x12>

08002022 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	e00a      	b.n	800204a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002034:	f3af 8000 	nop.w
 8002038:	4601      	mov	r1, r0
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	60ba      	str	r2, [r7, #8]
 8002040:	b2ca      	uxtb	r2, r1
 8002042:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	3301      	adds	r3, #1
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	429a      	cmp	r2, r3
 8002050:	dbf0      	blt.n	8002034 <_read+0x12>
	}

return len;
 8002052:	687b      	ldr	r3, [r7, #4]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	e009      	b.n	8002082 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	60ba      	str	r2, [r7, #8]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3301      	adds	r3, #1
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	429a      	cmp	r2, r3
 8002088:	dbf1      	blt.n	800206e <_write+0x12>
	}
	return len;
 800208a:	687b      	ldr	r3, [r7, #4]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_close>:

int _close(int file)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	return -1;
 800209c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr

080020aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ba:	605a      	str	r2, [r3, #4]
	return 0;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <_isatty>:

int _isatty(int file)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
	return 1;
 80020d0:	2301      	movs	r3, #1
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
	return 0;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020fc:	4a14      	ldr	r2, [pc, #80]	; (8002150 <_sbrk+0x5c>)
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <_sbrk+0x60>)
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002108:	4b13      	ldr	r3, [pc, #76]	; (8002158 <_sbrk+0x64>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <_sbrk+0x64>)
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <_sbrk+0x68>)
 8002114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <_sbrk+0x64>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	429a      	cmp	r2, r3
 8002122:	d207      	bcs.n	8002134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002124:	f004 fb82 	bl	800682c <__errno>
 8002128:	4603      	mov	r3, r0
 800212a:	220c      	movs	r2, #12
 800212c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002132:	e009      	b.n	8002148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <_sbrk+0x64>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	4a05      	ldr	r2, [pc, #20]	; (8002158 <_sbrk+0x64>)
 8002144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002146:	68fb      	ldr	r3, [r7, #12]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20010000 	.word	0x20010000
 8002154:	00000400 	.word	0x00000400
 8002158:	20000368 	.word	0x20000368
 800215c:	20000398 	.word	0x20000398

08002160 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800216c:	480c      	ldr	r0, [pc, #48]	; (80021a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800216e:	490d      	ldr	r1, [pc, #52]	; (80021a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002170:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002174:	e002      	b.n	800217c <LoopCopyDataInit>

08002176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800217a:	3304      	adds	r3, #4

0800217c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800217c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800217e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002180:	d3f9      	bcc.n	8002176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002182:	4a0a      	ldr	r2, [pc, #40]	; (80021ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002184:	4c0a      	ldr	r4, [pc, #40]	; (80021b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002188:	e001      	b.n	800218e <LoopFillZerobss>

0800218a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800218a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800218c:	3204      	adds	r2, #4

0800218e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800218e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002190:	d3fb      	bcc.n	800218a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002192:	f7ff ffe5 	bl	8002160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002196:	f004 fb4f 	bl	8006838 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800219a:	f7ff fa37 	bl	800160c <main>
  bx lr
 800219e:	4770      	bx	lr
  ldr r0, =_sdata
 80021a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80021a8:	0800b63c 	.word	0x0800b63c
  ldr r2, =_sbss
 80021ac:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80021b0:	20000394 	.word	0x20000394

080021b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021b4:	e7fe      	b.n	80021b4 <ADC1_2_IRQHandler>
	...

080021b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <HAL_Init+0x28>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <HAL_Init+0x28>)
 80021c2:	f043 0310 	orr.w	r3, r3, #16
 80021c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c8:	2003      	movs	r0, #3
 80021ca:	f000 f8f5 	bl	80023b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ce:	200f      	movs	r0, #15
 80021d0:	f7ff fe44 	bl	8001e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d4:	f7ff fcf0 	bl	8001bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40022000 	.word	0x40022000

080021e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_IncTick+0x1c>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_IncTick+0x20>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	4a03      	ldr	r2, [pc, #12]	; (8002204 <HAL_IncTick+0x20>)
 80021f6:	6013      	str	r3, [r2, #0]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	20000008 	.word	0x20000008
 8002204:	2000036c 	.word	0x2000036c

08002208 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return uwTick;
 800220c:	4b02      	ldr	r3, [pc, #8]	; (8002218 <HAL_GetTick+0x10>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	2000036c 	.word	0x2000036c

0800221c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002224:	f7ff fff0 	bl	8002208 <HAL_GetTick>
 8002228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002234:	d005      	beq.n	8002242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002236:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_Delay+0x44>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4413      	add	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002242:	bf00      	nop
 8002244:	f7ff ffe0 	bl	8002208 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	429a      	cmp	r2, r3
 8002252:	d8f7      	bhi.n	8002244 <HAL_Delay+0x28>
  {
  }
}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000008 	.word	0x20000008

08002264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002280:	4013      	ands	r3, r2
 8002282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800228c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002296:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	60d3      	str	r3, [r2, #12]
}
 800229c:	bf00      	nop
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <__NVIC_GetPriorityGrouping+0x18>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	f003 0307 	and.w	r3, r3, #7
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	db0b      	blt.n	80022f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	f003 021f 	and.w	r2, r3, #31
 80022e0:	4906      	ldr	r1, [pc, #24]	; (80022fc <__NVIC_EnableIRQ+0x34>)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	2001      	movs	r0, #1
 80022ea:	fa00 f202 	lsl.w	r2, r0, r2
 80022ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	e000e100 	.word	0xe000e100

08002300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	db0a      	blt.n	800232a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	490c      	ldr	r1, [pc, #48]	; (800234c <__NVIC_SetPriority+0x4c>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	440b      	add	r3, r1
 8002324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002328:	e00a      	b.n	8002340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4908      	ldr	r1, [pc, #32]	; (8002350 <__NVIC_SetPriority+0x50>)
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	3b04      	subs	r3, #4
 8002338:	0112      	lsls	r2, r2, #4
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	440b      	add	r3, r1
 800233e:	761a      	strb	r2, [r3, #24]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000e100 	.word	0xe000e100
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	; 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f1c3 0307 	rsb	r3, r3, #7
 800236e:	2b04      	cmp	r3, #4
 8002370:	bf28      	it	cs
 8002372:	2304      	movcs	r3, #4
 8002374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3304      	adds	r3, #4
 800237a:	2b06      	cmp	r3, #6
 800237c:	d902      	bls.n	8002384 <NVIC_EncodePriority+0x30>
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3b03      	subs	r3, #3
 8002382:	e000      	b.n	8002386 <NVIC_EncodePriority+0x32>
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	401a      	ands	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800239c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43d9      	mvns	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	4313      	orrs	r3, r2
         );
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3724      	adds	r7, #36	; 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr

080023b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ff4f 	bl	8002264 <__NVIC_SetPriorityGrouping>
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b086      	sub	sp, #24
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	4603      	mov	r3, r0
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e0:	f7ff ff64 	bl	80022ac <__NVIC_GetPriorityGrouping>
 80023e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68b9      	ldr	r1, [r7, #8]
 80023ea:	6978      	ldr	r0, [r7, #20]
 80023ec:	f7ff ffb2 	bl	8002354 <NVIC_EncodePriority>
 80023f0:	4602      	mov	r2, r0
 80023f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff81 	bl	8002300 <__NVIC_SetPriority>
}
 80023fe:	bf00      	nop
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	4603      	mov	r3, r0
 800240e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff57 	bl	80022c8 <__NVIC_EnableIRQ>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002424:	b480      	push	{r7}
 8002426:	b08b      	sub	sp, #44	; 0x2c
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800242e:	2300      	movs	r3, #0
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002432:	2300      	movs	r3, #0
 8002434:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002436:	e179      	b.n	800272c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002438:	2201      	movs	r2, #1
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	69fa      	ldr	r2, [r7, #28]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	429a      	cmp	r2, r3
 8002452:	f040 8168 	bne.w	8002726 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4a96      	ldr	r2, [pc, #600]	; (80026b4 <HAL_GPIO_Init+0x290>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d05e      	beq.n	800251e <HAL_GPIO_Init+0xfa>
 8002460:	4a94      	ldr	r2, [pc, #592]	; (80026b4 <HAL_GPIO_Init+0x290>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d875      	bhi.n	8002552 <HAL_GPIO_Init+0x12e>
 8002466:	4a94      	ldr	r2, [pc, #592]	; (80026b8 <HAL_GPIO_Init+0x294>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d058      	beq.n	800251e <HAL_GPIO_Init+0xfa>
 800246c:	4a92      	ldr	r2, [pc, #584]	; (80026b8 <HAL_GPIO_Init+0x294>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d86f      	bhi.n	8002552 <HAL_GPIO_Init+0x12e>
 8002472:	4a92      	ldr	r2, [pc, #584]	; (80026bc <HAL_GPIO_Init+0x298>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d052      	beq.n	800251e <HAL_GPIO_Init+0xfa>
 8002478:	4a90      	ldr	r2, [pc, #576]	; (80026bc <HAL_GPIO_Init+0x298>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d869      	bhi.n	8002552 <HAL_GPIO_Init+0x12e>
 800247e:	4a90      	ldr	r2, [pc, #576]	; (80026c0 <HAL_GPIO_Init+0x29c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d04c      	beq.n	800251e <HAL_GPIO_Init+0xfa>
 8002484:	4a8e      	ldr	r2, [pc, #568]	; (80026c0 <HAL_GPIO_Init+0x29c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d863      	bhi.n	8002552 <HAL_GPIO_Init+0x12e>
 800248a:	4a8e      	ldr	r2, [pc, #568]	; (80026c4 <HAL_GPIO_Init+0x2a0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d046      	beq.n	800251e <HAL_GPIO_Init+0xfa>
 8002490:	4a8c      	ldr	r2, [pc, #560]	; (80026c4 <HAL_GPIO_Init+0x2a0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d85d      	bhi.n	8002552 <HAL_GPIO_Init+0x12e>
 8002496:	2b12      	cmp	r3, #18
 8002498:	d82a      	bhi.n	80024f0 <HAL_GPIO_Init+0xcc>
 800249a:	2b12      	cmp	r3, #18
 800249c:	d859      	bhi.n	8002552 <HAL_GPIO_Init+0x12e>
 800249e:	a201      	add	r2, pc, #4	; (adr r2, 80024a4 <HAL_GPIO_Init+0x80>)
 80024a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a4:	0800251f 	.word	0x0800251f
 80024a8:	080024f9 	.word	0x080024f9
 80024ac:	0800250b 	.word	0x0800250b
 80024b0:	0800254d 	.word	0x0800254d
 80024b4:	08002553 	.word	0x08002553
 80024b8:	08002553 	.word	0x08002553
 80024bc:	08002553 	.word	0x08002553
 80024c0:	08002553 	.word	0x08002553
 80024c4:	08002553 	.word	0x08002553
 80024c8:	08002553 	.word	0x08002553
 80024cc:	08002553 	.word	0x08002553
 80024d0:	08002553 	.word	0x08002553
 80024d4:	08002553 	.word	0x08002553
 80024d8:	08002553 	.word	0x08002553
 80024dc:	08002553 	.word	0x08002553
 80024e0:	08002553 	.word	0x08002553
 80024e4:	08002553 	.word	0x08002553
 80024e8:	08002501 	.word	0x08002501
 80024ec:	08002515 	.word	0x08002515
 80024f0:	4a75      	ldr	r2, [pc, #468]	; (80026c8 <HAL_GPIO_Init+0x2a4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d013      	beq.n	800251e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024f6:	e02c      	b.n	8002552 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	623b      	str	r3, [r7, #32]
          break;
 80024fe:	e029      	b.n	8002554 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	3304      	adds	r3, #4
 8002506:	623b      	str	r3, [r7, #32]
          break;
 8002508:	e024      	b.n	8002554 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	3308      	adds	r3, #8
 8002510:	623b      	str	r3, [r7, #32]
          break;
 8002512:	e01f      	b.n	8002554 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	330c      	adds	r3, #12
 800251a:	623b      	str	r3, [r7, #32]
          break;
 800251c:	e01a      	b.n	8002554 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d102      	bne.n	800252c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002526:	2304      	movs	r3, #4
 8002528:	623b      	str	r3, [r7, #32]
          break;
 800252a:	e013      	b.n	8002554 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d105      	bne.n	8002540 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002534:	2308      	movs	r3, #8
 8002536:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69fa      	ldr	r2, [r7, #28]
 800253c:	611a      	str	r2, [r3, #16]
          break;
 800253e:	e009      	b.n	8002554 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002540:	2308      	movs	r3, #8
 8002542:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69fa      	ldr	r2, [r7, #28]
 8002548:	615a      	str	r2, [r3, #20]
          break;
 800254a:	e003      	b.n	8002554 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800254c:	2300      	movs	r3, #0
 800254e:	623b      	str	r3, [r7, #32]
          break;
 8002550:	e000      	b.n	8002554 <HAL_GPIO_Init+0x130>
          break;
 8002552:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2bff      	cmp	r3, #255	; 0xff
 8002558:	d801      	bhi.n	800255e <HAL_GPIO_Init+0x13a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	e001      	b.n	8002562 <HAL_GPIO_Init+0x13e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3304      	adds	r3, #4
 8002562:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	2bff      	cmp	r3, #255	; 0xff
 8002568:	d802      	bhi.n	8002570 <HAL_GPIO_Init+0x14c>
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	e002      	b.n	8002576 <HAL_GPIO_Init+0x152>
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	3b08      	subs	r3, #8
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	210f      	movs	r1, #15
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	fa01 f303 	lsl.w	r3, r1, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	401a      	ands	r2, r3
 8002588:	6a39      	ldr	r1, [r7, #32]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	fa01 f303 	lsl.w	r3, r1, r3
 8002590:	431a      	orrs	r2, r3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 80c1 	beq.w	8002726 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025a4:	4b49      	ldr	r3, [pc, #292]	; (80026cc <HAL_GPIO_Init+0x2a8>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	4a48      	ldr	r2, [pc, #288]	; (80026cc <HAL_GPIO_Init+0x2a8>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6193      	str	r3, [r2, #24]
 80025b0:	4b46      	ldr	r3, [pc, #280]	; (80026cc <HAL_GPIO_Init+0x2a8>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025bc:	4a44      	ldr	r2, [pc, #272]	; (80026d0 <HAL_GPIO_Init+0x2ac>)
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	089b      	lsrs	r3, r3, #2
 80025c2:	3302      	adds	r3, #2
 80025c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	220f      	movs	r2, #15
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4013      	ands	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a3c      	ldr	r2, [pc, #240]	; (80026d4 <HAL_GPIO_Init+0x2b0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d01f      	beq.n	8002628 <HAL_GPIO_Init+0x204>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a3b      	ldr	r2, [pc, #236]	; (80026d8 <HAL_GPIO_Init+0x2b4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d019      	beq.n	8002624 <HAL_GPIO_Init+0x200>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a3a      	ldr	r2, [pc, #232]	; (80026dc <HAL_GPIO_Init+0x2b8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d013      	beq.n	8002620 <HAL_GPIO_Init+0x1fc>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a39      	ldr	r2, [pc, #228]	; (80026e0 <HAL_GPIO_Init+0x2bc>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d00d      	beq.n	800261c <HAL_GPIO_Init+0x1f8>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a38      	ldr	r2, [pc, #224]	; (80026e4 <HAL_GPIO_Init+0x2c0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d007      	beq.n	8002618 <HAL_GPIO_Init+0x1f4>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a37      	ldr	r2, [pc, #220]	; (80026e8 <HAL_GPIO_Init+0x2c4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d101      	bne.n	8002614 <HAL_GPIO_Init+0x1f0>
 8002610:	2305      	movs	r3, #5
 8002612:	e00a      	b.n	800262a <HAL_GPIO_Init+0x206>
 8002614:	2306      	movs	r3, #6
 8002616:	e008      	b.n	800262a <HAL_GPIO_Init+0x206>
 8002618:	2304      	movs	r3, #4
 800261a:	e006      	b.n	800262a <HAL_GPIO_Init+0x206>
 800261c:	2303      	movs	r3, #3
 800261e:	e004      	b.n	800262a <HAL_GPIO_Init+0x206>
 8002620:	2302      	movs	r3, #2
 8002622:	e002      	b.n	800262a <HAL_GPIO_Init+0x206>
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <HAL_GPIO_Init+0x206>
 8002628:	2300      	movs	r3, #0
 800262a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262c:	f002 0203 	and.w	r2, r2, #3
 8002630:	0092      	lsls	r2, r2, #2
 8002632:	4093      	lsls	r3, r2
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800263a:	4925      	ldr	r1, [pc, #148]	; (80026d0 <HAL_GPIO_Init+0x2ac>)
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	089b      	lsrs	r3, r3, #2
 8002640:	3302      	adds	r3, #2
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d006      	beq.n	8002662 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002654:	4b25      	ldr	r3, [pc, #148]	; (80026ec <HAL_GPIO_Init+0x2c8>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4924      	ldr	r1, [pc, #144]	; (80026ec <HAL_GPIO_Init+0x2c8>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	600b      	str	r3, [r1, #0]
 8002660:	e006      	b.n	8002670 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002662:	4b22      	ldr	r3, [pc, #136]	; (80026ec <HAL_GPIO_Init+0x2c8>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	43db      	mvns	r3, r3
 800266a:	4920      	ldr	r1, [pc, #128]	; (80026ec <HAL_GPIO_Init+0x2c8>)
 800266c:	4013      	ands	r3, r2
 800266e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d006      	beq.n	800268a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800267c:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_GPIO_Init+0x2c8>)
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	491a      	ldr	r1, [pc, #104]	; (80026ec <HAL_GPIO_Init+0x2c8>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
 8002688:	e006      	b.n	8002698 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800268a:	4b18      	ldr	r3, [pc, #96]	; (80026ec <HAL_GPIO_Init+0x2c8>)
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	43db      	mvns	r3, r3
 8002692:	4916      	ldr	r1, [pc, #88]	; (80026ec <HAL_GPIO_Init+0x2c8>)
 8002694:	4013      	ands	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d025      	beq.n	80026f0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <HAL_GPIO_Init+0x2c8>)
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	4910      	ldr	r1, [pc, #64]	; (80026ec <HAL_GPIO_Init+0x2c8>)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	608b      	str	r3, [r1, #8]
 80026b0:	e025      	b.n	80026fe <HAL_GPIO_Init+0x2da>
 80026b2:	bf00      	nop
 80026b4:	10320000 	.word	0x10320000
 80026b8:	10310000 	.word	0x10310000
 80026bc:	10220000 	.word	0x10220000
 80026c0:	10210000 	.word	0x10210000
 80026c4:	10120000 	.word	0x10120000
 80026c8:	10110000 	.word	0x10110000
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40010000 	.word	0x40010000
 80026d4:	40010800 	.word	0x40010800
 80026d8:	40010c00 	.word	0x40010c00
 80026dc:	40011000 	.word	0x40011000
 80026e0:	40011400 	.word	0x40011400
 80026e4:	40011800 	.word	0x40011800
 80026e8:	40011c00 	.word	0x40011c00
 80026ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026f0:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_GPIO_Init+0x324>)
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	4913      	ldr	r1, [pc, #76]	; (8002748 <HAL_GPIO_Init+0x324>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d006      	beq.n	8002718 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <HAL_GPIO_Init+0x324>)
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	490e      	ldr	r1, [pc, #56]	; (8002748 <HAL_GPIO_Init+0x324>)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	60cb      	str	r3, [r1, #12]
 8002716:	e006      	b.n	8002726 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_GPIO_Init+0x324>)
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	43db      	mvns	r3, r3
 8002720:	4909      	ldr	r1, [pc, #36]	; (8002748 <HAL_GPIO_Init+0x324>)
 8002722:	4013      	ands	r3, r2
 8002724:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	3301      	adds	r3, #1
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	fa22 f303 	lsr.w	r3, r2, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	f47f ae7e 	bne.w	8002438 <HAL_GPIO_Init+0x14>
  }
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	372c      	adds	r7, #44	; 0x2c
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	40010400 	.word	0x40010400

0800274c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	887b      	ldrh	r3, [r7, #2]
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002764:	2301      	movs	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
 8002768:	e001      	b.n	800276e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800276a:	2300      	movs	r3, #0
 800276c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800276e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	460b      	mov	r3, r1
 8002784:	807b      	strh	r3, [r7, #2]
 8002786:	4613      	mov	r3, r2
 8002788:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800278a:	787b      	ldrb	r3, [r7, #1]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002790:	887a      	ldrh	r2, [r7, #2]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002796:	e003      	b.n	80027a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002798:	887b      	ldrh	r3, [r7, #2]
 800279a:	041a      	lsls	r2, r3, #16
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	611a      	str	r2, [r3, #16]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr
	...

080027ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	4013      	ands	r3, r2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d006      	beq.n	80027d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027c2:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027c8:	88fb      	ldrh	r3, [r7, #6]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 f806 	bl	80027dc <HAL_GPIO_EXTI_Callback>
  }
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40010400 	.word	0x40010400

080027dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <HAL_PWR_EnableBkUpAccess+0x14>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]
}
 80027fa:	bf00      	nop
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	420e0020 	.word	0x420e0020

08002808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e272      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8087 	beq.w	8002936 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002828:	4b92      	ldr	r3, [pc, #584]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	2b04      	cmp	r3, #4
 8002832:	d00c      	beq.n	800284e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002834:	4b8f      	ldr	r3, [pc, #572]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b08      	cmp	r3, #8
 800283e:	d112      	bne.n	8002866 <HAL_RCC_OscConfig+0x5e>
 8002840:	4b8c      	ldr	r3, [pc, #560]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800284c:	d10b      	bne.n	8002866 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284e:	4b89      	ldr	r3, [pc, #548]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d06c      	beq.n	8002934 <HAL_RCC_OscConfig+0x12c>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d168      	bne.n	8002934 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e24c      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286e:	d106      	bne.n	800287e <HAL_RCC_OscConfig+0x76>
 8002870:	4b80      	ldr	r3, [pc, #512]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a7f      	ldr	r2, [pc, #508]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	e02e      	b.n	80028dc <HAL_RCC_OscConfig+0xd4>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x98>
 8002886:	4b7b      	ldr	r3, [pc, #492]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a7a      	ldr	r2, [pc, #488]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 800288c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b78      	ldr	r3, [pc, #480]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a77      	ldr	r2, [pc, #476]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e01d      	b.n	80028dc <HAL_RCC_OscConfig+0xd4>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCC_OscConfig+0xbc>
 80028aa:	4b72      	ldr	r3, [pc, #456]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a71      	ldr	r2, [pc, #452]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	4b6f      	ldr	r3, [pc, #444]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a6e      	ldr	r2, [pc, #440]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e00b      	b.n	80028dc <HAL_RCC_OscConfig+0xd4>
 80028c4:	4b6b      	ldr	r3, [pc, #428]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a6a      	ldr	r2, [pc, #424]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	4b68      	ldr	r3, [pc, #416]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a67      	ldr	r2, [pc, #412]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7ff fc90 	bl	8002208 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ec:	f7ff fc8c 	bl	8002208 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	; 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e200      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	4b5d      	ldr	r3, [pc, #372]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0xe4>
 800290a:	e014      	b.n	8002936 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7ff fc7c 	bl	8002208 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002914:	f7ff fc78 	bl	8002208 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	; 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e1ec      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002926:	4b53      	ldr	r3, [pc, #332]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x10c>
 8002932:	e000      	b.n	8002936 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d063      	beq.n	8002a0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002942:	4b4c      	ldr	r3, [pc, #304]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00b      	beq.n	8002966 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800294e:	4b49      	ldr	r3, [pc, #292]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b08      	cmp	r3, #8
 8002958:	d11c      	bne.n	8002994 <HAL_RCC_OscConfig+0x18c>
 800295a:	4b46      	ldr	r3, [pc, #280]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d116      	bne.n	8002994 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002966:	4b43      	ldr	r3, [pc, #268]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d005      	beq.n	800297e <HAL_RCC_OscConfig+0x176>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d001      	beq.n	800297e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e1c0      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297e:	4b3d      	ldr	r3, [pc, #244]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4939      	ldr	r1, [pc, #228]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 800298e:	4313      	orrs	r3, r2
 8002990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002992:	e03a      	b.n	8002a0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d020      	beq.n	80029de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800299c:	4b36      	ldr	r3, [pc, #216]	; (8002a78 <HAL_RCC_OscConfig+0x270>)
 800299e:	2201      	movs	r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a2:	f7ff fc31 	bl	8002208 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029aa:	f7ff fc2d 	bl	8002208 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e1a1      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029bc:	4b2d      	ldr	r3, [pc, #180]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c8:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4927      	ldr	r1, [pc, #156]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	600b      	str	r3, [r1, #0]
 80029dc:	e015      	b.n	8002a0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029de:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <HAL_RCC_OscConfig+0x270>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7ff fc10 	bl	8002208 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ec:	f7ff fc0c 	bl	8002208 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e180      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fe:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d03a      	beq.n	8002a8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d019      	beq.n	8002a52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a1e:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a24:	f7ff fbf0 	bl	8002208 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a2c:	f7ff fbec 	bl	8002208 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e160      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	f000 fb08 	bl	8003060 <RCC_Delay>
 8002a50:	e01c      	b.n	8002a8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a58:	f7ff fbd6 	bl	8002208 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a5e:	e00f      	b.n	8002a80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a60:	f7ff fbd2 	bl	8002208 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d908      	bls.n	8002a80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e146      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000
 8002a78:	42420000 	.word	0x42420000
 8002a7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a80:	4b92      	ldr	r3, [pc, #584]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1e9      	bne.n	8002a60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80a6 	beq.w	8002be6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9e:	4b8b      	ldr	r3, [pc, #556]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10d      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aaa:	4b88      	ldr	r3, [pc, #544]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	4a87      	ldr	r2, [pc, #540]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	61d3      	str	r3, [r2, #28]
 8002ab6:	4b85      	ldr	r3, [pc, #532]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac6:	4b82      	ldr	r3, [pc, #520]	; (8002cd0 <HAL_RCC_OscConfig+0x4c8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d118      	bne.n	8002b04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad2:	4b7f      	ldr	r3, [pc, #508]	; (8002cd0 <HAL_RCC_OscConfig+0x4c8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a7e      	ldr	r2, [pc, #504]	; (8002cd0 <HAL_RCC_OscConfig+0x4c8>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ade:	f7ff fb93 	bl	8002208 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae6:	f7ff fb8f 	bl	8002208 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b64      	cmp	r3, #100	; 0x64
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e103      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af8:	4b75      	ldr	r3, [pc, #468]	; (8002cd0 <HAL_RCC_OscConfig+0x4c8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d106      	bne.n	8002b1a <HAL_RCC_OscConfig+0x312>
 8002b0c:	4b6f      	ldr	r3, [pc, #444]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	4a6e      	ldr	r2, [pc, #440]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	6213      	str	r3, [r2, #32]
 8002b18:	e02d      	b.n	8002b76 <HAL_RCC_OscConfig+0x36e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x334>
 8002b22:	4b6a      	ldr	r3, [pc, #424]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	4a69      	ldr	r2, [pc, #420]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	f023 0301 	bic.w	r3, r3, #1
 8002b2c:	6213      	str	r3, [r2, #32]
 8002b2e:	4b67      	ldr	r3, [pc, #412]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	4a66      	ldr	r2, [pc, #408]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	f023 0304 	bic.w	r3, r3, #4
 8002b38:	6213      	str	r3, [r2, #32]
 8002b3a:	e01c      	b.n	8002b76 <HAL_RCC_OscConfig+0x36e>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b05      	cmp	r3, #5
 8002b42:	d10c      	bne.n	8002b5e <HAL_RCC_OscConfig+0x356>
 8002b44:	4b61      	ldr	r3, [pc, #388]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	4a60      	ldr	r2, [pc, #384]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b4a:	f043 0304 	orr.w	r3, r3, #4
 8002b4e:	6213      	str	r3, [r2, #32]
 8002b50:	4b5e      	ldr	r3, [pc, #376]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	4a5d      	ldr	r2, [pc, #372]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6213      	str	r3, [r2, #32]
 8002b5c:	e00b      	b.n	8002b76 <HAL_RCC_OscConfig+0x36e>
 8002b5e:	4b5b      	ldr	r3, [pc, #364]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	4a5a      	ldr	r2, [pc, #360]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	6213      	str	r3, [r2, #32]
 8002b6a:	4b58      	ldr	r3, [pc, #352]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	4a57      	ldr	r2, [pc, #348]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	f023 0304 	bic.w	r3, r3, #4
 8002b74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d015      	beq.n	8002baa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7e:	f7ff fb43 	bl	8002208 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7ff fb3f 	bl	8002208 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e0b1      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9c:	4b4b      	ldr	r3, [pc, #300]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0ee      	beq.n	8002b86 <HAL_RCC_OscConfig+0x37e>
 8002ba8:	e014      	b.n	8002bd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002baa:	f7ff fb2d 	bl	8002208 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb0:	e00a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb2:	f7ff fb29 	bl	8002208 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e09b      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc8:	4b40      	ldr	r3, [pc, #256]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1ee      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bd4:	7dfb      	ldrb	r3, [r7, #23]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d105      	bne.n	8002be6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bda:	4b3c      	ldr	r3, [pc, #240]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	4a3b      	ldr	r2, [pc, #236]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8087 	beq.w	8002cfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bf0:	4b36      	ldr	r3, [pc, #216]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d061      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d146      	bne.n	8002c92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c04:	4b33      	ldr	r3, [pc, #204]	; (8002cd4 <HAL_RCC_OscConfig+0x4cc>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0a:	f7ff fafd 	bl	8002208 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c12:	f7ff faf9 	bl	8002208 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e06d      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c24:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f0      	bne.n	8002c12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c38:	d108      	bne.n	8002c4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c3a:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	4921      	ldr	r1, [pc, #132]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a19      	ldr	r1, [r3, #32]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	491b      	ldr	r1, [pc, #108]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c64:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <HAL_RCC_OscConfig+0x4cc>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6a:	f7ff facd 	bl	8002208 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c72:	f7ff fac9 	bl	8002208 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e03d      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x46a>
 8002c90:	e035      	b.n	8002cfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <HAL_RCC_OscConfig+0x4cc>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7ff fab6 	bl	8002208 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca0:	f7ff fab2 	bl	8002208 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e026      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x498>
 8002cbe:	e01e      	b.n	8002cfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d107      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e019      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40007000 	.word	0x40007000
 8002cd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCC_OscConfig+0x500>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d106      	bne.n	8002cfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000

08002d0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0d0      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d20:	4b6a      	ldr	r3, [pc, #424]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d910      	bls.n	8002d50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2e:	4b67      	ldr	r3, [pc, #412]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 0207 	bic.w	r2, r3, #7
 8002d36:	4965      	ldr	r1, [pc, #404]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3e:	4b63      	ldr	r3, [pc, #396]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0b8      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d020      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d68:	4b59      	ldr	r3, [pc, #356]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	4a58      	ldr	r2, [pc, #352]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d80:	4b53      	ldr	r3, [pc, #332]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4a52      	ldr	r2, [pc, #328]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d8c:	4b50      	ldr	r3, [pc, #320]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	494d      	ldr	r1, [pc, #308]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d040      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db2:	4b47      	ldr	r3, [pc, #284]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d115      	bne.n	8002dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e07f      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dca:	4b41      	ldr	r3, [pc, #260]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d109      	bne.n	8002dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e073      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dda:	4b3d      	ldr	r3, [pc, #244]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e06b      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dea:	4b39      	ldr	r3, [pc, #228]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f023 0203 	bic.w	r2, r3, #3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	4936      	ldr	r1, [pc, #216]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dfc:	f7ff fa04 	bl	8002208 <HAL_GetTick>
 8002e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e02:	e00a      	b.n	8002e1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e04:	f7ff fa00 	bl	8002208 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e053      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 020c 	and.w	r2, r3, #12
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d1eb      	bne.n	8002e04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d210      	bcs.n	8002e5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 0207 	bic.w	r2, r3, #7
 8002e42:	4922      	ldr	r1, [pc, #136]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e032      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e68:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4916      	ldr	r1, [pc, #88]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d009      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e86:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	490e      	ldr	r1, [pc, #56]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e9a:	f000 f821 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	490a      	ldr	r1, [pc, #40]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8002eac:	5ccb      	ldrb	r3, [r1, r3]
 8002eae:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb2:	4a09      	ldr	r2, [pc, #36]	; (8002ed8 <HAL_RCC_ClockConfig+0x1cc>)
 8002eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_RCC_ClockConfig+0x1d0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe ffce 	bl	8001e5c <HAL_InitTick>

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40022000 	.word	0x40022000
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	0800b160 	.word	0x0800b160
 8002ed8:	20000000 	.word	0x20000000
 8002edc:	20000004 	.word	0x20000004

08002ee0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee0:	b490      	push	{r4, r7}
 8002ee2:	b08a      	sub	sp, #40	; 0x28
 8002ee4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ee6:	4b29      	ldr	r3, [pc, #164]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xac>)
 8002ee8:	1d3c      	adds	r4, r7, #4
 8002eea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002eec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ef0:	f240 2301 	movw	r3, #513	; 0x201
 8002ef4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	2300      	movs	r3, #0
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	2300      	movs	r3, #0
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f0a:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d002      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x40>
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_GetSysClockFreq+0x46>
 8002f1e:	e02b      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f20:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f22:	623b      	str	r3, [r7, #32]
      break;
 8002f24:	e02b      	b.n	8002f7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	0c9b      	lsrs	r3, r3, #18
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	3328      	adds	r3, #40	; 0x28
 8002f30:	443b      	add	r3, r7
 8002f32:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f36:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d012      	beq.n	8002f68 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f42:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	0c5b      	lsrs	r3, r3, #17
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	3328      	adds	r3, #40	; 0x28
 8002f4e:	443b      	add	r3, r7
 8002f50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	4a0e      	ldr	r2, [pc, #56]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f5a:	fb03 f202 	mul.w	r2, r3, r2
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
 8002f66:	e004      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	4a0b      	ldr	r2, [pc, #44]	; (8002f98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f6c:	fb02 f303 	mul.w	r3, r2, r3
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	623b      	str	r3, [r7, #32]
      break;
 8002f76:	e002      	b.n	8002f7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f7a:	623b      	str	r3, [r7, #32]
      break;
 8002f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3728      	adds	r7, #40	; 0x28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc90      	pop	{r4, r7}
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	0800b140 	.word	0x0800b140
 8002f90:	40021000 	.word	0x40021000
 8002f94:	007a1200 	.word	0x007a1200
 8002f98:	003d0900 	.word	0x003d0900

08002f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa0:	4b02      	ldr	r3, [pc, #8]	; (8002fac <HAL_RCC_GetHCLKFreq+0x10>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	20000000 	.word	0x20000000

08002fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fb4:	f7ff fff2 	bl	8002f9c <HAL_RCC_GetHCLKFreq>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	0a1b      	lsrs	r3, r3, #8
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	4903      	ldr	r1, [pc, #12]	; (8002fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc6:	5ccb      	ldrb	r3, [r1, r3]
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	0800b170 	.word	0x0800b170

08002fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fdc:	f7ff ffde 	bl	8002f9c <HAL_RCC_GetHCLKFreq>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	0adb      	lsrs	r3, r3, #11
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	4903      	ldr	r1, [pc, #12]	; (8002ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	0800b170 	.word	0x0800b170

08003000 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	220f      	movs	r2, #15
 800300e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003010:	4b11      	ldr	r3, [pc, #68]	; (8003058 <HAL_RCC_GetClockConfig+0x58>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 0203 	and.w	r2, r3, #3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800301c:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <HAL_RCC_GetClockConfig+0x58>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_RCC_GetClockConfig+0x58>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003034:	4b08      	ldr	r3, [pc, #32]	; (8003058 <HAL_RCC_GetClockConfig+0x58>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	08db      	lsrs	r3, r3, #3
 800303a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_RCC_GetClockConfig+0x5c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0207 	and.w	r2, r3, #7
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr
 8003058:	40021000 	.word	0x40021000
 800305c:	40022000 	.word	0x40022000

08003060 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003068:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <RCC_Delay+0x34>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <RCC_Delay+0x38>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	0a5b      	lsrs	r3, r3, #9
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	fb02 f303 	mul.w	r3, r2, r3
 800307a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800307c:	bf00      	nop
  }
  while (Delay --);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1e5a      	subs	r2, r3, #1
 8003082:	60fa      	str	r2, [r7, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f9      	bne.n	800307c <RCC_Delay+0x1c>
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	20000000 	.word	0x20000000
 8003098:	10624dd3 	.word	0x10624dd3

0800309c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d07d      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80030b8:	2300      	movs	r3, #0
 80030ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030bc:	4b4f      	ldr	r3, [pc, #316]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10d      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c8:	4b4c      	ldr	r3, [pc, #304]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	4a4b      	ldr	r2, [pc, #300]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d2:	61d3      	str	r3, [r2, #28]
 80030d4:	4b49      	ldr	r3, [pc, #292]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e0:	2301      	movs	r3, #1
 80030e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e4:	4b46      	ldr	r3, [pc, #280]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d118      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030f0:	4b43      	ldr	r3, [pc, #268]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a42      	ldr	r2, [pc, #264]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030fc:	f7ff f884 	bl	8002208 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003102:	e008      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003104:	f7ff f880 	bl	8002208 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	; 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e06d      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003116:	4b3a      	ldr	r3, [pc, #232]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003122:	4b36      	ldr	r3, [pc, #216]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800312a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d02e      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	429a      	cmp	r2, r3
 800313e:	d027      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003140:	4b2e      	ldr	r3, [pc, #184]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003148:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800314a:	4b2e      	ldr	r3, [pc, #184]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800314c:	2201      	movs	r2, #1
 800314e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003150:	4b2c      	ldr	r3, [pc, #176]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003156:	4a29      	ldr	r2, [pc, #164]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d014      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003166:	f7ff f84f 	bl	8002208 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316c:	e00a      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316e:	f7ff f84b 	bl	8002208 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f241 3288 	movw	r2, #5000	; 0x1388
 800317c:	4293      	cmp	r3, r2
 800317e:	d901      	bls.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e036      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003184:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0ee      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003190:	4b1a      	ldr	r3, [pc, #104]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4917      	ldr	r1, [pc, #92]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031a2:	7dfb      	ldrb	r3, [r7, #23]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d105      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a8:	4b14      	ldr	r3, [pc, #80]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	4a13      	ldr	r2, [pc, #76]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031c0:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	490b      	ldr	r1, [pc, #44]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d008      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031de:	4b07      	ldr	r3, [pc, #28]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	4904      	ldr	r1, [pc, #16]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40021000 	.word	0x40021000
 8003200:	40007000 	.word	0x40007000
 8003204:	42420440 	.word	0x42420440

08003208 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003208:	b590      	push	{r4, r7, lr}
 800320a:	b08d      	sub	sp, #52	; 0x34
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003210:	4b6a      	ldr	r3, [pc, #424]	; (80033bc <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8003212:	f107 040c 	add.w	r4, r7, #12
 8003216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800321c:	f240 2301 	movw	r3, #513	; 0x201
 8003220:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
 8003226:	2300      	movs	r3, #0
 8003228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800322a:	2300      	movs	r3, #0
 800322c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	61fb      	str	r3, [r7, #28]
 8003232:	2300      	movs	r3, #0
 8003234:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3b01      	subs	r3, #1
 800323a:	2b0f      	cmp	r3, #15
 800323c:	f200 80b4 	bhi.w	80033a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8003240:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8003242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003246:	bf00      	nop
 8003248:	08003327 	.word	0x08003327
 800324c:	0800338d 	.word	0x0800338d
 8003250:	080033a9 	.word	0x080033a9
 8003254:	08003317 	.word	0x08003317
 8003258:	080033a9 	.word	0x080033a9
 800325c:	080033a9 	.word	0x080033a9
 8003260:	080033a9 	.word	0x080033a9
 8003264:	0800331f 	.word	0x0800331f
 8003268:	080033a9 	.word	0x080033a9
 800326c:	080033a9 	.word	0x080033a9
 8003270:	080033a9 	.word	0x080033a9
 8003274:	080033a9 	.word	0x080033a9
 8003278:	080033a9 	.word	0x080033a9
 800327c:	080033a9 	.word	0x080033a9
 8003280:	080033a9 	.word	0x080033a9
 8003284:	08003289 	.word	0x08003289
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8003288:	4b4d      	ldr	r3, [pc, #308]	; (80033c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800328e:	4b4c      	ldr	r3, [pc, #304]	; (80033c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 8088 	beq.w	80033ac <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	0c9b      	lsrs	r3, r3, #18
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	3330      	adds	r3, #48	; 0x30
 80032a6:	443b      	add	r3, r7
 80032a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032ac:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d017      	beq.n	80032e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032b8:	4b41      	ldr	r3, [pc, #260]	; (80033c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	0c5b      	lsrs	r3, r3, #17
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	3330      	adds	r3, #48	; 0x30
 80032c4:	443b      	add	r3, r7
 80032c6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80032d6:	4a3b      	ldr	r2, [pc, #236]	; (80033c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	fbb2 f2f3 	udiv	r2, r2, r3
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	fb02 f303 	mul.w	r3, r2, r3
 80032e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032e6:	e004      	b.n	80032f2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	4a37      	ldr	r2, [pc, #220]	; (80033c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80032ec:	fb02 f303 	mul.w	r3, r2, r3
 80032f0:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80032f2:	4b33      	ldr	r3, [pc, #204]	; (80033c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032fe:	d102      	bne.n	8003306 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8003300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8003304:	e052      	b.n	80033ac <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 8003306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	4a30      	ldr	r2, [pc, #192]	; (80033cc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	085b      	lsrs	r3, r3, #1
 8003312:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003314:	e04a      	b.n	80033ac <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003316:	f7ff fde3 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 800331a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800331c:	e049      	b.n	80033b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800331e:	f7ff fddf 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 8003322:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003324:	e045      	b.n	80033b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8003326:	4b26      	ldr	r3, [pc, #152]	; (80033c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003336:	d108      	bne.n	800334a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 8003342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28
 8003348:	e01f      	b.n	800338a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003354:	d109      	bne.n	800336a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8003356:	4b1a      	ldr	r3, [pc, #104]	; (80033c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 8003362:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
 8003368:	e00f      	b.n	800338a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003370:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003374:	d11c      	bne.n	80033b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8003376:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d016      	beq.n	80033b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 8003382:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003386:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8003388:	e012      	b.n	80033b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800338a:	e011      	b.n	80033b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800338c:	f7ff fe24 	bl	8002fd8 <HAL_RCC_GetPCLK2Freq>
 8003390:	4602      	mov	r2, r0
 8003392:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	0b9b      	lsrs	r3, r3, #14
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	3301      	adds	r3, #1
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80033a6:	e004      	b.n	80033b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 80033a8:	bf00      	nop
 80033aa:	e002      	b.n	80033b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 80033ac:	bf00      	nop
 80033ae:	e000      	b.n	80033b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 80033b0:	bf00      	nop
    }
  }
  return (frequency);
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3734      	adds	r7, #52	; 0x34
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd90      	pop	{r4, r7, pc}
 80033bc:	0800b150 	.word	0x0800b150
 80033c0:	40021000 	.word	0x40021000
 80033c4:	007a1200 	.word	0x007a1200
 80033c8:	003d0900 	.word	0x003d0900
 80033cc:	aaaaaaab 	.word	0xaaaaaaab

080033d0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e084      	b.n	80034f0 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	7c5b      	ldrb	r3, [r3, #17]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d105      	bne.n	80033fc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fe fc00 	bl	8001bfc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f9c8 	bl	8003798 <HAL_RTC_WaitForSynchro>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d004      	beq.n	8003418 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2204      	movs	r2, #4
 8003412:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e06b      	b.n	80034f0 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 fa81 	bl	8003920 <RTC_EnterInitMode>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d004      	beq.n	800342e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2204      	movs	r2, #4
 8003428:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e060      	b.n	80034f0 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0207 	bic.w	r2, r2, #7
 800343c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003446:	4b2c      	ldr	r3, [pc, #176]	; (80034f8 <HAL_RTC_Init+0x128>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	4a2b      	ldr	r2, [pc, #172]	; (80034f8 <HAL_RTC_Init+0x128>)
 800344c:	f023 0301 	bic.w	r3, r3, #1
 8003450:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003452:	4b29      	ldr	r3, [pc, #164]	; (80034f8 <HAL_RTC_Init+0x128>)
 8003454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003456:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	4926      	ldr	r1, [pc, #152]	; (80034f8 <HAL_RTC_Init+0x128>)
 8003460:	4313      	orrs	r3, r2
 8003462:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800346c:	d003      	beq.n	8003476 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	e00e      	b.n	8003494 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003476:	2001      	movs	r0, #1
 8003478:	f7ff fec6 	bl	8003208 <HAL_RCCEx_GetPeriphCLKFreq>
 800347c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d104      	bne.n	800348e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2204      	movs	r2, #4
 8003488:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e030      	b.n	80034f0 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	3b01      	subs	r3, #1
 8003492:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f023 010f 	bic.w	r1, r3, #15
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	0c1a      	lsrs	r2, r3, #16
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	041b      	lsls	r3, r3, #16
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	b291      	uxth	r1, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	430b      	orrs	r3, r1
 80034be:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fa55 	bl	8003970 <RTC_ExitInitMode>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d004      	beq.n	80034d6 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2204      	movs	r2, #4
 80034d0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e00c      	b.n	80034f0 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80034ee:	2300      	movs	r3, #0
  }
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40006c00 	.word	0x40006c00

080034fc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80034fc:	b590      	push	{r4, r7, lr}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d002      	beq.n	800351c <HAL_RTC_SetTime+0x20>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e080      	b.n	8003622 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	7c1b      	ldrb	r3, [r3, #16]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_RTC_SetTime+0x30>
 8003528:	2302      	movs	r3, #2
 800352a:	e07a      	b.n	8003622 <HAL_RTC_SetTime+0x126>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2201      	movs	r2, #1
 8003530:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2202      	movs	r2, #2
 8003536:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d113      	bne.n	8003566 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003548:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	785b      	ldrb	r3, [r3, #1]
 8003550:	4619      	mov	r1, r3
 8003552:	460b      	mov	r3, r1
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	1a5b      	subs	r3, r3, r1
 8003558:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800355a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003560:	4413      	add	r3, r2
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	e01e      	b.n	80035a4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fa28 	bl	80039c0 <RTC_Bcd2ToByte>
 8003570:	4603      	mov	r3, r0
 8003572:	461a      	mov	r2, r3
 8003574:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003578:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	785b      	ldrb	r3, [r3, #1]
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fa1d 	bl	80039c0 <RTC_Bcd2ToByte>
 8003586:	4603      	mov	r3, r0
 8003588:	461a      	mov	r2, r3
 800358a:	4613      	mov	r3, r2
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	1a9b      	subs	r3, r3, r2
 8003590:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003592:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	789b      	ldrb	r3, [r3, #2]
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fa11 	bl	80039c0 <RTC_Bcd2ToByte>
 800359e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80035a0:	4423      	add	r3, r4
 80035a2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80035a4:	6979      	ldr	r1, [r7, #20]
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 f953 	bl	8003852 <RTC_WriteTimeCounter>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d007      	beq.n	80035c2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2204      	movs	r2, #4
 80035b6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e02f      	b.n	8003622 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0205 	bic.w	r2, r2, #5
 80035d0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f964 	bl	80038a0 <RTC_ReadAlarmCounter>
 80035d8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035e0:	d018      	beq.n	8003614 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d214      	bcs.n	8003614 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80035f0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80035f4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80035f6:	6939      	ldr	r1, [r7, #16]
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f96a 	bl	80038d2 <RTC_WriteAlarmCounter>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2204      	movs	r2, #4
 8003608:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e006      	b.n	8003622 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2201      	movs	r2, #1
 8003618:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003620:	2300      	movs	r3, #0
  }
}
 8003622:	4618      	mov	r0, r3
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	bd90      	pop	{r4, r7, pc}
	...

0800362c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	61fb      	str	r3, [r7, #28]
 800363c:	2300      	movs	r3, #0
 800363e:	61bb      	str	r3, [r7, #24]
 8003640:	2300      	movs	r3, #0
 8003642:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <HAL_RTC_SetDate+0x24>
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e097      	b.n	8003784 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	7c1b      	ldrb	r3, [r3, #16]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_RTC_SetDate+0x34>
 800365c:	2302      	movs	r3, #2
 800365e:	e091      	b.n	8003784 <HAL_RTC_SetDate+0x158>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2202      	movs	r2, #2
 800366a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10c      	bne.n	800368c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	78da      	ldrb	r2, [r3, #3]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	785a      	ldrb	r2, [r3, #1]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	789a      	ldrb	r2, [r3, #2]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	739a      	strb	r2, [r3, #14]
 800368a:	e01a      	b.n	80036c2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	78db      	ldrb	r3, [r3, #3]
 8003690:	4618      	mov	r0, r3
 8003692:	f000 f995 	bl	80039c0 <RTC_Bcd2ToByte>
 8003696:	4603      	mov	r3, r0
 8003698:	461a      	mov	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	785b      	ldrb	r3, [r3, #1]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 f98c 	bl	80039c0 <RTC_Bcd2ToByte>
 80036a8:	4603      	mov	r3, r0
 80036aa:	461a      	mov	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	789b      	ldrb	r3, [r3, #2]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 f983 	bl	80039c0 <RTC_Bcd2ToByte>
 80036ba:	4603      	mov	r3, r0
 80036bc:	461a      	mov	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	7bdb      	ldrb	r3, [r3, #15]
 80036c6:	4618      	mov	r0, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	7b59      	ldrb	r1, [r3, #13]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	7b9b      	ldrb	r3, [r3, #14]
 80036d0:	461a      	mov	r2, r3
 80036d2:	f000 f993 	bl	80039fc <RTC_WeekDayNum>
 80036d6:	4603      	mov	r3, r0
 80036d8:	461a      	mov	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	7b1a      	ldrb	r2, [r3, #12]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 f883 	bl	80037f2 <RTC_ReadTimeCounter>
 80036ec:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4a26      	ldr	r2, [pc, #152]	; (800378c <HAL_RTC_SetDate+0x160>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	0adb      	lsrs	r3, r3, #11
 80036f8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2b18      	cmp	r3, #24
 80036fe:	d93a      	bls.n	8003776 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	4a23      	ldr	r2, [pc, #140]	; (8003790 <HAL_RTC_SetDate+0x164>)
 8003704:	fba2 2303 	umull	r2, r3, r2, r3
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	4a22      	ldr	r2, [pc, #136]	; (8003794 <HAL_RTC_SetDate+0x168>)
 800370c:	fb02 f303 	mul.w	r3, r2, r3
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003716:	69f9      	ldr	r1, [r7, #28]
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 f89a 	bl	8003852 <RTC_WriteTimeCounter>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d007      	beq.n	8003734 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2204      	movs	r2, #4
 8003728:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e027      	b.n	8003784 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 f8b3 	bl	80038a0 <RTC_ReadAlarmCounter>
 800373a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003742:	d018      	beq.n	8003776 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	429a      	cmp	r2, r3
 800374a:	d214      	bcs.n	8003776 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003752:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003756:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003758:	69b9      	ldr	r1, [r7, #24]
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f8b9 	bl	80038d2 <RTC_WriteAlarmCounter>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d007      	beq.n	8003776 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2204      	movs	r2, #4
 800376a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e006      	b.n	8003784 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3720      	adds	r7, #32
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	91a2b3c5 	.word	0x91a2b3c5
 8003790:	aaaaaaab 	.word	0xaaaaaaab
 8003794:	00015180 	.word	0x00015180

08003798 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e01d      	b.n	80037ea <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0208 	bic.w	r2, r2, #8
 80037bc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80037be:	f7fe fd23 	bl	8002208 <HAL_GetTick>
 80037c2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80037c4:	e009      	b.n	80037da <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80037c6:	f7fe fd1f 	bl	8002208 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037d4:	d901      	bls.n	80037da <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e007      	b.n	80037ea <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ee      	beq.n	80037c6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b087      	sub	sp, #28
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	827b      	strh	r3, [r7, #18]
 80037fe:	2300      	movs	r3, #0
 8003800:	823b      	strh	r3, [r7, #16]
 8003802:	2300      	movs	r3, #0
 8003804:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003822:	8a7a      	ldrh	r2, [r7, #18]
 8003824:	8a3b      	ldrh	r3, [r7, #16]
 8003826:	429a      	cmp	r2, r3
 8003828:	d008      	beq.n	800383c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800382a:	8a3b      	ldrh	r3, [r7, #16]
 800382c:	041a      	lsls	r2, r3, #16
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	b29b      	uxth	r3, r3
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	e004      	b.n	8003846 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800383c:	8a7b      	ldrh	r3, [r7, #18]
 800383e:	041a      	lsls	r2, r3, #16
 8003840:	89fb      	ldrh	r3, [r7, #14]
 8003842:	4313      	orrs	r3, r2
 8003844:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003846:	697b      	ldr	r3, [r7, #20]
}
 8003848:	4618      	mov	r0, r3
 800384a:	371c      	adds	r7, #28
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr

08003852 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f85d 	bl	8003920 <RTC_EnterInitMode>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
 8003870:	e011      	b.n	8003896 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	0c12      	lsrs	r2, r2, #16
 800387a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	b292      	uxth	r2, r2
 8003884:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f872 	bl	8003970 <RTC_ExitInitMode>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003896:	7bfb      	ldrb	r3, [r7, #15]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	81fb      	strh	r3, [r7, #14]
 80038ac:	2300      	movs	r3, #0
 80038ae:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80038c0:	89fb      	ldrh	r3, [r7, #14]
 80038c2:	041a      	lsls	r2, r3, #16
 80038c4:	89bb      	ldrh	r3, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr

080038d2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b084      	sub	sp, #16
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f81d 	bl	8003920 <RTC_EnterInitMode>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
 80038f0:	e011      	b.n	8003916 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	0c12      	lsrs	r2, r2, #16
 80038fa:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	b292      	uxth	r2, r2
 8003904:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f832 	bl	8003970 <RTC_ExitInitMode>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003916:	7bfb      	ldrb	r3, [r7, #15]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800392c:	f7fe fc6c 	bl	8002208 <HAL_GetTick>
 8003930:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003932:	e009      	b.n	8003948 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003934:	f7fe fc68 	bl	8002208 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003942:	d901      	bls.n	8003948 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e00f      	b.n	8003968 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0ee      	beq.n	8003934 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0210 	orr.w	r2, r2, #16
 8003964:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0210 	bic.w	r2, r2, #16
 800398a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800398c:	f7fe fc3c 	bl	8002208 <HAL_GetTick>
 8003990:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003992:	e009      	b.n	80039a8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003994:	f7fe fc38 	bl	8002208 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039a2:	d901      	bls.n	80039a8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e007      	b.n	80039b8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0ee      	beq.n	8003994 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	461a      	mov	r2, r3
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	4413      	add	r3, r2
 80039ee:	b2db      	uxtb	r3, r3
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr
	...

080039fc <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	70fb      	strb	r3, [r7, #3]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60bb      	str	r3, [r7, #8]
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003a1a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d82d      	bhi.n	8003a7e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003a22:	78fa      	ldrb	r2, [r7, #3]
 8003a24:	4613      	mov	r3, r2
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	4413      	add	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	1a9b      	subs	r3, r3, r2
 8003a2e:	4a2c      	ldr	r2, [pc, #176]	; (8003ae0 <RTC_WeekDayNum+0xe4>)
 8003a30:	fba2 2303 	umull	r2, r3, r2, r3
 8003a34:	085a      	lsrs	r2, r3, #1
 8003a36:	78bb      	ldrb	r3, [r7, #2]
 8003a38:	441a      	add	r2, r3
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	441a      	add	r2, r3
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	089b      	lsrs	r3, r3, #2
 8003a44:	441a      	add	r2, r3
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	4926      	ldr	r1, [pc, #152]	; (8003ae4 <RTC_WeekDayNum+0xe8>)
 8003a4c:	fba1 1303 	umull	r1, r3, r1, r3
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	1ad2      	subs	r2, r2, r3
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	4922      	ldr	r1, [pc, #136]	; (8003ae4 <RTC_WeekDayNum+0xe8>)
 8003a5a:	fba1 1303 	umull	r1, r3, r1, r3
 8003a5e:	09db      	lsrs	r3, r3, #7
 8003a60:	4413      	add	r3, r2
 8003a62:	1d1a      	adds	r2, r3, #4
 8003a64:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <RTC_WeekDayNum+0xec>)
 8003a66:	fba3 1302 	umull	r1, r3, r3, r2
 8003a6a:	1ad1      	subs	r1, r2, r3
 8003a6c:	0849      	lsrs	r1, r1, #1
 8003a6e:	440b      	add	r3, r1
 8003a70:	0899      	lsrs	r1, r3, #2
 8003a72:	460b      	mov	r3, r1
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	1a5b      	subs	r3, r3, r1
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	e029      	b.n	8003ad2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	4613      	mov	r3, r2
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	4413      	add	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	4a15      	ldr	r2, [pc, #84]	; (8003ae0 <RTC_WeekDayNum+0xe4>)
 8003a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a90:	085a      	lsrs	r2, r3, #1
 8003a92:	78bb      	ldrb	r3, [r7, #2]
 8003a94:	441a      	add	r2, r3
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	441a      	add	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	089b      	lsrs	r3, r3, #2
 8003a9e:	441a      	add	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4910      	ldr	r1, [pc, #64]	; (8003ae4 <RTC_WeekDayNum+0xe8>)
 8003aa4:	fba1 1303 	umull	r1, r3, r1, r3
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	1ad2      	subs	r2, r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	490d      	ldr	r1, [pc, #52]	; (8003ae4 <RTC_WeekDayNum+0xe8>)
 8003ab0:	fba1 1303 	umull	r1, r3, r1, r3
 8003ab4:	09db      	lsrs	r3, r3, #7
 8003ab6:	4413      	add	r3, r2
 8003ab8:	1c9a      	adds	r2, r3, #2
 8003aba:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <RTC_WeekDayNum+0xec>)
 8003abc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac0:	1ad1      	subs	r1, r2, r3
 8003ac2:	0849      	lsrs	r1, r1, #1
 8003ac4:	440b      	add	r3, r1
 8003ac6:	0899      	lsrs	r1, r3, #2
 8003ac8:	460b      	mov	r3, r1
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	1a5b      	subs	r3, r3, r1
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	b2db      	uxtb	r3, r3
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr
 8003ae0:	38e38e39 	.word	0x38e38e39
 8003ae4:	51eb851f 	.word	0x51eb851f
 8003ae8:	24924925 	.word	0x24924925

08003aec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e022      	b.n	8003b44 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d105      	bne.n	8003b16 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7fe f897 	bl	8001c44 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2203      	movs	r2, #3
 8003b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f814 	bl	8003b4c <HAL_SD_InitCard>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e00a      	b.n	8003b44 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003b4c:	b5b0      	push	{r4, r5, r7, lr}
 8003b4e:	b08e      	sub	sp, #56	; 0x38
 8003b50:	af04      	add	r7, sp, #16
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003b68:	2376      	movs	r3, #118	; 0x76
 8003b6a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681d      	ldr	r5, [r3, #0]
 8003b70:	466c      	mov	r4, sp
 8003b72:	f107 0314 	add.w	r3, r7, #20
 8003b76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003b7e:	f107 0308 	add.w	r3, r7, #8
 8003b82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b84:	4628      	mov	r0, r5
 8003b86:	f001 ff53 	bl	8005a30 <SDIO_Init>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e04c      	b.n	8003c36 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003b9c:	4b28      	ldr	r3, [pc, #160]	; (8003c40 <HAL_SD_InitCard+0xf4>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f001 ff88 	bl	8005abc <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003bac:	4b24      	ldr	r3, [pc, #144]	; (8003c40 <HAL_SD_InitCard+0xf4>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fe6a 	bl	800488c <SD_PowerON>
 8003bb8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00b      	beq.n	8003bd8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e02e      	b.n	8003c36 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fd88 	bl	80046ee <SD_InitCard>
 8003bde:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00b      	beq.n	8003bfe <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e01b      	b.n	8003c36 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c06:	4618      	mov	r0, r3
 8003c08:	f001 ffe6 	bl	8005bd8 <SDMMC_CmdBlockLength>
 8003c0c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00f      	beq.n	8003c34 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a0a      	ldr	r2, [pc, #40]	; (8003c44 <HAL_SD_InitCard+0xf8>)
 8003c1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3728      	adds	r7, #40	; 0x28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	423000a0 	.word	0x423000a0
 8003c44:	004005ff 	.word	0x004005ff

08003c48 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b092      	sub	sp, #72	; 0x48
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003c56:	f7fe fad7 	bl	8002208 <HAL_GetTick>
 8003c5a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d107      	bne.n	8003c7a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e1bd      	b.n	8003ff6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	f040 81b0 	bne.w	8003fe8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003c8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	441a      	add	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d907      	bls.n	8003cac <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e1a4      	b.n	8003ff6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2203      	movs	r2, #3
 8003cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d002      	beq.n	8003cca <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc6:	025b      	lsls	r3, r3, #9
 8003cc8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cce:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	025b      	lsls	r3, r3, #9
 8003cd4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003cd6:	2390      	movs	r3, #144	; 0x90
 8003cd8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f107 0214 	add.w	r2, r7, #20
 8003cee:	4611      	mov	r1, r2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f001 ff46 	bl	8005b82 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d90a      	bls.n	8003d12 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f001 ffa9 	bl	8005c60 <SDMMC_CmdReadMultiBlock>
 8003d0e:	6478      	str	r0, [r7, #68]	; 0x44
 8003d10:	e009      	b.n	8003d26 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f001 ff7c 	bl	8005c1c <SDMMC_CmdReadSingleBlock>
 8003d24:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d012      	beq.n	8003d52 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a7a      	ldr	r2, [pc, #488]	; (8003f1c <HAL_SD_ReadBlocks+0x2d4>)
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e151      	b.n	8003ff6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003d56:	e061      	b.n	8003e1c <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d03c      	beq.n	8003de0 <HAL_SD_ReadBlocks+0x198>
 8003d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d039      	beq.n	8003de0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	643b      	str	r3, [r7, #64]	; 0x40
 8003d70:	e033      	b.n	8003dda <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f001 fe84 	bl	8005a84 <SDIO_ReadFIFO>
 8003d7c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d84:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d88:	3301      	adds	r3, #1
 8003d8a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d94:	0a1b      	lsrs	r3, r3, #8
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d9a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d9e:	3301      	adds	r3, #1
 8003da0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da4:	3b01      	subs	r3, #1
 8003da6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003daa:	0c1b      	lsrs	r3, r3, #16
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db4:	3301      	adds	r3, #1
 8003db6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc0:	0e1b      	lsrs	r3, r3, #24
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dca:	3301      	adds	r3, #1
 8003dcc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	643b      	str	r3, [r7, #64]	; 0x40
 8003dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ddc:	2b07      	cmp	r3, #7
 8003dde:	d9c8      	bls.n	8003d72 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003de0:	f7fe fa12 	bl	8002208 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d902      	bls.n	8003df6 <HAL_SD_ReadBlocks+0x1ae>
 8003df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d112      	bne.n	8003e1c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a48      	ldr	r2, [pc, #288]	; (8003f1c <HAL_SD_ReadBlocks+0x2d4>)
 8003dfc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e02:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e0ec      	b.n	8003ff6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e22:	f240 332a 	movw	r3, #810	; 0x32a
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d095      	beq.n	8003d58 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d022      	beq.n	8003e80 <HAL_SD_ReadBlocks+0x238>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d91f      	bls.n	8003e80 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d01b      	beq.n	8003e80 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f001 ff6d 	bl	8005d2c <SDMMC_CmdStopTransfer>
 8003e52:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d012      	beq.n	8003e80 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a2f      	ldr	r2, [pc, #188]	; (8003f1c <HAL_SD_ReadBlocks+0x2d4>)
 8003e60:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e0ba      	b.n	8003ff6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d012      	beq.n	8003eb4 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a22      	ldr	r2, [pc, #136]	; (8003f1c <HAL_SD_ReadBlocks+0x2d4>)
 8003e94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	f043 0208 	orr.w	r2, r3, #8
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0a0      	b.n	8003ff6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d012      	beq.n	8003ee8 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a15      	ldr	r2, [pc, #84]	; (8003f1c <HAL_SD_ReadBlocks+0x2d4>)
 8003ec8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	f043 0202 	orr.w	r2, r3, #2
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e086      	b.n	8003ff6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d063      	beq.n	8003fbe <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a08      	ldr	r2, [pc, #32]	; (8003f1c <HAL_SD_ReadBlocks+0x2d4>)
 8003efc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	f043 0220 	orr.w	r2, r3, #32
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e06c      	b.n	8003ff6 <HAL_SD_ReadBlocks+0x3ae>
 8003f1c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f001 fdad 	bl	8005a84 <SDIO_ReadFIFO>
 8003f2a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f32:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f36:	3301      	adds	r3, #1
 8003f38:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f48:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f52:	3b01      	subs	r3, #1
 8003f54:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f58:	0c1b      	lsrs	r3, r3, #16
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f62:	3301      	adds	r3, #1
 8003f64:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6e:	0e1b      	lsrs	r3, r3, #24
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f74:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f78:	3301      	adds	r3, #1
 8003f7a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003f82:	f7fe f941 	bl	8002208 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d902      	bls.n	8003f98 <HAL_SD_ReadBlocks+0x350>
 8003f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d112      	bne.n	8003fbe <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a18      	ldr	r2, [pc, #96]	; (8004000 <HAL_SD_ReadBlocks+0x3b8>)
 8003f9e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e01b      	b.n	8003ff6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <HAL_SD_ReadBlocks+0x38a>
 8003fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1a6      	bne.n	8003f20 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f240 523a 	movw	r2, #1338	; 0x53a
 8003fda:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	e006      	b.n	8003ff6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
  }
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3748      	adds	r7, #72	; 0x48
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	004005ff 	.word	0x004005ff

08004004 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b092      	sub	sp, #72	; 0x48
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004012:	f7fe f8f9 	bl	8002208 <HAL_GetTick>
 8004016:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d107      	bne.n	8004036 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e166      	b.n	8004304 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b01      	cmp	r3, #1
 8004040:	f040 8159 	bne.w	80042f6 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800404a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	441a      	add	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004054:	429a      	cmp	r2, r3
 8004056:	d907      	bls.n	8004068 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e14d      	b.n	8004304 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2203      	movs	r2, #3
 800406c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2200      	movs	r2, #0
 8004076:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407c:	2b01      	cmp	r3, #1
 800407e:	d002      	beq.n	8004086 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004082:	025b      	lsls	r3, r3, #9
 8004084:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800408a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	025b      	lsls	r3, r3, #9
 8004090:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004092:	2390      	movs	r3, #144	; 0x90
 8004094:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004096:	2300      	movs	r3, #0
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800409a:	2300      	movs	r3, #0
 800409c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800409e:	2301      	movs	r3, #1
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f107 0218 	add.w	r2, r7, #24
 80040aa:	4611      	mov	r1, r2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f001 fd68 	bl	8005b82 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d90a      	bls.n	80040ce <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040c4:	4618      	mov	r0, r3
 80040c6:	f001 fe0f 	bl	8005ce8 <SDMMC_CmdWriteMultiBlock>
 80040ca:	6478      	str	r0, [r7, #68]	; 0x44
 80040cc:	e009      	b.n	80040e2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2210      	movs	r2, #16
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040da:	4618      	mov	r0, r3
 80040dc:	f001 fde2 	bl	8005ca4 <SDMMC_CmdWriteSingleBlock>
 80040e0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80040e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d012      	beq.n	800410e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a87      	ldr	r2, [pc, #540]	; (800430c <HAL_SD_WriteBlocks+0x308>)
 80040ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040f6:	431a      	orrs	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e0fa      	b.n	8004304 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004112:	e065      	b.n	80041e0 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d040      	beq.n	80041a4 <HAL_SD_WriteBlocks+0x1a0>
 8004122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004124:	2b00      	cmp	r3, #0
 8004126:	d03d      	beq.n	80041a4 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004128:	2300      	movs	r3, #0
 800412a:	643b      	str	r3, [r7, #64]	; 0x40
 800412c:	e037      	b.n	800419e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800412e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004136:	3301      	adds	r3, #1
 8004138:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800413a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800413c:	3b01      	subs	r3, #1
 800413e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	021a      	lsls	r2, r3, #8
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800414c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800414e:	3301      	adds	r3, #1
 8004150:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004154:	3b01      	subs	r3, #1
 8004156:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	041a      	lsls	r2, r3, #16
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004166:	3301      	adds	r3, #1
 8004168:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800416a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800416c:	3b01      	subs	r3, #1
 800416e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	061a      	lsls	r2, r3, #24
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800417c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800417e:	3301      	adds	r3, #1
 8004180:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004184:	3b01      	subs	r3, #1
 8004186:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f107 0214 	add.w	r2, r7, #20
 8004190:	4611      	mov	r1, r2
 8004192:	4618      	mov	r0, r3
 8004194:	f001 fc82 	bl	8005a9c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800419a:	3301      	adds	r3, #1
 800419c:	643b      	str	r3, [r7, #64]	; 0x40
 800419e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041a0:	2b07      	cmp	r3, #7
 80041a2:	d9c4      	bls.n	800412e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80041a4:	f7fe f830 	bl	8002208 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d902      	bls.n	80041ba <HAL_SD_WriteBlocks+0x1b6>
 80041b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d112      	bne.n	80041e0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a53      	ldr	r2, [pc, #332]	; (800430c <HAL_SD_WriteBlocks+0x308>)
 80041c0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041c8:	431a      	orrs	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e091      	b.n	8004304 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e6:	f240 331a 	movw	r3, #794	; 0x31a
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d091      	beq.n	8004114 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d022      	beq.n	8004244 <HAL_SD_WriteBlocks+0x240>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d91f      	bls.n	8004244 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004208:	2b03      	cmp	r3, #3
 800420a:	d01b      	beq.n	8004244 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f001 fd8b 	bl	8005d2c <SDMMC_CmdStopTransfer>
 8004216:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800421a:	2b00      	cmp	r3, #0
 800421c:	d012      	beq.n	8004244 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a3a      	ldr	r2, [pc, #232]	; (800430c <HAL_SD_WriteBlocks+0x308>)
 8004224:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800422a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800422c:	431a      	orrs	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e05f      	b.n	8004304 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d012      	beq.n	8004278 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a2d      	ldr	r2, [pc, #180]	; (800430c <HAL_SD_WriteBlocks+0x308>)
 8004258:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425e:	f043 0208 	orr.w	r2, r3, #8
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e045      	b.n	8004304 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d012      	beq.n	80042ac <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a20      	ldr	r2, [pc, #128]	; (800430c <HAL_SD_WriteBlocks+0x308>)
 800428c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004292:	f043 0202 	orr.w	r2, r3, #2
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e02b      	b.n	8004304 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d012      	beq.n	80042e0 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a13      	ldr	r2, [pc, #76]	; (800430c <HAL_SD_WriteBlocks+0x308>)
 80042c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	f043 0210 	orr.w	r2, r3, #16
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e011      	b.n	8004304 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f240 523a 	movw	r2, #1338	; 0x53a
 80042e8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e006      	b.n	8004304 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
  }
}
 8004304:	4618      	mov	r0, r3
 8004306:	3748      	adds	r7, #72	; 0x48
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	004005ff 	.word	0x004005ff

08004310 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800431e:	0f9b      	lsrs	r3, r3, #30
 8004320:	b2da      	uxtb	r2, r3
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800432a:	0e9b      	lsrs	r3, r3, #26
 800432c:	b2db      	uxtb	r3, r3
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	b2da      	uxtb	r2, r3
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800433c:	0e1b      	lsrs	r3, r3, #24
 800433e:	b2db      	uxtb	r3, r3
 8004340:	f003 0303 	and.w	r3, r3, #3
 8004344:	b2da      	uxtb	r2, r3
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800434e:	0c1b      	lsrs	r3, r3, #16
 8004350:	b2da      	uxtb	r2, r3
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800435a:	0a1b      	lsrs	r3, r3, #8
 800435c:	b2da      	uxtb	r2, r3
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004366:	b2da      	uxtb	r2, r3
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004370:	0d1b      	lsrs	r3, r3, #20
 8004372:	b29a      	uxth	r2, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800437c:	0c1b      	lsrs	r3, r3, #16
 800437e:	b2db      	uxtb	r3, r3
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	b2da      	uxtb	r2, r3
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800438e:	0bdb      	lsrs	r3, r3, #15
 8004390:	b2db      	uxtb	r3, r3
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	b2da      	uxtb	r2, r3
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043a0:	0b9b      	lsrs	r3, r3, #14
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043b2:	0b5b      	lsrs	r3, r3, #13
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043c4:	0b1b      	lsrs	r3, r3, #12
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2200      	movs	r2, #0
 80043d6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d163      	bne.n	80044a8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043e4:	009a      	lsls	r2, r3, #2
 80043e6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043ea:	4013      	ands	r3, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80043f0:	0f92      	lsrs	r2, r2, #30
 80043f2:	431a      	orrs	r2, r3
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043fc:	0edb      	lsrs	r3, r3, #27
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	b2da      	uxtb	r2, r3
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800440e:	0e1b      	lsrs	r3, r3, #24
 8004410:	b2db      	uxtb	r3, r3
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	b2da      	uxtb	r2, r3
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004420:	0d5b      	lsrs	r3, r3, #21
 8004422:	b2db      	uxtb	r3, r3
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	b2da      	uxtb	r2, r3
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004432:	0c9b      	lsrs	r3, r3, #18
 8004434:	b2db      	uxtb	r3, r3
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	b2da      	uxtb	r2, r3
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004444:	0bdb      	lsrs	r3, r3, #15
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	b2da      	uxtb	r2, r3
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	7e1b      	ldrb	r3, [r3, #24]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	3302      	adds	r3, #2
 8004468:	2201      	movs	r2, #1
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004472:	fb03 f202 	mul.w	r2, r3, r2
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	7a1b      	ldrb	r3, [r3, #8]
 800447e:	b2db      	uxtb	r3, r3
 8004480:	f003 030f 	and.w	r3, r3, #15
 8004484:	2201      	movs	r2, #1
 8004486:	409a      	lsls	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004494:	0a52      	lsrs	r2, r2, #9
 8004496:	fb03 f202 	mul.w	r2, r3, r2
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044a4:	661a      	str	r2, [r3, #96]	; 0x60
 80044a6:	e031      	b.n	800450c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d11d      	bne.n	80044ec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044b4:	041b      	lsls	r3, r3, #16
 80044b6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044be:	0c1b      	lsrs	r3, r3, #16
 80044c0:	431a      	orrs	r2, r3
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	3301      	adds	r3, #1
 80044cc:	029a      	lsls	r2, r3, #10
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044e0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	661a      	str	r2, [r3, #96]	; 0x60
 80044ea:	e00f      	b.n	800450c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a58      	ldr	r2, [pc, #352]	; (8004654 <HAL_SD_GetCardCSD+0x344>)
 80044f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e09d      	b.n	8004648 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004510:	0b9b      	lsrs	r3, r3, #14
 8004512:	b2db      	uxtb	r3, r3
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	b2da      	uxtb	r2, r3
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004522:	09db      	lsrs	r3, r3, #7
 8004524:	b2db      	uxtb	r3, r3
 8004526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800452a:	b2da      	uxtb	r2, r3
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004534:	b2db      	uxtb	r3, r3
 8004536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800453a:	b2da      	uxtb	r2, r3
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004544:	0fdb      	lsrs	r3, r3, #31
 8004546:	b2da      	uxtb	r2, r3
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004550:	0f5b      	lsrs	r3, r3, #29
 8004552:	b2db      	uxtb	r3, r3
 8004554:	f003 0303 	and.w	r3, r3, #3
 8004558:	b2da      	uxtb	r2, r3
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004562:	0e9b      	lsrs	r3, r3, #26
 8004564:	b2db      	uxtb	r3, r3
 8004566:	f003 0307 	and.w	r3, r3, #7
 800456a:	b2da      	uxtb	r2, r3
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004574:	0d9b      	lsrs	r3, r3, #22
 8004576:	b2db      	uxtb	r3, r3
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	b2da      	uxtb	r2, r3
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	0d5b      	lsrs	r3, r3, #21
 8004588:	b2db      	uxtb	r3, r3
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	b2da      	uxtb	r2, r3
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a2:	0c1b      	lsrs	r3, r3, #16
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b6:	0bdb      	lsrs	r3, r3, #15
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ca:	0b9b      	lsrs	r3, r3, #14
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045de:	0b5b      	lsrs	r3, r3, #13
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f2:	0b1b      	lsrs	r3, r3, #12
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004606:	0a9b      	lsrs	r3, r3, #10
 8004608:	b2db      	uxtb	r3, r3
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	b2da      	uxtb	r2, r3
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461a:	0a1b      	lsrs	r3, r3, #8
 800461c:	b2db      	uxtb	r3, r3
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	b2da      	uxtb	r2, r3
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	085b      	lsrs	r3, r3, #1
 8004630:	b2db      	uxtb	r3, r3
 8004632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004636:	b2da      	uxtb	r2, r3
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	004005ff 	.word	0x004005ff

08004658 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bc80      	pop	{r7}
 80046ac:	4770      	bx	lr

080046ae <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b086      	sub	sp, #24
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80046ba:	f107 030c 	add.w	r3, r7, #12
 80046be:	4619      	mov	r1, r3
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f971 	bl	80049a8 <SD_SendStatus>
 80046c6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	0a5b      	lsrs	r3, r3, #9
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80046e4:	693b      	ldr	r3, [r7, #16]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80046ee:	b5b0      	push	{r4, r5, r7, lr}
 80046f0:	b094      	sub	sp, #80	; 0x50
 80046f2:	af04      	add	r7, sp, #16
 80046f4:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80046f6:	2301      	movs	r3, #1
 80046f8:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f001 f9eb 	bl	8005ada <SDIO_GetPowerState>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d102      	bne.n	8004710 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800470a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800470e:	e0b8      	b.n	8004882 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004714:	2b03      	cmp	r3, #3
 8004716:	d02f      	beq.n	8004778 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4618      	mov	r0, r3
 800471e:	f001 fbcc 	bl	8005eba <SDMMC_CmdSendCID>
 8004722:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <SD_InitCard+0x40>
    {
      return errorstate;
 800472a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472c:	e0a9      	b.n	8004882 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2100      	movs	r1, #0
 8004734:	4618      	mov	r0, r3
 8004736:	f001 fa12 	bl	8005b5e <SDIO_GetResponse>
 800473a:	4602      	mov	r2, r0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2104      	movs	r1, #4
 8004746:	4618      	mov	r0, r3
 8004748:	f001 fa09 	bl	8005b5e <SDIO_GetResponse>
 800474c:	4602      	mov	r2, r0
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2108      	movs	r1, #8
 8004758:	4618      	mov	r0, r3
 800475a:	f001 fa00 	bl	8005b5e <SDIO_GetResponse>
 800475e:	4602      	mov	r2, r0
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	210c      	movs	r1, #12
 800476a:	4618      	mov	r0, r3
 800476c:	f001 f9f7 	bl	8005b5e <SDIO_GetResponse>
 8004770:	4602      	mov	r2, r0
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477c:	2b03      	cmp	r3, #3
 800477e:	d00d      	beq.n	800479c <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f107 020e 	add.w	r2, r7, #14
 8004788:	4611      	mov	r1, r2
 800478a:	4618      	mov	r0, r3
 800478c:	f001 fbd2 	bl	8005f34 <SDMMC_CmdSetRelAdd>
 8004790:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <SD_InitCard+0xae>
    {
      return errorstate;
 8004798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800479a:	e072      	b.n	8004882 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d036      	beq.n	8004812 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80047a4:	89fb      	ldrh	r3, [r7, #14]
 80047a6:	461a      	mov	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b4:	041b      	lsls	r3, r3, #16
 80047b6:	4619      	mov	r1, r3
 80047b8:	4610      	mov	r0, r2
 80047ba:	f001 fb9c 	bl	8005ef6 <SDMMC_CmdSendCSD>
 80047be:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80047c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <SD_InitCard+0xdc>
    {
      return errorstate;
 80047c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c8:	e05b      	b.n	8004882 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2100      	movs	r1, #0
 80047d0:	4618      	mov	r0, r3
 80047d2:	f001 f9c4 	bl	8005b5e <SDIO_GetResponse>
 80047d6:	4602      	mov	r2, r0
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2104      	movs	r1, #4
 80047e2:	4618      	mov	r0, r3
 80047e4:	f001 f9bb 	bl	8005b5e <SDIO_GetResponse>
 80047e8:	4602      	mov	r2, r0
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2108      	movs	r1, #8
 80047f4:	4618      	mov	r0, r3
 80047f6:	f001 f9b2 	bl	8005b5e <SDIO_GetResponse>
 80047fa:	4602      	mov	r2, r0
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	210c      	movs	r1, #12
 8004806:	4618      	mov	r0, r3
 8004808:	f001 f9a9 	bl	8005b5e <SDIO_GetResponse>
 800480c:	4602      	mov	r2, r0
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2104      	movs	r1, #4
 8004818:	4618      	mov	r0, r3
 800481a:	f001 f9a0 	bl	8005b5e <SDIO_GetResponse>
 800481e:	4603      	mov	r3, r0
 8004820:	0d1a      	lsrs	r2, r3, #20
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004826:	f107 0310 	add.w	r3, r7, #16
 800482a:	4619      	mov	r1, r3
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7ff fd6f 	bl	8004310 <HAL_SD_GetCardCSD>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004838:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800483c:	e021      	b.n	8004882 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6819      	ldr	r1, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004846:	041b      	lsls	r3, r3, #16
 8004848:	2200      	movs	r2, #0
 800484a:	461c      	mov	r4, r3
 800484c:	4615      	mov	r5, r2
 800484e:	4622      	mov	r2, r4
 8004850:	462b      	mov	r3, r5
 8004852:	4608      	mov	r0, r1
 8004854:	f001 fa8c 	bl	8005d70 <SDMMC_CmdSelDesel>
 8004858:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800485a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <SD_InitCard+0x176>
  {
    return errorstate;
 8004860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004862:	e00e      	b.n	8004882 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681d      	ldr	r5, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	466c      	mov	r4, sp
 800486c:	f103 0210 	add.w	r2, r3, #16
 8004870:	ca07      	ldmia	r2, {r0, r1, r2}
 8004872:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004876:	3304      	adds	r3, #4
 8004878:	cb0e      	ldmia	r3, {r1, r2, r3}
 800487a:	4628      	mov	r0, r5
 800487c:	f001 f8d8 	bl	8005a30 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3740      	adds	r7, #64	; 0x40
 8004886:	46bd      	mov	sp, r7
 8004888:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800488c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	2300      	movs	r3, #0
 800489e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f001 fa86 	bl	8005db6 <SDMMC_CmdGoIdleState>
 80048aa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	e072      	b.n	800499c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f001 fa99 	bl	8005df2 <SDMMC_CmdOperCond>
 80048c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00d      	beq.n	80048e4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f001 fa6f 	bl	8005db6 <SDMMC_CmdGoIdleState>
 80048d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d004      	beq.n	80048ea <SD_PowerON+0x5e>
    {
      return errorstate;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	e05b      	b.n	800499c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d137      	bne.n	8004962 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2100      	movs	r1, #0
 80048f8:	4618      	mov	r0, r3
 80048fa:	f001 fa99 	bl	8005e30 <SDMMC_CmdAppCommand>
 80048fe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d02d      	beq.n	8004962 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004906:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800490a:	e047      	b.n	800499c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2100      	movs	r1, #0
 8004912:	4618      	mov	r0, r3
 8004914:	f001 fa8c 	bl	8005e30 <SDMMC_CmdAppCommand>
 8004918:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <SD_PowerON+0x98>
    {
      return errorstate;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	e03b      	b.n	800499c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	491e      	ldr	r1, [pc, #120]	; (80049a4 <SD_PowerON+0x118>)
 800492a:	4618      	mov	r0, r3
 800492c:	f001 faa2 	bl	8005e74 <SDMMC_CmdAppOperCommand>
 8004930:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004938:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800493c:	e02e      	b.n	800499c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2100      	movs	r1, #0
 8004944:	4618      	mov	r0, r3
 8004946:	f001 f90a 	bl	8005b5e <SDIO_GetResponse>
 800494a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	0fdb      	lsrs	r3, r3, #31
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <SD_PowerON+0xcc>
 8004954:	2301      	movs	r3, #1
 8004956:	e000      	b.n	800495a <SD_PowerON+0xce>
 8004958:	2300      	movs	r3, #0
 800495a:	613b      	str	r3, [r7, #16]

    count++;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	3301      	adds	r3, #1
 8004960:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004968:	4293      	cmp	r3, r2
 800496a:	d802      	bhi.n	8004972 <SD_PowerON+0xe6>
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0cc      	beq.n	800490c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004978:	4293      	cmp	r3, r2
 800497a:	d902      	bls.n	8004982 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800497c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004980:	e00c      	b.n	800499c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	645a      	str	r2, [r3, #68]	; 0x44
 8004992:	e002      	b.n	800499a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	c1100000 	.word	0xc1100000

080049a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d102      	bne.n	80049be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80049b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049bc:	e018      	b.n	80049f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c6:	041b      	lsls	r3, r3, #16
 80049c8:	4619      	mov	r1, r3
 80049ca:	4610      	mov	r0, r2
 80049cc:	f001 fad3 	bl	8005f76 <SDMMC_CmdSendStatus>
 80049d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <SD_SendStatus+0x34>
  {
    return errorstate;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	e009      	b.n	80049f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2100      	movs	r1, #0
 80049e2:	4618      	mov	r0, r3
 80049e4:	f001 f8bb 	bl	8005b5e <SDIO_GetResponse>
 80049e8:	4602      	mov	r2, r0
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e041      	b.n	8004a8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fd f96a 	bl	8001cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3304      	adds	r3, #4
 8004a34:	4619      	mov	r1, r3
 8004a36:	4610      	mov	r0, r2
 8004a38:	f000 fb94 	bl	8005164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d001      	beq.n	8004ab0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e044      	b.n	8004b3a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0201 	orr.w	r2, r2, #1
 8004ac6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a1d      	ldr	r2, [pc, #116]	; (8004b44 <HAL_TIM_Base_Start_IT+0xac>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d018      	beq.n	8004b04 <HAL_TIM_Base_Start_IT+0x6c>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a1c      	ldr	r2, [pc, #112]	; (8004b48 <HAL_TIM_Base_Start_IT+0xb0>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d013      	beq.n	8004b04 <HAL_TIM_Base_Start_IT+0x6c>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae4:	d00e      	beq.n	8004b04 <HAL_TIM_Base_Start_IT+0x6c>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a18      	ldr	r2, [pc, #96]	; (8004b4c <HAL_TIM_Base_Start_IT+0xb4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d009      	beq.n	8004b04 <HAL_TIM_Base_Start_IT+0x6c>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a16      	ldr	r2, [pc, #88]	; (8004b50 <HAL_TIM_Base_Start_IT+0xb8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d004      	beq.n	8004b04 <HAL_TIM_Base_Start_IT+0x6c>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a15      	ldr	r2, [pc, #84]	; (8004b54 <HAL_TIM_Base_Start_IT+0xbc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d111      	bne.n	8004b28 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b06      	cmp	r3, #6
 8004b14:	d010      	beq.n	8004b38 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0201 	orr.w	r2, r2, #1
 8004b24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b26:	e007      	b.n	8004b38 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0201 	orr.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr
 8004b44:	40012c00 	.word	0x40012c00
 8004b48:	40013400 	.word	0x40013400
 8004b4c:	40000400 	.word	0x40000400
 8004b50:	40000800 	.word	0x40000800
 8004b54:	40000c00 	.word	0x40000c00

08004b58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e041      	b.n	8004bee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f839 	bl	8004bf6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3304      	adds	r3, #4
 8004b94:	4619      	mov	r1, r3
 8004b96:	4610      	mov	r0, r2
 8004b98:	f000 fae4 	bl	8005164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc80      	pop	{r7}
 8004c06:	4770      	bx	lr

08004c08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d122      	bne.n	8004c64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d11b      	bne.n	8004c64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f06f 0202 	mvn.w	r2, #2
 8004c34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fa6f 	bl	800512e <HAL_TIM_IC_CaptureCallback>
 8004c50:	e005      	b.n	8004c5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fa62 	bl	800511c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fa71 	bl	8005140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d122      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d11b      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0204 	mvn.w	r2, #4
 8004c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fa45 	bl	800512e <HAL_TIM_IC_CaptureCallback>
 8004ca4:	e005      	b.n	8004cb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fa38 	bl	800511c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fa47 	bl	8005140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b08      	cmp	r3, #8
 8004cc4:	d122      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d11b      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0208 	mvn.w	r2, #8
 8004cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2204      	movs	r2, #4
 8004ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fa1b 	bl	800512e <HAL_TIM_IC_CaptureCallback>
 8004cf8:	e005      	b.n	8004d06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fa0e 	bl	800511c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fa1d 	bl	8005140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f003 0310 	and.w	r3, r3, #16
 8004d16:	2b10      	cmp	r3, #16
 8004d18:	d122      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0310 	and.w	r3, r3, #16
 8004d24:	2b10      	cmp	r3, #16
 8004d26:	d11b      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0210 	mvn.w	r2, #16
 8004d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2208      	movs	r2, #8
 8004d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f9f1 	bl	800512e <HAL_TIM_IC_CaptureCallback>
 8004d4c:	e005      	b.n	8004d5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f9e4 	bl	800511c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f9f3 	bl	8005140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d10e      	bne.n	8004d8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d107      	bne.n	8004d8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f06f 0201 	mvn.w	r2, #1
 8004d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fc fefe 	bl	8001b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d96:	2b80      	cmp	r3, #128	; 0x80
 8004d98:	d10e      	bne.n	8004db8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da4:	2b80      	cmp	r3, #128	; 0x80
 8004da6:	d107      	bne.n	8004db8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fd58 	bl	8005868 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc2:	2b40      	cmp	r3, #64	; 0x40
 8004dc4:	d10e      	bne.n	8004de4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd0:	2b40      	cmp	r3, #64	; 0x40
 8004dd2:	d107      	bne.n	8004de4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f9b7 	bl	8005152 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	2b20      	cmp	r3, #32
 8004df0:	d10e      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f003 0320 	and.w	r3, r3, #32
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	d107      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0220 	mvn.w	r2, #32
 8004e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fd23 	bl	8005856 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e10:	bf00      	nop
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e0ac      	b.n	8004f8c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b0c      	cmp	r3, #12
 8004e3e:	f200 809f 	bhi.w	8004f80 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004e42:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e48:	08004e7d 	.word	0x08004e7d
 8004e4c:	08004f81 	.word	0x08004f81
 8004e50:	08004f81 	.word	0x08004f81
 8004e54:	08004f81 	.word	0x08004f81
 8004e58:	08004ebd 	.word	0x08004ebd
 8004e5c:	08004f81 	.word	0x08004f81
 8004e60:	08004f81 	.word	0x08004f81
 8004e64:	08004f81 	.word	0x08004f81
 8004e68:	08004eff 	.word	0x08004eff
 8004e6c:	08004f81 	.word	0x08004f81
 8004e70:	08004f81 	.word	0x08004f81
 8004e74:	08004f81 	.word	0x08004f81
 8004e78:	08004f3f 	.word	0x08004f3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68b9      	ldr	r1, [r7, #8]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 f9e8 	bl	8005258 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699a      	ldr	r2, [r3, #24]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0208 	orr.w	r2, r2, #8
 8004e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699a      	ldr	r2, [r3, #24]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0204 	bic.w	r2, r2, #4
 8004ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6999      	ldr	r1, [r3, #24]
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	619a      	str	r2, [r3, #24]
      break;
 8004eba:	e062      	b.n	8004f82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68b9      	ldr	r1, [r7, #8]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fa38 	bl	8005338 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	699a      	ldr	r2, [r3, #24]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6999      	ldr	r1, [r3, #24]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	021a      	lsls	r2, r3, #8
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	619a      	str	r2, [r3, #24]
      break;
 8004efc:	e041      	b.n	8004f82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68b9      	ldr	r1, [r7, #8]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fa8b 	bl	8005420 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69da      	ldr	r2, [r3, #28]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 0208 	orr.w	r2, r2, #8
 8004f18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69da      	ldr	r2, [r3, #28]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0204 	bic.w	r2, r2, #4
 8004f28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69d9      	ldr	r1, [r3, #28]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	61da      	str	r2, [r3, #28]
      break;
 8004f3c:	e021      	b.n	8004f82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fadf 	bl	8005508 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	69da      	ldr	r2, [r3, #28]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	69da      	ldr	r2, [r3, #28]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69d9      	ldr	r1, [r3, #28]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	021a      	lsls	r2, r3, #8
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	61da      	str	r2, [r3, #28]
      break;
 8004f7e:	e000      	b.n	8004f82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004f80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d101      	bne.n	8004fac <HAL_TIM_ConfigClockSource+0x18>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	e0b3      	b.n	8005114 <HAL_TIM_ConfigClockSource+0x180>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fd2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fe4:	d03e      	beq.n	8005064 <HAL_TIM_ConfigClockSource+0xd0>
 8004fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fea:	f200 8087 	bhi.w	80050fc <HAL_TIM_ConfigClockSource+0x168>
 8004fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff2:	f000 8085 	beq.w	8005100 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffa:	d87f      	bhi.n	80050fc <HAL_TIM_ConfigClockSource+0x168>
 8004ffc:	2b70      	cmp	r3, #112	; 0x70
 8004ffe:	d01a      	beq.n	8005036 <HAL_TIM_ConfigClockSource+0xa2>
 8005000:	2b70      	cmp	r3, #112	; 0x70
 8005002:	d87b      	bhi.n	80050fc <HAL_TIM_ConfigClockSource+0x168>
 8005004:	2b60      	cmp	r3, #96	; 0x60
 8005006:	d050      	beq.n	80050aa <HAL_TIM_ConfigClockSource+0x116>
 8005008:	2b60      	cmp	r3, #96	; 0x60
 800500a:	d877      	bhi.n	80050fc <HAL_TIM_ConfigClockSource+0x168>
 800500c:	2b50      	cmp	r3, #80	; 0x50
 800500e:	d03c      	beq.n	800508a <HAL_TIM_ConfigClockSource+0xf6>
 8005010:	2b50      	cmp	r3, #80	; 0x50
 8005012:	d873      	bhi.n	80050fc <HAL_TIM_ConfigClockSource+0x168>
 8005014:	2b40      	cmp	r3, #64	; 0x40
 8005016:	d058      	beq.n	80050ca <HAL_TIM_ConfigClockSource+0x136>
 8005018:	2b40      	cmp	r3, #64	; 0x40
 800501a:	d86f      	bhi.n	80050fc <HAL_TIM_ConfigClockSource+0x168>
 800501c:	2b30      	cmp	r3, #48	; 0x30
 800501e:	d064      	beq.n	80050ea <HAL_TIM_ConfigClockSource+0x156>
 8005020:	2b30      	cmp	r3, #48	; 0x30
 8005022:	d86b      	bhi.n	80050fc <HAL_TIM_ConfigClockSource+0x168>
 8005024:	2b20      	cmp	r3, #32
 8005026:	d060      	beq.n	80050ea <HAL_TIM_ConfigClockSource+0x156>
 8005028:	2b20      	cmp	r3, #32
 800502a:	d867      	bhi.n	80050fc <HAL_TIM_ConfigClockSource+0x168>
 800502c:	2b00      	cmp	r3, #0
 800502e:	d05c      	beq.n	80050ea <HAL_TIM_ConfigClockSource+0x156>
 8005030:	2b10      	cmp	r3, #16
 8005032:	d05a      	beq.n	80050ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005034:	e062      	b.n	80050fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6899      	ldr	r1, [r3, #8]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f000 fb2a 	bl	800569e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005058:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	609a      	str	r2, [r3, #8]
      break;
 8005062:	e04e      	b.n	8005102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6818      	ldr	r0, [r3, #0]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	6899      	ldr	r1, [r3, #8]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f000 fb13 	bl	800569e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005086:	609a      	str	r2, [r3, #8]
      break;
 8005088:	e03b      	b.n	8005102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	6859      	ldr	r1, [r3, #4]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	461a      	mov	r2, r3
 8005098:	f000 fa8a 	bl	80055b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2150      	movs	r1, #80	; 0x50
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fae1 	bl	800566a <TIM_ITRx_SetConfig>
      break;
 80050a8:	e02b      	b.n	8005102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6818      	ldr	r0, [r3, #0]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	6859      	ldr	r1, [r3, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	461a      	mov	r2, r3
 80050b8:	f000 faa8 	bl	800560c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2160      	movs	r1, #96	; 0x60
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fad1 	bl	800566a <TIM_ITRx_SetConfig>
      break;
 80050c8:	e01b      	b.n	8005102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6818      	ldr	r0, [r3, #0]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	6859      	ldr	r1, [r3, #4]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	461a      	mov	r2, r3
 80050d8:	f000 fa6a 	bl	80055b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2140      	movs	r1, #64	; 0x40
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fac1 	bl	800566a <TIM_ITRx_SetConfig>
      break;
 80050e8:	e00b      	b.n	8005102 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4619      	mov	r1, r3
 80050f4:	4610      	mov	r0, r2
 80050f6:	f000 fab8 	bl	800566a <TIM_ITRx_SetConfig>
        break;
 80050fa:	e002      	b.n	8005102 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80050fc:	bf00      	nop
 80050fe:	e000      	b.n	8005102 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005100:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	bc80      	pop	{r7}
 800512c:	4770      	bx	lr

0800512e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr

08005140 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	4770      	bx	lr

08005152 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr

08005164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a33      	ldr	r2, [pc, #204]	; (8005244 <TIM_Base_SetConfig+0xe0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d013      	beq.n	80051a4 <TIM_Base_SetConfig+0x40>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a32      	ldr	r2, [pc, #200]	; (8005248 <TIM_Base_SetConfig+0xe4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d00f      	beq.n	80051a4 <TIM_Base_SetConfig+0x40>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518a:	d00b      	beq.n	80051a4 <TIM_Base_SetConfig+0x40>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a2f      	ldr	r2, [pc, #188]	; (800524c <TIM_Base_SetConfig+0xe8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d007      	beq.n	80051a4 <TIM_Base_SetConfig+0x40>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a2e      	ldr	r2, [pc, #184]	; (8005250 <TIM_Base_SetConfig+0xec>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d003      	beq.n	80051a4 <TIM_Base_SetConfig+0x40>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a2d      	ldr	r2, [pc, #180]	; (8005254 <TIM_Base_SetConfig+0xf0>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d108      	bne.n	80051b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a22      	ldr	r2, [pc, #136]	; (8005244 <TIM_Base_SetConfig+0xe0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d013      	beq.n	80051e6 <TIM_Base_SetConfig+0x82>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a21      	ldr	r2, [pc, #132]	; (8005248 <TIM_Base_SetConfig+0xe4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00f      	beq.n	80051e6 <TIM_Base_SetConfig+0x82>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051cc:	d00b      	beq.n	80051e6 <TIM_Base_SetConfig+0x82>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a1e      	ldr	r2, [pc, #120]	; (800524c <TIM_Base_SetConfig+0xe8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d007      	beq.n	80051e6 <TIM_Base_SetConfig+0x82>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a1d      	ldr	r2, [pc, #116]	; (8005250 <TIM_Base_SetConfig+0xec>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d003      	beq.n	80051e6 <TIM_Base_SetConfig+0x82>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a1c      	ldr	r2, [pc, #112]	; (8005254 <TIM_Base_SetConfig+0xf0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d108      	bne.n	80051f8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a09      	ldr	r2, [pc, #36]	; (8005244 <TIM_Base_SetConfig+0xe0>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_Base_SetConfig+0xc8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a08      	ldr	r2, [pc, #32]	; (8005248 <TIM_Base_SetConfig+0xe4>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d103      	bne.n	8005234 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	691a      	ldr	r2, [r3, #16]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	615a      	str	r2, [r3, #20]
}
 800523a:	bf00      	nop
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	bc80      	pop	{r7}
 8005242:	4770      	bx	lr
 8005244:	40012c00 	.word	0x40012c00
 8005248:	40013400 	.word	0x40013400
 800524c:	40000400 	.word	0x40000400
 8005250:	40000800 	.word	0x40000800
 8005254:	40000c00 	.word	0x40000c00

08005258 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f023 0201 	bic.w	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0303 	bic.w	r3, r3, #3
 800528e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f023 0302 	bic.w	r3, r3, #2
 80052a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a20      	ldr	r2, [pc, #128]	; (8005330 <TIM_OC1_SetConfig+0xd8>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d003      	beq.n	80052bc <TIM_OC1_SetConfig+0x64>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a1f      	ldr	r2, [pc, #124]	; (8005334 <TIM_OC1_SetConfig+0xdc>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d10c      	bne.n	80052d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f023 0308 	bic.w	r3, r3, #8
 80052c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f023 0304 	bic.w	r3, r3, #4
 80052d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a15      	ldr	r2, [pc, #84]	; (8005330 <TIM_OC1_SetConfig+0xd8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d003      	beq.n	80052e6 <TIM_OC1_SetConfig+0x8e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a14      	ldr	r2, [pc, #80]	; (8005334 <TIM_OC1_SetConfig+0xdc>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d111      	bne.n	800530a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	4313      	orrs	r3, r2
 8005308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	621a      	str	r2, [r3, #32]
}
 8005324:	bf00      	nop
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	40012c00 	.word	0x40012c00
 8005334:	40013400 	.word	0x40013400

08005338 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	f023 0210 	bic.w	r2, r3, #16
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800536e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4313      	orrs	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f023 0320 	bic.w	r3, r3, #32
 8005382:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a21      	ldr	r2, [pc, #132]	; (8005418 <TIM_OC2_SetConfig+0xe0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d003      	beq.n	80053a0 <TIM_OC2_SetConfig+0x68>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a20      	ldr	r2, [pc, #128]	; (800541c <TIM_OC2_SetConfig+0xe4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d10d      	bne.n	80053bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a16      	ldr	r2, [pc, #88]	; (8005418 <TIM_OC2_SetConfig+0xe0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d003      	beq.n	80053cc <TIM_OC2_SetConfig+0x94>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a15      	ldr	r2, [pc, #84]	; (800541c <TIM_OC2_SetConfig+0xe4>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d113      	bne.n	80053f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	621a      	str	r2, [r3, #32]
}
 800540e:	bf00      	nop
 8005410:	371c      	adds	r7, #28
 8005412:	46bd      	mov	sp, r7
 8005414:	bc80      	pop	{r7}
 8005416:	4770      	bx	lr
 8005418:	40012c00 	.word	0x40012c00
 800541c:	40013400 	.word	0x40013400

08005420 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005420:	b480      	push	{r7}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0303 	bic.w	r3, r3, #3
 8005456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a21      	ldr	r2, [pc, #132]	; (8005500 <TIM_OC3_SetConfig+0xe0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d003      	beq.n	8005486 <TIM_OC3_SetConfig+0x66>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a20      	ldr	r2, [pc, #128]	; (8005504 <TIM_OC3_SetConfig+0xe4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d10d      	bne.n	80054a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800548c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	021b      	lsls	r3, r3, #8
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	4313      	orrs	r3, r2
 8005498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a16      	ldr	r2, [pc, #88]	; (8005500 <TIM_OC3_SetConfig+0xe0>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d003      	beq.n	80054b2 <TIM_OC3_SetConfig+0x92>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a15      	ldr	r2, [pc, #84]	; (8005504 <TIM_OC3_SetConfig+0xe4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d113      	bne.n	80054da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	621a      	str	r2, [r3, #32]
}
 80054f4:	bf00      	nop
 80054f6:	371c      	adds	r7, #28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bc80      	pop	{r7}
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	40012c00 	.word	0x40012c00
 8005504:	40013400 	.word	0x40013400

08005508 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800553e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	021b      	lsls	r3, r3, #8
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	4313      	orrs	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	031b      	lsls	r3, r3, #12
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a11      	ldr	r2, [pc, #68]	; (80055a8 <TIM_OC4_SetConfig+0xa0>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d003      	beq.n	8005570 <TIM_OC4_SetConfig+0x68>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a10      	ldr	r2, [pc, #64]	; (80055ac <TIM_OC4_SetConfig+0xa4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d109      	bne.n	8005584 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005576:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	019b      	lsls	r3, r3, #6
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr
 80055a8:	40012c00 	.word	0x40012c00
 80055ac:	40013400 	.word	0x40013400

080055b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	f023 0201 	bic.w	r2, r3, #1
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f023 030a 	bic.w	r3, r3, #10
 80055ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	621a      	str	r2, [r3, #32]
}
 8005602:	bf00      	nop
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr

0800560c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	f023 0210 	bic.w	r2, r3, #16
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005636:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	031b      	lsls	r3, r3, #12
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005648:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	621a      	str	r2, [r3, #32]
}
 8005660:	bf00      	nop
 8005662:	371c      	adds	r7, #28
 8005664:	46bd      	mov	sp, r7
 8005666:	bc80      	pop	{r7}
 8005668:	4770      	bx	lr

0800566a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800566a:	b480      	push	{r7}
 800566c:	b085      	sub	sp, #20
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	f043 0307 	orr.w	r3, r3, #7
 800568c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	609a      	str	r2, [r3, #8]
}
 8005694:	bf00      	nop
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	bc80      	pop	{r7}
 800569c:	4770      	bx	lr

0800569e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800569e:	b480      	push	{r7}
 80056a0:	b087      	sub	sp, #28
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	607a      	str	r2, [r7, #4]
 80056aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	021a      	lsls	r2, r3, #8
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	431a      	orrs	r2, r3
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	609a      	str	r2, [r3, #8]
}
 80056d2:	bf00      	nop
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr

080056dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e050      	b.n	8005796 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a1b      	ldr	r2, [pc, #108]	; (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d018      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a19      	ldr	r2, [pc, #100]	; (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d013      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574a:	d00e      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a15      	ldr	r2, [pc, #84]	; (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d009      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a14      	ldr	r2, [pc, #80]	; (80057ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d004      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a12      	ldr	r2, [pc, #72]	; (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d10c      	bne.n	8005784 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005770:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	4313      	orrs	r3, r2
 800577a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	bc80      	pop	{r7}
 800579e:	4770      	bx	lr
 80057a0:	40012c00 	.word	0x40012c00
 80057a4:	40013400 	.word	0x40013400
 80057a8:	40000400 	.word	0x40000400
 80057ac:	40000800 	.word	0x40000800
 80057b0:	40000c00 	.word	0x40000c00

080057b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057cc:	2302      	movs	r3, #2
 80057ce:	e03d      	b.n	800584c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4313      	orrs	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	bc80      	pop	{r7}
 8005854:	4770      	bx	lr

08005856 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	bc80      	pop	{r7}
 8005866:	4770      	bx	lr

08005868 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	bc80      	pop	{r7}
 8005878:	4770      	bx	lr

0800587a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e03f      	b.n	800590c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d106      	bne.n	80058a6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7fc fa8f 	bl	8001dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2224      	movs	r2, #36	; 0x24
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058bc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f828 	bl	8005914 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691a      	ldr	r2, [r3, #16]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695a      	ldr	r2, [r3, #20]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058e2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058f2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2220      	movs	r2, #32
 80058fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68da      	ldr	r2, [r3, #12]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689a      	ldr	r2, [r3, #8]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	4313      	orrs	r3, r2
 8005942:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800594e:	f023 030c 	bic.w	r3, r3, #12
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6812      	ldr	r2, [r2, #0]
 8005956:	68b9      	ldr	r1, [r7, #8]
 8005958:	430b      	orrs	r3, r1
 800595a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a2c      	ldr	r2, [pc, #176]	; (8005a28 <UART_SetConfig+0x114>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d103      	bne.n	8005984 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800597c:	f7fd fb2c 	bl	8002fd8 <HAL_RCC_GetPCLK2Freq>
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	e002      	b.n	800598a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005984:	f7fd fb14 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8005988:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	4613      	mov	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	009a      	lsls	r2, r3, #2
 8005994:	441a      	add	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a0:	4a22      	ldr	r2, [pc, #136]	; (8005a2c <UART_SetConfig+0x118>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	0119      	lsls	r1, r3, #4
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	009a      	lsls	r2, r3, #2
 80059b4:	441a      	add	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80059c0:	4b1a      	ldr	r3, [pc, #104]	; (8005a2c <UART_SetConfig+0x118>)
 80059c2:	fba3 0302 	umull	r0, r3, r3, r2
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	2064      	movs	r0, #100	; 0x64
 80059ca:	fb00 f303 	mul.w	r3, r0, r3
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	011b      	lsls	r3, r3, #4
 80059d2:	3332      	adds	r3, #50	; 0x32
 80059d4:	4a15      	ldr	r2, [pc, #84]	; (8005a2c <UART_SetConfig+0x118>)
 80059d6:	fba2 2303 	umull	r2, r3, r2, r3
 80059da:	095b      	lsrs	r3, r3, #5
 80059dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059e0:	4419      	add	r1, r3
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4613      	mov	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	009a      	lsls	r2, r3, #2
 80059ec:	441a      	add	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80059f8:	4b0c      	ldr	r3, [pc, #48]	; (8005a2c <UART_SetConfig+0x118>)
 80059fa:	fba3 0302 	umull	r0, r3, r3, r2
 80059fe:	095b      	lsrs	r3, r3, #5
 8005a00:	2064      	movs	r0, #100	; 0x64
 8005a02:	fb00 f303 	mul.w	r3, r0, r3
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	011b      	lsls	r3, r3, #4
 8005a0a:	3332      	adds	r3, #50	; 0x32
 8005a0c:	4a07      	ldr	r2, [pc, #28]	; (8005a2c <UART_SetConfig+0x118>)
 8005a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a12:	095b      	lsrs	r3, r3, #5
 8005a14:	f003 020f 	and.w	r2, r3, #15
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	440a      	add	r2, r1
 8005a1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a20:	bf00      	nop
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40013800 	.word	0x40013800
 8005a2c:	51eb851f 	.word	0x51eb851f

08005a30 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005a30:	b084      	sub	sp, #16
 8005a32:	b480      	push	{r7}
 8005a34:	b085      	sub	sp, #20
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	f107 001c 	add.w	r0, r7, #28
 8005a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005a46:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005a48:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005a4a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005a4e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005a52:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005a56:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005a5a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005a6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	431a      	orrs	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bc80      	pop	{r7}
 8005a80:	b004      	add	sp, #16
 8005a82:	4770      	bx	lr

08005a84 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bc80      	pop	{r7}
 8005a9a:	4770      	bx	lr

08005a9c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bc80      	pop	{r7}
 8005aba:	4770      	bx	lr

08005abc <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2203      	movs	r2, #3
 8005ac8:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005aca:	2002      	movs	r0, #2
 8005acc:	f7fc fba6 	bl	800221c <HAL_Delay>
  
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0303 	and.w	r3, r3, #3
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bc80      	pop	{r7}
 8005af2:	4770      	bx	lr

08005af4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005afe:	2300      	movs	r3, #0
 8005b00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005b12:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005b18:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005b1e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005b2e:	f023 030f 	bic.w	r3, r3, #15
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	431a      	orrs	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr

08005b46 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	b2db      	uxtb	r3, r3
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bc80      	pop	{r7}
 8005b5c:	4770      	bx	lr

08005b5e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b085      	sub	sp, #20
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3314      	adds	r3, #20
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	4413      	add	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
}  
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bc80      	pop	{r7}
 8005b80:	4770      	bx	lr

08005b82 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b085      	sub	sp, #20
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005ba8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005bae:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005bb4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0

}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bc80      	pop	{r7}
 8005bd6:	4770      	bx	lr

08005bd8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b088      	sub	sp, #32
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005be6:	2310      	movs	r3, #16
 8005be8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005bea:	2340      	movs	r3, #64	; 0x40
 8005bec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bf6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005bf8:	f107 0308 	add.w	r3, r7, #8
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7ff ff78 	bl	8005af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c08:	2110      	movs	r1, #16
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fa00 	bl	8006010 <SDMMC_GetCmdResp1>
 8005c10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c12:	69fb      	ldr	r3, [r7, #28]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3720      	adds	r7, #32
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b088      	sub	sp, #32
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005c2a:	2311      	movs	r3, #17
 8005c2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c2e:	2340      	movs	r3, #64	; 0x40
 8005c30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c32:	2300      	movs	r3, #0
 8005c34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c3c:	f107 0308 	add.w	r3, r7, #8
 8005c40:	4619      	mov	r1, r3
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7ff ff56 	bl	8005af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c4c:	2111      	movs	r1, #17
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f9de 	bl	8006010 <SDMMC_GetCmdResp1>
 8005c54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c56:	69fb      	ldr	r3, [r7, #28]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3720      	adds	r7, #32
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005c6e:	2312      	movs	r3, #18
 8005c70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c72:	2340      	movs	r3, #64	; 0x40
 8005c74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c76:	2300      	movs	r3, #0
 8005c78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c80:	f107 0308 	add.w	r3, r7, #8
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7ff ff34 	bl	8005af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c90:	2112      	movs	r1, #18
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f9bc 	bl	8006010 <SDMMC_GetCmdResp1>
 8005c98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c9a:	69fb      	ldr	r3, [r7, #28]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3720      	adds	r7, #32
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b088      	sub	sp, #32
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005cb2:	2318      	movs	r3, #24
 8005cb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005cb6:	2340      	movs	r3, #64	; 0x40
 8005cb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cc2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005cc4:	f107 0308 	add.w	r3, r7, #8
 8005cc8:	4619      	mov	r1, r3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7ff ff12 	bl	8005af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cd4:	2118      	movs	r1, #24
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f99a 	bl	8006010 <SDMMC_GetCmdResp1>
 8005cdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cde:	69fb      	ldr	r3, [r7, #28]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3720      	adds	r7, #32
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005cf6:	2319      	movs	r3, #25
 8005cf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005cfa:	2340      	movs	r3, #64	; 0x40
 8005cfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d08:	f107 0308 	add.w	r3, r7, #8
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff fef0 	bl	8005af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d18:	2119      	movs	r1, #25
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f978 	bl	8006010 <SDMMC_GetCmdResp1>
 8005d20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d22:	69fb      	ldr	r3, [r7, #28]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3720      	adds	r7, #32
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005d38:	230c      	movs	r3, #12
 8005d3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d3c:	2340      	movs	r3, #64	; 0x40
 8005d3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d40:	2300      	movs	r3, #0
 8005d42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d4a:	f107 0308 	add.w	r3, r7, #8
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7ff fecf 	bl	8005af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005d56:	4a05      	ldr	r2, [pc, #20]	; (8005d6c <SDMMC_CmdStopTransfer+0x40>)
 8005d58:	210c      	movs	r1, #12
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f958 	bl	8006010 <SDMMC_GetCmdResp1>
 8005d60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d62:	69fb      	ldr	r3, [r7, #28]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3720      	adds	r7, #32
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	05f5e100 	.word	0x05f5e100

08005d70 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08a      	sub	sp, #40	; 0x28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005d80:	2307      	movs	r3, #7
 8005d82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d84:	2340      	movs	r3, #64	; 0x40
 8005d86:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d90:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d92:	f107 0310 	add.w	r3, r7, #16
 8005d96:	4619      	mov	r1, r3
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f7ff feab 	bl	8005af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da2:	2107      	movs	r1, #7
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 f933 	bl	8006010 <SDMMC_GetCmdResp1>
 8005daa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3728      	adds	r7, #40	; 0x28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b088      	sub	sp, #32
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005dd4:	f107 0308 	add.w	r3, r7, #8
 8005dd8:	4619      	mov	r1, r3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7ff fe8a 	bl	8005af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f8eb 	bl	8005fbc <SDMMC_GetCmdError>
 8005de6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005de8:	69fb      	ldr	r3, [r7, #28]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3720      	adds	r7, #32
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b088      	sub	sp, #32
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005dfa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005dfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005e00:	2308      	movs	r3, #8
 8005e02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e04:	2340      	movs	r3, #64	; 0x40
 8005e06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e12:	f107 0308 	add.w	r3, r7, #8
 8005e16:	4619      	mov	r1, r3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff fe6b 	bl	8005af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fade 	bl	80063e0 <SDMMC_GetCmdResp7>
 8005e24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e26:	69fb      	ldr	r3, [r7, #28]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3720      	adds	r7, #32
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005e3e:	2337      	movs	r3, #55	; 0x37
 8005e40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e42:	2340      	movs	r3, #64	; 0x40
 8005e44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e46:	2300      	movs	r3, #0
 8005e48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e50:	f107 0308 	add.w	r3, r7, #8
 8005e54:	4619      	mov	r1, r3
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7ff fe4c 	bl	8005af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e60:	2137      	movs	r1, #55	; 0x37
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f8d4 	bl	8006010 <SDMMC_GetCmdResp1>
 8005e68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e6a:	69fb      	ldr	r3, [r7, #28]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3720      	adds	r7, #32
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005e8a:	2329      	movs	r3, #41	; 0x29
 8005e8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e8e:	2340      	movs	r3, #64	; 0x40
 8005e90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e92:	2300      	movs	r3, #0
 8005e94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e9c:	f107 0308 	add.w	r3, r7, #8
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7ff fe26 	bl	8005af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f9e7 	bl	800627c <SDMMC_GetCmdResp3>
 8005eae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eb0:	69fb      	ldr	r3, [r7, #28]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3720      	adds	r7, #32
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b088      	sub	sp, #32
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005eca:	23c0      	movs	r3, #192	; 0xc0
 8005ecc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ed6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ed8:	f107 0308 	add.w	r3, r7, #8
 8005edc:	4619      	mov	r1, r3
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7ff fe08 	bl	8005af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f981 	bl	80061ec <SDMMC_GetCmdResp2>
 8005eea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eec:	69fb      	ldr	r3, [r7, #28]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3720      	adds	r7, #32
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b088      	sub	sp, #32
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005f04:	2309      	movs	r3, #9
 8005f06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005f08:	23c0      	movs	r3, #192	; 0xc0
 8005f0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f16:	f107 0308 	add.w	r3, r7, #8
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7ff fde9 	bl	8005af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f962 	bl	80061ec <SDMMC_GetCmdResp2>
 8005f28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f2a:	69fb      	ldr	r3, [r7, #28]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3720      	adds	r7, #32
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b088      	sub	sp, #32
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005f42:	2303      	movs	r3, #3
 8005f44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f46:	2340      	movs	r3, #64	; 0x40
 8005f48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f54:	f107 0308 	add.w	r3, r7, #8
 8005f58:	4619      	mov	r1, r3
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7ff fdca 	bl	8005af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	2103      	movs	r1, #3
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f9c5 	bl	80062f4 <SDMMC_GetCmdResp6>
 8005f6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f6c:	69fb      	ldr	r3, [r7, #28]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3720      	adds	r7, #32
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b088      	sub	sp, #32
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005f84:	230d      	movs	r3, #13
 8005f86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f88:	2340      	movs	r3, #64	; 0x40
 8005f8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f96:	f107 0308 	add.w	r3, r7, #8
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff fda9 	bl	8005af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa6:	210d      	movs	r1, #13
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f831 	bl	8006010 <SDMMC_GetCmdResp1>
 8005fae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fb0:	69fb      	ldr	r3, [r7, #28]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3720      	adds	r7, #32
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
	...

08005fbc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005fc4:	4b10      	ldr	r3, [pc, #64]	; (8006008 <SDMMC_GetCmdError+0x4c>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a10      	ldr	r2, [pc, #64]	; (800600c <SDMMC_GetCmdError+0x50>)
 8005fca:	fba2 2303 	umull	r2, r3, r2, r3
 8005fce:	0a5b      	lsrs	r3, r3, #9
 8005fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd4:	fb02 f303 	mul.w	r3, r2, r3
 8005fd8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1e5a      	subs	r2, r3, #1
 8005fde:	60fa      	str	r2, [r7, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d102      	bne.n	8005fea <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005fe4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005fe8:	e009      	b.n	8005ffe <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0f1      	beq.n	8005fda <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	22c5      	movs	r2, #197	; 0xc5
 8005ffa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	bc80      	pop	{r7}
 8006006:	4770      	bx	lr
 8006008:	20000000 	.word	0x20000000
 800600c:	10624dd3 	.word	0x10624dd3

08006010 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b088      	sub	sp, #32
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	460b      	mov	r3, r1
 800601a:	607a      	str	r2, [r7, #4]
 800601c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800601e:	4b70      	ldr	r3, [pc, #448]	; (80061e0 <SDMMC_GetCmdResp1+0x1d0>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a70      	ldr	r2, [pc, #448]	; (80061e4 <SDMMC_GetCmdResp1+0x1d4>)
 8006024:	fba2 2303 	umull	r2, r3, r2, r3
 8006028:	0a5a      	lsrs	r2, r3, #9
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	fb02 f303 	mul.w	r3, r2, r3
 8006030:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	1e5a      	subs	r2, r3, #1
 8006036:	61fa      	str	r2, [r7, #28]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d102      	bne.n	8006042 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800603c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006040:	e0c9      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006046:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0ef      	beq.n	8006032 <SDMMC_GetCmdResp1+0x22>
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1ea      	bne.n	8006032 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	d004      	beq.n	8006072 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2204      	movs	r2, #4
 800606c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800606e:	2304      	movs	r3, #4
 8006070:	e0b1      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	2b00      	cmp	r3, #0
 800607c:	d004      	beq.n	8006088 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2201      	movs	r2, #1
 8006082:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006084:	2301      	movs	r3, #1
 8006086:	e0a6      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	22c5      	movs	r2, #197	; 0xc5
 800608c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f7ff fd59 	bl	8005b46 <SDIO_GetCommandResponse>
 8006094:	4603      	mov	r3, r0
 8006096:	461a      	mov	r2, r3
 8006098:	7afb      	ldrb	r3, [r7, #11]
 800609a:	4293      	cmp	r3, r2
 800609c:	d001      	beq.n	80060a2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800609e:	2301      	movs	r3, #1
 80060a0:	e099      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80060a2:	2100      	movs	r1, #0
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f7ff fd5a 	bl	8005b5e <SDIO_GetResponse>
 80060aa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	4b4e      	ldr	r3, [pc, #312]	; (80061e8 <SDMMC_GetCmdResp1+0x1d8>)
 80060b0:	4013      	ands	r3, r2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80060b6:	2300      	movs	r3, #0
 80060b8:	e08d      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	da02      	bge.n	80060c6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80060c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060c4:	e087      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80060d0:	2340      	movs	r3, #64	; 0x40
 80060d2:	e080      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80060de:	2380      	movs	r3, #128	; 0x80
 80060e0:	e079      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80060ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060f0:	e071      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80060fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006100:	e069      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800610c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006110:	e061      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800611c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006120:	e059      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800612c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006130:	e051      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800613c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006140:	e049      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d002      	beq.n	8006152 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800614c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006150:	e041      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800615c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006160:	e039      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800616c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006170:	e031      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800617c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006180:	e029      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800618c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006190:	e021      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800619c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80061a0:	e019      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80061ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80061b0:	e011      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80061bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80061c0:	e009      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f003 0308 	and.w	r3, r3, #8
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80061cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80061d0:	e001      	b.n	80061d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80061d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3720      	adds	r7, #32
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20000000 	.word	0x20000000
 80061e4:	10624dd3 	.word	0x10624dd3
 80061e8:	fdffe008 	.word	0xfdffe008

080061ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80061f4:	4b1f      	ldr	r3, [pc, #124]	; (8006274 <SDMMC_GetCmdResp2+0x88>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a1f      	ldr	r2, [pc, #124]	; (8006278 <SDMMC_GetCmdResp2+0x8c>)
 80061fa:	fba2 2303 	umull	r2, r3, r2, r3
 80061fe:	0a5b      	lsrs	r3, r3, #9
 8006200:	f241 3288 	movw	r2, #5000	; 0x1388
 8006204:	fb02 f303 	mul.w	r3, r2, r3
 8006208:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	1e5a      	subs	r2, r3, #1
 800620e:	60fa      	str	r2, [r7, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d102      	bne.n	800621a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006214:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006218:	e026      	b.n	8006268 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800621e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0ef      	beq.n	800620a <SDMMC_GetCmdResp2+0x1e>
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1ea      	bne.n	800620a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006238:	f003 0304 	and.w	r3, r3, #4
 800623c:	2b00      	cmp	r3, #0
 800623e:	d004      	beq.n	800624a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2204      	movs	r2, #4
 8006244:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006246:	2304      	movs	r3, #4
 8006248:	e00e      	b.n	8006268 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d004      	beq.n	8006260 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800625c:	2301      	movs	r3, #1
 800625e:	e003      	b.n	8006268 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	22c5      	movs	r2, #197	; 0xc5
 8006264:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	bc80      	pop	{r7}
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	20000000 	.word	0x20000000
 8006278:	10624dd3 	.word	0x10624dd3

0800627c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006284:	4b19      	ldr	r3, [pc, #100]	; (80062ec <SDMMC_GetCmdResp3+0x70>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a19      	ldr	r2, [pc, #100]	; (80062f0 <SDMMC_GetCmdResp3+0x74>)
 800628a:	fba2 2303 	umull	r2, r3, r2, r3
 800628e:	0a5b      	lsrs	r3, r3, #9
 8006290:	f241 3288 	movw	r2, #5000	; 0x1388
 8006294:	fb02 f303 	mul.w	r3, r2, r3
 8006298:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	1e5a      	subs	r2, r3, #1
 800629e:	60fa      	str	r2, [r7, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d102      	bne.n	80062aa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80062a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80062a8:	e01b      	b.n	80062e2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0ef      	beq.n	800629a <SDMMC_GetCmdResp3+0x1e>
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1ea      	bne.n	800629a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c8:	f003 0304 	and.w	r3, r3, #4
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d004      	beq.n	80062da <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2204      	movs	r2, #4
 80062d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80062d6:	2304      	movs	r3, #4
 80062d8:	e003      	b.n	80062e2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	22c5      	movs	r2, #197	; 0xc5
 80062de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bc80      	pop	{r7}
 80062ea:	4770      	bx	lr
 80062ec:	20000000 	.word	0x20000000
 80062f0:	10624dd3 	.word	0x10624dd3

080062f4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b088      	sub	sp, #32
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	460b      	mov	r3, r1
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006302:	4b35      	ldr	r3, [pc, #212]	; (80063d8 <SDMMC_GetCmdResp6+0xe4>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a35      	ldr	r2, [pc, #212]	; (80063dc <SDMMC_GetCmdResp6+0xe8>)
 8006308:	fba2 2303 	umull	r2, r3, r2, r3
 800630c:	0a5b      	lsrs	r3, r3, #9
 800630e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006312:	fb02 f303 	mul.w	r3, r2, r3
 8006316:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	1e5a      	subs	r2, r3, #1
 800631c:	61fa      	str	r2, [r7, #28]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d102      	bne.n	8006328 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006322:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006326:	e052      	b.n	80063ce <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0ef      	beq.n	8006318 <SDMMC_GetCmdResp6+0x24>
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1ea      	bne.n	8006318 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006346:	f003 0304 	and.w	r3, r3, #4
 800634a:	2b00      	cmp	r3, #0
 800634c:	d004      	beq.n	8006358 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2204      	movs	r2, #4
 8006352:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006354:	2304      	movs	r3, #4
 8006356:	e03a      	b.n	80063ce <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b00      	cmp	r3, #0
 8006362:	d004      	beq.n	800636e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2201      	movs	r2, #1
 8006368:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800636a:	2301      	movs	r3, #1
 800636c:	e02f      	b.n	80063ce <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f7ff fbe9 	bl	8005b46 <SDIO_GetCommandResponse>
 8006374:	4603      	mov	r3, r0
 8006376:	461a      	mov	r2, r3
 8006378:	7afb      	ldrb	r3, [r7, #11]
 800637a:	4293      	cmp	r3, r2
 800637c:	d001      	beq.n	8006382 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800637e:	2301      	movs	r3, #1
 8006380:	e025      	b.n	80063ce <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	22c5      	movs	r2, #197	; 0xc5
 8006386:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006388:	2100      	movs	r1, #0
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f7ff fbe7 	bl	8005b5e <SDIO_GetResponse>
 8006390:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d106      	bne.n	80063aa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	0c1b      	lsrs	r3, r3, #16
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80063a6:	2300      	movs	r3, #0
 80063a8:	e011      	b.n	80063ce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80063b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063b8:	e009      	b.n	80063ce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80063c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063c8:	e001      	b.n	80063ce <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80063ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3720      	adds	r7, #32
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000000 	.word	0x20000000
 80063dc:	10624dd3 	.word	0x10624dd3

080063e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80063e8:	4b22      	ldr	r3, [pc, #136]	; (8006474 <SDMMC_GetCmdResp7+0x94>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a22      	ldr	r2, [pc, #136]	; (8006478 <SDMMC_GetCmdResp7+0x98>)
 80063ee:	fba2 2303 	umull	r2, r3, r2, r3
 80063f2:	0a5b      	lsrs	r3, r3, #9
 80063f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f8:	fb02 f303 	mul.w	r3, r2, r3
 80063fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	1e5a      	subs	r2, r3, #1
 8006402:	60fa      	str	r2, [r7, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d102      	bne.n	800640e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006408:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800640c:	e02c      	b.n	8006468 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006412:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0ef      	beq.n	80063fe <SDMMC_GetCmdResp7+0x1e>
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1ea      	bne.n	80063fe <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d004      	beq.n	800643e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2204      	movs	r2, #4
 8006438:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800643a:	2304      	movs	r3, #4
 800643c:	e014      	b.n	8006468 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d004      	beq.n	8006454 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006450:	2301      	movs	r3, #1
 8006452:	e009      	b.n	8006468 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2240      	movs	r2, #64	; 0x40
 8006464:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006466:	2300      	movs	r3, #0
  
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	bc80      	pop	{r7}
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	20000000 	.word	0x20000000
 8006478:	10624dd3 	.word	0x10624dd3

0800647c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006480:	4904      	ldr	r1, [pc, #16]	; (8006494 <MX_FATFS_Init+0x18>)
 8006482:	4805      	ldr	r0, [pc, #20]	; (8006498 <MX_FATFS_Init+0x1c>)
 8006484:	f000 f8d4 	bl	8006630 <FATFS_LinkDriver>
 8006488:	4603      	mov	r3, r0
 800648a:	461a      	mov	r2, r3
 800648c:	4b03      	ldr	r3, [pc, #12]	; (800649c <MX_FATFS_Init+0x20>)
 800648e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006490:	bf00      	nop
 8006492:	bd80      	pop	{r7, pc}
 8006494:	20000374 	.word	0x20000374
 8006498:	0800b178 	.word	0x0800b178
 800649c:	20000370 	.word	0x20000370

080064a0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80064aa:	f000 f86b 	bl	8006584 <BSP_SD_IsDetected>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d001      	beq.n	80064b8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e005      	b.n	80064c4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80064b8:	4804      	ldr	r0, [pc, #16]	; (80064cc <BSP_SD_Init+0x2c>)
 80064ba:	f7fd fb17 	bl	8003aec <HAL_SD_Init>
 80064be:	4603      	mov	r3, r0
 80064c0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80064c2:	79fb      	ldrb	r3, [r7, #7]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	20000210 	.word	0x20000210

080064d0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b088      	sub	sp, #32
 80064d4:	af02      	add	r7, sp, #8
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	68f9      	ldr	r1, [r7, #12]
 80064ec:	4806      	ldr	r0, [pc, #24]	; (8006508 <BSP_SD_ReadBlocks+0x38>)
 80064ee:	f7fd fbab 	bl	8003c48 <HAL_SD_ReadBlocks>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80064fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	20000210 	.word	0x20000210

0800650c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b088      	sub	sp, #32
 8006510:	af02      	add	r7, sp, #8
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
 8006518:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	68f9      	ldr	r1, [r7, #12]
 8006528:	4806      	ldr	r0, [pc, #24]	; (8006544 <BSP_SD_WriteBlocks+0x38>)
 800652a:	f7fd fd6b 	bl	8004004 <HAL_SD_WriteBlocks>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006538:	7dfb      	ldrb	r3, [r7, #23]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	20000210 	.word	0x20000210

08006548 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800654c:	4805      	ldr	r0, [pc, #20]	; (8006564 <BSP_SD_GetCardState+0x1c>)
 800654e:	f7fe f8ae 	bl	80046ae <HAL_SD_GetCardState>
 8006552:	4603      	mov	r3, r0
 8006554:	2b04      	cmp	r3, #4
 8006556:	bf14      	ite	ne
 8006558:	2301      	movne	r3, #1
 800655a:	2300      	moveq	r3, #0
 800655c:	b2db      	uxtb	r3, r3
}
 800655e:	4618      	mov	r0, r3
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20000210 	.word	0x20000210

08006568 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006570:	6879      	ldr	r1, [r7, #4]
 8006572:	4803      	ldr	r0, [pc, #12]	; (8006580 <BSP_SD_GetCardInfo+0x18>)
 8006574:	f7fe f870 	bl	8004658 <HAL_SD_GetCardInfo>
}
 8006578:	bf00      	nop
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20000210 	.word	0x20000210

08006584 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800658a:	2301      	movs	r3, #1
 800658c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800658e:	79fb      	ldrb	r3, [r7, #7]
 8006590:	b2db      	uxtb	r3, r3
}
 8006592:	4618      	mov	r0, r3
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	bc80      	pop	{r7}
 800659a:	4770      	bx	lr

0800659c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	4613      	mov	r3, r2
 80065a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80065aa:	2301      	movs	r3, #1
 80065ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80065ae:	2300      	movs	r3, #0
 80065b0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80065b2:	4b1e      	ldr	r3, [pc, #120]	; (800662c <FATFS_LinkDriverEx+0x90>)
 80065b4:	7a5b      	ldrb	r3, [r3, #9]
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d831      	bhi.n	8006620 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80065bc:	4b1b      	ldr	r3, [pc, #108]	; (800662c <FATFS_LinkDriverEx+0x90>)
 80065be:	7a5b      	ldrb	r3, [r3, #9]
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	461a      	mov	r2, r3
 80065c4:	4b19      	ldr	r3, [pc, #100]	; (800662c <FATFS_LinkDriverEx+0x90>)
 80065c6:	2100      	movs	r1, #0
 80065c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80065ca:	4b18      	ldr	r3, [pc, #96]	; (800662c <FATFS_LinkDriverEx+0x90>)
 80065cc:	7a5b      	ldrb	r3, [r3, #9]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	4a16      	ldr	r2, [pc, #88]	; (800662c <FATFS_LinkDriverEx+0x90>)
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80065da:	4b14      	ldr	r3, [pc, #80]	; (800662c <FATFS_LinkDriverEx+0x90>)
 80065dc:	7a5b      	ldrb	r3, [r3, #9]
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	461a      	mov	r2, r3
 80065e2:	4b12      	ldr	r3, [pc, #72]	; (800662c <FATFS_LinkDriverEx+0x90>)
 80065e4:	4413      	add	r3, r2
 80065e6:	79fa      	ldrb	r2, [r7, #7]
 80065e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80065ea:	4b10      	ldr	r3, [pc, #64]	; (800662c <FATFS_LinkDriverEx+0x90>)
 80065ec:	7a5b      	ldrb	r3, [r3, #9]
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	b2d1      	uxtb	r1, r2
 80065f4:	4a0d      	ldr	r2, [pc, #52]	; (800662c <FATFS_LinkDriverEx+0x90>)
 80065f6:	7251      	strb	r1, [r2, #9]
 80065f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80065fa:	7dbb      	ldrb	r3, [r7, #22]
 80065fc:	3330      	adds	r3, #48	; 0x30
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	3301      	adds	r3, #1
 8006608:	223a      	movs	r2, #58	; 0x3a
 800660a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	3302      	adds	r3, #2
 8006610:	222f      	movs	r2, #47	; 0x2f
 8006612:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	3303      	adds	r3, #3
 8006618:	2200      	movs	r2, #0
 800661a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800661c:	2300      	movs	r3, #0
 800661e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006620:	7dfb      	ldrb	r3, [r7, #23]
}
 8006622:	4618      	mov	r0, r3
 8006624:	371c      	adds	r7, #28
 8006626:	46bd      	mov	sp, r7
 8006628:	bc80      	pop	{r7}
 800662a:	4770      	bx	lr
 800662c:	20000378 	.word	0x20000378

08006630 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800663a:	2200      	movs	r2, #0
 800663c:	6839      	ldr	r1, [r7, #0]
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7ff ffac 	bl	800659c <FATFS_LinkDriverEx>
 8006644:	4603      	mov	r3, r0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
	...

08006650 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	4603      	mov	r3, r0
 8006658:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800665a:	4b0b      	ldr	r3, [pc, #44]	; (8006688 <SD_initialize+0x38>)
 800665c:	2201      	movs	r2, #1
 800665e:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8006660:	f7ff ff1e 	bl	80064a0 <BSP_SD_Init>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d107      	bne.n	800667a <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800666a:	4b07      	ldr	r3, [pc, #28]	; (8006688 <SD_initialize+0x38>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	b2db      	uxtb	r3, r3
 8006670:	f023 0301 	bic.w	r3, r3, #1
 8006674:	b2da      	uxtb	r2, r3
 8006676:	4b04      	ldr	r3, [pc, #16]	; (8006688 <SD_initialize+0x38>)
 8006678:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800667a:	4b03      	ldr	r3, [pc, #12]	; (8006688 <SD_initialize+0x38>)
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	b2db      	uxtb	r3, r3
}
 8006680:	4618      	mov	r0, r3
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	20000009 	.word	0x20000009

0800668c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	4603      	mov	r3, r0
 8006694:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006696:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <SD_status+0x38>)
 8006698:	2201      	movs	r2, #1
 800669a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800669c:	f7ff ff54 	bl	8006548 <BSP_SD_GetCardState>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d107      	bne.n	80066b6 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80066a6:	4b07      	ldr	r3, [pc, #28]	; (80066c4 <SD_status+0x38>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	f023 0301 	bic.w	r3, r3, #1
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	4b04      	ldr	r3, [pc, #16]	; (80066c4 <SD_status+0x38>)
 80066b4:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 80066b6:	4b03      	ldr	r3, [pc, #12]	; (80066c4 <SD_status+0x38>)
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	b2db      	uxtb	r3, r3
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	20000009 	.word	0x20000009

080066c8 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60b9      	str	r1, [r7, #8]
 80066d0:	607a      	str	r2, [r7, #4]
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	4603      	mov	r3, r0
 80066d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 80066dc:	4b0f      	ldr	r3, [pc, #60]	; (800671c <SD_read+0x54>)
 80066de:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 80066e0:	4b0f      	ldr	r3, [pc, #60]	; (8006720 <SD_read+0x58>)
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	6879      	ldr	r1, [r7, #4]
 80066e6:	68b8      	ldr	r0, [r7, #8]
 80066e8:	f7ff fef2 	bl	80064d0 <BSP_SD_ReadBlocks>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10e      	bne.n	8006710 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 80066f2:	e006      	b.n	8006702 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	1e5a      	subs	r2, r3, #1
 80066f8:	613a      	str	r2, [r7, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <SD_read+0x3a>
      {
        return RES_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e007      	b.n	8006712 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006702:	f7ff ff21 	bl	8006548 <BSP_SD_GetCardState>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1f3      	bne.n	80066f4 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8006710:	7dfb      	ldrb	r3, [r7, #23]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3718      	adds	r7, #24
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	000186a0 	.word	0x000186a0
 8006720:	05f5e100 	.word	0x05f5e100

08006724 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	60b9      	str	r1, [r7, #8]
 800672c:	607a      	str	r2, [r7, #4]
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	4603      	mov	r3, r0
 8006732:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8006738:	4b0f      	ldr	r3, [pc, #60]	; (8006778 <SD_write+0x54>)
 800673a:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800673c:	4b0f      	ldr	r3, [pc, #60]	; (800677c <SD_write+0x58>)
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	6879      	ldr	r1, [r7, #4]
 8006742:	68b8      	ldr	r0, [r7, #8]
 8006744:	f7ff fee2 	bl	800650c <BSP_SD_WriteBlocks>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10e      	bne.n	800676c <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800674e:	e006      	b.n	800675e <SD_write+0x3a>
    {
      if (timeout-- == 0)
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	1e5a      	subs	r2, r3, #1
 8006754:	613a      	str	r2, [r7, #16]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <SD_write+0x3a>
      {
        return RES_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e007      	b.n	800676e <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800675e:	f7ff fef3 	bl	8006548 <BSP_SD_GetCardState>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1f3      	bne.n	8006750 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800676c:	7dfb      	ldrb	r3, [r7, #23]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	000186a0 	.word	0x000186a0
 800677c:	05f5e100 	.word	0x05f5e100

08006780 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b08c      	sub	sp, #48	; 0x30
 8006784:	af00      	add	r7, sp, #0
 8006786:	4603      	mov	r3, r0
 8006788:	603a      	str	r2, [r7, #0]
 800678a:	71fb      	strb	r3, [r7, #7]
 800678c:	460b      	mov	r3, r1
 800678e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006796:	4b24      	ldr	r3, [pc, #144]	; (8006828 <SD_ioctl+0xa8>)
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	b2db      	uxtb	r3, r3
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <SD_ioctl+0x28>
 80067a4:	2303      	movs	r3, #3
 80067a6:	e03b      	b.n	8006820 <SD_ioctl+0xa0>
  
  switch (cmd)
 80067a8:	79bb      	ldrb	r3, [r7, #6]
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	d833      	bhi.n	8006816 <SD_ioctl+0x96>
 80067ae:	a201      	add	r2, pc, #4	; (adr r2, 80067b4 <SD_ioctl+0x34>)
 80067b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b4:	080067c5 	.word	0x080067c5
 80067b8:	080067cd 	.word	0x080067cd
 80067bc:	080067e5 	.word	0x080067e5
 80067c0:	080067ff 	.word	0x080067ff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80067c4:	2300      	movs	r3, #0
 80067c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80067ca:	e027      	b.n	800681c <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80067cc:	f107 030c 	add.w	r3, r7, #12
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff fec9 	bl	8006568 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80067d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80067e2:	e01b      	b.n	800681c <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80067e4:	f107 030c 	add.w	r3, r7, #12
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7ff febd 	bl	8006568 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80067ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80067fc:	e00e      	b.n	800681c <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80067fe:	f107 030c 	add.w	r3, r7, #12
 8006802:	4618      	mov	r0, r3
 8006804:	f7ff feb0 	bl	8006568 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8006808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006814:	e002      	b.n	800681c <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8006816:	2304      	movs	r3, #4
 8006818:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 800681c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006820:	4618      	mov	r0, r3
 8006822:	3730      	adds	r7, #48	; 0x30
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	20000009 	.word	0x20000009

0800682c <__errno>:
 800682c:	4b01      	ldr	r3, [pc, #4]	; (8006834 <__errno+0x8>)
 800682e:	6818      	ldr	r0, [r3, #0]
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	2000000c 	.word	0x2000000c

08006838 <__libc_init_array>:
 8006838:	b570      	push	{r4, r5, r6, lr}
 800683a:	2600      	movs	r6, #0
 800683c:	4d0c      	ldr	r5, [pc, #48]	; (8006870 <__libc_init_array+0x38>)
 800683e:	4c0d      	ldr	r4, [pc, #52]	; (8006874 <__libc_init_array+0x3c>)
 8006840:	1b64      	subs	r4, r4, r5
 8006842:	10a4      	asrs	r4, r4, #2
 8006844:	42a6      	cmp	r6, r4
 8006846:	d109      	bne.n	800685c <__libc_init_array+0x24>
 8006848:	f004 fc50 	bl	800b0ec <_init>
 800684c:	2600      	movs	r6, #0
 800684e:	4d0a      	ldr	r5, [pc, #40]	; (8006878 <__libc_init_array+0x40>)
 8006850:	4c0a      	ldr	r4, [pc, #40]	; (800687c <__libc_init_array+0x44>)
 8006852:	1b64      	subs	r4, r4, r5
 8006854:	10a4      	asrs	r4, r4, #2
 8006856:	42a6      	cmp	r6, r4
 8006858:	d105      	bne.n	8006866 <__libc_init_array+0x2e>
 800685a:	bd70      	pop	{r4, r5, r6, pc}
 800685c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006860:	4798      	blx	r3
 8006862:	3601      	adds	r6, #1
 8006864:	e7ee      	b.n	8006844 <__libc_init_array+0xc>
 8006866:	f855 3b04 	ldr.w	r3, [r5], #4
 800686a:	4798      	blx	r3
 800686c:	3601      	adds	r6, #1
 800686e:	e7f2      	b.n	8006856 <__libc_init_array+0x1e>
 8006870:	0800b634 	.word	0x0800b634
 8006874:	0800b634 	.word	0x0800b634
 8006878:	0800b634 	.word	0x0800b634
 800687c:	0800b638 	.word	0x0800b638

08006880 <memset>:
 8006880:	4603      	mov	r3, r0
 8006882:	4402      	add	r2, r0
 8006884:	4293      	cmp	r3, r2
 8006886:	d100      	bne.n	800688a <memset+0xa>
 8006888:	4770      	bx	lr
 800688a:	f803 1b01 	strb.w	r1, [r3], #1
 800688e:	e7f9      	b.n	8006884 <memset+0x4>

08006890 <__cvt>:
 8006890:	2b00      	cmp	r3, #0
 8006892:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006896:	461f      	mov	r7, r3
 8006898:	bfbb      	ittet	lt
 800689a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800689e:	461f      	movlt	r7, r3
 80068a0:	2300      	movge	r3, #0
 80068a2:	232d      	movlt	r3, #45	; 0x2d
 80068a4:	b088      	sub	sp, #32
 80068a6:	4614      	mov	r4, r2
 80068a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80068aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80068ac:	7013      	strb	r3, [r2, #0]
 80068ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80068b4:	f023 0820 	bic.w	r8, r3, #32
 80068b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80068bc:	d005      	beq.n	80068ca <__cvt+0x3a>
 80068be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80068c2:	d100      	bne.n	80068c6 <__cvt+0x36>
 80068c4:	3501      	adds	r5, #1
 80068c6:	2302      	movs	r3, #2
 80068c8:	e000      	b.n	80068cc <__cvt+0x3c>
 80068ca:	2303      	movs	r3, #3
 80068cc:	aa07      	add	r2, sp, #28
 80068ce:	9204      	str	r2, [sp, #16]
 80068d0:	aa06      	add	r2, sp, #24
 80068d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80068d6:	e9cd 3500 	strd	r3, r5, [sp]
 80068da:	4622      	mov	r2, r4
 80068dc:	463b      	mov	r3, r7
 80068de:	f001 fd83 	bl	80083e8 <_dtoa_r>
 80068e2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80068e6:	4606      	mov	r6, r0
 80068e8:	d102      	bne.n	80068f0 <__cvt+0x60>
 80068ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068ec:	07db      	lsls	r3, r3, #31
 80068ee:	d522      	bpl.n	8006936 <__cvt+0xa6>
 80068f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80068f4:	eb06 0905 	add.w	r9, r6, r5
 80068f8:	d110      	bne.n	800691c <__cvt+0x8c>
 80068fa:	7833      	ldrb	r3, [r6, #0]
 80068fc:	2b30      	cmp	r3, #48	; 0x30
 80068fe:	d10a      	bne.n	8006916 <__cvt+0x86>
 8006900:	2200      	movs	r2, #0
 8006902:	2300      	movs	r3, #0
 8006904:	4620      	mov	r0, r4
 8006906:	4639      	mov	r1, r7
 8006908:	f7fa f96e 	bl	8000be8 <__aeabi_dcmpeq>
 800690c:	b918      	cbnz	r0, 8006916 <__cvt+0x86>
 800690e:	f1c5 0501 	rsb	r5, r5, #1
 8006912:	f8ca 5000 	str.w	r5, [sl]
 8006916:	f8da 3000 	ldr.w	r3, [sl]
 800691a:	4499      	add	r9, r3
 800691c:	2200      	movs	r2, #0
 800691e:	2300      	movs	r3, #0
 8006920:	4620      	mov	r0, r4
 8006922:	4639      	mov	r1, r7
 8006924:	f7fa f960 	bl	8000be8 <__aeabi_dcmpeq>
 8006928:	b108      	cbz	r0, 800692e <__cvt+0x9e>
 800692a:	f8cd 901c 	str.w	r9, [sp, #28]
 800692e:	2230      	movs	r2, #48	; 0x30
 8006930:	9b07      	ldr	r3, [sp, #28]
 8006932:	454b      	cmp	r3, r9
 8006934:	d307      	bcc.n	8006946 <__cvt+0xb6>
 8006936:	4630      	mov	r0, r6
 8006938:	9b07      	ldr	r3, [sp, #28]
 800693a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800693c:	1b9b      	subs	r3, r3, r6
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	b008      	add	sp, #32
 8006942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006946:	1c59      	adds	r1, r3, #1
 8006948:	9107      	str	r1, [sp, #28]
 800694a:	701a      	strb	r2, [r3, #0]
 800694c:	e7f0      	b.n	8006930 <__cvt+0xa0>

0800694e <__exponent>:
 800694e:	4603      	mov	r3, r0
 8006950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006952:	2900      	cmp	r1, #0
 8006954:	f803 2b02 	strb.w	r2, [r3], #2
 8006958:	bfb6      	itet	lt
 800695a:	222d      	movlt	r2, #45	; 0x2d
 800695c:	222b      	movge	r2, #43	; 0x2b
 800695e:	4249      	neglt	r1, r1
 8006960:	2909      	cmp	r1, #9
 8006962:	7042      	strb	r2, [r0, #1]
 8006964:	dd2b      	ble.n	80069be <__exponent+0x70>
 8006966:	f10d 0407 	add.w	r4, sp, #7
 800696a:	46a4      	mov	ip, r4
 800696c:	270a      	movs	r7, #10
 800696e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006972:	460a      	mov	r2, r1
 8006974:	46a6      	mov	lr, r4
 8006976:	fb07 1516 	mls	r5, r7, r6, r1
 800697a:	2a63      	cmp	r2, #99	; 0x63
 800697c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006980:	4631      	mov	r1, r6
 8006982:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006986:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800698a:	dcf0      	bgt.n	800696e <__exponent+0x20>
 800698c:	3130      	adds	r1, #48	; 0x30
 800698e:	f1ae 0502 	sub.w	r5, lr, #2
 8006992:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006996:	4629      	mov	r1, r5
 8006998:	1c44      	adds	r4, r0, #1
 800699a:	4561      	cmp	r1, ip
 800699c:	d30a      	bcc.n	80069b4 <__exponent+0x66>
 800699e:	f10d 0209 	add.w	r2, sp, #9
 80069a2:	eba2 020e 	sub.w	r2, r2, lr
 80069a6:	4565      	cmp	r5, ip
 80069a8:	bf88      	it	hi
 80069aa:	2200      	movhi	r2, #0
 80069ac:	4413      	add	r3, r2
 80069ae:	1a18      	subs	r0, r3, r0
 80069b0:	b003      	add	sp, #12
 80069b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069b8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80069bc:	e7ed      	b.n	800699a <__exponent+0x4c>
 80069be:	2330      	movs	r3, #48	; 0x30
 80069c0:	3130      	adds	r1, #48	; 0x30
 80069c2:	7083      	strb	r3, [r0, #2]
 80069c4:	70c1      	strb	r1, [r0, #3]
 80069c6:	1d03      	adds	r3, r0, #4
 80069c8:	e7f1      	b.n	80069ae <__exponent+0x60>
	...

080069cc <_printf_float>:
 80069cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d0:	b091      	sub	sp, #68	; 0x44
 80069d2:	460c      	mov	r4, r1
 80069d4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80069d8:	4616      	mov	r6, r2
 80069da:	461f      	mov	r7, r3
 80069dc:	4605      	mov	r5, r0
 80069de:	f002 fe57 	bl	8009690 <_localeconv_r>
 80069e2:	6803      	ldr	r3, [r0, #0]
 80069e4:	4618      	mov	r0, r3
 80069e6:	9309      	str	r3, [sp, #36]	; 0x24
 80069e8:	f7f9 fc1e 	bl	8000228 <strlen>
 80069ec:	2300      	movs	r3, #0
 80069ee:	930e      	str	r3, [sp, #56]	; 0x38
 80069f0:	f8d8 3000 	ldr.w	r3, [r8]
 80069f4:	900a      	str	r0, [sp, #40]	; 0x28
 80069f6:	3307      	adds	r3, #7
 80069f8:	f023 0307 	bic.w	r3, r3, #7
 80069fc:	f103 0208 	add.w	r2, r3, #8
 8006a00:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006a04:	f8d4 b000 	ldr.w	fp, [r4]
 8006a08:	f8c8 2000 	str.w	r2, [r8]
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006a14:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006a18:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006a1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a22:	4640      	mov	r0, r8
 8006a24:	4b9c      	ldr	r3, [pc, #624]	; (8006c98 <_printf_float+0x2cc>)
 8006a26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a28:	f7fa f910 	bl	8000c4c <__aeabi_dcmpun>
 8006a2c:	bb70      	cbnz	r0, 8006a8c <_printf_float+0xc0>
 8006a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a32:	4640      	mov	r0, r8
 8006a34:	4b98      	ldr	r3, [pc, #608]	; (8006c98 <_printf_float+0x2cc>)
 8006a36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a38:	f7fa f8ea 	bl	8000c10 <__aeabi_dcmple>
 8006a3c:	bb30      	cbnz	r0, 8006a8c <_printf_float+0xc0>
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2300      	movs	r3, #0
 8006a42:	4640      	mov	r0, r8
 8006a44:	4651      	mov	r1, sl
 8006a46:	f7fa f8d9 	bl	8000bfc <__aeabi_dcmplt>
 8006a4a:	b110      	cbz	r0, 8006a52 <_printf_float+0x86>
 8006a4c:	232d      	movs	r3, #45	; 0x2d
 8006a4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a52:	4b92      	ldr	r3, [pc, #584]	; (8006c9c <_printf_float+0x2d0>)
 8006a54:	4892      	ldr	r0, [pc, #584]	; (8006ca0 <_printf_float+0x2d4>)
 8006a56:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006a5a:	bf94      	ite	ls
 8006a5c:	4698      	movls	r8, r3
 8006a5e:	4680      	movhi	r8, r0
 8006a60:	2303      	movs	r3, #3
 8006a62:	f04f 0a00 	mov.w	sl, #0
 8006a66:	6123      	str	r3, [r4, #16]
 8006a68:	f02b 0304 	bic.w	r3, fp, #4
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	4633      	mov	r3, r6
 8006a70:	4621      	mov	r1, r4
 8006a72:	4628      	mov	r0, r5
 8006a74:	9700      	str	r7, [sp, #0]
 8006a76:	aa0f      	add	r2, sp, #60	; 0x3c
 8006a78:	f000 f9d4 	bl	8006e24 <_printf_common>
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	f040 8090 	bne.w	8006ba2 <_printf_float+0x1d6>
 8006a82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a86:	b011      	add	sp, #68	; 0x44
 8006a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8c:	4642      	mov	r2, r8
 8006a8e:	4653      	mov	r3, sl
 8006a90:	4640      	mov	r0, r8
 8006a92:	4651      	mov	r1, sl
 8006a94:	f7fa f8da 	bl	8000c4c <__aeabi_dcmpun>
 8006a98:	b148      	cbz	r0, 8006aae <_printf_float+0xe2>
 8006a9a:	f1ba 0f00 	cmp.w	sl, #0
 8006a9e:	bfb8      	it	lt
 8006aa0:	232d      	movlt	r3, #45	; 0x2d
 8006aa2:	4880      	ldr	r0, [pc, #512]	; (8006ca4 <_printf_float+0x2d8>)
 8006aa4:	bfb8      	it	lt
 8006aa6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006aaa:	4b7f      	ldr	r3, [pc, #508]	; (8006ca8 <_printf_float+0x2dc>)
 8006aac:	e7d3      	b.n	8006a56 <_printf_float+0x8a>
 8006aae:	6863      	ldr	r3, [r4, #4]
 8006ab0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006ab4:	1c5a      	adds	r2, r3, #1
 8006ab6:	d142      	bne.n	8006b3e <_printf_float+0x172>
 8006ab8:	2306      	movs	r3, #6
 8006aba:	6063      	str	r3, [r4, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	9206      	str	r2, [sp, #24]
 8006ac0:	aa0e      	add	r2, sp, #56	; 0x38
 8006ac2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006ac6:	aa0d      	add	r2, sp, #52	; 0x34
 8006ac8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006acc:	9203      	str	r2, [sp, #12]
 8006ace:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006ad2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006ad6:	6023      	str	r3, [r4, #0]
 8006ad8:	6863      	ldr	r3, [r4, #4]
 8006ada:	4642      	mov	r2, r8
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	4628      	mov	r0, r5
 8006ae0:	4653      	mov	r3, sl
 8006ae2:	910b      	str	r1, [sp, #44]	; 0x2c
 8006ae4:	f7ff fed4 	bl	8006890 <__cvt>
 8006ae8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006aea:	4680      	mov	r8, r0
 8006aec:	2947      	cmp	r1, #71	; 0x47
 8006aee:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006af0:	d108      	bne.n	8006b04 <_printf_float+0x138>
 8006af2:	1cc8      	adds	r0, r1, #3
 8006af4:	db02      	blt.n	8006afc <_printf_float+0x130>
 8006af6:	6863      	ldr	r3, [r4, #4]
 8006af8:	4299      	cmp	r1, r3
 8006afa:	dd40      	ble.n	8006b7e <_printf_float+0x1b2>
 8006afc:	f1a9 0902 	sub.w	r9, r9, #2
 8006b00:	fa5f f989 	uxtb.w	r9, r9
 8006b04:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006b08:	d81f      	bhi.n	8006b4a <_printf_float+0x17e>
 8006b0a:	464a      	mov	r2, r9
 8006b0c:	3901      	subs	r1, #1
 8006b0e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006b12:	910d      	str	r1, [sp, #52]	; 0x34
 8006b14:	f7ff ff1b 	bl	800694e <__exponent>
 8006b18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b1a:	4682      	mov	sl, r0
 8006b1c:	1813      	adds	r3, r2, r0
 8006b1e:	2a01      	cmp	r2, #1
 8006b20:	6123      	str	r3, [r4, #16]
 8006b22:	dc02      	bgt.n	8006b2a <_printf_float+0x15e>
 8006b24:	6822      	ldr	r2, [r4, #0]
 8006b26:	07d2      	lsls	r2, r2, #31
 8006b28:	d501      	bpl.n	8006b2e <_printf_float+0x162>
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	6123      	str	r3, [r4, #16]
 8006b2e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d09b      	beq.n	8006a6e <_printf_float+0xa2>
 8006b36:	232d      	movs	r3, #45	; 0x2d
 8006b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b3c:	e797      	b.n	8006a6e <_printf_float+0xa2>
 8006b3e:	2947      	cmp	r1, #71	; 0x47
 8006b40:	d1bc      	bne.n	8006abc <_printf_float+0xf0>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1ba      	bne.n	8006abc <_printf_float+0xf0>
 8006b46:	2301      	movs	r3, #1
 8006b48:	e7b7      	b.n	8006aba <_printf_float+0xee>
 8006b4a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006b4e:	d118      	bne.n	8006b82 <_printf_float+0x1b6>
 8006b50:	2900      	cmp	r1, #0
 8006b52:	6863      	ldr	r3, [r4, #4]
 8006b54:	dd0b      	ble.n	8006b6e <_printf_float+0x1a2>
 8006b56:	6121      	str	r1, [r4, #16]
 8006b58:	b913      	cbnz	r3, 8006b60 <_printf_float+0x194>
 8006b5a:	6822      	ldr	r2, [r4, #0]
 8006b5c:	07d0      	lsls	r0, r2, #31
 8006b5e:	d502      	bpl.n	8006b66 <_printf_float+0x19a>
 8006b60:	3301      	adds	r3, #1
 8006b62:	440b      	add	r3, r1
 8006b64:	6123      	str	r3, [r4, #16]
 8006b66:	f04f 0a00 	mov.w	sl, #0
 8006b6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006b6c:	e7df      	b.n	8006b2e <_printf_float+0x162>
 8006b6e:	b913      	cbnz	r3, 8006b76 <_printf_float+0x1aa>
 8006b70:	6822      	ldr	r2, [r4, #0]
 8006b72:	07d2      	lsls	r2, r2, #31
 8006b74:	d501      	bpl.n	8006b7a <_printf_float+0x1ae>
 8006b76:	3302      	adds	r3, #2
 8006b78:	e7f4      	b.n	8006b64 <_printf_float+0x198>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e7f2      	b.n	8006b64 <_printf_float+0x198>
 8006b7e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006b82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b84:	4299      	cmp	r1, r3
 8006b86:	db05      	blt.n	8006b94 <_printf_float+0x1c8>
 8006b88:	6823      	ldr	r3, [r4, #0]
 8006b8a:	6121      	str	r1, [r4, #16]
 8006b8c:	07d8      	lsls	r0, r3, #31
 8006b8e:	d5ea      	bpl.n	8006b66 <_printf_float+0x19a>
 8006b90:	1c4b      	adds	r3, r1, #1
 8006b92:	e7e7      	b.n	8006b64 <_printf_float+0x198>
 8006b94:	2900      	cmp	r1, #0
 8006b96:	bfcc      	ite	gt
 8006b98:	2201      	movgt	r2, #1
 8006b9a:	f1c1 0202 	rsble	r2, r1, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	e7e0      	b.n	8006b64 <_printf_float+0x198>
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	055a      	lsls	r2, r3, #21
 8006ba6:	d407      	bmi.n	8006bb8 <_printf_float+0x1ec>
 8006ba8:	6923      	ldr	r3, [r4, #16]
 8006baa:	4642      	mov	r2, r8
 8006bac:	4631      	mov	r1, r6
 8006bae:	4628      	mov	r0, r5
 8006bb0:	47b8      	blx	r7
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	d12b      	bne.n	8006c0e <_printf_float+0x242>
 8006bb6:	e764      	b.n	8006a82 <_printf_float+0xb6>
 8006bb8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006bbc:	f240 80dd 	bls.w	8006d7a <_printf_float+0x3ae>
 8006bc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	f7fa f80e 	bl	8000be8 <__aeabi_dcmpeq>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d033      	beq.n	8006c38 <_printf_float+0x26c>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	4631      	mov	r1, r6
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	4a35      	ldr	r2, [pc, #212]	; (8006cac <_printf_float+0x2e0>)
 8006bd8:	47b8      	blx	r7
 8006bda:	3001      	adds	r0, #1
 8006bdc:	f43f af51 	beq.w	8006a82 <_printf_float+0xb6>
 8006be0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006be4:	429a      	cmp	r2, r3
 8006be6:	db02      	blt.n	8006bee <_printf_float+0x222>
 8006be8:	6823      	ldr	r3, [r4, #0]
 8006bea:	07d8      	lsls	r0, r3, #31
 8006bec:	d50f      	bpl.n	8006c0e <_printf_float+0x242>
 8006bee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	47b8      	blx	r7
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	f43f af42 	beq.w	8006a82 <_printf_float+0xb6>
 8006bfe:	f04f 0800 	mov.w	r8, #0
 8006c02:	f104 091a 	add.w	r9, r4, #26
 8006c06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	4543      	cmp	r3, r8
 8006c0c:	dc09      	bgt.n	8006c22 <_printf_float+0x256>
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	079b      	lsls	r3, r3, #30
 8006c12:	f100 8102 	bmi.w	8006e1a <_printf_float+0x44e>
 8006c16:	68e0      	ldr	r0, [r4, #12]
 8006c18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c1a:	4298      	cmp	r0, r3
 8006c1c:	bfb8      	it	lt
 8006c1e:	4618      	movlt	r0, r3
 8006c20:	e731      	b.n	8006a86 <_printf_float+0xba>
 8006c22:	2301      	movs	r3, #1
 8006c24:	464a      	mov	r2, r9
 8006c26:	4631      	mov	r1, r6
 8006c28:	4628      	mov	r0, r5
 8006c2a:	47b8      	blx	r7
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	f43f af28 	beq.w	8006a82 <_printf_float+0xb6>
 8006c32:	f108 0801 	add.w	r8, r8, #1
 8006c36:	e7e6      	b.n	8006c06 <_printf_float+0x23a>
 8006c38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	dc38      	bgt.n	8006cb0 <_printf_float+0x2e4>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	4631      	mov	r1, r6
 8006c42:	4628      	mov	r0, r5
 8006c44:	4a19      	ldr	r2, [pc, #100]	; (8006cac <_printf_float+0x2e0>)
 8006c46:	47b8      	blx	r7
 8006c48:	3001      	adds	r0, #1
 8006c4a:	f43f af1a 	beq.w	8006a82 <_printf_float+0xb6>
 8006c4e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006c52:	4313      	orrs	r3, r2
 8006c54:	d102      	bne.n	8006c5c <_printf_float+0x290>
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	07d9      	lsls	r1, r3, #31
 8006c5a:	d5d8      	bpl.n	8006c0e <_printf_float+0x242>
 8006c5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c60:	4631      	mov	r1, r6
 8006c62:	4628      	mov	r0, r5
 8006c64:	47b8      	blx	r7
 8006c66:	3001      	adds	r0, #1
 8006c68:	f43f af0b 	beq.w	8006a82 <_printf_float+0xb6>
 8006c6c:	f04f 0900 	mov.w	r9, #0
 8006c70:	f104 0a1a 	add.w	sl, r4, #26
 8006c74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c76:	425b      	negs	r3, r3
 8006c78:	454b      	cmp	r3, r9
 8006c7a:	dc01      	bgt.n	8006c80 <_printf_float+0x2b4>
 8006c7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c7e:	e794      	b.n	8006baa <_printf_float+0x1de>
 8006c80:	2301      	movs	r3, #1
 8006c82:	4652      	mov	r2, sl
 8006c84:	4631      	mov	r1, r6
 8006c86:	4628      	mov	r0, r5
 8006c88:	47b8      	blx	r7
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	f43f aef9 	beq.w	8006a82 <_printf_float+0xb6>
 8006c90:	f109 0901 	add.w	r9, r9, #1
 8006c94:	e7ee      	b.n	8006c74 <_printf_float+0x2a8>
 8006c96:	bf00      	nop
 8006c98:	7fefffff 	.word	0x7fefffff
 8006c9c:	0800b190 	.word	0x0800b190
 8006ca0:	0800b194 	.word	0x0800b194
 8006ca4:	0800b19c 	.word	0x0800b19c
 8006ca8:	0800b198 	.word	0x0800b198
 8006cac:	0800b1a0 	.word	0x0800b1a0
 8006cb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	bfa8      	it	ge
 8006cb8:	461a      	movge	r2, r3
 8006cba:	2a00      	cmp	r2, #0
 8006cbc:	4691      	mov	r9, r2
 8006cbe:	dc37      	bgt.n	8006d30 <_printf_float+0x364>
 8006cc0:	f04f 0b00 	mov.w	fp, #0
 8006cc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cc8:	f104 021a 	add.w	r2, r4, #26
 8006ccc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006cd0:	ebaa 0309 	sub.w	r3, sl, r9
 8006cd4:	455b      	cmp	r3, fp
 8006cd6:	dc33      	bgt.n	8006d40 <_printf_float+0x374>
 8006cd8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	db3b      	blt.n	8006d58 <_printf_float+0x38c>
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	07da      	lsls	r2, r3, #31
 8006ce4:	d438      	bmi.n	8006d58 <_printf_float+0x38c>
 8006ce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ce8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006cea:	eba3 020a 	sub.w	r2, r3, sl
 8006cee:	eba3 0901 	sub.w	r9, r3, r1
 8006cf2:	4591      	cmp	r9, r2
 8006cf4:	bfa8      	it	ge
 8006cf6:	4691      	movge	r9, r2
 8006cf8:	f1b9 0f00 	cmp.w	r9, #0
 8006cfc:	dc34      	bgt.n	8006d68 <_printf_float+0x39c>
 8006cfe:	f04f 0800 	mov.w	r8, #0
 8006d02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d06:	f104 0a1a 	add.w	sl, r4, #26
 8006d0a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006d0e:	1a9b      	subs	r3, r3, r2
 8006d10:	eba3 0309 	sub.w	r3, r3, r9
 8006d14:	4543      	cmp	r3, r8
 8006d16:	f77f af7a 	ble.w	8006c0e <_printf_float+0x242>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	4652      	mov	r2, sl
 8006d1e:	4631      	mov	r1, r6
 8006d20:	4628      	mov	r0, r5
 8006d22:	47b8      	blx	r7
 8006d24:	3001      	adds	r0, #1
 8006d26:	f43f aeac 	beq.w	8006a82 <_printf_float+0xb6>
 8006d2a:	f108 0801 	add.w	r8, r8, #1
 8006d2e:	e7ec      	b.n	8006d0a <_printf_float+0x33e>
 8006d30:	4613      	mov	r3, r2
 8006d32:	4631      	mov	r1, r6
 8006d34:	4642      	mov	r2, r8
 8006d36:	4628      	mov	r0, r5
 8006d38:	47b8      	blx	r7
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	d1c0      	bne.n	8006cc0 <_printf_float+0x2f4>
 8006d3e:	e6a0      	b.n	8006a82 <_printf_float+0xb6>
 8006d40:	2301      	movs	r3, #1
 8006d42:	4631      	mov	r1, r6
 8006d44:	4628      	mov	r0, r5
 8006d46:	920b      	str	r2, [sp, #44]	; 0x2c
 8006d48:	47b8      	blx	r7
 8006d4a:	3001      	adds	r0, #1
 8006d4c:	f43f ae99 	beq.w	8006a82 <_printf_float+0xb6>
 8006d50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d52:	f10b 0b01 	add.w	fp, fp, #1
 8006d56:	e7b9      	b.n	8006ccc <_printf_float+0x300>
 8006d58:	4631      	mov	r1, r6
 8006d5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d5e:	4628      	mov	r0, r5
 8006d60:	47b8      	blx	r7
 8006d62:	3001      	adds	r0, #1
 8006d64:	d1bf      	bne.n	8006ce6 <_printf_float+0x31a>
 8006d66:	e68c      	b.n	8006a82 <_printf_float+0xb6>
 8006d68:	464b      	mov	r3, r9
 8006d6a:	4631      	mov	r1, r6
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	eb08 020a 	add.w	r2, r8, sl
 8006d72:	47b8      	blx	r7
 8006d74:	3001      	adds	r0, #1
 8006d76:	d1c2      	bne.n	8006cfe <_printf_float+0x332>
 8006d78:	e683      	b.n	8006a82 <_printf_float+0xb6>
 8006d7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d7c:	2a01      	cmp	r2, #1
 8006d7e:	dc01      	bgt.n	8006d84 <_printf_float+0x3b8>
 8006d80:	07db      	lsls	r3, r3, #31
 8006d82:	d537      	bpl.n	8006df4 <_printf_float+0x428>
 8006d84:	2301      	movs	r3, #1
 8006d86:	4642      	mov	r2, r8
 8006d88:	4631      	mov	r1, r6
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	47b8      	blx	r7
 8006d8e:	3001      	adds	r0, #1
 8006d90:	f43f ae77 	beq.w	8006a82 <_printf_float+0xb6>
 8006d94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d98:	4631      	mov	r1, r6
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	47b8      	blx	r7
 8006d9e:	3001      	adds	r0, #1
 8006da0:	f43f ae6f 	beq.w	8006a82 <_printf_float+0xb6>
 8006da4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006da8:	2200      	movs	r2, #0
 8006daa:	2300      	movs	r3, #0
 8006dac:	f7f9 ff1c 	bl	8000be8 <__aeabi_dcmpeq>
 8006db0:	b9d8      	cbnz	r0, 8006dea <_printf_float+0x41e>
 8006db2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006db4:	f108 0201 	add.w	r2, r8, #1
 8006db8:	3b01      	subs	r3, #1
 8006dba:	4631      	mov	r1, r6
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	47b8      	blx	r7
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	d10e      	bne.n	8006de2 <_printf_float+0x416>
 8006dc4:	e65d      	b.n	8006a82 <_printf_float+0xb6>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	464a      	mov	r2, r9
 8006dca:	4631      	mov	r1, r6
 8006dcc:	4628      	mov	r0, r5
 8006dce:	47b8      	blx	r7
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	f43f ae56 	beq.w	8006a82 <_printf_float+0xb6>
 8006dd6:	f108 0801 	add.w	r8, r8, #1
 8006dda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	4543      	cmp	r3, r8
 8006de0:	dcf1      	bgt.n	8006dc6 <_printf_float+0x3fa>
 8006de2:	4653      	mov	r3, sl
 8006de4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006de8:	e6e0      	b.n	8006bac <_printf_float+0x1e0>
 8006dea:	f04f 0800 	mov.w	r8, #0
 8006dee:	f104 091a 	add.w	r9, r4, #26
 8006df2:	e7f2      	b.n	8006dda <_printf_float+0x40e>
 8006df4:	2301      	movs	r3, #1
 8006df6:	4642      	mov	r2, r8
 8006df8:	e7df      	b.n	8006dba <_printf_float+0x3ee>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	464a      	mov	r2, r9
 8006dfe:	4631      	mov	r1, r6
 8006e00:	4628      	mov	r0, r5
 8006e02:	47b8      	blx	r7
 8006e04:	3001      	adds	r0, #1
 8006e06:	f43f ae3c 	beq.w	8006a82 <_printf_float+0xb6>
 8006e0a:	f108 0801 	add.w	r8, r8, #1
 8006e0e:	68e3      	ldr	r3, [r4, #12]
 8006e10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006e12:	1a5b      	subs	r3, r3, r1
 8006e14:	4543      	cmp	r3, r8
 8006e16:	dcf0      	bgt.n	8006dfa <_printf_float+0x42e>
 8006e18:	e6fd      	b.n	8006c16 <_printf_float+0x24a>
 8006e1a:	f04f 0800 	mov.w	r8, #0
 8006e1e:	f104 0919 	add.w	r9, r4, #25
 8006e22:	e7f4      	b.n	8006e0e <_printf_float+0x442>

08006e24 <_printf_common>:
 8006e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e28:	4616      	mov	r6, r2
 8006e2a:	4699      	mov	r9, r3
 8006e2c:	688a      	ldr	r2, [r1, #8]
 8006e2e:	690b      	ldr	r3, [r1, #16]
 8006e30:	4607      	mov	r7, r0
 8006e32:	4293      	cmp	r3, r2
 8006e34:	bfb8      	it	lt
 8006e36:	4613      	movlt	r3, r2
 8006e38:	6033      	str	r3, [r6, #0]
 8006e3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e3e:	460c      	mov	r4, r1
 8006e40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e44:	b10a      	cbz	r2, 8006e4a <_printf_common+0x26>
 8006e46:	3301      	adds	r3, #1
 8006e48:	6033      	str	r3, [r6, #0]
 8006e4a:	6823      	ldr	r3, [r4, #0]
 8006e4c:	0699      	lsls	r1, r3, #26
 8006e4e:	bf42      	ittt	mi
 8006e50:	6833      	ldrmi	r3, [r6, #0]
 8006e52:	3302      	addmi	r3, #2
 8006e54:	6033      	strmi	r3, [r6, #0]
 8006e56:	6825      	ldr	r5, [r4, #0]
 8006e58:	f015 0506 	ands.w	r5, r5, #6
 8006e5c:	d106      	bne.n	8006e6c <_printf_common+0x48>
 8006e5e:	f104 0a19 	add.w	sl, r4, #25
 8006e62:	68e3      	ldr	r3, [r4, #12]
 8006e64:	6832      	ldr	r2, [r6, #0]
 8006e66:	1a9b      	subs	r3, r3, r2
 8006e68:	42ab      	cmp	r3, r5
 8006e6a:	dc28      	bgt.n	8006ebe <_printf_common+0x9a>
 8006e6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e70:	1e13      	subs	r3, r2, #0
 8006e72:	6822      	ldr	r2, [r4, #0]
 8006e74:	bf18      	it	ne
 8006e76:	2301      	movne	r3, #1
 8006e78:	0692      	lsls	r2, r2, #26
 8006e7a:	d42d      	bmi.n	8006ed8 <_printf_common+0xb4>
 8006e7c:	4649      	mov	r1, r9
 8006e7e:	4638      	mov	r0, r7
 8006e80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e84:	47c0      	blx	r8
 8006e86:	3001      	adds	r0, #1
 8006e88:	d020      	beq.n	8006ecc <_printf_common+0xa8>
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	68e5      	ldr	r5, [r4, #12]
 8006e8e:	f003 0306 	and.w	r3, r3, #6
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	bf18      	it	ne
 8006e96:	2500      	movne	r5, #0
 8006e98:	6832      	ldr	r2, [r6, #0]
 8006e9a:	f04f 0600 	mov.w	r6, #0
 8006e9e:	68a3      	ldr	r3, [r4, #8]
 8006ea0:	bf08      	it	eq
 8006ea2:	1aad      	subeq	r5, r5, r2
 8006ea4:	6922      	ldr	r2, [r4, #16]
 8006ea6:	bf08      	it	eq
 8006ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006eac:	4293      	cmp	r3, r2
 8006eae:	bfc4      	itt	gt
 8006eb0:	1a9b      	subgt	r3, r3, r2
 8006eb2:	18ed      	addgt	r5, r5, r3
 8006eb4:	341a      	adds	r4, #26
 8006eb6:	42b5      	cmp	r5, r6
 8006eb8:	d11a      	bne.n	8006ef0 <_printf_common+0xcc>
 8006eba:	2000      	movs	r0, #0
 8006ebc:	e008      	b.n	8006ed0 <_printf_common+0xac>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	4652      	mov	r2, sl
 8006ec2:	4649      	mov	r1, r9
 8006ec4:	4638      	mov	r0, r7
 8006ec6:	47c0      	blx	r8
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d103      	bne.n	8006ed4 <_printf_common+0xb0>
 8006ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed4:	3501      	adds	r5, #1
 8006ed6:	e7c4      	b.n	8006e62 <_printf_common+0x3e>
 8006ed8:	2030      	movs	r0, #48	; 0x30
 8006eda:	18e1      	adds	r1, r4, r3
 8006edc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ee6:	4422      	add	r2, r4
 8006ee8:	3302      	adds	r3, #2
 8006eea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006eee:	e7c5      	b.n	8006e7c <_printf_common+0x58>
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	4622      	mov	r2, r4
 8006ef4:	4649      	mov	r1, r9
 8006ef6:	4638      	mov	r0, r7
 8006ef8:	47c0      	blx	r8
 8006efa:	3001      	adds	r0, #1
 8006efc:	d0e6      	beq.n	8006ecc <_printf_common+0xa8>
 8006efe:	3601      	adds	r6, #1
 8006f00:	e7d9      	b.n	8006eb6 <_printf_common+0x92>
	...

08006f04 <_printf_i>:
 8006f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f08:	7e0f      	ldrb	r7, [r1, #24]
 8006f0a:	4691      	mov	r9, r2
 8006f0c:	2f78      	cmp	r7, #120	; 0x78
 8006f0e:	4680      	mov	r8, r0
 8006f10:	460c      	mov	r4, r1
 8006f12:	469a      	mov	sl, r3
 8006f14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f1a:	d807      	bhi.n	8006f2c <_printf_i+0x28>
 8006f1c:	2f62      	cmp	r7, #98	; 0x62
 8006f1e:	d80a      	bhi.n	8006f36 <_printf_i+0x32>
 8006f20:	2f00      	cmp	r7, #0
 8006f22:	f000 80d9 	beq.w	80070d8 <_printf_i+0x1d4>
 8006f26:	2f58      	cmp	r7, #88	; 0x58
 8006f28:	f000 80a4 	beq.w	8007074 <_printf_i+0x170>
 8006f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f34:	e03a      	b.n	8006fac <_printf_i+0xa8>
 8006f36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f3a:	2b15      	cmp	r3, #21
 8006f3c:	d8f6      	bhi.n	8006f2c <_printf_i+0x28>
 8006f3e:	a101      	add	r1, pc, #4	; (adr r1, 8006f44 <_printf_i+0x40>)
 8006f40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f44:	08006f9d 	.word	0x08006f9d
 8006f48:	08006fb1 	.word	0x08006fb1
 8006f4c:	08006f2d 	.word	0x08006f2d
 8006f50:	08006f2d 	.word	0x08006f2d
 8006f54:	08006f2d 	.word	0x08006f2d
 8006f58:	08006f2d 	.word	0x08006f2d
 8006f5c:	08006fb1 	.word	0x08006fb1
 8006f60:	08006f2d 	.word	0x08006f2d
 8006f64:	08006f2d 	.word	0x08006f2d
 8006f68:	08006f2d 	.word	0x08006f2d
 8006f6c:	08006f2d 	.word	0x08006f2d
 8006f70:	080070bf 	.word	0x080070bf
 8006f74:	08006fe1 	.word	0x08006fe1
 8006f78:	080070a1 	.word	0x080070a1
 8006f7c:	08006f2d 	.word	0x08006f2d
 8006f80:	08006f2d 	.word	0x08006f2d
 8006f84:	080070e1 	.word	0x080070e1
 8006f88:	08006f2d 	.word	0x08006f2d
 8006f8c:	08006fe1 	.word	0x08006fe1
 8006f90:	08006f2d 	.word	0x08006f2d
 8006f94:	08006f2d 	.word	0x08006f2d
 8006f98:	080070a9 	.word	0x080070a9
 8006f9c:	682b      	ldr	r3, [r5, #0]
 8006f9e:	1d1a      	adds	r2, r3, #4
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	602a      	str	r2, [r5, #0]
 8006fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fac:	2301      	movs	r3, #1
 8006fae:	e0a4      	b.n	80070fa <_printf_i+0x1f6>
 8006fb0:	6820      	ldr	r0, [r4, #0]
 8006fb2:	6829      	ldr	r1, [r5, #0]
 8006fb4:	0606      	lsls	r6, r0, #24
 8006fb6:	f101 0304 	add.w	r3, r1, #4
 8006fba:	d50a      	bpl.n	8006fd2 <_printf_i+0xce>
 8006fbc:	680e      	ldr	r6, [r1, #0]
 8006fbe:	602b      	str	r3, [r5, #0]
 8006fc0:	2e00      	cmp	r6, #0
 8006fc2:	da03      	bge.n	8006fcc <_printf_i+0xc8>
 8006fc4:	232d      	movs	r3, #45	; 0x2d
 8006fc6:	4276      	negs	r6, r6
 8006fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fcc:	230a      	movs	r3, #10
 8006fce:	485e      	ldr	r0, [pc, #376]	; (8007148 <_printf_i+0x244>)
 8006fd0:	e019      	b.n	8007006 <_printf_i+0x102>
 8006fd2:	680e      	ldr	r6, [r1, #0]
 8006fd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fd8:	602b      	str	r3, [r5, #0]
 8006fda:	bf18      	it	ne
 8006fdc:	b236      	sxthne	r6, r6
 8006fde:	e7ef      	b.n	8006fc0 <_printf_i+0xbc>
 8006fe0:	682b      	ldr	r3, [r5, #0]
 8006fe2:	6820      	ldr	r0, [r4, #0]
 8006fe4:	1d19      	adds	r1, r3, #4
 8006fe6:	6029      	str	r1, [r5, #0]
 8006fe8:	0601      	lsls	r1, r0, #24
 8006fea:	d501      	bpl.n	8006ff0 <_printf_i+0xec>
 8006fec:	681e      	ldr	r6, [r3, #0]
 8006fee:	e002      	b.n	8006ff6 <_printf_i+0xf2>
 8006ff0:	0646      	lsls	r6, r0, #25
 8006ff2:	d5fb      	bpl.n	8006fec <_printf_i+0xe8>
 8006ff4:	881e      	ldrh	r6, [r3, #0]
 8006ff6:	2f6f      	cmp	r7, #111	; 0x6f
 8006ff8:	bf0c      	ite	eq
 8006ffa:	2308      	moveq	r3, #8
 8006ffc:	230a      	movne	r3, #10
 8006ffe:	4852      	ldr	r0, [pc, #328]	; (8007148 <_printf_i+0x244>)
 8007000:	2100      	movs	r1, #0
 8007002:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007006:	6865      	ldr	r5, [r4, #4]
 8007008:	2d00      	cmp	r5, #0
 800700a:	bfa8      	it	ge
 800700c:	6821      	ldrge	r1, [r4, #0]
 800700e:	60a5      	str	r5, [r4, #8]
 8007010:	bfa4      	itt	ge
 8007012:	f021 0104 	bicge.w	r1, r1, #4
 8007016:	6021      	strge	r1, [r4, #0]
 8007018:	b90e      	cbnz	r6, 800701e <_printf_i+0x11a>
 800701a:	2d00      	cmp	r5, #0
 800701c:	d04d      	beq.n	80070ba <_printf_i+0x1b6>
 800701e:	4615      	mov	r5, r2
 8007020:	fbb6 f1f3 	udiv	r1, r6, r3
 8007024:	fb03 6711 	mls	r7, r3, r1, r6
 8007028:	5dc7      	ldrb	r7, [r0, r7]
 800702a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800702e:	4637      	mov	r7, r6
 8007030:	42bb      	cmp	r3, r7
 8007032:	460e      	mov	r6, r1
 8007034:	d9f4      	bls.n	8007020 <_printf_i+0x11c>
 8007036:	2b08      	cmp	r3, #8
 8007038:	d10b      	bne.n	8007052 <_printf_i+0x14e>
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	07de      	lsls	r6, r3, #31
 800703e:	d508      	bpl.n	8007052 <_printf_i+0x14e>
 8007040:	6923      	ldr	r3, [r4, #16]
 8007042:	6861      	ldr	r1, [r4, #4]
 8007044:	4299      	cmp	r1, r3
 8007046:	bfde      	ittt	le
 8007048:	2330      	movle	r3, #48	; 0x30
 800704a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800704e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007052:	1b52      	subs	r2, r2, r5
 8007054:	6122      	str	r2, [r4, #16]
 8007056:	464b      	mov	r3, r9
 8007058:	4621      	mov	r1, r4
 800705a:	4640      	mov	r0, r8
 800705c:	f8cd a000 	str.w	sl, [sp]
 8007060:	aa03      	add	r2, sp, #12
 8007062:	f7ff fedf 	bl	8006e24 <_printf_common>
 8007066:	3001      	adds	r0, #1
 8007068:	d14c      	bne.n	8007104 <_printf_i+0x200>
 800706a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800706e:	b004      	add	sp, #16
 8007070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007074:	4834      	ldr	r0, [pc, #208]	; (8007148 <_printf_i+0x244>)
 8007076:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800707a:	6829      	ldr	r1, [r5, #0]
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	f851 6b04 	ldr.w	r6, [r1], #4
 8007082:	6029      	str	r1, [r5, #0]
 8007084:	061d      	lsls	r5, r3, #24
 8007086:	d514      	bpl.n	80070b2 <_printf_i+0x1ae>
 8007088:	07df      	lsls	r7, r3, #31
 800708a:	bf44      	itt	mi
 800708c:	f043 0320 	orrmi.w	r3, r3, #32
 8007090:	6023      	strmi	r3, [r4, #0]
 8007092:	b91e      	cbnz	r6, 800709c <_printf_i+0x198>
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	f023 0320 	bic.w	r3, r3, #32
 800709a:	6023      	str	r3, [r4, #0]
 800709c:	2310      	movs	r3, #16
 800709e:	e7af      	b.n	8007000 <_printf_i+0xfc>
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	f043 0320 	orr.w	r3, r3, #32
 80070a6:	6023      	str	r3, [r4, #0]
 80070a8:	2378      	movs	r3, #120	; 0x78
 80070aa:	4828      	ldr	r0, [pc, #160]	; (800714c <_printf_i+0x248>)
 80070ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070b0:	e7e3      	b.n	800707a <_printf_i+0x176>
 80070b2:	0659      	lsls	r1, r3, #25
 80070b4:	bf48      	it	mi
 80070b6:	b2b6      	uxthmi	r6, r6
 80070b8:	e7e6      	b.n	8007088 <_printf_i+0x184>
 80070ba:	4615      	mov	r5, r2
 80070bc:	e7bb      	b.n	8007036 <_printf_i+0x132>
 80070be:	682b      	ldr	r3, [r5, #0]
 80070c0:	6826      	ldr	r6, [r4, #0]
 80070c2:	1d18      	adds	r0, r3, #4
 80070c4:	6961      	ldr	r1, [r4, #20]
 80070c6:	6028      	str	r0, [r5, #0]
 80070c8:	0635      	lsls	r5, r6, #24
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	d501      	bpl.n	80070d2 <_printf_i+0x1ce>
 80070ce:	6019      	str	r1, [r3, #0]
 80070d0:	e002      	b.n	80070d8 <_printf_i+0x1d4>
 80070d2:	0670      	lsls	r0, r6, #25
 80070d4:	d5fb      	bpl.n	80070ce <_printf_i+0x1ca>
 80070d6:	8019      	strh	r1, [r3, #0]
 80070d8:	2300      	movs	r3, #0
 80070da:	4615      	mov	r5, r2
 80070dc:	6123      	str	r3, [r4, #16]
 80070de:	e7ba      	b.n	8007056 <_printf_i+0x152>
 80070e0:	682b      	ldr	r3, [r5, #0]
 80070e2:	2100      	movs	r1, #0
 80070e4:	1d1a      	adds	r2, r3, #4
 80070e6:	602a      	str	r2, [r5, #0]
 80070e8:	681d      	ldr	r5, [r3, #0]
 80070ea:	6862      	ldr	r2, [r4, #4]
 80070ec:	4628      	mov	r0, r5
 80070ee:	f002 faed 	bl	80096cc <memchr>
 80070f2:	b108      	cbz	r0, 80070f8 <_printf_i+0x1f4>
 80070f4:	1b40      	subs	r0, r0, r5
 80070f6:	6060      	str	r0, [r4, #4]
 80070f8:	6863      	ldr	r3, [r4, #4]
 80070fa:	6123      	str	r3, [r4, #16]
 80070fc:	2300      	movs	r3, #0
 80070fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007102:	e7a8      	b.n	8007056 <_printf_i+0x152>
 8007104:	462a      	mov	r2, r5
 8007106:	4649      	mov	r1, r9
 8007108:	4640      	mov	r0, r8
 800710a:	6923      	ldr	r3, [r4, #16]
 800710c:	47d0      	blx	sl
 800710e:	3001      	adds	r0, #1
 8007110:	d0ab      	beq.n	800706a <_printf_i+0x166>
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	079b      	lsls	r3, r3, #30
 8007116:	d413      	bmi.n	8007140 <_printf_i+0x23c>
 8007118:	68e0      	ldr	r0, [r4, #12]
 800711a:	9b03      	ldr	r3, [sp, #12]
 800711c:	4298      	cmp	r0, r3
 800711e:	bfb8      	it	lt
 8007120:	4618      	movlt	r0, r3
 8007122:	e7a4      	b.n	800706e <_printf_i+0x16a>
 8007124:	2301      	movs	r3, #1
 8007126:	4632      	mov	r2, r6
 8007128:	4649      	mov	r1, r9
 800712a:	4640      	mov	r0, r8
 800712c:	47d0      	blx	sl
 800712e:	3001      	adds	r0, #1
 8007130:	d09b      	beq.n	800706a <_printf_i+0x166>
 8007132:	3501      	adds	r5, #1
 8007134:	68e3      	ldr	r3, [r4, #12]
 8007136:	9903      	ldr	r1, [sp, #12]
 8007138:	1a5b      	subs	r3, r3, r1
 800713a:	42ab      	cmp	r3, r5
 800713c:	dcf2      	bgt.n	8007124 <_printf_i+0x220>
 800713e:	e7eb      	b.n	8007118 <_printf_i+0x214>
 8007140:	2500      	movs	r5, #0
 8007142:	f104 0619 	add.w	r6, r4, #25
 8007146:	e7f5      	b.n	8007134 <_printf_i+0x230>
 8007148:	0800b1a2 	.word	0x0800b1a2
 800714c:	0800b1b3 	.word	0x0800b1b3

08007150 <_scanf_float>:
 8007150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007154:	b087      	sub	sp, #28
 8007156:	9303      	str	r3, [sp, #12]
 8007158:	688b      	ldr	r3, [r1, #8]
 800715a:	4617      	mov	r7, r2
 800715c:	1e5a      	subs	r2, r3, #1
 800715e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007162:	bf85      	ittet	hi
 8007164:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007168:	195b      	addhi	r3, r3, r5
 800716a:	2300      	movls	r3, #0
 800716c:	9302      	strhi	r3, [sp, #8]
 800716e:	bf88      	it	hi
 8007170:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007174:	468b      	mov	fp, r1
 8007176:	f04f 0500 	mov.w	r5, #0
 800717a:	bf8c      	ite	hi
 800717c:	608b      	strhi	r3, [r1, #8]
 800717e:	9302      	strls	r3, [sp, #8]
 8007180:	680b      	ldr	r3, [r1, #0]
 8007182:	4680      	mov	r8, r0
 8007184:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007188:	f84b 3b1c 	str.w	r3, [fp], #28
 800718c:	460c      	mov	r4, r1
 800718e:	465e      	mov	r6, fp
 8007190:	46aa      	mov	sl, r5
 8007192:	46a9      	mov	r9, r5
 8007194:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007198:	9501      	str	r5, [sp, #4]
 800719a:	68a2      	ldr	r2, [r4, #8]
 800719c:	b152      	cbz	r2, 80071b4 <_scanf_float+0x64>
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	2b4e      	cmp	r3, #78	; 0x4e
 80071a4:	d864      	bhi.n	8007270 <_scanf_float+0x120>
 80071a6:	2b40      	cmp	r3, #64	; 0x40
 80071a8:	d83c      	bhi.n	8007224 <_scanf_float+0xd4>
 80071aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80071ae:	b2c8      	uxtb	r0, r1
 80071b0:	280e      	cmp	r0, #14
 80071b2:	d93a      	bls.n	800722a <_scanf_float+0xda>
 80071b4:	f1b9 0f00 	cmp.w	r9, #0
 80071b8:	d003      	beq.n	80071c2 <_scanf_float+0x72>
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071c0:	6023      	str	r3, [r4, #0]
 80071c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80071c6:	f1ba 0f01 	cmp.w	sl, #1
 80071ca:	f200 8113 	bhi.w	80073f4 <_scanf_float+0x2a4>
 80071ce:	455e      	cmp	r6, fp
 80071d0:	f200 8105 	bhi.w	80073de <_scanf_float+0x28e>
 80071d4:	2501      	movs	r5, #1
 80071d6:	4628      	mov	r0, r5
 80071d8:	b007      	add	sp, #28
 80071da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80071e2:	2a0d      	cmp	r2, #13
 80071e4:	d8e6      	bhi.n	80071b4 <_scanf_float+0x64>
 80071e6:	a101      	add	r1, pc, #4	; (adr r1, 80071ec <_scanf_float+0x9c>)
 80071e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80071ec:	0800732b 	.word	0x0800732b
 80071f0:	080071b5 	.word	0x080071b5
 80071f4:	080071b5 	.word	0x080071b5
 80071f8:	080071b5 	.word	0x080071b5
 80071fc:	0800738b 	.word	0x0800738b
 8007200:	08007363 	.word	0x08007363
 8007204:	080071b5 	.word	0x080071b5
 8007208:	080071b5 	.word	0x080071b5
 800720c:	08007339 	.word	0x08007339
 8007210:	080071b5 	.word	0x080071b5
 8007214:	080071b5 	.word	0x080071b5
 8007218:	080071b5 	.word	0x080071b5
 800721c:	080071b5 	.word	0x080071b5
 8007220:	080072f1 	.word	0x080072f1
 8007224:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007228:	e7db      	b.n	80071e2 <_scanf_float+0x92>
 800722a:	290e      	cmp	r1, #14
 800722c:	d8c2      	bhi.n	80071b4 <_scanf_float+0x64>
 800722e:	a001      	add	r0, pc, #4	; (adr r0, 8007234 <_scanf_float+0xe4>)
 8007230:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007234:	080072e3 	.word	0x080072e3
 8007238:	080071b5 	.word	0x080071b5
 800723c:	080072e3 	.word	0x080072e3
 8007240:	08007377 	.word	0x08007377
 8007244:	080071b5 	.word	0x080071b5
 8007248:	08007291 	.word	0x08007291
 800724c:	080072cd 	.word	0x080072cd
 8007250:	080072cd 	.word	0x080072cd
 8007254:	080072cd 	.word	0x080072cd
 8007258:	080072cd 	.word	0x080072cd
 800725c:	080072cd 	.word	0x080072cd
 8007260:	080072cd 	.word	0x080072cd
 8007264:	080072cd 	.word	0x080072cd
 8007268:	080072cd 	.word	0x080072cd
 800726c:	080072cd 	.word	0x080072cd
 8007270:	2b6e      	cmp	r3, #110	; 0x6e
 8007272:	d809      	bhi.n	8007288 <_scanf_float+0x138>
 8007274:	2b60      	cmp	r3, #96	; 0x60
 8007276:	d8b2      	bhi.n	80071de <_scanf_float+0x8e>
 8007278:	2b54      	cmp	r3, #84	; 0x54
 800727a:	d077      	beq.n	800736c <_scanf_float+0x21c>
 800727c:	2b59      	cmp	r3, #89	; 0x59
 800727e:	d199      	bne.n	80071b4 <_scanf_float+0x64>
 8007280:	2d07      	cmp	r5, #7
 8007282:	d197      	bne.n	80071b4 <_scanf_float+0x64>
 8007284:	2508      	movs	r5, #8
 8007286:	e029      	b.n	80072dc <_scanf_float+0x18c>
 8007288:	2b74      	cmp	r3, #116	; 0x74
 800728a:	d06f      	beq.n	800736c <_scanf_float+0x21c>
 800728c:	2b79      	cmp	r3, #121	; 0x79
 800728e:	e7f6      	b.n	800727e <_scanf_float+0x12e>
 8007290:	6821      	ldr	r1, [r4, #0]
 8007292:	05c8      	lsls	r0, r1, #23
 8007294:	d51a      	bpl.n	80072cc <_scanf_float+0x17c>
 8007296:	9b02      	ldr	r3, [sp, #8]
 8007298:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800729c:	6021      	str	r1, [r4, #0]
 800729e:	f109 0901 	add.w	r9, r9, #1
 80072a2:	b11b      	cbz	r3, 80072ac <_scanf_float+0x15c>
 80072a4:	3b01      	subs	r3, #1
 80072a6:	3201      	adds	r2, #1
 80072a8:	9302      	str	r3, [sp, #8]
 80072aa:	60a2      	str	r2, [r4, #8]
 80072ac:	68a3      	ldr	r3, [r4, #8]
 80072ae:	3b01      	subs	r3, #1
 80072b0:	60a3      	str	r3, [r4, #8]
 80072b2:	6923      	ldr	r3, [r4, #16]
 80072b4:	3301      	adds	r3, #1
 80072b6:	6123      	str	r3, [r4, #16]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	2b00      	cmp	r3, #0
 80072be:	607b      	str	r3, [r7, #4]
 80072c0:	f340 8084 	ble.w	80073cc <_scanf_float+0x27c>
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	3301      	adds	r3, #1
 80072c8:	603b      	str	r3, [r7, #0]
 80072ca:	e766      	b.n	800719a <_scanf_float+0x4a>
 80072cc:	eb1a 0f05 	cmn.w	sl, r5
 80072d0:	f47f af70 	bne.w	80071b4 <_scanf_float+0x64>
 80072d4:	6822      	ldr	r2, [r4, #0]
 80072d6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80072da:	6022      	str	r2, [r4, #0]
 80072dc:	f806 3b01 	strb.w	r3, [r6], #1
 80072e0:	e7e4      	b.n	80072ac <_scanf_float+0x15c>
 80072e2:	6822      	ldr	r2, [r4, #0]
 80072e4:	0610      	lsls	r0, r2, #24
 80072e6:	f57f af65 	bpl.w	80071b4 <_scanf_float+0x64>
 80072ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072ee:	e7f4      	b.n	80072da <_scanf_float+0x18a>
 80072f0:	f1ba 0f00 	cmp.w	sl, #0
 80072f4:	d10e      	bne.n	8007314 <_scanf_float+0x1c4>
 80072f6:	f1b9 0f00 	cmp.w	r9, #0
 80072fa:	d10e      	bne.n	800731a <_scanf_float+0x1ca>
 80072fc:	6822      	ldr	r2, [r4, #0]
 80072fe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007302:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007306:	d108      	bne.n	800731a <_scanf_float+0x1ca>
 8007308:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800730c:	f04f 0a01 	mov.w	sl, #1
 8007310:	6022      	str	r2, [r4, #0]
 8007312:	e7e3      	b.n	80072dc <_scanf_float+0x18c>
 8007314:	f1ba 0f02 	cmp.w	sl, #2
 8007318:	d055      	beq.n	80073c6 <_scanf_float+0x276>
 800731a:	2d01      	cmp	r5, #1
 800731c:	d002      	beq.n	8007324 <_scanf_float+0x1d4>
 800731e:	2d04      	cmp	r5, #4
 8007320:	f47f af48 	bne.w	80071b4 <_scanf_float+0x64>
 8007324:	3501      	adds	r5, #1
 8007326:	b2ed      	uxtb	r5, r5
 8007328:	e7d8      	b.n	80072dc <_scanf_float+0x18c>
 800732a:	f1ba 0f01 	cmp.w	sl, #1
 800732e:	f47f af41 	bne.w	80071b4 <_scanf_float+0x64>
 8007332:	f04f 0a02 	mov.w	sl, #2
 8007336:	e7d1      	b.n	80072dc <_scanf_float+0x18c>
 8007338:	b97d      	cbnz	r5, 800735a <_scanf_float+0x20a>
 800733a:	f1b9 0f00 	cmp.w	r9, #0
 800733e:	f47f af3c 	bne.w	80071ba <_scanf_float+0x6a>
 8007342:	6822      	ldr	r2, [r4, #0]
 8007344:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007348:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800734c:	f47f af39 	bne.w	80071c2 <_scanf_float+0x72>
 8007350:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007354:	2501      	movs	r5, #1
 8007356:	6022      	str	r2, [r4, #0]
 8007358:	e7c0      	b.n	80072dc <_scanf_float+0x18c>
 800735a:	2d03      	cmp	r5, #3
 800735c:	d0e2      	beq.n	8007324 <_scanf_float+0x1d4>
 800735e:	2d05      	cmp	r5, #5
 8007360:	e7de      	b.n	8007320 <_scanf_float+0x1d0>
 8007362:	2d02      	cmp	r5, #2
 8007364:	f47f af26 	bne.w	80071b4 <_scanf_float+0x64>
 8007368:	2503      	movs	r5, #3
 800736a:	e7b7      	b.n	80072dc <_scanf_float+0x18c>
 800736c:	2d06      	cmp	r5, #6
 800736e:	f47f af21 	bne.w	80071b4 <_scanf_float+0x64>
 8007372:	2507      	movs	r5, #7
 8007374:	e7b2      	b.n	80072dc <_scanf_float+0x18c>
 8007376:	6822      	ldr	r2, [r4, #0]
 8007378:	0591      	lsls	r1, r2, #22
 800737a:	f57f af1b 	bpl.w	80071b4 <_scanf_float+0x64>
 800737e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007382:	6022      	str	r2, [r4, #0]
 8007384:	f8cd 9004 	str.w	r9, [sp, #4]
 8007388:	e7a8      	b.n	80072dc <_scanf_float+0x18c>
 800738a:	6822      	ldr	r2, [r4, #0]
 800738c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007390:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007394:	d006      	beq.n	80073a4 <_scanf_float+0x254>
 8007396:	0550      	lsls	r0, r2, #21
 8007398:	f57f af0c 	bpl.w	80071b4 <_scanf_float+0x64>
 800739c:	f1b9 0f00 	cmp.w	r9, #0
 80073a0:	f43f af0f 	beq.w	80071c2 <_scanf_float+0x72>
 80073a4:	0591      	lsls	r1, r2, #22
 80073a6:	bf58      	it	pl
 80073a8:	9901      	ldrpl	r1, [sp, #4]
 80073aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80073ae:	bf58      	it	pl
 80073b0:	eba9 0101 	subpl.w	r1, r9, r1
 80073b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80073b8:	f04f 0900 	mov.w	r9, #0
 80073bc:	bf58      	it	pl
 80073be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80073c2:	6022      	str	r2, [r4, #0]
 80073c4:	e78a      	b.n	80072dc <_scanf_float+0x18c>
 80073c6:	f04f 0a03 	mov.w	sl, #3
 80073ca:	e787      	b.n	80072dc <_scanf_float+0x18c>
 80073cc:	4639      	mov	r1, r7
 80073ce:	4640      	mov	r0, r8
 80073d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80073d4:	4798      	blx	r3
 80073d6:	2800      	cmp	r0, #0
 80073d8:	f43f aedf 	beq.w	800719a <_scanf_float+0x4a>
 80073dc:	e6ea      	b.n	80071b4 <_scanf_float+0x64>
 80073de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073e2:	463a      	mov	r2, r7
 80073e4:	4640      	mov	r0, r8
 80073e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073ea:	4798      	blx	r3
 80073ec:	6923      	ldr	r3, [r4, #16]
 80073ee:	3b01      	subs	r3, #1
 80073f0:	6123      	str	r3, [r4, #16]
 80073f2:	e6ec      	b.n	80071ce <_scanf_float+0x7e>
 80073f4:	1e6b      	subs	r3, r5, #1
 80073f6:	2b06      	cmp	r3, #6
 80073f8:	d825      	bhi.n	8007446 <_scanf_float+0x2f6>
 80073fa:	2d02      	cmp	r5, #2
 80073fc:	d836      	bhi.n	800746c <_scanf_float+0x31c>
 80073fe:	455e      	cmp	r6, fp
 8007400:	f67f aee8 	bls.w	80071d4 <_scanf_float+0x84>
 8007404:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007408:	463a      	mov	r2, r7
 800740a:	4640      	mov	r0, r8
 800740c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007410:	4798      	blx	r3
 8007412:	6923      	ldr	r3, [r4, #16]
 8007414:	3b01      	subs	r3, #1
 8007416:	6123      	str	r3, [r4, #16]
 8007418:	e7f1      	b.n	80073fe <_scanf_float+0x2ae>
 800741a:	9802      	ldr	r0, [sp, #8]
 800741c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007420:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007424:	463a      	mov	r2, r7
 8007426:	9002      	str	r0, [sp, #8]
 8007428:	4640      	mov	r0, r8
 800742a:	4798      	blx	r3
 800742c:	6923      	ldr	r3, [r4, #16]
 800742e:	3b01      	subs	r3, #1
 8007430:	6123      	str	r3, [r4, #16]
 8007432:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007436:	fa5f fa8a 	uxtb.w	sl, sl
 800743a:	f1ba 0f02 	cmp.w	sl, #2
 800743e:	d1ec      	bne.n	800741a <_scanf_float+0x2ca>
 8007440:	3d03      	subs	r5, #3
 8007442:	b2ed      	uxtb	r5, r5
 8007444:	1b76      	subs	r6, r6, r5
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	05da      	lsls	r2, r3, #23
 800744a:	d52f      	bpl.n	80074ac <_scanf_float+0x35c>
 800744c:	055b      	lsls	r3, r3, #21
 800744e:	d510      	bpl.n	8007472 <_scanf_float+0x322>
 8007450:	455e      	cmp	r6, fp
 8007452:	f67f aebf 	bls.w	80071d4 <_scanf_float+0x84>
 8007456:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800745a:	463a      	mov	r2, r7
 800745c:	4640      	mov	r0, r8
 800745e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007462:	4798      	blx	r3
 8007464:	6923      	ldr	r3, [r4, #16]
 8007466:	3b01      	subs	r3, #1
 8007468:	6123      	str	r3, [r4, #16]
 800746a:	e7f1      	b.n	8007450 <_scanf_float+0x300>
 800746c:	46aa      	mov	sl, r5
 800746e:	9602      	str	r6, [sp, #8]
 8007470:	e7df      	b.n	8007432 <_scanf_float+0x2e2>
 8007472:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007476:	6923      	ldr	r3, [r4, #16]
 8007478:	2965      	cmp	r1, #101	; 0x65
 800747a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800747e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8007482:	6123      	str	r3, [r4, #16]
 8007484:	d00c      	beq.n	80074a0 <_scanf_float+0x350>
 8007486:	2945      	cmp	r1, #69	; 0x45
 8007488:	d00a      	beq.n	80074a0 <_scanf_float+0x350>
 800748a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800748e:	463a      	mov	r2, r7
 8007490:	4640      	mov	r0, r8
 8007492:	4798      	blx	r3
 8007494:	6923      	ldr	r3, [r4, #16]
 8007496:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800749a:	3b01      	subs	r3, #1
 800749c:	1eb5      	subs	r5, r6, #2
 800749e:	6123      	str	r3, [r4, #16]
 80074a0:	463a      	mov	r2, r7
 80074a2:	4640      	mov	r0, r8
 80074a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80074a8:	4798      	blx	r3
 80074aa:	462e      	mov	r6, r5
 80074ac:	6825      	ldr	r5, [r4, #0]
 80074ae:	f015 0510 	ands.w	r5, r5, #16
 80074b2:	d155      	bne.n	8007560 <_scanf_float+0x410>
 80074b4:	7035      	strb	r5, [r6, #0]
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80074bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074c0:	d11b      	bne.n	80074fa <_scanf_float+0x3aa>
 80074c2:	9b01      	ldr	r3, [sp, #4]
 80074c4:	454b      	cmp	r3, r9
 80074c6:	eba3 0209 	sub.w	r2, r3, r9
 80074ca:	d123      	bne.n	8007514 <_scanf_float+0x3c4>
 80074cc:	2200      	movs	r2, #0
 80074ce:	4659      	mov	r1, fp
 80074d0:	4640      	mov	r0, r8
 80074d2:	f000 fe79 	bl	80081c8 <_strtod_r>
 80074d6:	6822      	ldr	r2, [r4, #0]
 80074d8:	9b03      	ldr	r3, [sp, #12]
 80074da:	f012 0f02 	tst.w	r2, #2
 80074de:	4606      	mov	r6, r0
 80074e0:	460f      	mov	r7, r1
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	d021      	beq.n	800752a <_scanf_float+0x3da>
 80074e6:	1d1a      	adds	r2, r3, #4
 80074e8:	9903      	ldr	r1, [sp, #12]
 80074ea:	600a      	str	r2, [r1, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	e9c3 6700 	strd	r6, r7, [r3]
 80074f2:	68e3      	ldr	r3, [r4, #12]
 80074f4:	3301      	adds	r3, #1
 80074f6:	60e3      	str	r3, [r4, #12]
 80074f8:	e66d      	b.n	80071d6 <_scanf_float+0x86>
 80074fa:	9b04      	ldr	r3, [sp, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d0e5      	beq.n	80074cc <_scanf_float+0x37c>
 8007500:	9905      	ldr	r1, [sp, #20]
 8007502:	230a      	movs	r3, #10
 8007504:	462a      	mov	r2, r5
 8007506:	4640      	mov	r0, r8
 8007508:	3101      	adds	r1, #1
 800750a:	f000 fedf 	bl	80082cc <_strtol_r>
 800750e:	9b04      	ldr	r3, [sp, #16]
 8007510:	9e05      	ldr	r6, [sp, #20]
 8007512:	1ac2      	subs	r2, r0, r3
 8007514:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007518:	429e      	cmp	r6, r3
 800751a:	bf28      	it	cs
 800751c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007520:	4630      	mov	r0, r6
 8007522:	4910      	ldr	r1, [pc, #64]	; (8007564 <_scanf_float+0x414>)
 8007524:	f000 f826 	bl	8007574 <siprintf>
 8007528:	e7d0      	b.n	80074cc <_scanf_float+0x37c>
 800752a:	f012 0f04 	tst.w	r2, #4
 800752e:	f103 0204 	add.w	r2, r3, #4
 8007532:	d1d9      	bne.n	80074e8 <_scanf_float+0x398>
 8007534:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007538:	f8cc 2000 	str.w	r2, [ip]
 800753c:	f8d3 8000 	ldr.w	r8, [r3]
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	f7f9 fb82 	bl	8000c4c <__aeabi_dcmpun>
 8007548:	b128      	cbz	r0, 8007556 <_scanf_float+0x406>
 800754a:	4807      	ldr	r0, [pc, #28]	; (8007568 <_scanf_float+0x418>)
 800754c:	f000 f80e 	bl	800756c <nanf>
 8007550:	f8c8 0000 	str.w	r0, [r8]
 8007554:	e7cd      	b.n	80074f2 <_scanf_float+0x3a2>
 8007556:	4630      	mov	r0, r6
 8007558:	4639      	mov	r1, r7
 800755a:	f7f9 fbd5 	bl	8000d08 <__aeabi_d2f>
 800755e:	e7f7      	b.n	8007550 <_scanf_float+0x400>
 8007560:	2500      	movs	r5, #0
 8007562:	e638      	b.n	80071d6 <_scanf_float+0x86>
 8007564:	0800b1c4 	.word	0x0800b1c4
 8007568:	0800b5d0 	.word	0x0800b5d0

0800756c <nanf>:
 800756c:	4800      	ldr	r0, [pc, #0]	; (8007570 <nanf+0x4>)
 800756e:	4770      	bx	lr
 8007570:	7fc00000 	.word	0x7fc00000

08007574 <siprintf>:
 8007574:	b40e      	push	{r1, r2, r3}
 8007576:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800757a:	b500      	push	{lr}
 800757c:	b09c      	sub	sp, #112	; 0x70
 800757e:	ab1d      	add	r3, sp, #116	; 0x74
 8007580:	9002      	str	r0, [sp, #8]
 8007582:	9006      	str	r0, [sp, #24]
 8007584:	9107      	str	r1, [sp, #28]
 8007586:	9104      	str	r1, [sp, #16]
 8007588:	4808      	ldr	r0, [pc, #32]	; (80075ac <siprintf+0x38>)
 800758a:	4909      	ldr	r1, [pc, #36]	; (80075b0 <siprintf+0x3c>)
 800758c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007590:	9105      	str	r1, [sp, #20]
 8007592:	6800      	ldr	r0, [r0, #0]
 8007594:	a902      	add	r1, sp, #8
 8007596:	9301      	str	r3, [sp, #4]
 8007598:	f002 feb8 	bl	800a30c <_svfiprintf_r>
 800759c:	2200      	movs	r2, #0
 800759e:	9b02      	ldr	r3, [sp, #8]
 80075a0:	701a      	strb	r2, [r3, #0]
 80075a2:	b01c      	add	sp, #112	; 0x70
 80075a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80075a8:	b003      	add	sp, #12
 80075aa:	4770      	bx	lr
 80075ac:	2000000c 	.word	0x2000000c
 80075b0:	ffff0208 	.word	0xffff0208

080075b4 <sulp>:
 80075b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b8:	460f      	mov	r7, r1
 80075ba:	4690      	mov	r8, r2
 80075bc:	f002 fc12 	bl	8009de4 <__ulp>
 80075c0:	4604      	mov	r4, r0
 80075c2:	460d      	mov	r5, r1
 80075c4:	f1b8 0f00 	cmp.w	r8, #0
 80075c8:	d011      	beq.n	80075ee <sulp+0x3a>
 80075ca:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80075ce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	dd0b      	ble.n	80075ee <sulp+0x3a>
 80075d6:	2400      	movs	r4, #0
 80075d8:	051b      	lsls	r3, r3, #20
 80075da:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80075de:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80075e2:	4622      	mov	r2, r4
 80075e4:	462b      	mov	r3, r5
 80075e6:	f7f9 f897 	bl	8000718 <__aeabi_dmul>
 80075ea:	4604      	mov	r4, r0
 80075ec:	460d      	mov	r5, r1
 80075ee:	4620      	mov	r0, r4
 80075f0:	4629      	mov	r1, r5
 80075f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080075f8 <_strtod_l>:
 80075f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fc:	469b      	mov	fp, r3
 80075fe:	2300      	movs	r3, #0
 8007600:	b09f      	sub	sp, #124	; 0x7c
 8007602:	931a      	str	r3, [sp, #104]	; 0x68
 8007604:	4b9e      	ldr	r3, [pc, #632]	; (8007880 <_strtod_l+0x288>)
 8007606:	4682      	mov	sl, r0
 8007608:	681f      	ldr	r7, [r3, #0]
 800760a:	460e      	mov	r6, r1
 800760c:	4638      	mov	r0, r7
 800760e:	9215      	str	r2, [sp, #84]	; 0x54
 8007610:	f7f8 fe0a 	bl	8000228 <strlen>
 8007614:	f04f 0800 	mov.w	r8, #0
 8007618:	4604      	mov	r4, r0
 800761a:	f04f 0900 	mov.w	r9, #0
 800761e:	9619      	str	r6, [sp, #100]	; 0x64
 8007620:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007622:	781a      	ldrb	r2, [r3, #0]
 8007624:	2a2b      	cmp	r2, #43	; 0x2b
 8007626:	d04c      	beq.n	80076c2 <_strtod_l+0xca>
 8007628:	d83a      	bhi.n	80076a0 <_strtod_l+0xa8>
 800762a:	2a0d      	cmp	r2, #13
 800762c:	d833      	bhi.n	8007696 <_strtod_l+0x9e>
 800762e:	2a08      	cmp	r2, #8
 8007630:	d833      	bhi.n	800769a <_strtod_l+0xa2>
 8007632:	2a00      	cmp	r2, #0
 8007634:	d03d      	beq.n	80076b2 <_strtod_l+0xba>
 8007636:	2300      	movs	r3, #0
 8007638:	930a      	str	r3, [sp, #40]	; 0x28
 800763a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800763c:	782b      	ldrb	r3, [r5, #0]
 800763e:	2b30      	cmp	r3, #48	; 0x30
 8007640:	f040 80aa 	bne.w	8007798 <_strtod_l+0x1a0>
 8007644:	786b      	ldrb	r3, [r5, #1]
 8007646:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800764a:	2b58      	cmp	r3, #88	; 0x58
 800764c:	d166      	bne.n	800771c <_strtod_l+0x124>
 800764e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007650:	4650      	mov	r0, sl
 8007652:	9301      	str	r3, [sp, #4]
 8007654:	ab1a      	add	r3, sp, #104	; 0x68
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	4a8a      	ldr	r2, [pc, #552]	; (8007884 <_strtod_l+0x28c>)
 800765a:	f8cd b008 	str.w	fp, [sp, #8]
 800765e:	ab1b      	add	r3, sp, #108	; 0x6c
 8007660:	a919      	add	r1, sp, #100	; 0x64
 8007662:	f001 fd17 	bl	8009094 <__gethex>
 8007666:	f010 0607 	ands.w	r6, r0, #7
 800766a:	4604      	mov	r4, r0
 800766c:	d005      	beq.n	800767a <_strtod_l+0x82>
 800766e:	2e06      	cmp	r6, #6
 8007670:	d129      	bne.n	80076c6 <_strtod_l+0xce>
 8007672:	2300      	movs	r3, #0
 8007674:	3501      	adds	r5, #1
 8007676:	9519      	str	r5, [sp, #100]	; 0x64
 8007678:	930a      	str	r3, [sp, #40]	; 0x28
 800767a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800767c:	2b00      	cmp	r3, #0
 800767e:	f040 858a 	bne.w	8008196 <_strtod_l+0xb9e>
 8007682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007684:	b1d3      	cbz	r3, 80076bc <_strtod_l+0xc4>
 8007686:	4642      	mov	r2, r8
 8007688:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800768c:	4610      	mov	r0, r2
 800768e:	4619      	mov	r1, r3
 8007690:	b01f      	add	sp, #124	; 0x7c
 8007692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007696:	2a20      	cmp	r2, #32
 8007698:	d1cd      	bne.n	8007636 <_strtod_l+0x3e>
 800769a:	3301      	adds	r3, #1
 800769c:	9319      	str	r3, [sp, #100]	; 0x64
 800769e:	e7bf      	b.n	8007620 <_strtod_l+0x28>
 80076a0:	2a2d      	cmp	r2, #45	; 0x2d
 80076a2:	d1c8      	bne.n	8007636 <_strtod_l+0x3e>
 80076a4:	2201      	movs	r2, #1
 80076a6:	920a      	str	r2, [sp, #40]	; 0x28
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	9219      	str	r2, [sp, #100]	; 0x64
 80076ac:	785b      	ldrb	r3, [r3, #1]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1c3      	bne.n	800763a <_strtod_l+0x42>
 80076b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076b4:	9619      	str	r6, [sp, #100]	; 0x64
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f040 856b 	bne.w	8008192 <_strtod_l+0xb9a>
 80076bc:	4642      	mov	r2, r8
 80076be:	464b      	mov	r3, r9
 80076c0:	e7e4      	b.n	800768c <_strtod_l+0x94>
 80076c2:	2200      	movs	r2, #0
 80076c4:	e7ef      	b.n	80076a6 <_strtod_l+0xae>
 80076c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80076c8:	b13a      	cbz	r2, 80076da <_strtod_l+0xe2>
 80076ca:	2135      	movs	r1, #53	; 0x35
 80076cc:	a81c      	add	r0, sp, #112	; 0x70
 80076ce:	f002 fc8d 	bl	8009fec <__copybits>
 80076d2:	4650      	mov	r0, sl
 80076d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80076d6:	f002 f855 	bl	8009784 <_Bfree>
 80076da:	3e01      	subs	r6, #1
 80076dc:	2e04      	cmp	r6, #4
 80076de:	d806      	bhi.n	80076ee <_strtod_l+0xf6>
 80076e0:	e8df f006 	tbb	[pc, r6]
 80076e4:	1714030a 	.word	0x1714030a
 80076e8:	0a          	.byte	0x0a
 80076e9:	00          	.byte	0x00
 80076ea:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80076ee:	0721      	lsls	r1, r4, #28
 80076f0:	d5c3      	bpl.n	800767a <_strtod_l+0x82>
 80076f2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80076f6:	e7c0      	b.n	800767a <_strtod_l+0x82>
 80076f8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80076fa:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80076fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007702:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007706:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800770a:	e7f0      	b.n	80076ee <_strtod_l+0xf6>
 800770c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007888 <_strtod_l+0x290>
 8007710:	e7ed      	b.n	80076ee <_strtod_l+0xf6>
 8007712:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007716:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800771a:	e7e8      	b.n	80076ee <_strtod_l+0xf6>
 800771c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800771e:	1c5a      	adds	r2, r3, #1
 8007720:	9219      	str	r2, [sp, #100]	; 0x64
 8007722:	785b      	ldrb	r3, [r3, #1]
 8007724:	2b30      	cmp	r3, #48	; 0x30
 8007726:	d0f9      	beq.n	800771c <_strtod_l+0x124>
 8007728:	2b00      	cmp	r3, #0
 800772a:	d0a6      	beq.n	800767a <_strtod_l+0x82>
 800772c:	2301      	movs	r3, #1
 800772e:	9307      	str	r3, [sp, #28]
 8007730:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007732:	220a      	movs	r2, #10
 8007734:	9308      	str	r3, [sp, #32]
 8007736:	2300      	movs	r3, #0
 8007738:	469b      	mov	fp, r3
 800773a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800773e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007740:	7805      	ldrb	r5, [r0, #0]
 8007742:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007746:	b2d9      	uxtb	r1, r3
 8007748:	2909      	cmp	r1, #9
 800774a:	d927      	bls.n	800779c <_strtod_l+0x1a4>
 800774c:	4622      	mov	r2, r4
 800774e:	4639      	mov	r1, r7
 8007750:	f002 fef2 	bl	800a538 <strncmp>
 8007754:	2800      	cmp	r0, #0
 8007756:	d033      	beq.n	80077c0 <_strtod_l+0x1c8>
 8007758:	2000      	movs	r0, #0
 800775a:	462a      	mov	r2, r5
 800775c:	465c      	mov	r4, fp
 800775e:	4603      	mov	r3, r0
 8007760:	9004      	str	r0, [sp, #16]
 8007762:	2a65      	cmp	r2, #101	; 0x65
 8007764:	d001      	beq.n	800776a <_strtod_l+0x172>
 8007766:	2a45      	cmp	r2, #69	; 0x45
 8007768:	d114      	bne.n	8007794 <_strtod_l+0x19c>
 800776a:	b91c      	cbnz	r4, 8007774 <_strtod_l+0x17c>
 800776c:	9a07      	ldr	r2, [sp, #28]
 800776e:	4302      	orrs	r2, r0
 8007770:	d09f      	beq.n	80076b2 <_strtod_l+0xba>
 8007772:	2400      	movs	r4, #0
 8007774:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007776:	1c72      	adds	r2, r6, #1
 8007778:	9219      	str	r2, [sp, #100]	; 0x64
 800777a:	7872      	ldrb	r2, [r6, #1]
 800777c:	2a2b      	cmp	r2, #43	; 0x2b
 800777e:	d079      	beq.n	8007874 <_strtod_l+0x27c>
 8007780:	2a2d      	cmp	r2, #45	; 0x2d
 8007782:	f000 8083 	beq.w	800788c <_strtod_l+0x294>
 8007786:	2700      	movs	r7, #0
 8007788:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800778c:	2909      	cmp	r1, #9
 800778e:	f240 8083 	bls.w	8007898 <_strtod_l+0x2a0>
 8007792:	9619      	str	r6, [sp, #100]	; 0x64
 8007794:	2500      	movs	r5, #0
 8007796:	e09f      	b.n	80078d8 <_strtod_l+0x2e0>
 8007798:	2300      	movs	r3, #0
 800779a:	e7c8      	b.n	800772e <_strtod_l+0x136>
 800779c:	f1bb 0f08 	cmp.w	fp, #8
 80077a0:	bfd5      	itete	le
 80077a2:	9906      	ldrle	r1, [sp, #24]
 80077a4:	9905      	ldrgt	r1, [sp, #20]
 80077a6:	fb02 3301 	mlale	r3, r2, r1, r3
 80077aa:	fb02 3301 	mlagt	r3, r2, r1, r3
 80077ae:	f100 0001 	add.w	r0, r0, #1
 80077b2:	bfd4      	ite	le
 80077b4:	9306      	strle	r3, [sp, #24]
 80077b6:	9305      	strgt	r3, [sp, #20]
 80077b8:	f10b 0b01 	add.w	fp, fp, #1
 80077bc:	9019      	str	r0, [sp, #100]	; 0x64
 80077be:	e7be      	b.n	800773e <_strtod_l+0x146>
 80077c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077c2:	191a      	adds	r2, r3, r4
 80077c4:	9219      	str	r2, [sp, #100]	; 0x64
 80077c6:	5d1a      	ldrb	r2, [r3, r4]
 80077c8:	f1bb 0f00 	cmp.w	fp, #0
 80077cc:	d036      	beq.n	800783c <_strtod_l+0x244>
 80077ce:	465c      	mov	r4, fp
 80077d0:	9004      	str	r0, [sp, #16]
 80077d2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80077d6:	2b09      	cmp	r3, #9
 80077d8:	d912      	bls.n	8007800 <_strtod_l+0x208>
 80077da:	2301      	movs	r3, #1
 80077dc:	e7c1      	b.n	8007762 <_strtod_l+0x16a>
 80077de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077e0:	3001      	adds	r0, #1
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	9219      	str	r2, [sp, #100]	; 0x64
 80077e6:	785a      	ldrb	r2, [r3, #1]
 80077e8:	2a30      	cmp	r2, #48	; 0x30
 80077ea:	d0f8      	beq.n	80077de <_strtod_l+0x1e6>
 80077ec:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80077f0:	2b08      	cmp	r3, #8
 80077f2:	f200 84d5 	bhi.w	80081a0 <_strtod_l+0xba8>
 80077f6:	9004      	str	r0, [sp, #16]
 80077f8:	2000      	movs	r0, #0
 80077fa:	4604      	mov	r4, r0
 80077fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077fe:	9308      	str	r3, [sp, #32]
 8007800:	3a30      	subs	r2, #48	; 0x30
 8007802:	f100 0301 	add.w	r3, r0, #1
 8007806:	d013      	beq.n	8007830 <_strtod_l+0x238>
 8007808:	9904      	ldr	r1, [sp, #16]
 800780a:	1905      	adds	r5, r0, r4
 800780c:	4419      	add	r1, r3
 800780e:	9104      	str	r1, [sp, #16]
 8007810:	4623      	mov	r3, r4
 8007812:	210a      	movs	r1, #10
 8007814:	42ab      	cmp	r3, r5
 8007816:	d113      	bne.n	8007840 <_strtod_l+0x248>
 8007818:	1823      	adds	r3, r4, r0
 800781a:	2b08      	cmp	r3, #8
 800781c:	f104 0401 	add.w	r4, r4, #1
 8007820:	4404      	add	r4, r0
 8007822:	dc1b      	bgt.n	800785c <_strtod_l+0x264>
 8007824:	230a      	movs	r3, #10
 8007826:	9906      	ldr	r1, [sp, #24]
 8007828:	fb03 2301 	mla	r3, r3, r1, r2
 800782c:	9306      	str	r3, [sp, #24]
 800782e:	2300      	movs	r3, #0
 8007830:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007832:	4618      	mov	r0, r3
 8007834:	1c51      	adds	r1, r2, #1
 8007836:	9119      	str	r1, [sp, #100]	; 0x64
 8007838:	7852      	ldrb	r2, [r2, #1]
 800783a:	e7ca      	b.n	80077d2 <_strtod_l+0x1da>
 800783c:	4658      	mov	r0, fp
 800783e:	e7d3      	b.n	80077e8 <_strtod_l+0x1f0>
 8007840:	2b08      	cmp	r3, #8
 8007842:	dc04      	bgt.n	800784e <_strtod_l+0x256>
 8007844:	9f06      	ldr	r7, [sp, #24]
 8007846:	434f      	muls	r7, r1
 8007848:	9706      	str	r7, [sp, #24]
 800784a:	3301      	adds	r3, #1
 800784c:	e7e2      	b.n	8007814 <_strtod_l+0x21c>
 800784e:	1c5f      	adds	r7, r3, #1
 8007850:	2f10      	cmp	r7, #16
 8007852:	bfde      	ittt	le
 8007854:	9f05      	ldrle	r7, [sp, #20]
 8007856:	434f      	mulle	r7, r1
 8007858:	9705      	strle	r7, [sp, #20]
 800785a:	e7f6      	b.n	800784a <_strtod_l+0x252>
 800785c:	2c10      	cmp	r4, #16
 800785e:	bfdf      	itttt	le
 8007860:	230a      	movle	r3, #10
 8007862:	9905      	ldrle	r1, [sp, #20]
 8007864:	fb03 2301 	mlale	r3, r3, r1, r2
 8007868:	9305      	strle	r3, [sp, #20]
 800786a:	e7e0      	b.n	800782e <_strtod_l+0x236>
 800786c:	2300      	movs	r3, #0
 800786e:	9304      	str	r3, [sp, #16]
 8007870:	2301      	movs	r3, #1
 8007872:	e77b      	b.n	800776c <_strtod_l+0x174>
 8007874:	2700      	movs	r7, #0
 8007876:	1cb2      	adds	r2, r6, #2
 8007878:	9219      	str	r2, [sp, #100]	; 0x64
 800787a:	78b2      	ldrb	r2, [r6, #2]
 800787c:	e784      	b.n	8007788 <_strtod_l+0x190>
 800787e:	bf00      	nop
 8007880:	0800b418 	.word	0x0800b418
 8007884:	0800b1cc 	.word	0x0800b1cc
 8007888:	7ff00000 	.word	0x7ff00000
 800788c:	2701      	movs	r7, #1
 800788e:	e7f2      	b.n	8007876 <_strtod_l+0x27e>
 8007890:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007892:	1c51      	adds	r1, r2, #1
 8007894:	9119      	str	r1, [sp, #100]	; 0x64
 8007896:	7852      	ldrb	r2, [r2, #1]
 8007898:	2a30      	cmp	r2, #48	; 0x30
 800789a:	d0f9      	beq.n	8007890 <_strtod_l+0x298>
 800789c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80078a0:	2908      	cmp	r1, #8
 80078a2:	f63f af77 	bhi.w	8007794 <_strtod_l+0x19c>
 80078a6:	f04f 0e0a 	mov.w	lr, #10
 80078aa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80078ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80078b0:	9209      	str	r2, [sp, #36]	; 0x24
 80078b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80078b4:	1c51      	adds	r1, r2, #1
 80078b6:	9119      	str	r1, [sp, #100]	; 0x64
 80078b8:	7852      	ldrb	r2, [r2, #1]
 80078ba:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80078be:	2d09      	cmp	r5, #9
 80078c0:	d935      	bls.n	800792e <_strtod_l+0x336>
 80078c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80078c4:	1b49      	subs	r1, r1, r5
 80078c6:	2908      	cmp	r1, #8
 80078c8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80078cc:	dc02      	bgt.n	80078d4 <_strtod_l+0x2dc>
 80078ce:	4565      	cmp	r5, ip
 80078d0:	bfa8      	it	ge
 80078d2:	4665      	movge	r5, ip
 80078d4:	b107      	cbz	r7, 80078d8 <_strtod_l+0x2e0>
 80078d6:	426d      	negs	r5, r5
 80078d8:	2c00      	cmp	r4, #0
 80078da:	d14c      	bne.n	8007976 <_strtod_l+0x37e>
 80078dc:	9907      	ldr	r1, [sp, #28]
 80078de:	4301      	orrs	r1, r0
 80078e0:	f47f aecb 	bne.w	800767a <_strtod_l+0x82>
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f47f aee4 	bne.w	80076b2 <_strtod_l+0xba>
 80078ea:	2a69      	cmp	r2, #105	; 0x69
 80078ec:	d026      	beq.n	800793c <_strtod_l+0x344>
 80078ee:	dc23      	bgt.n	8007938 <_strtod_l+0x340>
 80078f0:	2a49      	cmp	r2, #73	; 0x49
 80078f2:	d023      	beq.n	800793c <_strtod_l+0x344>
 80078f4:	2a4e      	cmp	r2, #78	; 0x4e
 80078f6:	f47f aedc 	bne.w	80076b2 <_strtod_l+0xba>
 80078fa:	499d      	ldr	r1, [pc, #628]	; (8007b70 <_strtod_l+0x578>)
 80078fc:	a819      	add	r0, sp, #100	; 0x64
 80078fe:	f001 fe17 	bl	8009530 <__match>
 8007902:	2800      	cmp	r0, #0
 8007904:	f43f aed5 	beq.w	80076b2 <_strtod_l+0xba>
 8007908:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2b28      	cmp	r3, #40	; 0x28
 800790e:	d12c      	bne.n	800796a <_strtod_l+0x372>
 8007910:	4998      	ldr	r1, [pc, #608]	; (8007b74 <_strtod_l+0x57c>)
 8007912:	aa1c      	add	r2, sp, #112	; 0x70
 8007914:	a819      	add	r0, sp, #100	; 0x64
 8007916:	f001 fe1f 	bl	8009558 <__hexnan>
 800791a:	2805      	cmp	r0, #5
 800791c:	d125      	bne.n	800796a <_strtod_l+0x372>
 800791e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007920:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007924:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007928:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800792c:	e6a5      	b.n	800767a <_strtod_l+0x82>
 800792e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8007932:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007936:	e7bc      	b.n	80078b2 <_strtod_l+0x2ba>
 8007938:	2a6e      	cmp	r2, #110	; 0x6e
 800793a:	e7dc      	b.n	80078f6 <_strtod_l+0x2fe>
 800793c:	498e      	ldr	r1, [pc, #568]	; (8007b78 <_strtod_l+0x580>)
 800793e:	a819      	add	r0, sp, #100	; 0x64
 8007940:	f001 fdf6 	bl	8009530 <__match>
 8007944:	2800      	cmp	r0, #0
 8007946:	f43f aeb4 	beq.w	80076b2 <_strtod_l+0xba>
 800794a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800794c:	498b      	ldr	r1, [pc, #556]	; (8007b7c <_strtod_l+0x584>)
 800794e:	3b01      	subs	r3, #1
 8007950:	a819      	add	r0, sp, #100	; 0x64
 8007952:	9319      	str	r3, [sp, #100]	; 0x64
 8007954:	f001 fdec 	bl	8009530 <__match>
 8007958:	b910      	cbnz	r0, 8007960 <_strtod_l+0x368>
 800795a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800795c:	3301      	adds	r3, #1
 800795e:	9319      	str	r3, [sp, #100]	; 0x64
 8007960:	f04f 0800 	mov.w	r8, #0
 8007964:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007b80 <_strtod_l+0x588>
 8007968:	e687      	b.n	800767a <_strtod_l+0x82>
 800796a:	4886      	ldr	r0, [pc, #536]	; (8007b84 <_strtod_l+0x58c>)
 800796c:	f002 fdce 	bl	800a50c <nan>
 8007970:	4680      	mov	r8, r0
 8007972:	4689      	mov	r9, r1
 8007974:	e681      	b.n	800767a <_strtod_l+0x82>
 8007976:	9b04      	ldr	r3, [sp, #16]
 8007978:	f1bb 0f00 	cmp.w	fp, #0
 800797c:	bf08      	it	eq
 800797e:	46a3      	moveq	fp, r4
 8007980:	1aeb      	subs	r3, r5, r3
 8007982:	2c10      	cmp	r4, #16
 8007984:	9806      	ldr	r0, [sp, #24]
 8007986:	4626      	mov	r6, r4
 8007988:	9307      	str	r3, [sp, #28]
 800798a:	bfa8      	it	ge
 800798c:	2610      	movge	r6, #16
 800798e:	f7f8 fe49 	bl	8000624 <__aeabi_ui2d>
 8007992:	2c09      	cmp	r4, #9
 8007994:	4680      	mov	r8, r0
 8007996:	4689      	mov	r9, r1
 8007998:	dd13      	ble.n	80079c2 <_strtod_l+0x3ca>
 800799a:	4b7b      	ldr	r3, [pc, #492]	; (8007b88 <_strtod_l+0x590>)
 800799c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80079a0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80079a4:	f7f8 feb8 	bl	8000718 <__aeabi_dmul>
 80079a8:	4680      	mov	r8, r0
 80079aa:	9805      	ldr	r0, [sp, #20]
 80079ac:	4689      	mov	r9, r1
 80079ae:	f7f8 fe39 	bl	8000624 <__aeabi_ui2d>
 80079b2:	4602      	mov	r2, r0
 80079b4:	460b      	mov	r3, r1
 80079b6:	4640      	mov	r0, r8
 80079b8:	4649      	mov	r1, r9
 80079ba:	f7f8 fcf7 	bl	80003ac <__adddf3>
 80079be:	4680      	mov	r8, r0
 80079c0:	4689      	mov	r9, r1
 80079c2:	2c0f      	cmp	r4, #15
 80079c4:	dc36      	bgt.n	8007a34 <_strtod_l+0x43c>
 80079c6:	9b07      	ldr	r3, [sp, #28]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f43f ae56 	beq.w	800767a <_strtod_l+0x82>
 80079ce:	dd22      	ble.n	8007a16 <_strtod_l+0x41e>
 80079d0:	2b16      	cmp	r3, #22
 80079d2:	dc09      	bgt.n	80079e8 <_strtod_l+0x3f0>
 80079d4:	496c      	ldr	r1, [pc, #432]	; (8007b88 <_strtod_l+0x590>)
 80079d6:	4642      	mov	r2, r8
 80079d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80079dc:	464b      	mov	r3, r9
 80079de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079e2:	f7f8 fe99 	bl	8000718 <__aeabi_dmul>
 80079e6:	e7c3      	b.n	8007970 <_strtod_l+0x378>
 80079e8:	9a07      	ldr	r2, [sp, #28]
 80079ea:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80079ee:	4293      	cmp	r3, r2
 80079f0:	db20      	blt.n	8007a34 <_strtod_l+0x43c>
 80079f2:	4d65      	ldr	r5, [pc, #404]	; (8007b88 <_strtod_l+0x590>)
 80079f4:	f1c4 040f 	rsb	r4, r4, #15
 80079f8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80079fc:	4642      	mov	r2, r8
 80079fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a02:	464b      	mov	r3, r9
 8007a04:	f7f8 fe88 	bl	8000718 <__aeabi_dmul>
 8007a08:	9b07      	ldr	r3, [sp, #28]
 8007a0a:	1b1c      	subs	r4, r3, r4
 8007a0c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007a10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a14:	e7e5      	b.n	80079e2 <_strtod_l+0x3ea>
 8007a16:	9b07      	ldr	r3, [sp, #28]
 8007a18:	3316      	adds	r3, #22
 8007a1a:	db0b      	blt.n	8007a34 <_strtod_l+0x43c>
 8007a1c:	9b04      	ldr	r3, [sp, #16]
 8007a1e:	4640      	mov	r0, r8
 8007a20:	1b5d      	subs	r5, r3, r5
 8007a22:	4b59      	ldr	r3, [pc, #356]	; (8007b88 <_strtod_l+0x590>)
 8007a24:	4649      	mov	r1, r9
 8007a26:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007a2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a2e:	f7f8 ff9d 	bl	800096c <__aeabi_ddiv>
 8007a32:	e79d      	b.n	8007970 <_strtod_l+0x378>
 8007a34:	9b07      	ldr	r3, [sp, #28]
 8007a36:	1ba6      	subs	r6, r4, r6
 8007a38:	441e      	add	r6, r3
 8007a3a:	2e00      	cmp	r6, #0
 8007a3c:	dd74      	ble.n	8007b28 <_strtod_l+0x530>
 8007a3e:	f016 030f 	ands.w	r3, r6, #15
 8007a42:	d00a      	beq.n	8007a5a <_strtod_l+0x462>
 8007a44:	4950      	ldr	r1, [pc, #320]	; (8007b88 <_strtod_l+0x590>)
 8007a46:	4642      	mov	r2, r8
 8007a48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a50:	464b      	mov	r3, r9
 8007a52:	f7f8 fe61 	bl	8000718 <__aeabi_dmul>
 8007a56:	4680      	mov	r8, r0
 8007a58:	4689      	mov	r9, r1
 8007a5a:	f036 060f 	bics.w	r6, r6, #15
 8007a5e:	d052      	beq.n	8007b06 <_strtod_l+0x50e>
 8007a60:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007a64:	dd27      	ble.n	8007ab6 <_strtod_l+0x4be>
 8007a66:	f04f 0b00 	mov.w	fp, #0
 8007a6a:	f8cd b010 	str.w	fp, [sp, #16]
 8007a6e:	f8cd b020 	str.w	fp, [sp, #32]
 8007a72:	f8cd b018 	str.w	fp, [sp, #24]
 8007a76:	2322      	movs	r3, #34	; 0x22
 8007a78:	f04f 0800 	mov.w	r8, #0
 8007a7c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007b80 <_strtod_l+0x588>
 8007a80:	f8ca 3000 	str.w	r3, [sl]
 8007a84:	9b08      	ldr	r3, [sp, #32]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f43f adf7 	beq.w	800767a <_strtod_l+0x82>
 8007a8c:	4650      	mov	r0, sl
 8007a8e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007a90:	f001 fe78 	bl	8009784 <_Bfree>
 8007a94:	4650      	mov	r0, sl
 8007a96:	9906      	ldr	r1, [sp, #24]
 8007a98:	f001 fe74 	bl	8009784 <_Bfree>
 8007a9c:	4650      	mov	r0, sl
 8007a9e:	9904      	ldr	r1, [sp, #16]
 8007aa0:	f001 fe70 	bl	8009784 <_Bfree>
 8007aa4:	4650      	mov	r0, sl
 8007aa6:	9908      	ldr	r1, [sp, #32]
 8007aa8:	f001 fe6c 	bl	8009784 <_Bfree>
 8007aac:	4659      	mov	r1, fp
 8007aae:	4650      	mov	r0, sl
 8007ab0:	f001 fe68 	bl	8009784 <_Bfree>
 8007ab4:	e5e1      	b.n	800767a <_strtod_l+0x82>
 8007ab6:	4b35      	ldr	r3, [pc, #212]	; (8007b8c <_strtod_l+0x594>)
 8007ab8:	4640      	mov	r0, r8
 8007aba:	9305      	str	r3, [sp, #20]
 8007abc:	2300      	movs	r3, #0
 8007abe:	4649      	mov	r1, r9
 8007ac0:	461f      	mov	r7, r3
 8007ac2:	1136      	asrs	r6, r6, #4
 8007ac4:	2e01      	cmp	r6, #1
 8007ac6:	dc21      	bgt.n	8007b0c <_strtod_l+0x514>
 8007ac8:	b10b      	cbz	r3, 8007ace <_strtod_l+0x4d6>
 8007aca:	4680      	mov	r8, r0
 8007acc:	4689      	mov	r9, r1
 8007ace:	4b2f      	ldr	r3, [pc, #188]	; (8007b8c <_strtod_l+0x594>)
 8007ad0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007ad4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007ad8:	4642      	mov	r2, r8
 8007ada:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ade:	464b      	mov	r3, r9
 8007ae0:	f7f8 fe1a 	bl	8000718 <__aeabi_dmul>
 8007ae4:	4b26      	ldr	r3, [pc, #152]	; (8007b80 <_strtod_l+0x588>)
 8007ae6:	460a      	mov	r2, r1
 8007ae8:	400b      	ands	r3, r1
 8007aea:	4929      	ldr	r1, [pc, #164]	; (8007b90 <_strtod_l+0x598>)
 8007aec:	4680      	mov	r8, r0
 8007aee:	428b      	cmp	r3, r1
 8007af0:	d8b9      	bhi.n	8007a66 <_strtod_l+0x46e>
 8007af2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007af6:	428b      	cmp	r3, r1
 8007af8:	bf86      	itte	hi
 8007afa:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8007afe:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007b94 <_strtod_l+0x59c>
 8007b02:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007b06:	2300      	movs	r3, #0
 8007b08:	9305      	str	r3, [sp, #20]
 8007b0a:	e07f      	b.n	8007c0c <_strtod_l+0x614>
 8007b0c:	07f2      	lsls	r2, r6, #31
 8007b0e:	d505      	bpl.n	8007b1c <_strtod_l+0x524>
 8007b10:	9b05      	ldr	r3, [sp, #20]
 8007b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b16:	f7f8 fdff 	bl	8000718 <__aeabi_dmul>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	9a05      	ldr	r2, [sp, #20]
 8007b1e:	3701      	adds	r7, #1
 8007b20:	3208      	adds	r2, #8
 8007b22:	1076      	asrs	r6, r6, #1
 8007b24:	9205      	str	r2, [sp, #20]
 8007b26:	e7cd      	b.n	8007ac4 <_strtod_l+0x4cc>
 8007b28:	d0ed      	beq.n	8007b06 <_strtod_l+0x50e>
 8007b2a:	4276      	negs	r6, r6
 8007b2c:	f016 020f 	ands.w	r2, r6, #15
 8007b30:	d00a      	beq.n	8007b48 <_strtod_l+0x550>
 8007b32:	4b15      	ldr	r3, [pc, #84]	; (8007b88 <_strtod_l+0x590>)
 8007b34:	4640      	mov	r0, r8
 8007b36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b40:	f7f8 ff14 	bl	800096c <__aeabi_ddiv>
 8007b44:	4680      	mov	r8, r0
 8007b46:	4689      	mov	r9, r1
 8007b48:	1136      	asrs	r6, r6, #4
 8007b4a:	d0dc      	beq.n	8007b06 <_strtod_l+0x50e>
 8007b4c:	2e1f      	cmp	r6, #31
 8007b4e:	dd23      	ble.n	8007b98 <_strtod_l+0x5a0>
 8007b50:	f04f 0b00 	mov.w	fp, #0
 8007b54:	f8cd b010 	str.w	fp, [sp, #16]
 8007b58:	f8cd b020 	str.w	fp, [sp, #32]
 8007b5c:	f8cd b018 	str.w	fp, [sp, #24]
 8007b60:	2322      	movs	r3, #34	; 0x22
 8007b62:	f04f 0800 	mov.w	r8, #0
 8007b66:	f04f 0900 	mov.w	r9, #0
 8007b6a:	f8ca 3000 	str.w	r3, [sl]
 8007b6e:	e789      	b.n	8007a84 <_strtod_l+0x48c>
 8007b70:	0800b19d 	.word	0x0800b19d
 8007b74:	0800b1e0 	.word	0x0800b1e0
 8007b78:	0800b195 	.word	0x0800b195
 8007b7c:	0800b324 	.word	0x0800b324
 8007b80:	7ff00000 	.word	0x7ff00000
 8007b84:	0800b5d0 	.word	0x0800b5d0
 8007b88:	0800b4b0 	.word	0x0800b4b0
 8007b8c:	0800b488 	.word	0x0800b488
 8007b90:	7ca00000 	.word	0x7ca00000
 8007b94:	7fefffff 	.word	0x7fefffff
 8007b98:	f016 0310 	ands.w	r3, r6, #16
 8007b9c:	bf18      	it	ne
 8007b9e:	236a      	movne	r3, #106	; 0x6a
 8007ba0:	4640      	mov	r0, r8
 8007ba2:	9305      	str	r3, [sp, #20]
 8007ba4:	4649      	mov	r1, r9
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	4fb0      	ldr	r7, [pc, #704]	; (8007e6c <_strtod_l+0x874>)
 8007baa:	07f2      	lsls	r2, r6, #31
 8007bac:	d504      	bpl.n	8007bb8 <_strtod_l+0x5c0>
 8007bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bb2:	f7f8 fdb1 	bl	8000718 <__aeabi_dmul>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	1076      	asrs	r6, r6, #1
 8007bba:	f107 0708 	add.w	r7, r7, #8
 8007bbe:	d1f4      	bne.n	8007baa <_strtod_l+0x5b2>
 8007bc0:	b10b      	cbz	r3, 8007bc6 <_strtod_l+0x5ce>
 8007bc2:	4680      	mov	r8, r0
 8007bc4:	4689      	mov	r9, r1
 8007bc6:	9b05      	ldr	r3, [sp, #20]
 8007bc8:	b1c3      	cbz	r3, 8007bfc <_strtod_l+0x604>
 8007bca:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007bce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	4649      	mov	r1, r9
 8007bd6:	dd11      	ble.n	8007bfc <_strtod_l+0x604>
 8007bd8:	2b1f      	cmp	r3, #31
 8007bda:	f340 8127 	ble.w	8007e2c <_strtod_l+0x834>
 8007bde:	2b34      	cmp	r3, #52	; 0x34
 8007be0:	bfd8      	it	le
 8007be2:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8007be6:	f04f 0800 	mov.w	r8, #0
 8007bea:	bfcf      	iteee	gt
 8007bec:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007bf0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007bf4:	fa03 f202 	lslle.w	r2, r3, r2
 8007bf8:	ea02 0901 	andle.w	r9, r2, r1
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	2300      	movs	r3, #0
 8007c00:	4640      	mov	r0, r8
 8007c02:	4649      	mov	r1, r9
 8007c04:	f7f8 fff0 	bl	8000be8 <__aeabi_dcmpeq>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d1a1      	bne.n	8007b50 <_strtod_l+0x558>
 8007c0c:	9b06      	ldr	r3, [sp, #24]
 8007c0e:	465a      	mov	r2, fp
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	4650      	mov	r0, sl
 8007c14:	4623      	mov	r3, r4
 8007c16:	9908      	ldr	r1, [sp, #32]
 8007c18:	f001 fe1c 	bl	8009854 <__s2b>
 8007c1c:	9008      	str	r0, [sp, #32]
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	f43f af21 	beq.w	8007a66 <_strtod_l+0x46e>
 8007c24:	9b04      	ldr	r3, [sp, #16]
 8007c26:	f04f 0b00 	mov.w	fp, #0
 8007c2a:	1b5d      	subs	r5, r3, r5
 8007c2c:	9b07      	ldr	r3, [sp, #28]
 8007c2e:	f8cd b010 	str.w	fp, [sp, #16]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	bfb4      	ite	lt
 8007c36:	462b      	movlt	r3, r5
 8007c38:	2300      	movge	r3, #0
 8007c3a:	930e      	str	r3, [sp, #56]	; 0x38
 8007c3c:	9b07      	ldr	r3, [sp, #28]
 8007c3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007c42:	9314      	str	r3, [sp, #80]	; 0x50
 8007c44:	9b08      	ldr	r3, [sp, #32]
 8007c46:	4650      	mov	r0, sl
 8007c48:	6859      	ldr	r1, [r3, #4]
 8007c4a:	f001 fd5b 	bl	8009704 <_Balloc>
 8007c4e:	9006      	str	r0, [sp, #24]
 8007c50:	2800      	cmp	r0, #0
 8007c52:	f43f af10 	beq.w	8007a76 <_strtod_l+0x47e>
 8007c56:	9b08      	ldr	r3, [sp, #32]
 8007c58:	300c      	adds	r0, #12
 8007c5a:	691a      	ldr	r2, [r3, #16]
 8007c5c:	f103 010c 	add.w	r1, r3, #12
 8007c60:	3202      	adds	r2, #2
 8007c62:	0092      	lsls	r2, r2, #2
 8007c64:	f001 fd40 	bl	80096e8 <memcpy>
 8007c68:	ab1c      	add	r3, sp, #112	; 0x70
 8007c6a:	9301      	str	r3, [sp, #4]
 8007c6c:	ab1b      	add	r3, sp, #108	; 0x6c
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	4642      	mov	r2, r8
 8007c72:	464b      	mov	r3, r9
 8007c74:	4650      	mov	r0, sl
 8007c76:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8007c7a:	f002 f92d 	bl	8009ed8 <__d2b>
 8007c7e:	901a      	str	r0, [sp, #104]	; 0x68
 8007c80:	2800      	cmp	r0, #0
 8007c82:	f43f aef8 	beq.w	8007a76 <_strtod_l+0x47e>
 8007c86:	2101      	movs	r1, #1
 8007c88:	4650      	mov	r0, sl
 8007c8a:	f001 fe7b 	bl	8009984 <__i2b>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	9004      	str	r0, [sp, #16]
 8007c92:	2800      	cmp	r0, #0
 8007c94:	f43f aeef 	beq.w	8007a76 <_strtod_l+0x47e>
 8007c98:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007c9a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007c9c:	2d00      	cmp	r5, #0
 8007c9e:	bfab      	itete	ge
 8007ca0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007ca2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8007ca4:	18ee      	addge	r6, r5, r3
 8007ca6:	1b5c      	sublt	r4, r3, r5
 8007ca8:	9b05      	ldr	r3, [sp, #20]
 8007caa:	bfa8      	it	ge
 8007cac:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8007cae:	eba5 0503 	sub.w	r5, r5, r3
 8007cb2:	4415      	add	r5, r2
 8007cb4:	4b6e      	ldr	r3, [pc, #440]	; (8007e70 <_strtod_l+0x878>)
 8007cb6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8007cba:	bfb8      	it	lt
 8007cbc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007cbe:	429d      	cmp	r5, r3
 8007cc0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007cc4:	f280 80c4 	bge.w	8007e50 <_strtod_l+0x858>
 8007cc8:	1b5b      	subs	r3, r3, r5
 8007cca:	2b1f      	cmp	r3, #31
 8007ccc:	f04f 0701 	mov.w	r7, #1
 8007cd0:	eba2 0203 	sub.w	r2, r2, r3
 8007cd4:	f300 80b1 	bgt.w	8007e3a <_strtod_l+0x842>
 8007cd8:	2500      	movs	r5, #0
 8007cda:	fa07 f303 	lsl.w	r3, r7, r3
 8007cde:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ce0:	18b7      	adds	r7, r6, r2
 8007ce2:	9b05      	ldr	r3, [sp, #20]
 8007ce4:	42be      	cmp	r6, r7
 8007ce6:	4414      	add	r4, r2
 8007ce8:	441c      	add	r4, r3
 8007cea:	4633      	mov	r3, r6
 8007cec:	bfa8      	it	ge
 8007cee:	463b      	movge	r3, r7
 8007cf0:	42a3      	cmp	r3, r4
 8007cf2:	bfa8      	it	ge
 8007cf4:	4623      	movge	r3, r4
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	bfc2      	ittt	gt
 8007cfa:	1aff      	subgt	r7, r7, r3
 8007cfc:	1ae4      	subgt	r4, r4, r3
 8007cfe:	1af6      	subgt	r6, r6, r3
 8007d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	dd17      	ble.n	8007d36 <_strtod_l+0x73e>
 8007d06:	461a      	mov	r2, r3
 8007d08:	4650      	mov	r0, sl
 8007d0a:	9904      	ldr	r1, [sp, #16]
 8007d0c:	f001 fef8 	bl	8009b00 <__pow5mult>
 8007d10:	9004      	str	r0, [sp, #16]
 8007d12:	2800      	cmp	r0, #0
 8007d14:	f43f aeaf 	beq.w	8007a76 <_strtod_l+0x47e>
 8007d18:	4601      	mov	r1, r0
 8007d1a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007d1c:	4650      	mov	r0, sl
 8007d1e:	f001 fe47 	bl	80099b0 <__multiply>
 8007d22:	9009      	str	r0, [sp, #36]	; 0x24
 8007d24:	2800      	cmp	r0, #0
 8007d26:	f43f aea6 	beq.w	8007a76 <_strtod_l+0x47e>
 8007d2a:	4650      	mov	r0, sl
 8007d2c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007d2e:	f001 fd29 	bl	8009784 <_Bfree>
 8007d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d34:	931a      	str	r3, [sp, #104]	; 0x68
 8007d36:	2f00      	cmp	r7, #0
 8007d38:	f300 808e 	bgt.w	8007e58 <_strtod_l+0x860>
 8007d3c:	9b07      	ldr	r3, [sp, #28]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	dd08      	ble.n	8007d54 <_strtod_l+0x75c>
 8007d42:	4650      	mov	r0, sl
 8007d44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d46:	9906      	ldr	r1, [sp, #24]
 8007d48:	f001 feda 	bl	8009b00 <__pow5mult>
 8007d4c:	9006      	str	r0, [sp, #24]
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	f43f ae91 	beq.w	8007a76 <_strtod_l+0x47e>
 8007d54:	2c00      	cmp	r4, #0
 8007d56:	dd08      	ble.n	8007d6a <_strtod_l+0x772>
 8007d58:	4622      	mov	r2, r4
 8007d5a:	4650      	mov	r0, sl
 8007d5c:	9906      	ldr	r1, [sp, #24]
 8007d5e:	f001 ff29 	bl	8009bb4 <__lshift>
 8007d62:	9006      	str	r0, [sp, #24]
 8007d64:	2800      	cmp	r0, #0
 8007d66:	f43f ae86 	beq.w	8007a76 <_strtod_l+0x47e>
 8007d6a:	2e00      	cmp	r6, #0
 8007d6c:	dd08      	ble.n	8007d80 <_strtod_l+0x788>
 8007d6e:	4632      	mov	r2, r6
 8007d70:	4650      	mov	r0, sl
 8007d72:	9904      	ldr	r1, [sp, #16]
 8007d74:	f001 ff1e 	bl	8009bb4 <__lshift>
 8007d78:	9004      	str	r0, [sp, #16]
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	f43f ae7b 	beq.w	8007a76 <_strtod_l+0x47e>
 8007d80:	4650      	mov	r0, sl
 8007d82:	9a06      	ldr	r2, [sp, #24]
 8007d84:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007d86:	f001 ffa1 	bl	8009ccc <__mdiff>
 8007d8a:	4683      	mov	fp, r0
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	f43f ae72 	beq.w	8007a76 <_strtod_l+0x47e>
 8007d92:	2400      	movs	r4, #0
 8007d94:	68c3      	ldr	r3, [r0, #12]
 8007d96:	9904      	ldr	r1, [sp, #16]
 8007d98:	60c4      	str	r4, [r0, #12]
 8007d9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d9c:	f001 ff7a 	bl	8009c94 <__mcmp>
 8007da0:	42a0      	cmp	r0, r4
 8007da2:	da6b      	bge.n	8007e7c <_strtod_l+0x884>
 8007da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007da6:	ea53 0308 	orrs.w	r3, r3, r8
 8007daa:	f040 8091 	bne.w	8007ed0 <_strtod_l+0x8d8>
 8007dae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f040 808c 	bne.w	8007ed0 <_strtod_l+0x8d8>
 8007db8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007dbc:	0d1b      	lsrs	r3, r3, #20
 8007dbe:	051b      	lsls	r3, r3, #20
 8007dc0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007dc4:	f240 8084 	bls.w	8007ed0 <_strtod_l+0x8d8>
 8007dc8:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007dcc:	b91b      	cbnz	r3, 8007dd6 <_strtod_l+0x7de>
 8007dce:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	dd7c      	ble.n	8007ed0 <_strtod_l+0x8d8>
 8007dd6:	4659      	mov	r1, fp
 8007dd8:	2201      	movs	r2, #1
 8007dda:	4650      	mov	r0, sl
 8007ddc:	f001 feea 	bl	8009bb4 <__lshift>
 8007de0:	9904      	ldr	r1, [sp, #16]
 8007de2:	4683      	mov	fp, r0
 8007de4:	f001 ff56 	bl	8009c94 <__mcmp>
 8007de8:	2800      	cmp	r0, #0
 8007dea:	dd71      	ble.n	8007ed0 <_strtod_l+0x8d8>
 8007dec:	9905      	ldr	r1, [sp, #20]
 8007dee:	464b      	mov	r3, r9
 8007df0:	4a20      	ldr	r2, [pc, #128]	; (8007e74 <_strtod_l+0x87c>)
 8007df2:	2900      	cmp	r1, #0
 8007df4:	f000 808c 	beq.w	8007f10 <_strtod_l+0x918>
 8007df8:	ea02 0109 	and.w	r1, r2, r9
 8007dfc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007e00:	f300 8086 	bgt.w	8007f10 <_strtod_l+0x918>
 8007e04:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007e08:	f77f aeaa 	ble.w	8007b60 <_strtod_l+0x568>
 8007e0c:	4640      	mov	r0, r8
 8007e0e:	4649      	mov	r1, r9
 8007e10:	4b19      	ldr	r3, [pc, #100]	; (8007e78 <_strtod_l+0x880>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	f7f8 fc80 	bl	8000718 <__aeabi_dmul>
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4303      	orrs	r3, r0
 8007e1c:	bf08      	it	eq
 8007e1e:	2322      	moveq	r3, #34	; 0x22
 8007e20:	4680      	mov	r8, r0
 8007e22:	4689      	mov	r9, r1
 8007e24:	bf08      	it	eq
 8007e26:	f8ca 3000 	streq.w	r3, [sl]
 8007e2a:	e62f      	b.n	8007a8c <_strtod_l+0x494>
 8007e2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e30:	fa02 f303 	lsl.w	r3, r2, r3
 8007e34:	ea03 0808 	and.w	r8, r3, r8
 8007e38:	e6e0      	b.n	8007bfc <_strtod_l+0x604>
 8007e3a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007e3e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007e42:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007e46:	35e2      	adds	r5, #226	; 0xe2
 8007e48:	fa07 f505 	lsl.w	r5, r7, r5
 8007e4c:	970f      	str	r7, [sp, #60]	; 0x3c
 8007e4e:	e747      	b.n	8007ce0 <_strtod_l+0x6e8>
 8007e50:	2301      	movs	r3, #1
 8007e52:	2500      	movs	r5, #0
 8007e54:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e56:	e743      	b.n	8007ce0 <_strtod_l+0x6e8>
 8007e58:	463a      	mov	r2, r7
 8007e5a:	4650      	mov	r0, sl
 8007e5c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007e5e:	f001 fea9 	bl	8009bb4 <__lshift>
 8007e62:	901a      	str	r0, [sp, #104]	; 0x68
 8007e64:	2800      	cmp	r0, #0
 8007e66:	f47f af69 	bne.w	8007d3c <_strtod_l+0x744>
 8007e6a:	e604      	b.n	8007a76 <_strtod_l+0x47e>
 8007e6c:	0800b1f8 	.word	0x0800b1f8
 8007e70:	fffffc02 	.word	0xfffffc02
 8007e74:	7ff00000 	.word	0x7ff00000
 8007e78:	39500000 	.word	0x39500000
 8007e7c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007e80:	d165      	bne.n	8007f4e <_strtod_l+0x956>
 8007e82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e88:	b35a      	cbz	r2, 8007ee2 <_strtod_l+0x8ea>
 8007e8a:	4a99      	ldr	r2, [pc, #612]	; (80080f0 <_strtod_l+0xaf8>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d12b      	bne.n	8007ee8 <_strtod_l+0x8f0>
 8007e90:	9b05      	ldr	r3, [sp, #20]
 8007e92:	4641      	mov	r1, r8
 8007e94:	b303      	cbz	r3, 8007ed8 <_strtod_l+0x8e0>
 8007e96:	464a      	mov	r2, r9
 8007e98:	4b96      	ldr	r3, [pc, #600]	; (80080f4 <_strtod_l+0xafc>)
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ea4:	d81b      	bhi.n	8007ede <_strtod_l+0x8e6>
 8007ea6:	0d1b      	lsrs	r3, r3, #20
 8007ea8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007eac:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb0:	4299      	cmp	r1, r3
 8007eb2:	d119      	bne.n	8007ee8 <_strtod_l+0x8f0>
 8007eb4:	4b90      	ldr	r3, [pc, #576]	; (80080f8 <_strtod_l+0xb00>)
 8007eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d102      	bne.n	8007ec2 <_strtod_l+0x8ca>
 8007ebc:	3101      	adds	r1, #1
 8007ebe:	f43f adda 	beq.w	8007a76 <_strtod_l+0x47e>
 8007ec2:	f04f 0800 	mov.w	r8, #0
 8007ec6:	4b8b      	ldr	r3, [pc, #556]	; (80080f4 <_strtod_l+0xafc>)
 8007ec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eca:	401a      	ands	r2, r3
 8007ecc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007ed0:	9b05      	ldr	r3, [sp, #20]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d19a      	bne.n	8007e0c <_strtod_l+0x814>
 8007ed6:	e5d9      	b.n	8007a8c <_strtod_l+0x494>
 8007ed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007edc:	e7e8      	b.n	8007eb0 <_strtod_l+0x8b8>
 8007ede:	4613      	mov	r3, r2
 8007ee0:	e7e6      	b.n	8007eb0 <_strtod_l+0x8b8>
 8007ee2:	ea53 0308 	orrs.w	r3, r3, r8
 8007ee6:	d081      	beq.n	8007dec <_strtod_l+0x7f4>
 8007ee8:	b1e5      	cbz	r5, 8007f24 <_strtod_l+0x92c>
 8007eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eec:	421d      	tst	r5, r3
 8007eee:	d0ef      	beq.n	8007ed0 <_strtod_l+0x8d8>
 8007ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ef2:	4640      	mov	r0, r8
 8007ef4:	4649      	mov	r1, r9
 8007ef6:	9a05      	ldr	r2, [sp, #20]
 8007ef8:	b1c3      	cbz	r3, 8007f2c <_strtod_l+0x934>
 8007efa:	f7ff fb5b 	bl	80075b4 <sulp>
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f06:	f7f8 fa51 	bl	80003ac <__adddf3>
 8007f0a:	4680      	mov	r8, r0
 8007f0c:	4689      	mov	r9, r1
 8007f0e:	e7df      	b.n	8007ed0 <_strtod_l+0x8d8>
 8007f10:	4013      	ands	r3, r2
 8007f12:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007f16:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007f1a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007f1e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007f22:	e7d5      	b.n	8007ed0 <_strtod_l+0x8d8>
 8007f24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f26:	ea13 0f08 	tst.w	r3, r8
 8007f2a:	e7e0      	b.n	8007eee <_strtod_l+0x8f6>
 8007f2c:	f7ff fb42 	bl	80075b4 <sulp>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f38:	f7f8 fa36 	bl	80003a8 <__aeabi_dsub>
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	2300      	movs	r3, #0
 8007f40:	4680      	mov	r8, r0
 8007f42:	4689      	mov	r9, r1
 8007f44:	f7f8 fe50 	bl	8000be8 <__aeabi_dcmpeq>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d0c1      	beq.n	8007ed0 <_strtod_l+0x8d8>
 8007f4c:	e608      	b.n	8007b60 <_strtod_l+0x568>
 8007f4e:	4658      	mov	r0, fp
 8007f50:	9904      	ldr	r1, [sp, #16]
 8007f52:	f002 f81d 	bl	8009f90 <__ratio>
 8007f56:	2200      	movs	r2, #0
 8007f58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f5c:	4606      	mov	r6, r0
 8007f5e:	460f      	mov	r7, r1
 8007f60:	f7f8 fe56 	bl	8000c10 <__aeabi_dcmple>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d070      	beq.n	800804a <_strtod_l+0xa52>
 8007f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d042      	beq.n	8007ff4 <_strtod_l+0x9fc>
 8007f6e:	2600      	movs	r6, #0
 8007f70:	4f62      	ldr	r7, [pc, #392]	; (80080fc <_strtod_l+0xb04>)
 8007f72:	4d62      	ldr	r5, [pc, #392]	; (80080fc <_strtod_l+0xb04>)
 8007f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f7a:	0d1b      	lsrs	r3, r3, #20
 8007f7c:	051b      	lsls	r3, r3, #20
 8007f7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f82:	4b5f      	ldr	r3, [pc, #380]	; (8008100 <_strtod_l+0xb08>)
 8007f84:	429a      	cmp	r2, r3
 8007f86:	f040 80c3 	bne.w	8008110 <_strtod_l+0xb18>
 8007f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f8c:	4640      	mov	r0, r8
 8007f8e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007f92:	4649      	mov	r1, r9
 8007f94:	f001 ff26 	bl	8009de4 <__ulp>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	4639      	mov	r1, r7
 8007fa0:	f7f8 fbba 	bl	8000718 <__aeabi_dmul>
 8007fa4:	4642      	mov	r2, r8
 8007fa6:	464b      	mov	r3, r9
 8007fa8:	f7f8 fa00 	bl	80003ac <__adddf3>
 8007fac:	460b      	mov	r3, r1
 8007fae:	4951      	ldr	r1, [pc, #324]	; (80080f4 <_strtod_l+0xafc>)
 8007fb0:	4a54      	ldr	r2, [pc, #336]	; (8008104 <_strtod_l+0xb0c>)
 8007fb2:	4019      	ands	r1, r3
 8007fb4:	4291      	cmp	r1, r2
 8007fb6:	4680      	mov	r8, r0
 8007fb8:	d95d      	bls.n	8008076 <_strtod_l+0xa7e>
 8007fba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007fbc:	4b4e      	ldr	r3, [pc, #312]	; (80080f8 <_strtod_l+0xb00>)
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d103      	bne.n	8007fca <_strtod_l+0x9d2>
 8007fc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	f43f ad56 	beq.w	8007a76 <_strtod_l+0x47e>
 8007fca:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007fce:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80080f8 <_strtod_l+0xb00>
 8007fd2:	4650      	mov	r0, sl
 8007fd4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007fd6:	f001 fbd5 	bl	8009784 <_Bfree>
 8007fda:	4650      	mov	r0, sl
 8007fdc:	9906      	ldr	r1, [sp, #24]
 8007fde:	f001 fbd1 	bl	8009784 <_Bfree>
 8007fe2:	4650      	mov	r0, sl
 8007fe4:	9904      	ldr	r1, [sp, #16]
 8007fe6:	f001 fbcd 	bl	8009784 <_Bfree>
 8007fea:	4659      	mov	r1, fp
 8007fec:	4650      	mov	r0, sl
 8007fee:	f001 fbc9 	bl	8009784 <_Bfree>
 8007ff2:	e627      	b.n	8007c44 <_strtod_l+0x64c>
 8007ff4:	f1b8 0f00 	cmp.w	r8, #0
 8007ff8:	d119      	bne.n	800802e <_strtod_l+0xa36>
 8007ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008000:	b9e3      	cbnz	r3, 800803c <_strtod_l+0xa44>
 8008002:	2200      	movs	r2, #0
 8008004:	4630      	mov	r0, r6
 8008006:	4639      	mov	r1, r7
 8008008:	4b3c      	ldr	r3, [pc, #240]	; (80080fc <_strtod_l+0xb04>)
 800800a:	f7f8 fdf7 	bl	8000bfc <__aeabi_dcmplt>
 800800e:	b9c8      	cbnz	r0, 8008044 <_strtod_l+0xa4c>
 8008010:	2200      	movs	r2, #0
 8008012:	4630      	mov	r0, r6
 8008014:	4639      	mov	r1, r7
 8008016:	4b3c      	ldr	r3, [pc, #240]	; (8008108 <_strtod_l+0xb10>)
 8008018:	f7f8 fb7e 	bl	8000718 <__aeabi_dmul>
 800801c:	4604      	mov	r4, r0
 800801e:	460d      	mov	r5, r1
 8008020:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008024:	9416      	str	r4, [sp, #88]	; 0x58
 8008026:	9317      	str	r3, [sp, #92]	; 0x5c
 8008028:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800802c:	e7a2      	b.n	8007f74 <_strtod_l+0x97c>
 800802e:	f1b8 0f01 	cmp.w	r8, #1
 8008032:	d103      	bne.n	800803c <_strtod_l+0xa44>
 8008034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008036:	2b00      	cmp	r3, #0
 8008038:	f43f ad92 	beq.w	8007b60 <_strtod_l+0x568>
 800803c:	2600      	movs	r6, #0
 800803e:	2400      	movs	r4, #0
 8008040:	4f32      	ldr	r7, [pc, #200]	; (800810c <_strtod_l+0xb14>)
 8008042:	e796      	b.n	8007f72 <_strtod_l+0x97a>
 8008044:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008046:	4d30      	ldr	r5, [pc, #192]	; (8008108 <_strtod_l+0xb10>)
 8008048:	e7ea      	b.n	8008020 <_strtod_l+0xa28>
 800804a:	4b2f      	ldr	r3, [pc, #188]	; (8008108 <_strtod_l+0xb10>)
 800804c:	2200      	movs	r2, #0
 800804e:	4630      	mov	r0, r6
 8008050:	4639      	mov	r1, r7
 8008052:	f7f8 fb61 	bl	8000718 <__aeabi_dmul>
 8008056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008058:	4604      	mov	r4, r0
 800805a:	460d      	mov	r5, r1
 800805c:	b933      	cbnz	r3, 800806c <_strtod_l+0xa74>
 800805e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008062:	9010      	str	r0, [sp, #64]	; 0x40
 8008064:	9311      	str	r3, [sp, #68]	; 0x44
 8008066:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800806a:	e783      	b.n	8007f74 <_strtod_l+0x97c>
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008074:	e7f7      	b.n	8008066 <_strtod_l+0xa6e>
 8008076:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800807a:	9b05      	ldr	r3, [sp, #20]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1a8      	bne.n	8007fd2 <_strtod_l+0x9da>
 8008080:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008084:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008086:	0d1b      	lsrs	r3, r3, #20
 8008088:	051b      	lsls	r3, r3, #20
 800808a:	429a      	cmp	r2, r3
 800808c:	d1a1      	bne.n	8007fd2 <_strtod_l+0x9da>
 800808e:	4620      	mov	r0, r4
 8008090:	4629      	mov	r1, r5
 8008092:	f7f8 ff97 	bl	8000fc4 <__aeabi_d2lz>
 8008096:	f7f8 fb11 	bl	80006bc <__aeabi_l2d>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	4620      	mov	r0, r4
 80080a0:	4629      	mov	r1, r5
 80080a2:	f7f8 f981 	bl	80003a8 <__aeabi_dsub>
 80080a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080ac:	ea43 0308 	orr.w	r3, r3, r8
 80080b0:	4313      	orrs	r3, r2
 80080b2:	4604      	mov	r4, r0
 80080b4:	460d      	mov	r5, r1
 80080b6:	d066      	beq.n	8008186 <_strtod_l+0xb8e>
 80080b8:	a309      	add	r3, pc, #36	; (adr r3, 80080e0 <_strtod_l+0xae8>)
 80080ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080be:	f7f8 fd9d 	bl	8000bfc <__aeabi_dcmplt>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	f47f ace2 	bne.w	8007a8c <_strtod_l+0x494>
 80080c8:	a307      	add	r3, pc, #28	; (adr r3, 80080e8 <_strtod_l+0xaf0>)
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	4620      	mov	r0, r4
 80080d0:	4629      	mov	r1, r5
 80080d2:	f7f8 fdb1 	bl	8000c38 <__aeabi_dcmpgt>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	f43f af7b 	beq.w	8007fd2 <_strtod_l+0x9da>
 80080dc:	e4d6      	b.n	8007a8c <_strtod_l+0x494>
 80080de:	bf00      	nop
 80080e0:	94a03595 	.word	0x94a03595
 80080e4:	3fdfffff 	.word	0x3fdfffff
 80080e8:	35afe535 	.word	0x35afe535
 80080ec:	3fe00000 	.word	0x3fe00000
 80080f0:	000fffff 	.word	0x000fffff
 80080f4:	7ff00000 	.word	0x7ff00000
 80080f8:	7fefffff 	.word	0x7fefffff
 80080fc:	3ff00000 	.word	0x3ff00000
 8008100:	7fe00000 	.word	0x7fe00000
 8008104:	7c9fffff 	.word	0x7c9fffff
 8008108:	3fe00000 	.word	0x3fe00000
 800810c:	bff00000 	.word	0xbff00000
 8008110:	9b05      	ldr	r3, [sp, #20]
 8008112:	b313      	cbz	r3, 800815a <_strtod_l+0xb62>
 8008114:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008116:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800811a:	d81e      	bhi.n	800815a <_strtod_l+0xb62>
 800811c:	a326      	add	r3, pc, #152	; (adr r3, 80081b8 <_strtod_l+0xbc0>)
 800811e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008122:	4620      	mov	r0, r4
 8008124:	4629      	mov	r1, r5
 8008126:	f7f8 fd73 	bl	8000c10 <__aeabi_dcmple>
 800812a:	b190      	cbz	r0, 8008152 <_strtod_l+0xb5a>
 800812c:	4629      	mov	r1, r5
 800812e:	4620      	mov	r0, r4
 8008130:	f7f8 fdca 	bl	8000cc8 <__aeabi_d2uiz>
 8008134:	2801      	cmp	r0, #1
 8008136:	bf38      	it	cc
 8008138:	2001      	movcc	r0, #1
 800813a:	f7f8 fa73 	bl	8000624 <__aeabi_ui2d>
 800813e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008140:	4604      	mov	r4, r0
 8008142:	460d      	mov	r5, r1
 8008144:	b9d3      	cbnz	r3, 800817c <_strtod_l+0xb84>
 8008146:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800814a:	9012      	str	r0, [sp, #72]	; 0x48
 800814c:	9313      	str	r3, [sp, #76]	; 0x4c
 800814e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008152:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008154:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008158:	1a9f      	subs	r7, r3, r2
 800815a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800815e:	f001 fe41 	bl	8009de4 <__ulp>
 8008162:	4602      	mov	r2, r0
 8008164:	460b      	mov	r3, r1
 8008166:	4630      	mov	r0, r6
 8008168:	4639      	mov	r1, r7
 800816a:	f7f8 fad5 	bl	8000718 <__aeabi_dmul>
 800816e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008172:	f7f8 f91b 	bl	80003ac <__adddf3>
 8008176:	4680      	mov	r8, r0
 8008178:	4689      	mov	r9, r1
 800817a:	e77e      	b.n	800807a <_strtod_l+0xa82>
 800817c:	4602      	mov	r2, r0
 800817e:	460b      	mov	r3, r1
 8008180:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008184:	e7e3      	b.n	800814e <_strtod_l+0xb56>
 8008186:	a30e      	add	r3, pc, #56	; (adr r3, 80081c0 <_strtod_l+0xbc8>)
 8008188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818c:	f7f8 fd36 	bl	8000bfc <__aeabi_dcmplt>
 8008190:	e7a1      	b.n	80080d6 <_strtod_l+0xade>
 8008192:	2300      	movs	r3, #0
 8008194:	930a      	str	r3, [sp, #40]	; 0x28
 8008196:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008198:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800819a:	6013      	str	r3, [r2, #0]
 800819c:	f7ff ba71 	b.w	8007682 <_strtod_l+0x8a>
 80081a0:	2a65      	cmp	r2, #101	; 0x65
 80081a2:	f43f ab63 	beq.w	800786c <_strtod_l+0x274>
 80081a6:	2a45      	cmp	r2, #69	; 0x45
 80081a8:	f43f ab60 	beq.w	800786c <_strtod_l+0x274>
 80081ac:	2301      	movs	r3, #1
 80081ae:	f7ff bb95 	b.w	80078dc <_strtod_l+0x2e4>
 80081b2:	bf00      	nop
 80081b4:	f3af 8000 	nop.w
 80081b8:	ffc00000 	.word	0xffc00000
 80081bc:	41dfffff 	.word	0x41dfffff
 80081c0:	94a03595 	.word	0x94a03595
 80081c4:	3fcfffff 	.word	0x3fcfffff

080081c8 <_strtod_r>:
 80081c8:	4b01      	ldr	r3, [pc, #4]	; (80081d0 <_strtod_r+0x8>)
 80081ca:	f7ff ba15 	b.w	80075f8 <_strtod_l>
 80081ce:	bf00      	nop
 80081d0:	20000074 	.word	0x20000074

080081d4 <_strtol_l.constprop.0>:
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081da:	4680      	mov	r8, r0
 80081dc:	d001      	beq.n	80081e2 <_strtol_l.constprop.0+0xe>
 80081de:	2b24      	cmp	r3, #36	; 0x24
 80081e0:	d906      	bls.n	80081f0 <_strtol_l.constprop.0+0x1c>
 80081e2:	f7fe fb23 	bl	800682c <__errno>
 80081e6:	2316      	movs	r3, #22
 80081e8:	6003      	str	r3, [r0, #0]
 80081ea:	2000      	movs	r0, #0
 80081ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f0:	460d      	mov	r5, r1
 80081f2:	4f35      	ldr	r7, [pc, #212]	; (80082c8 <_strtol_l.constprop.0+0xf4>)
 80081f4:	4628      	mov	r0, r5
 80081f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081fa:	5de6      	ldrb	r6, [r4, r7]
 80081fc:	f016 0608 	ands.w	r6, r6, #8
 8008200:	d1f8      	bne.n	80081f4 <_strtol_l.constprop.0+0x20>
 8008202:	2c2d      	cmp	r4, #45	; 0x2d
 8008204:	d12f      	bne.n	8008266 <_strtol_l.constprop.0+0x92>
 8008206:	2601      	movs	r6, #1
 8008208:	782c      	ldrb	r4, [r5, #0]
 800820a:	1c85      	adds	r5, r0, #2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d057      	beq.n	80082c0 <_strtol_l.constprop.0+0xec>
 8008210:	2b10      	cmp	r3, #16
 8008212:	d109      	bne.n	8008228 <_strtol_l.constprop.0+0x54>
 8008214:	2c30      	cmp	r4, #48	; 0x30
 8008216:	d107      	bne.n	8008228 <_strtol_l.constprop.0+0x54>
 8008218:	7828      	ldrb	r0, [r5, #0]
 800821a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800821e:	2858      	cmp	r0, #88	; 0x58
 8008220:	d149      	bne.n	80082b6 <_strtol_l.constprop.0+0xe2>
 8008222:	2310      	movs	r3, #16
 8008224:	786c      	ldrb	r4, [r5, #1]
 8008226:	3502      	adds	r5, #2
 8008228:	2700      	movs	r7, #0
 800822a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800822e:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8008232:	fbbe f9f3 	udiv	r9, lr, r3
 8008236:	4638      	mov	r0, r7
 8008238:	fb03 ea19 	mls	sl, r3, r9, lr
 800823c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008240:	f1bc 0f09 	cmp.w	ip, #9
 8008244:	d814      	bhi.n	8008270 <_strtol_l.constprop.0+0x9c>
 8008246:	4664      	mov	r4, ip
 8008248:	42a3      	cmp	r3, r4
 800824a:	dd22      	ble.n	8008292 <_strtol_l.constprop.0+0xbe>
 800824c:	2f00      	cmp	r7, #0
 800824e:	db1d      	blt.n	800828c <_strtol_l.constprop.0+0xb8>
 8008250:	4581      	cmp	r9, r0
 8008252:	d31b      	bcc.n	800828c <_strtol_l.constprop.0+0xb8>
 8008254:	d101      	bne.n	800825a <_strtol_l.constprop.0+0x86>
 8008256:	45a2      	cmp	sl, r4
 8008258:	db18      	blt.n	800828c <_strtol_l.constprop.0+0xb8>
 800825a:	2701      	movs	r7, #1
 800825c:	fb00 4003 	mla	r0, r0, r3, r4
 8008260:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008264:	e7ea      	b.n	800823c <_strtol_l.constprop.0+0x68>
 8008266:	2c2b      	cmp	r4, #43	; 0x2b
 8008268:	bf04      	itt	eq
 800826a:	782c      	ldrbeq	r4, [r5, #0]
 800826c:	1c85      	addeq	r5, r0, #2
 800826e:	e7cd      	b.n	800820c <_strtol_l.constprop.0+0x38>
 8008270:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008274:	f1bc 0f19 	cmp.w	ip, #25
 8008278:	d801      	bhi.n	800827e <_strtol_l.constprop.0+0xaa>
 800827a:	3c37      	subs	r4, #55	; 0x37
 800827c:	e7e4      	b.n	8008248 <_strtol_l.constprop.0+0x74>
 800827e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008282:	f1bc 0f19 	cmp.w	ip, #25
 8008286:	d804      	bhi.n	8008292 <_strtol_l.constprop.0+0xbe>
 8008288:	3c57      	subs	r4, #87	; 0x57
 800828a:	e7dd      	b.n	8008248 <_strtol_l.constprop.0+0x74>
 800828c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008290:	e7e6      	b.n	8008260 <_strtol_l.constprop.0+0x8c>
 8008292:	2f00      	cmp	r7, #0
 8008294:	da07      	bge.n	80082a6 <_strtol_l.constprop.0+0xd2>
 8008296:	2322      	movs	r3, #34	; 0x22
 8008298:	4670      	mov	r0, lr
 800829a:	f8c8 3000 	str.w	r3, [r8]
 800829e:	2a00      	cmp	r2, #0
 80082a0:	d0a4      	beq.n	80081ec <_strtol_l.constprop.0+0x18>
 80082a2:	1e69      	subs	r1, r5, #1
 80082a4:	e005      	b.n	80082b2 <_strtol_l.constprop.0+0xde>
 80082a6:	b106      	cbz	r6, 80082aa <_strtol_l.constprop.0+0xd6>
 80082a8:	4240      	negs	r0, r0
 80082aa:	2a00      	cmp	r2, #0
 80082ac:	d09e      	beq.n	80081ec <_strtol_l.constprop.0+0x18>
 80082ae:	2f00      	cmp	r7, #0
 80082b0:	d1f7      	bne.n	80082a2 <_strtol_l.constprop.0+0xce>
 80082b2:	6011      	str	r1, [r2, #0]
 80082b4:	e79a      	b.n	80081ec <_strtol_l.constprop.0+0x18>
 80082b6:	2430      	movs	r4, #48	; 0x30
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1b5      	bne.n	8008228 <_strtol_l.constprop.0+0x54>
 80082bc:	2308      	movs	r3, #8
 80082be:	e7b3      	b.n	8008228 <_strtol_l.constprop.0+0x54>
 80082c0:	2c30      	cmp	r4, #48	; 0x30
 80082c2:	d0a9      	beq.n	8008218 <_strtol_l.constprop.0+0x44>
 80082c4:	230a      	movs	r3, #10
 80082c6:	e7af      	b.n	8008228 <_strtol_l.constprop.0+0x54>
 80082c8:	0800b221 	.word	0x0800b221

080082cc <_strtol_r>:
 80082cc:	f7ff bf82 	b.w	80081d4 <_strtol_l.constprop.0>

080082d0 <quorem>:
 80082d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d4:	6903      	ldr	r3, [r0, #16]
 80082d6:	690c      	ldr	r4, [r1, #16]
 80082d8:	4607      	mov	r7, r0
 80082da:	42a3      	cmp	r3, r4
 80082dc:	f2c0 8082 	blt.w	80083e4 <quorem+0x114>
 80082e0:	3c01      	subs	r4, #1
 80082e2:	f100 0514 	add.w	r5, r0, #20
 80082e6:	f101 0814 	add.w	r8, r1, #20
 80082ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082ee:	9301      	str	r3, [sp, #4]
 80082f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80082f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082f8:	3301      	adds	r3, #1
 80082fa:	429a      	cmp	r2, r3
 80082fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8008300:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008304:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008308:	d331      	bcc.n	800836e <quorem+0x9e>
 800830a:	f04f 0e00 	mov.w	lr, #0
 800830e:	4640      	mov	r0, r8
 8008310:	46ac      	mov	ip, r5
 8008312:	46f2      	mov	sl, lr
 8008314:	f850 2b04 	ldr.w	r2, [r0], #4
 8008318:	b293      	uxth	r3, r2
 800831a:	fb06 e303 	mla	r3, r6, r3, lr
 800831e:	0c12      	lsrs	r2, r2, #16
 8008320:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008324:	b29b      	uxth	r3, r3
 8008326:	fb06 e202 	mla	r2, r6, r2, lr
 800832a:	ebaa 0303 	sub.w	r3, sl, r3
 800832e:	f8dc a000 	ldr.w	sl, [ip]
 8008332:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008336:	fa1f fa8a 	uxth.w	sl, sl
 800833a:	4453      	add	r3, sl
 800833c:	f8dc a000 	ldr.w	sl, [ip]
 8008340:	b292      	uxth	r2, r2
 8008342:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008346:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800834a:	b29b      	uxth	r3, r3
 800834c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008350:	4581      	cmp	r9, r0
 8008352:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008356:	f84c 3b04 	str.w	r3, [ip], #4
 800835a:	d2db      	bcs.n	8008314 <quorem+0x44>
 800835c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008360:	b92b      	cbnz	r3, 800836e <quorem+0x9e>
 8008362:	9b01      	ldr	r3, [sp, #4]
 8008364:	3b04      	subs	r3, #4
 8008366:	429d      	cmp	r5, r3
 8008368:	461a      	mov	r2, r3
 800836a:	d32f      	bcc.n	80083cc <quorem+0xfc>
 800836c:	613c      	str	r4, [r7, #16]
 800836e:	4638      	mov	r0, r7
 8008370:	f001 fc90 	bl	8009c94 <__mcmp>
 8008374:	2800      	cmp	r0, #0
 8008376:	db25      	blt.n	80083c4 <quorem+0xf4>
 8008378:	4628      	mov	r0, r5
 800837a:	f04f 0c00 	mov.w	ip, #0
 800837e:	3601      	adds	r6, #1
 8008380:	f858 1b04 	ldr.w	r1, [r8], #4
 8008384:	f8d0 e000 	ldr.w	lr, [r0]
 8008388:	b28b      	uxth	r3, r1
 800838a:	ebac 0303 	sub.w	r3, ip, r3
 800838e:	fa1f f28e 	uxth.w	r2, lr
 8008392:	4413      	add	r3, r2
 8008394:	0c0a      	lsrs	r2, r1, #16
 8008396:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800839a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800839e:	b29b      	uxth	r3, r3
 80083a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083a4:	45c1      	cmp	r9, r8
 80083a6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80083aa:	f840 3b04 	str.w	r3, [r0], #4
 80083ae:	d2e7      	bcs.n	8008380 <quorem+0xb0>
 80083b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083b8:	b922      	cbnz	r2, 80083c4 <quorem+0xf4>
 80083ba:	3b04      	subs	r3, #4
 80083bc:	429d      	cmp	r5, r3
 80083be:	461a      	mov	r2, r3
 80083c0:	d30a      	bcc.n	80083d8 <quorem+0x108>
 80083c2:	613c      	str	r4, [r7, #16]
 80083c4:	4630      	mov	r0, r6
 80083c6:	b003      	add	sp, #12
 80083c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083cc:	6812      	ldr	r2, [r2, #0]
 80083ce:	3b04      	subs	r3, #4
 80083d0:	2a00      	cmp	r2, #0
 80083d2:	d1cb      	bne.n	800836c <quorem+0x9c>
 80083d4:	3c01      	subs	r4, #1
 80083d6:	e7c6      	b.n	8008366 <quorem+0x96>
 80083d8:	6812      	ldr	r2, [r2, #0]
 80083da:	3b04      	subs	r3, #4
 80083dc:	2a00      	cmp	r2, #0
 80083de:	d1f0      	bne.n	80083c2 <quorem+0xf2>
 80083e0:	3c01      	subs	r4, #1
 80083e2:	e7eb      	b.n	80083bc <quorem+0xec>
 80083e4:	2000      	movs	r0, #0
 80083e6:	e7ee      	b.n	80083c6 <quorem+0xf6>

080083e8 <_dtoa_r>:
 80083e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ec:	4616      	mov	r6, r2
 80083ee:	461f      	mov	r7, r3
 80083f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80083f2:	b099      	sub	sp, #100	; 0x64
 80083f4:	4605      	mov	r5, r0
 80083f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80083fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80083fe:	b974      	cbnz	r4, 800841e <_dtoa_r+0x36>
 8008400:	2010      	movs	r0, #16
 8008402:	f001 f949 	bl	8009698 <malloc>
 8008406:	4602      	mov	r2, r0
 8008408:	6268      	str	r0, [r5, #36]	; 0x24
 800840a:	b920      	cbnz	r0, 8008416 <_dtoa_r+0x2e>
 800840c:	21ea      	movs	r1, #234	; 0xea
 800840e:	4ba8      	ldr	r3, [pc, #672]	; (80086b0 <_dtoa_r+0x2c8>)
 8008410:	48a8      	ldr	r0, [pc, #672]	; (80086b4 <_dtoa_r+0x2cc>)
 8008412:	f002 f8b3 	bl	800a57c <__assert_func>
 8008416:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800841a:	6004      	str	r4, [r0, #0]
 800841c:	60c4      	str	r4, [r0, #12]
 800841e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008420:	6819      	ldr	r1, [r3, #0]
 8008422:	b151      	cbz	r1, 800843a <_dtoa_r+0x52>
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	2301      	movs	r3, #1
 8008428:	4093      	lsls	r3, r2
 800842a:	604a      	str	r2, [r1, #4]
 800842c:	608b      	str	r3, [r1, #8]
 800842e:	4628      	mov	r0, r5
 8008430:	f001 f9a8 	bl	8009784 <_Bfree>
 8008434:	2200      	movs	r2, #0
 8008436:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	1e3b      	subs	r3, r7, #0
 800843c:	bfaf      	iteee	ge
 800843e:	2300      	movge	r3, #0
 8008440:	2201      	movlt	r2, #1
 8008442:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008446:	9305      	strlt	r3, [sp, #20]
 8008448:	bfa8      	it	ge
 800844a:	f8c8 3000 	strge.w	r3, [r8]
 800844e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008452:	4b99      	ldr	r3, [pc, #612]	; (80086b8 <_dtoa_r+0x2d0>)
 8008454:	bfb8      	it	lt
 8008456:	f8c8 2000 	strlt.w	r2, [r8]
 800845a:	ea33 0309 	bics.w	r3, r3, r9
 800845e:	d119      	bne.n	8008494 <_dtoa_r+0xac>
 8008460:	f242 730f 	movw	r3, #9999	; 0x270f
 8008464:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008466:	6013      	str	r3, [r2, #0]
 8008468:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800846c:	4333      	orrs	r3, r6
 800846e:	f000 857f 	beq.w	8008f70 <_dtoa_r+0xb88>
 8008472:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008474:	b953      	cbnz	r3, 800848c <_dtoa_r+0xa4>
 8008476:	4b91      	ldr	r3, [pc, #580]	; (80086bc <_dtoa_r+0x2d4>)
 8008478:	e022      	b.n	80084c0 <_dtoa_r+0xd8>
 800847a:	4b91      	ldr	r3, [pc, #580]	; (80086c0 <_dtoa_r+0x2d8>)
 800847c:	9303      	str	r3, [sp, #12]
 800847e:	3308      	adds	r3, #8
 8008480:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008482:	6013      	str	r3, [r2, #0]
 8008484:	9803      	ldr	r0, [sp, #12]
 8008486:	b019      	add	sp, #100	; 0x64
 8008488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848c:	4b8b      	ldr	r3, [pc, #556]	; (80086bc <_dtoa_r+0x2d4>)
 800848e:	9303      	str	r3, [sp, #12]
 8008490:	3303      	adds	r3, #3
 8008492:	e7f5      	b.n	8008480 <_dtoa_r+0x98>
 8008494:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008498:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800849c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084a0:	2200      	movs	r2, #0
 80084a2:	2300      	movs	r3, #0
 80084a4:	f7f8 fba0 	bl	8000be8 <__aeabi_dcmpeq>
 80084a8:	4680      	mov	r8, r0
 80084aa:	b158      	cbz	r0, 80084c4 <_dtoa_r+0xdc>
 80084ac:	2301      	movs	r3, #1
 80084ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80084b0:	6013      	str	r3, [r2, #0]
 80084b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 8558 	beq.w	8008f6a <_dtoa_r+0xb82>
 80084ba:	4882      	ldr	r0, [pc, #520]	; (80086c4 <_dtoa_r+0x2dc>)
 80084bc:	6018      	str	r0, [r3, #0]
 80084be:	1e43      	subs	r3, r0, #1
 80084c0:	9303      	str	r3, [sp, #12]
 80084c2:	e7df      	b.n	8008484 <_dtoa_r+0x9c>
 80084c4:	ab16      	add	r3, sp, #88	; 0x58
 80084c6:	9301      	str	r3, [sp, #4]
 80084c8:	ab17      	add	r3, sp, #92	; 0x5c
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	4628      	mov	r0, r5
 80084ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084d2:	f001 fd01 	bl	8009ed8 <__d2b>
 80084d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80084da:	4683      	mov	fp, r0
 80084dc:	2c00      	cmp	r4, #0
 80084de:	d07f      	beq.n	80085e0 <_dtoa_r+0x1f8>
 80084e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80084ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80084f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80084f6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80084fa:	2200      	movs	r2, #0
 80084fc:	4b72      	ldr	r3, [pc, #456]	; (80086c8 <_dtoa_r+0x2e0>)
 80084fe:	f7f7 ff53 	bl	80003a8 <__aeabi_dsub>
 8008502:	a365      	add	r3, pc, #404	; (adr r3, 8008698 <_dtoa_r+0x2b0>)
 8008504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008508:	f7f8 f906 	bl	8000718 <__aeabi_dmul>
 800850c:	a364      	add	r3, pc, #400	; (adr r3, 80086a0 <_dtoa_r+0x2b8>)
 800850e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008512:	f7f7 ff4b 	bl	80003ac <__adddf3>
 8008516:	4606      	mov	r6, r0
 8008518:	4620      	mov	r0, r4
 800851a:	460f      	mov	r7, r1
 800851c:	f7f8 f892 	bl	8000644 <__aeabi_i2d>
 8008520:	a361      	add	r3, pc, #388	; (adr r3, 80086a8 <_dtoa_r+0x2c0>)
 8008522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008526:	f7f8 f8f7 	bl	8000718 <__aeabi_dmul>
 800852a:	4602      	mov	r2, r0
 800852c:	460b      	mov	r3, r1
 800852e:	4630      	mov	r0, r6
 8008530:	4639      	mov	r1, r7
 8008532:	f7f7 ff3b 	bl	80003ac <__adddf3>
 8008536:	4606      	mov	r6, r0
 8008538:	460f      	mov	r7, r1
 800853a:	f7f8 fb9d 	bl	8000c78 <__aeabi_d2iz>
 800853e:	2200      	movs	r2, #0
 8008540:	4682      	mov	sl, r0
 8008542:	2300      	movs	r3, #0
 8008544:	4630      	mov	r0, r6
 8008546:	4639      	mov	r1, r7
 8008548:	f7f8 fb58 	bl	8000bfc <__aeabi_dcmplt>
 800854c:	b148      	cbz	r0, 8008562 <_dtoa_r+0x17a>
 800854e:	4650      	mov	r0, sl
 8008550:	f7f8 f878 	bl	8000644 <__aeabi_i2d>
 8008554:	4632      	mov	r2, r6
 8008556:	463b      	mov	r3, r7
 8008558:	f7f8 fb46 	bl	8000be8 <__aeabi_dcmpeq>
 800855c:	b908      	cbnz	r0, 8008562 <_dtoa_r+0x17a>
 800855e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008562:	f1ba 0f16 	cmp.w	sl, #22
 8008566:	d858      	bhi.n	800861a <_dtoa_r+0x232>
 8008568:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800856c:	4b57      	ldr	r3, [pc, #348]	; (80086cc <_dtoa_r+0x2e4>)
 800856e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008576:	f7f8 fb41 	bl	8000bfc <__aeabi_dcmplt>
 800857a:	2800      	cmp	r0, #0
 800857c:	d04f      	beq.n	800861e <_dtoa_r+0x236>
 800857e:	2300      	movs	r3, #0
 8008580:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008584:	930f      	str	r3, [sp, #60]	; 0x3c
 8008586:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008588:	1b1c      	subs	r4, r3, r4
 800858a:	1e63      	subs	r3, r4, #1
 800858c:	9309      	str	r3, [sp, #36]	; 0x24
 800858e:	bf49      	itett	mi
 8008590:	f1c4 0301 	rsbmi	r3, r4, #1
 8008594:	2300      	movpl	r3, #0
 8008596:	9306      	strmi	r3, [sp, #24]
 8008598:	2300      	movmi	r3, #0
 800859a:	bf54      	ite	pl
 800859c:	9306      	strpl	r3, [sp, #24]
 800859e:	9309      	strmi	r3, [sp, #36]	; 0x24
 80085a0:	f1ba 0f00 	cmp.w	sl, #0
 80085a4:	db3d      	blt.n	8008622 <_dtoa_r+0x23a>
 80085a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80085ac:	4453      	add	r3, sl
 80085ae:	9309      	str	r3, [sp, #36]	; 0x24
 80085b0:	2300      	movs	r3, #0
 80085b2:	930a      	str	r3, [sp, #40]	; 0x28
 80085b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085b6:	2b09      	cmp	r3, #9
 80085b8:	f200 808c 	bhi.w	80086d4 <_dtoa_r+0x2ec>
 80085bc:	2b05      	cmp	r3, #5
 80085be:	bfc4      	itt	gt
 80085c0:	3b04      	subgt	r3, #4
 80085c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80085c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085c6:	bfc8      	it	gt
 80085c8:	2400      	movgt	r4, #0
 80085ca:	f1a3 0302 	sub.w	r3, r3, #2
 80085ce:	bfd8      	it	le
 80085d0:	2401      	movle	r4, #1
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	f200 808a 	bhi.w	80086ec <_dtoa_r+0x304>
 80085d8:	e8df f003 	tbb	[pc, r3]
 80085dc:	5b4d4f2d 	.word	0x5b4d4f2d
 80085e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80085e4:	441c      	add	r4, r3
 80085e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80085ea:	2b20      	cmp	r3, #32
 80085ec:	bfc3      	ittte	gt
 80085ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80085f2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80085f6:	fa09 f303 	lslgt.w	r3, r9, r3
 80085fa:	f1c3 0320 	rsble	r3, r3, #32
 80085fe:	bfc6      	itte	gt
 8008600:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008604:	4318      	orrgt	r0, r3
 8008606:	fa06 f003 	lslle.w	r0, r6, r3
 800860a:	f7f8 f80b 	bl	8000624 <__aeabi_ui2d>
 800860e:	2301      	movs	r3, #1
 8008610:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008614:	3c01      	subs	r4, #1
 8008616:	9313      	str	r3, [sp, #76]	; 0x4c
 8008618:	e76f      	b.n	80084fa <_dtoa_r+0x112>
 800861a:	2301      	movs	r3, #1
 800861c:	e7b2      	b.n	8008584 <_dtoa_r+0x19c>
 800861e:	900f      	str	r0, [sp, #60]	; 0x3c
 8008620:	e7b1      	b.n	8008586 <_dtoa_r+0x19e>
 8008622:	9b06      	ldr	r3, [sp, #24]
 8008624:	eba3 030a 	sub.w	r3, r3, sl
 8008628:	9306      	str	r3, [sp, #24]
 800862a:	f1ca 0300 	rsb	r3, sl, #0
 800862e:	930a      	str	r3, [sp, #40]	; 0x28
 8008630:	2300      	movs	r3, #0
 8008632:	930e      	str	r3, [sp, #56]	; 0x38
 8008634:	e7be      	b.n	80085b4 <_dtoa_r+0x1cc>
 8008636:	2300      	movs	r3, #0
 8008638:	930b      	str	r3, [sp, #44]	; 0x2c
 800863a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800863c:	2b00      	cmp	r3, #0
 800863e:	dc58      	bgt.n	80086f2 <_dtoa_r+0x30a>
 8008640:	f04f 0901 	mov.w	r9, #1
 8008644:	464b      	mov	r3, r9
 8008646:	f8cd 9020 	str.w	r9, [sp, #32]
 800864a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800864e:	2200      	movs	r2, #0
 8008650:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008652:	6042      	str	r2, [r0, #4]
 8008654:	2204      	movs	r2, #4
 8008656:	f102 0614 	add.w	r6, r2, #20
 800865a:	429e      	cmp	r6, r3
 800865c:	6841      	ldr	r1, [r0, #4]
 800865e:	d94e      	bls.n	80086fe <_dtoa_r+0x316>
 8008660:	4628      	mov	r0, r5
 8008662:	f001 f84f 	bl	8009704 <_Balloc>
 8008666:	9003      	str	r0, [sp, #12]
 8008668:	2800      	cmp	r0, #0
 800866a:	d14c      	bne.n	8008706 <_dtoa_r+0x31e>
 800866c:	4602      	mov	r2, r0
 800866e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008672:	4b17      	ldr	r3, [pc, #92]	; (80086d0 <_dtoa_r+0x2e8>)
 8008674:	e6cc      	b.n	8008410 <_dtoa_r+0x28>
 8008676:	2301      	movs	r3, #1
 8008678:	e7de      	b.n	8008638 <_dtoa_r+0x250>
 800867a:	2300      	movs	r3, #0
 800867c:	930b      	str	r3, [sp, #44]	; 0x2c
 800867e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008680:	eb0a 0903 	add.w	r9, sl, r3
 8008684:	f109 0301 	add.w	r3, r9, #1
 8008688:	2b01      	cmp	r3, #1
 800868a:	9308      	str	r3, [sp, #32]
 800868c:	bfb8      	it	lt
 800868e:	2301      	movlt	r3, #1
 8008690:	e7dd      	b.n	800864e <_dtoa_r+0x266>
 8008692:	2301      	movs	r3, #1
 8008694:	e7f2      	b.n	800867c <_dtoa_r+0x294>
 8008696:	bf00      	nop
 8008698:	636f4361 	.word	0x636f4361
 800869c:	3fd287a7 	.word	0x3fd287a7
 80086a0:	8b60c8b3 	.word	0x8b60c8b3
 80086a4:	3fc68a28 	.word	0x3fc68a28
 80086a8:	509f79fb 	.word	0x509f79fb
 80086ac:	3fd34413 	.word	0x3fd34413
 80086b0:	0800b32e 	.word	0x0800b32e
 80086b4:	0800b345 	.word	0x0800b345
 80086b8:	7ff00000 	.word	0x7ff00000
 80086bc:	0800b32a 	.word	0x0800b32a
 80086c0:	0800b321 	.word	0x0800b321
 80086c4:	0800b1a1 	.word	0x0800b1a1
 80086c8:	3ff80000 	.word	0x3ff80000
 80086cc:	0800b4b0 	.word	0x0800b4b0
 80086d0:	0800b3a0 	.word	0x0800b3a0
 80086d4:	2401      	movs	r4, #1
 80086d6:	2300      	movs	r3, #0
 80086d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80086da:	9322      	str	r3, [sp, #136]	; 0x88
 80086dc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80086e0:	2200      	movs	r2, #0
 80086e2:	2312      	movs	r3, #18
 80086e4:	f8cd 9020 	str.w	r9, [sp, #32]
 80086e8:	9223      	str	r2, [sp, #140]	; 0x8c
 80086ea:	e7b0      	b.n	800864e <_dtoa_r+0x266>
 80086ec:	2301      	movs	r3, #1
 80086ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80086f0:	e7f4      	b.n	80086dc <_dtoa_r+0x2f4>
 80086f2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80086f6:	464b      	mov	r3, r9
 80086f8:	f8cd 9020 	str.w	r9, [sp, #32]
 80086fc:	e7a7      	b.n	800864e <_dtoa_r+0x266>
 80086fe:	3101      	adds	r1, #1
 8008700:	6041      	str	r1, [r0, #4]
 8008702:	0052      	lsls	r2, r2, #1
 8008704:	e7a7      	b.n	8008656 <_dtoa_r+0x26e>
 8008706:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008708:	9a03      	ldr	r2, [sp, #12]
 800870a:	601a      	str	r2, [r3, #0]
 800870c:	9b08      	ldr	r3, [sp, #32]
 800870e:	2b0e      	cmp	r3, #14
 8008710:	f200 80a8 	bhi.w	8008864 <_dtoa_r+0x47c>
 8008714:	2c00      	cmp	r4, #0
 8008716:	f000 80a5 	beq.w	8008864 <_dtoa_r+0x47c>
 800871a:	f1ba 0f00 	cmp.w	sl, #0
 800871e:	dd34      	ble.n	800878a <_dtoa_r+0x3a2>
 8008720:	4a9a      	ldr	r2, [pc, #616]	; (800898c <_dtoa_r+0x5a4>)
 8008722:	f00a 030f 	and.w	r3, sl, #15
 8008726:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800872a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800872e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008732:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008736:	ea4f 142a 	mov.w	r4, sl, asr #4
 800873a:	d016      	beq.n	800876a <_dtoa_r+0x382>
 800873c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008740:	4b93      	ldr	r3, [pc, #588]	; (8008990 <_dtoa_r+0x5a8>)
 8008742:	2703      	movs	r7, #3
 8008744:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008748:	f7f8 f910 	bl	800096c <__aeabi_ddiv>
 800874c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008750:	f004 040f 	and.w	r4, r4, #15
 8008754:	4e8e      	ldr	r6, [pc, #568]	; (8008990 <_dtoa_r+0x5a8>)
 8008756:	b954      	cbnz	r4, 800876e <_dtoa_r+0x386>
 8008758:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800875c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008760:	f7f8 f904 	bl	800096c <__aeabi_ddiv>
 8008764:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008768:	e029      	b.n	80087be <_dtoa_r+0x3d6>
 800876a:	2702      	movs	r7, #2
 800876c:	e7f2      	b.n	8008754 <_dtoa_r+0x36c>
 800876e:	07e1      	lsls	r1, r4, #31
 8008770:	d508      	bpl.n	8008784 <_dtoa_r+0x39c>
 8008772:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008776:	e9d6 2300 	ldrd	r2, r3, [r6]
 800877a:	f7f7 ffcd 	bl	8000718 <__aeabi_dmul>
 800877e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008782:	3701      	adds	r7, #1
 8008784:	1064      	asrs	r4, r4, #1
 8008786:	3608      	adds	r6, #8
 8008788:	e7e5      	b.n	8008756 <_dtoa_r+0x36e>
 800878a:	f000 80a5 	beq.w	80088d8 <_dtoa_r+0x4f0>
 800878e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008792:	f1ca 0400 	rsb	r4, sl, #0
 8008796:	4b7d      	ldr	r3, [pc, #500]	; (800898c <_dtoa_r+0x5a4>)
 8008798:	f004 020f 	and.w	r2, r4, #15
 800879c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a4:	f7f7 ffb8 	bl	8000718 <__aeabi_dmul>
 80087a8:	2702      	movs	r7, #2
 80087aa:	2300      	movs	r3, #0
 80087ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087b0:	4e77      	ldr	r6, [pc, #476]	; (8008990 <_dtoa_r+0x5a8>)
 80087b2:	1124      	asrs	r4, r4, #4
 80087b4:	2c00      	cmp	r4, #0
 80087b6:	f040 8084 	bne.w	80088c2 <_dtoa_r+0x4da>
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1d2      	bne.n	8008764 <_dtoa_r+0x37c>
 80087be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 808b 	beq.w	80088dc <_dtoa_r+0x4f4>
 80087c6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80087ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80087ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80087d2:	2200      	movs	r2, #0
 80087d4:	4b6f      	ldr	r3, [pc, #444]	; (8008994 <_dtoa_r+0x5ac>)
 80087d6:	f7f8 fa11 	bl	8000bfc <__aeabi_dcmplt>
 80087da:	2800      	cmp	r0, #0
 80087dc:	d07e      	beq.n	80088dc <_dtoa_r+0x4f4>
 80087de:	9b08      	ldr	r3, [sp, #32]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d07b      	beq.n	80088dc <_dtoa_r+0x4f4>
 80087e4:	f1b9 0f00 	cmp.w	r9, #0
 80087e8:	dd38      	ble.n	800885c <_dtoa_r+0x474>
 80087ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80087ee:	2200      	movs	r2, #0
 80087f0:	4b69      	ldr	r3, [pc, #420]	; (8008998 <_dtoa_r+0x5b0>)
 80087f2:	f7f7 ff91 	bl	8000718 <__aeabi_dmul>
 80087f6:	464c      	mov	r4, r9
 80087f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087fc:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8008800:	3701      	adds	r7, #1
 8008802:	4638      	mov	r0, r7
 8008804:	f7f7 ff1e 	bl	8000644 <__aeabi_i2d>
 8008808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800880c:	f7f7 ff84 	bl	8000718 <__aeabi_dmul>
 8008810:	2200      	movs	r2, #0
 8008812:	4b62      	ldr	r3, [pc, #392]	; (800899c <_dtoa_r+0x5b4>)
 8008814:	f7f7 fdca 	bl	80003ac <__adddf3>
 8008818:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800881c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008820:	9611      	str	r6, [sp, #68]	; 0x44
 8008822:	2c00      	cmp	r4, #0
 8008824:	d15d      	bne.n	80088e2 <_dtoa_r+0x4fa>
 8008826:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800882a:	2200      	movs	r2, #0
 800882c:	4b5c      	ldr	r3, [pc, #368]	; (80089a0 <_dtoa_r+0x5b8>)
 800882e:	f7f7 fdbb 	bl	80003a8 <__aeabi_dsub>
 8008832:	4602      	mov	r2, r0
 8008834:	460b      	mov	r3, r1
 8008836:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800883a:	4633      	mov	r3, r6
 800883c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800883e:	f7f8 f9fb 	bl	8000c38 <__aeabi_dcmpgt>
 8008842:	2800      	cmp	r0, #0
 8008844:	f040 829c 	bne.w	8008d80 <_dtoa_r+0x998>
 8008848:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800884c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800884e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008852:	f7f8 f9d3 	bl	8000bfc <__aeabi_dcmplt>
 8008856:	2800      	cmp	r0, #0
 8008858:	f040 8290 	bne.w	8008d7c <_dtoa_r+0x994>
 800885c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008860:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008864:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008866:	2b00      	cmp	r3, #0
 8008868:	f2c0 8152 	blt.w	8008b10 <_dtoa_r+0x728>
 800886c:	f1ba 0f0e 	cmp.w	sl, #14
 8008870:	f300 814e 	bgt.w	8008b10 <_dtoa_r+0x728>
 8008874:	4b45      	ldr	r3, [pc, #276]	; (800898c <_dtoa_r+0x5a4>)
 8008876:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800887a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800887e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008882:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008884:	2b00      	cmp	r3, #0
 8008886:	f280 80db 	bge.w	8008a40 <_dtoa_r+0x658>
 800888a:	9b08      	ldr	r3, [sp, #32]
 800888c:	2b00      	cmp	r3, #0
 800888e:	f300 80d7 	bgt.w	8008a40 <_dtoa_r+0x658>
 8008892:	f040 8272 	bne.w	8008d7a <_dtoa_r+0x992>
 8008896:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800889a:	2200      	movs	r2, #0
 800889c:	4b40      	ldr	r3, [pc, #256]	; (80089a0 <_dtoa_r+0x5b8>)
 800889e:	f7f7 ff3b 	bl	8000718 <__aeabi_dmul>
 80088a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088a6:	f7f8 f9bd 	bl	8000c24 <__aeabi_dcmpge>
 80088aa:	9c08      	ldr	r4, [sp, #32]
 80088ac:	4626      	mov	r6, r4
 80088ae:	2800      	cmp	r0, #0
 80088b0:	f040 8248 	bne.w	8008d44 <_dtoa_r+0x95c>
 80088b4:	2331      	movs	r3, #49	; 0x31
 80088b6:	9f03      	ldr	r7, [sp, #12]
 80088b8:	f10a 0a01 	add.w	sl, sl, #1
 80088bc:	f807 3b01 	strb.w	r3, [r7], #1
 80088c0:	e244      	b.n	8008d4c <_dtoa_r+0x964>
 80088c2:	07e2      	lsls	r2, r4, #31
 80088c4:	d505      	bpl.n	80088d2 <_dtoa_r+0x4ea>
 80088c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088ca:	f7f7 ff25 	bl	8000718 <__aeabi_dmul>
 80088ce:	2301      	movs	r3, #1
 80088d0:	3701      	adds	r7, #1
 80088d2:	1064      	asrs	r4, r4, #1
 80088d4:	3608      	adds	r6, #8
 80088d6:	e76d      	b.n	80087b4 <_dtoa_r+0x3cc>
 80088d8:	2702      	movs	r7, #2
 80088da:	e770      	b.n	80087be <_dtoa_r+0x3d6>
 80088dc:	46d0      	mov	r8, sl
 80088de:	9c08      	ldr	r4, [sp, #32]
 80088e0:	e78f      	b.n	8008802 <_dtoa_r+0x41a>
 80088e2:	9903      	ldr	r1, [sp, #12]
 80088e4:	4b29      	ldr	r3, [pc, #164]	; (800898c <_dtoa_r+0x5a4>)
 80088e6:	4421      	add	r1, r4
 80088e8:	9112      	str	r1, [sp, #72]	; 0x48
 80088ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088f0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80088f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088f8:	2900      	cmp	r1, #0
 80088fa:	d055      	beq.n	80089a8 <_dtoa_r+0x5c0>
 80088fc:	2000      	movs	r0, #0
 80088fe:	4929      	ldr	r1, [pc, #164]	; (80089a4 <_dtoa_r+0x5bc>)
 8008900:	f7f8 f834 	bl	800096c <__aeabi_ddiv>
 8008904:	463b      	mov	r3, r7
 8008906:	4632      	mov	r2, r6
 8008908:	f7f7 fd4e 	bl	80003a8 <__aeabi_dsub>
 800890c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008910:	9f03      	ldr	r7, [sp, #12]
 8008912:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008916:	f7f8 f9af 	bl	8000c78 <__aeabi_d2iz>
 800891a:	4604      	mov	r4, r0
 800891c:	f7f7 fe92 	bl	8000644 <__aeabi_i2d>
 8008920:	4602      	mov	r2, r0
 8008922:	460b      	mov	r3, r1
 8008924:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008928:	f7f7 fd3e 	bl	80003a8 <__aeabi_dsub>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	3430      	adds	r4, #48	; 0x30
 8008932:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008936:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800893a:	f807 4b01 	strb.w	r4, [r7], #1
 800893e:	f7f8 f95d 	bl	8000bfc <__aeabi_dcmplt>
 8008942:	2800      	cmp	r0, #0
 8008944:	d174      	bne.n	8008a30 <_dtoa_r+0x648>
 8008946:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800894a:	2000      	movs	r0, #0
 800894c:	4911      	ldr	r1, [pc, #68]	; (8008994 <_dtoa_r+0x5ac>)
 800894e:	f7f7 fd2b 	bl	80003a8 <__aeabi_dsub>
 8008952:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008956:	f7f8 f951 	bl	8000bfc <__aeabi_dcmplt>
 800895a:	2800      	cmp	r0, #0
 800895c:	f040 80b7 	bne.w	8008ace <_dtoa_r+0x6e6>
 8008960:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008962:	429f      	cmp	r7, r3
 8008964:	f43f af7a 	beq.w	800885c <_dtoa_r+0x474>
 8008968:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800896c:	2200      	movs	r2, #0
 800896e:	4b0a      	ldr	r3, [pc, #40]	; (8008998 <_dtoa_r+0x5b0>)
 8008970:	f7f7 fed2 	bl	8000718 <__aeabi_dmul>
 8008974:	2200      	movs	r2, #0
 8008976:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800897a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800897e:	4b06      	ldr	r3, [pc, #24]	; (8008998 <_dtoa_r+0x5b0>)
 8008980:	f7f7 feca 	bl	8000718 <__aeabi_dmul>
 8008984:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008988:	e7c3      	b.n	8008912 <_dtoa_r+0x52a>
 800898a:	bf00      	nop
 800898c:	0800b4b0 	.word	0x0800b4b0
 8008990:	0800b488 	.word	0x0800b488
 8008994:	3ff00000 	.word	0x3ff00000
 8008998:	40240000 	.word	0x40240000
 800899c:	401c0000 	.word	0x401c0000
 80089a0:	40140000 	.word	0x40140000
 80089a4:	3fe00000 	.word	0x3fe00000
 80089a8:	4630      	mov	r0, r6
 80089aa:	4639      	mov	r1, r7
 80089ac:	f7f7 feb4 	bl	8000718 <__aeabi_dmul>
 80089b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80089b6:	9c03      	ldr	r4, [sp, #12]
 80089b8:	9314      	str	r3, [sp, #80]	; 0x50
 80089ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089be:	f7f8 f95b 	bl	8000c78 <__aeabi_d2iz>
 80089c2:	9015      	str	r0, [sp, #84]	; 0x54
 80089c4:	f7f7 fe3e 	bl	8000644 <__aeabi_i2d>
 80089c8:	4602      	mov	r2, r0
 80089ca:	460b      	mov	r3, r1
 80089cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089d0:	f7f7 fcea 	bl	80003a8 <__aeabi_dsub>
 80089d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089d6:	4606      	mov	r6, r0
 80089d8:	3330      	adds	r3, #48	; 0x30
 80089da:	f804 3b01 	strb.w	r3, [r4], #1
 80089de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089e0:	460f      	mov	r7, r1
 80089e2:	429c      	cmp	r4, r3
 80089e4:	f04f 0200 	mov.w	r2, #0
 80089e8:	d124      	bne.n	8008a34 <_dtoa_r+0x64c>
 80089ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089ee:	4bb0      	ldr	r3, [pc, #704]	; (8008cb0 <_dtoa_r+0x8c8>)
 80089f0:	f7f7 fcdc 	bl	80003ac <__adddf3>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	4630      	mov	r0, r6
 80089fa:	4639      	mov	r1, r7
 80089fc:	f7f8 f91c 	bl	8000c38 <__aeabi_dcmpgt>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	d163      	bne.n	8008acc <_dtoa_r+0x6e4>
 8008a04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a08:	2000      	movs	r0, #0
 8008a0a:	49a9      	ldr	r1, [pc, #676]	; (8008cb0 <_dtoa_r+0x8c8>)
 8008a0c:	f7f7 fccc 	bl	80003a8 <__aeabi_dsub>
 8008a10:	4602      	mov	r2, r0
 8008a12:	460b      	mov	r3, r1
 8008a14:	4630      	mov	r0, r6
 8008a16:	4639      	mov	r1, r7
 8008a18:	f7f8 f8f0 	bl	8000bfc <__aeabi_dcmplt>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	f43f af1d 	beq.w	800885c <_dtoa_r+0x474>
 8008a22:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008a24:	1e7b      	subs	r3, r7, #1
 8008a26:	9314      	str	r3, [sp, #80]	; 0x50
 8008a28:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008a2c:	2b30      	cmp	r3, #48	; 0x30
 8008a2e:	d0f8      	beq.n	8008a22 <_dtoa_r+0x63a>
 8008a30:	46c2      	mov	sl, r8
 8008a32:	e03b      	b.n	8008aac <_dtoa_r+0x6c4>
 8008a34:	4b9f      	ldr	r3, [pc, #636]	; (8008cb4 <_dtoa_r+0x8cc>)
 8008a36:	f7f7 fe6f 	bl	8000718 <__aeabi_dmul>
 8008a3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a3e:	e7bc      	b.n	80089ba <_dtoa_r+0x5d2>
 8008a40:	9f03      	ldr	r7, [sp, #12]
 8008a42:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008a46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a4a:	4640      	mov	r0, r8
 8008a4c:	4649      	mov	r1, r9
 8008a4e:	f7f7 ff8d 	bl	800096c <__aeabi_ddiv>
 8008a52:	f7f8 f911 	bl	8000c78 <__aeabi_d2iz>
 8008a56:	4604      	mov	r4, r0
 8008a58:	f7f7 fdf4 	bl	8000644 <__aeabi_i2d>
 8008a5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a60:	f7f7 fe5a 	bl	8000718 <__aeabi_dmul>
 8008a64:	4602      	mov	r2, r0
 8008a66:	460b      	mov	r3, r1
 8008a68:	4640      	mov	r0, r8
 8008a6a:	4649      	mov	r1, r9
 8008a6c:	f7f7 fc9c 	bl	80003a8 <__aeabi_dsub>
 8008a70:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008a74:	f807 6b01 	strb.w	r6, [r7], #1
 8008a78:	9e03      	ldr	r6, [sp, #12]
 8008a7a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008a7e:	1bbe      	subs	r6, r7, r6
 8008a80:	45b4      	cmp	ip, r6
 8008a82:	4602      	mov	r2, r0
 8008a84:	460b      	mov	r3, r1
 8008a86:	d136      	bne.n	8008af6 <_dtoa_r+0x70e>
 8008a88:	f7f7 fc90 	bl	80003ac <__adddf3>
 8008a8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a90:	4680      	mov	r8, r0
 8008a92:	4689      	mov	r9, r1
 8008a94:	f7f8 f8d0 	bl	8000c38 <__aeabi_dcmpgt>
 8008a98:	bb58      	cbnz	r0, 8008af2 <_dtoa_r+0x70a>
 8008a9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a9e:	4640      	mov	r0, r8
 8008aa0:	4649      	mov	r1, r9
 8008aa2:	f7f8 f8a1 	bl	8000be8 <__aeabi_dcmpeq>
 8008aa6:	b108      	cbz	r0, 8008aac <_dtoa_r+0x6c4>
 8008aa8:	07e1      	lsls	r1, r4, #31
 8008aaa:	d422      	bmi.n	8008af2 <_dtoa_r+0x70a>
 8008aac:	4628      	mov	r0, r5
 8008aae:	4659      	mov	r1, fp
 8008ab0:	f000 fe68 	bl	8009784 <_Bfree>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	703b      	strb	r3, [r7, #0]
 8008ab8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008aba:	f10a 0001 	add.w	r0, sl, #1
 8008abe:	6018      	str	r0, [r3, #0]
 8008ac0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f43f acde 	beq.w	8008484 <_dtoa_r+0x9c>
 8008ac8:	601f      	str	r7, [r3, #0]
 8008aca:	e4db      	b.n	8008484 <_dtoa_r+0x9c>
 8008acc:	4627      	mov	r7, r4
 8008ace:	463b      	mov	r3, r7
 8008ad0:	461f      	mov	r7, r3
 8008ad2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ad6:	2a39      	cmp	r2, #57	; 0x39
 8008ad8:	d107      	bne.n	8008aea <_dtoa_r+0x702>
 8008ada:	9a03      	ldr	r2, [sp, #12]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d1f7      	bne.n	8008ad0 <_dtoa_r+0x6e8>
 8008ae0:	2230      	movs	r2, #48	; 0x30
 8008ae2:	9903      	ldr	r1, [sp, #12]
 8008ae4:	f108 0801 	add.w	r8, r8, #1
 8008ae8:	700a      	strb	r2, [r1, #0]
 8008aea:	781a      	ldrb	r2, [r3, #0]
 8008aec:	3201      	adds	r2, #1
 8008aee:	701a      	strb	r2, [r3, #0]
 8008af0:	e79e      	b.n	8008a30 <_dtoa_r+0x648>
 8008af2:	46d0      	mov	r8, sl
 8008af4:	e7eb      	b.n	8008ace <_dtoa_r+0x6e6>
 8008af6:	2200      	movs	r2, #0
 8008af8:	4b6e      	ldr	r3, [pc, #440]	; (8008cb4 <_dtoa_r+0x8cc>)
 8008afa:	f7f7 fe0d 	bl	8000718 <__aeabi_dmul>
 8008afe:	2200      	movs	r2, #0
 8008b00:	2300      	movs	r3, #0
 8008b02:	4680      	mov	r8, r0
 8008b04:	4689      	mov	r9, r1
 8008b06:	f7f8 f86f 	bl	8000be8 <__aeabi_dcmpeq>
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	d09b      	beq.n	8008a46 <_dtoa_r+0x65e>
 8008b0e:	e7cd      	b.n	8008aac <_dtoa_r+0x6c4>
 8008b10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b12:	2a00      	cmp	r2, #0
 8008b14:	f000 80d0 	beq.w	8008cb8 <_dtoa_r+0x8d0>
 8008b18:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008b1a:	2a01      	cmp	r2, #1
 8008b1c:	f300 80ae 	bgt.w	8008c7c <_dtoa_r+0x894>
 8008b20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b22:	2a00      	cmp	r2, #0
 8008b24:	f000 80a6 	beq.w	8008c74 <_dtoa_r+0x88c>
 8008b28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008b2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b2e:	9f06      	ldr	r7, [sp, #24]
 8008b30:	9a06      	ldr	r2, [sp, #24]
 8008b32:	2101      	movs	r1, #1
 8008b34:	441a      	add	r2, r3
 8008b36:	9206      	str	r2, [sp, #24]
 8008b38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	441a      	add	r2, r3
 8008b3e:	9209      	str	r2, [sp, #36]	; 0x24
 8008b40:	f000 ff20 	bl	8009984 <__i2b>
 8008b44:	4606      	mov	r6, r0
 8008b46:	2f00      	cmp	r7, #0
 8008b48:	dd0c      	ble.n	8008b64 <_dtoa_r+0x77c>
 8008b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	dd09      	ble.n	8008b64 <_dtoa_r+0x77c>
 8008b50:	42bb      	cmp	r3, r7
 8008b52:	bfa8      	it	ge
 8008b54:	463b      	movge	r3, r7
 8008b56:	9a06      	ldr	r2, [sp, #24]
 8008b58:	1aff      	subs	r7, r7, r3
 8008b5a:	1ad2      	subs	r2, r2, r3
 8008b5c:	9206      	str	r2, [sp, #24]
 8008b5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	9309      	str	r3, [sp, #36]	; 0x24
 8008b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b66:	b1f3      	cbz	r3, 8008ba6 <_dtoa_r+0x7be>
 8008b68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 80a8 	beq.w	8008cc0 <_dtoa_r+0x8d8>
 8008b70:	2c00      	cmp	r4, #0
 8008b72:	dd10      	ble.n	8008b96 <_dtoa_r+0x7ae>
 8008b74:	4631      	mov	r1, r6
 8008b76:	4622      	mov	r2, r4
 8008b78:	4628      	mov	r0, r5
 8008b7a:	f000 ffc1 	bl	8009b00 <__pow5mult>
 8008b7e:	465a      	mov	r2, fp
 8008b80:	4601      	mov	r1, r0
 8008b82:	4606      	mov	r6, r0
 8008b84:	4628      	mov	r0, r5
 8008b86:	f000 ff13 	bl	80099b0 <__multiply>
 8008b8a:	4680      	mov	r8, r0
 8008b8c:	4659      	mov	r1, fp
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f000 fdf8 	bl	8009784 <_Bfree>
 8008b94:	46c3      	mov	fp, r8
 8008b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b98:	1b1a      	subs	r2, r3, r4
 8008b9a:	d004      	beq.n	8008ba6 <_dtoa_r+0x7be>
 8008b9c:	4659      	mov	r1, fp
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	f000 ffae 	bl	8009b00 <__pow5mult>
 8008ba4:	4683      	mov	fp, r0
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	4628      	mov	r0, r5
 8008baa:	f000 feeb 	bl	8009984 <__i2b>
 8008bae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f340 8086 	ble.w	8008cc4 <_dtoa_r+0x8dc>
 8008bb8:	461a      	mov	r2, r3
 8008bba:	4601      	mov	r1, r0
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	f000 ff9f 	bl	8009b00 <__pow5mult>
 8008bc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	dd7f      	ble.n	8008cca <_dtoa_r+0x8e2>
 8008bca:	f04f 0800 	mov.w	r8, #0
 8008bce:	6923      	ldr	r3, [r4, #16]
 8008bd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008bd4:	6918      	ldr	r0, [r3, #16]
 8008bd6:	f000 fe87 	bl	80098e8 <__hi0bits>
 8008bda:	f1c0 0020 	rsb	r0, r0, #32
 8008bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be0:	4418      	add	r0, r3
 8008be2:	f010 001f 	ands.w	r0, r0, #31
 8008be6:	f000 8092 	beq.w	8008d0e <_dtoa_r+0x926>
 8008bea:	f1c0 0320 	rsb	r3, r0, #32
 8008bee:	2b04      	cmp	r3, #4
 8008bf0:	f340 808a 	ble.w	8008d08 <_dtoa_r+0x920>
 8008bf4:	f1c0 001c 	rsb	r0, r0, #28
 8008bf8:	9b06      	ldr	r3, [sp, #24]
 8008bfa:	4407      	add	r7, r0
 8008bfc:	4403      	add	r3, r0
 8008bfe:	9306      	str	r3, [sp, #24]
 8008c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c02:	4403      	add	r3, r0
 8008c04:	9309      	str	r3, [sp, #36]	; 0x24
 8008c06:	9b06      	ldr	r3, [sp, #24]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	dd05      	ble.n	8008c18 <_dtoa_r+0x830>
 8008c0c:	4659      	mov	r1, fp
 8008c0e:	461a      	mov	r2, r3
 8008c10:	4628      	mov	r0, r5
 8008c12:	f000 ffcf 	bl	8009bb4 <__lshift>
 8008c16:	4683      	mov	fp, r0
 8008c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	dd05      	ble.n	8008c2a <_dtoa_r+0x842>
 8008c1e:	4621      	mov	r1, r4
 8008c20:	461a      	mov	r2, r3
 8008c22:	4628      	mov	r0, r5
 8008c24:	f000 ffc6 	bl	8009bb4 <__lshift>
 8008c28:	4604      	mov	r4, r0
 8008c2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d070      	beq.n	8008d12 <_dtoa_r+0x92a>
 8008c30:	4621      	mov	r1, r4
 8008c32:	4658      	mov	r0, fp
 8008c34:	f001 f82e 	bl	8009c94 <__mcmp>
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	da6a      	bge.n	8008d12 <_dtoa_r+0x92a>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	4659      	mov	r1, fp
 8008c40:	220a      	movs	r2, #10
 8008c42:	4628      	mov	r0, r5
 8008c44:	f000 fdc0 	bl	80097c8 <__multadd>
 8008c48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c4a:	4683      	mov	fp, r0
 8008c4c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f000 8194 	beq.w	8008f7e <_dtoa_r+0xb96>
 8008c56:	4631      	mov	r1, r6
 8008c58:	2300      	movs	r3, #0
 8008c5a:	220a      	movs	r2, #10
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	f000 fdb3 	bl	80097c8 <__multadd>
 8008c62:	f1b9 0f00 	cmp.w	r9, #0
 8008c66:	4606      	mov	r6, r0
 8008c68:	f300 8093 	bgt.w	8008d92 <_dtoa_r+0x9aa>
 8008c6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	dc57      	bgt.n	8008d22 <_dtoa_r+0x93a>
 8008c72:	e08e      	b.n	8008d92 <_dtoa_r+0x9aa>
 8008c74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008c76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c7a:	e757      	b.n	8008b2c <_dtoa_r+0x744>
 8008c7c:	9b08      	ldr	r3, [sp, #32]
 8008c7e:	1e5c      	subs	r4, r3, #1
 8008c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c82:	42a3      	cmp	r3, r4
 8008c84:	bfb7      	itett	lt
 8008c86:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008c88:	1b1c      	subge	r4, r3, r4
 8008c8a:	1ae2      	sublt	r2, r4, r3
 8008c8c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008c8e:	bfbe      	ittt	lt
 8008c90:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008c92:	189b      	addlt	r3, r3, r2
 8008c94:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008c96:	9b08      	ldr	r3, [sp, #32]
 8008c98:	bfb8      	it	lt
 8008c9a:	2400      	movlt	r4, #0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	bfbb      	ittet	lt
 8008ca0:	9b06      	ldrlt	r3, [sp, #24]
 8008ca2:	9a08      	ldrlt	r2, [sp, #32]
 8008ca4:	9f06      	ldrge	r7, [sp, #24]
 8008ca6:	1a9f      	sublt	r7, r3, r2
 8008ca8:	bfac      	ite	ge
 8008caa:	9b08      	ldrge	r3, [sp, #32]
 8008cac:	2300      	movlt	r3, #0
 8008cae:	e73f      	b.n	8008b30 <_dtoa_r+0x748>
 8008cb0:	3fe00000 	.word	0x3fe00000
 8008cb4:	40240000 	.word	0x40240000
 8008cb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008cba:	9f06      	ldr	r7, [sp, #24]
 8008cbc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008cbe:	e742      	b.n	8008b46 <_dtoa_r+0x75e>
 8008cc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cc2:	e76b      	b.n	8008b9c <_dtoa_r+0x7b4>
 8008cc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	dc19      	bgt.n	8008cfe <_dtoa_r+0x916>
 8008cca:	9b04      	ldr	r3, [sp, #16]
 8008ccc:	b9bb      	cbnz	r3, 8008cfe <_dtoa_r+0x916>
 8008cce:	9b05      	ldr	r3, [sp, #20]
 8008cd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cd4:	b99b      	cbnz	r3, 8008cfe <_dtoa_r+0x916>
 8008cd6:	9b05      	ldr	r3, [sp, #20]
 8008cd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008cdc:	0d1b      	lsrs	r3, r3, #20
 8008cde:	051b      	lsls	r3, r3, #20
 8008ce0:	b183      	cbz	r3, 8008d04 <_dtoa_r+0x91c>
 8008ce2:	f04f 0801 	mov.w	r8, #1
 8008ce6:	9b06      	ldr	r3, [sp, #24]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	9306      	str	r3, [sp, #24]
 8008cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cee:	3301      	adds	r3, #1
 8008cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f47f af6a 	bne.w	8008bce <_dtoa_r+0x7e6>
 8008cfa:	2001      	movs	r0, #1
 8008cfc:	e76f      	b.n	8008bde <_dtoa_r+0x7f6>
 8008cfe:	f04f 0800 	mov.w	r8, #0
 8008d02:	e7f6      	b.n	8008cf2 <_dtoa_r+0x90a>
 8008d04:	4698      	mov	r8, r3
 8008d06:	e7f4      	b.n	8008cf2 <_dtoa_r+0x90a>
 8008d08:	f43f af7d 	beq.w	8008c06 <_dtoa_r+0x81e>
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	301c      	adds	r0, #28
 8008d10:	e772      	b.n	8008bf8 <_dtoa_r+0x810>
 8008d12:	9b08      	ldr	r3, [sp, #32]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	dc36      	bgt.n	8008d86 <_dtoa_r+0x99e>
 8008d18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	dd33      	ble.n	8008d86 <_dtoa_r+0x99e>
 8008d1e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d22:	f1b9 0f00 	cmp.w	r9, #0
 8008d26:	d10d      	bne.n	8008d44 <_dtoa_r+0x95c>
 8008d28:	4621      	mov	r1, r4
 8008d2a:	464b      	mov	r3, r9
 8008d2c:	2205      	movs	r2, #5
 8008d2e:	4628      	mov	r0, r5
 8008d30:	f000 fd4a 	bl	80097c8 <__multadd>
 8008d34:	4601      	mov	r1, r0
 8008d36:	4604      	mov	r4, r0
 8008d38:	4658      	mov	r0, fp
 8008d3a:	f000 ffab 	bl	8009c94 <__mcmp>
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	f73f adb8 	bgt.w	80088b4 <_dtoa_r+0x4cc>
 8008d44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d46:	9f03      	ldr	r7, [sp, #12]
 8008d48:	ea6f 0a03 	mvn.w	sl, r3
 8008d4c:	f04f 0800 	mov.w	r8, #0
 8008d50:	4621      	mov	r1, r4
 8008d52:	4628      	mov	r0, r5
 8008d54:	f000 fd16 	bl	8009784 <_Bfree>
 8008d58:	2e00      	cmp	r6, #0
 8008d5a:	f43f aea7 	beq.w	8008aac <_dtoa_r+0x6c4>
 8008d5e:	f1b8 0f00 	cmp.w	r8, #0
 8008d62:	d005      	beq.n	8008d70 <_dtoa_r+0x988>
 8008d64:	45b0      	cmp	r8, r6
 8008d66:	d003      	beq.n	8008d70 <_dtoa_r+0x988>
 8008d68:	4641      	mov	r1, r8
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	f000 fd0a 	bl	8009784 <_Bfree>
 8008d70:	4631      	mov	r1, r6
 8008d72:	4628      	mov	r0, r5
 8008d74:	f000 fd06 	bl	8009784 <_Bfree>
 8008d78:	e698      	b.n	8008aac <_dtoa_r+0x6c4>
 8008d7a:	2400      	movs	r4, #0
 8008d7c:	4626      	mov	r6, r4
 8008d7e:	e7e1      	b.n	8008d44 <_dtoa_r+0x95c>
 8008d80:	46c2      	mov	sl, r8
 8008d82:	4626      	mov	r6, r4
 8008d84:	e596      	b.n	80088b4 <_dtoa_r+0x4cc>
 8008d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f000 80fd 	beq.w	8008f8c <_dtoa_r+0xba4>
 8008d92:	2f00      	cmp	r7, #0
 8008d94:	dd05      	ble.n	8008da2 <_dtoa_r+0x9ba>
 8008d96:	4631      	mov	r1, r6
 8008d98:	463a      	mov	r2, r7
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	f000 ff0a 	bl	8009bb4 <__lshift>
 8008da0:	4606      	mov	r6, r0
 8008da2:	f1b8 0f00 	cmp.w	r8, #0
 8008da6:	d05c      	beq.n	8008e62 <_dtoa_r+0xa7a>
 8008da8:	4628      	mov	r0, r5
 8008daa:	6871      	ldr	r1, [r6, #4]
 8008dac:	f000 fcaa 	bl	8009704 <_Balloc>
 8008db0:	4607      	mov	r7, r0
 8008db2:	b928      	cbnz	r0, 8008dc0 <_dtoa_r+0x9d8>
 8008db4:	4602      	mov	r2, r0
 8008db6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008dba:	4b7f      	ldr	r3, [pc, #508]	; (8008fb8 <_dtoa_r+0xbd0>)
 8008dbc:	f7ff bb28 	b.w	8008410 <_dtoa_r+0x28>
 8008dc0:	6932      	ldr	r2, [r6, #16]
 8008dc2:	f106 010c 	add.w	r1, r6, #12
 8008dc6:	3202      	adds	r2, #2
 8008dc8:	0092      	lsls	r2, r2, #2
 8008dca:	300c      	adds	r0, #12
 8008dcc:	f000 fc8c 	bl	80096e8 <memcpy>
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	4639      	mov	r1, r7
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	f000 feed 	bl	8009bb4 <__lshift>
 8008dda:	46b0      	mov	r8, r6
 8008ddc:	4606      	mov	r6, r0
 8008dde:	9b03      	ldr	r3, [sp, #12]
 8008de0:	3301      	adds	r3, #1
 8008de2:	9308      	str	r3, [sp, #32]
 8008de4:	9b03      	ldr	r3, [sp, #12]
 8008de6:	444b      	add	r3, r9
 8008de8:	930a      	str	r3, [sp, #40]	; 0x28
 8008dea:	9b04      	ldr	r3, [sp, #16]
 8008dec:	f003 0301 	and.w	r3, r3, #1
 8008df0:	9309      	str	r3, [sp, #36]	; 0x24
 8008df2:	9b08      	ldr	r3, [sp, #32]
 8008df4:	4621      	mov	r1, r4
 8008df6:	3b01      	subs	r3, #1
 8008df8:	4658      	mov	r0, fp
 8008dfa:	9304      	str	r3, [sp, #16]
 8008dfc:	f7ff fa68 	bl	80082d0 <quorem>
 8008e00:	4603      	mov	r3, r0
 8008e02:	4641      	mov	r1, r8
 8008e04:	3330      	adds	r3, #48	; 0x30
 8008e06:	9006      	str	r0, [sp, #24]
 8008e08:	4658      	mov	r0, fp
 8008e0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e0c:	f000 ff42 	bl	8009c94 <__mcmp>
 8008e10:	4632      	mov	r2, r6
 8008e12:	4681      	mov	r9, r0
 8008e14:	4621      	mov	r1, r4
 8008e16:	4628      	mov	r0, r5
 8008e18:	f000 ff58 	bl	8009ccc <__mdiff>
 8008e1c:	68c2      	ldr	r2, [r0, #12]
 8008e1e:	4607      	mov	r7, r0
 8008e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e22:	bb02      	cbnz	r2, 8008e66 <_dtoa_r+0xa7e>
 8008e24:	4601      	mov	r1, r0
 8008e26:	4658      	mov	r0, fp
 8008e28:	f000 ff34 	bl	8009c94 <__mcmp>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e30:	4639      	mov	r1, r7
 8008e32:	4628      	mov	r0, r5
 8008e34:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008e38:	f000 fca4 	bl	8009784 <_Bfree>
 8008e3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e40:	9f08      	ldr	r7, [sp, #32]
 8008e42:	ea43 0102 	orr.w	r1, r3, r2
 8008e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e48:	430b      	orrs	r3, r1
 8008e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e4c:	d10d      	bne.n	8008e6a <_dtoa_r+0xa82>
 8008e4e:	2b39      	cmp	r3, #57	; 0x39
 8008e50:	d029      	beq.n	8008ea6 <_dtoa_r+0xabe>
 8008e52:	f1b9 0f00 	cmp.w	r9, #0
 8008e56:	dd01      	ble.n	8008e5c <_dtoa_r+0xa74>
 8008e58:	9b06      	ldr	r3, [sp, #24]
 8008e5a:	3331      	adds	r3, #49	; 0x31
 8008e5c:	9a04      	ldr	r2, [sp, #16]
 8008e5e:	7013      	strb	r3, [r2, #0]
 8008e60:	e776      	b.n	8008d50 <_dtoa_r+0x968>
 8008e62:	4630      	mov	r0, r6
 8008e64:	e7b9      	b.n	8008dda <_dtoa_r+0x9f2>
 8008e66:	2201      	movs	r2, #1
 8008e68:	e7e2      	b.n	8008e30 <_dtoa_r+0xa48>
 8008e6a:	f1b9 0f00 	cmp.w	r9, #0
 8008e6e:	db06      	blt.n	8008e7e <_dtoa_r+0xa96>
 8008e70:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008e72:	ea41 0909 	orr.w	r9, r1, r9
 8008e76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e78:	ea59 0101 	orrs.w	r1, r9, r1
 8008e7c:	d120      	bne.n	8008ec0 <_dtoa_r+0xad8>
 8008e7e:	2a00      	cmp	r2, #0
 8008e80:	ddec      	ble.n	8008e5c <_dtoa_r+0xa74>
 8008e82:	4659      	mov	r1, fp
 8008e84:	2201      	movs	r2, #1
 8008e86:	4628      	mov	r0, r5
 8008e88:	9308      	str	r3, [sp, #32]
 8008e8a:	f000 fe93 	bl	8009bb4 <__lshift>
 8008e8e:	4621      	mov	r1, r4
 8008e90:	4683      	mov	fp, r0
 8008e92:	f000 feff 	bl	8009c94 <__mcmp>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	9b08      	ldr	r3, [sp, #32]
 8008e9a:	dc02      	bgt.n	8008ea2 <_dtoa_r+0xaba>
 8008e9c:	d1de      	bne.n	8008e5c <_dtoa_r+0xa74>
 8008e9e:	07da      	lsls	r2, r3, #31
 8008ea0:	d5dc      	bpl.n	8008e5c <_dtoa_r+0xa74>
 8008ea2:	2b39      	cmp	r3, #57	; 0x39
 8008ea4:	d1d8      	bne.n	8008e58 <_dtoa_r+0xa70>
 8008ea6:	2339      	movs	r3, #57	; 0x39
 8008ea8:	9a04      	ldr	r2, [sp, #16]
 8008eaa:	7013      	strb	r3, [r2, #0]
 8008eac:	463b      	mov	r3, r7
 8008eae:	461f      	mov	r7, r3
 8008eb0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	2a39      	cmp	r2, #57	; 0x39
 8008eb8:	d050      	beq.n	8008f5c <_dtoa_r+0xb74>
 8008eba:	3201      	adds	r2, #1
 8008ebc:	701a      	strb	r2, [r3, #0]
 8008ebe:	e747      	b.n	8008d50 <_dtoa_r+0x968>
 8008ec0:	2a00      	cmp	r2, #0
 8008ec2:	dd03      	ble.n	8008ecc <_dtoa_r+0xae4>
 8008ec4:	2b39      	cmp	r3, #57	; 0x39
 8008ec6:	d0ee      	beq.n	8008ea6 <_dtoa_r+0xabe>
 8008ec8:	3301      	adds	r3, #1
 8008eca:	e7c7      	b.n	8008e5c <_dtoa_r+0xa74>
 8008ecc:	9a08      	ldr	r2, [sp, #32]
 8008ece:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008ed0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008ed4:	428a      	cmp	r2, r1
 8008ed6:	d02a      	beq.n	8008f2e <_dtoa_r+0xb46>
 8008ed8:	4659      	mov	r1, fp
 8008eda:	2300      	movs	r3, #0
 8008edc:	220a      	movs	r2, #10
 8008ede:	4628      	mov	r0, r5
 8008ee0:	f000 fc72 	bl	80097c8 <__multadd>
 8008ee4:	45b0      	cmp	r8, r6
 8008ee6:	4683      	mov	fp, r0
 8008ee8:	f04f 0300 	mov.w	r3, #0
 8008eec:	f04f 020a 	mov.w	r2, #10
 8008ef0:	4641      	mov	r1, r8
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	d107      	bne.n	8008f06 <_dtoa_r+0xb1e>
 8008ef6:	f000 fc67 	bl	80097c8 <__multadd>
 8008efa:	4680      	mov	r8, r0
 8008efc:	4606      	mov	r6, r0
 8008efe:	9b08      	ldr	r3, [sp, #32]
 8008f00:	3301      	adds	r3, #1
 8008f02:	9308      	str	r3, [sp, #32]
 8008f04:	e775      	b.n	8008df2 <_dtoa_r+0xa0a>
 8008f06:	f000 fc5f 	bl	80097c8 <__multadd>
 8008f0a:	4631      	mov	r1, r6
 8008f0c:	4680      	mov	r8, r0
 8008f0e:	2300      	movs	r3, #0
 8008f10:	220a      	movs	r2, #10
 8008f12:	4628      	mov	r0, r5
 8008f14:	f000 fc58 	bl	80097c8 <__multadd>
 8008f18:	4606      	mov	r6, r0
 8008f1a:	e7f0      	b.n	8008efe <_dtoa_r+0xb16>
 8008f1c:	f1b9 0f00 	cmp.w	r9, #0
 8008f20:	bfcc      	ite	gt
 8008f22:	464f      	movgt	r7, r9
 8008f24:	2701      	movle	r7, #1
 8008f26:	f04f 0800 	mov.w	r8, #0
 8008f2a:	9a03      	ldr	r2, [sp, #12]
 8008f2c:	4417      	add	r7, r2
 8008f2e:	4659      	mov	r1, fp
 8008f30:	2201      	movs	r2, #1
 8008f32:	4628      	mov	r0, r5
 8008f34:	9308      	str	r3, [sp, #32]
 8008f36:	f000 fe3d 	bl	8009bb4 <__lshift>
 8008f3a:	4621      	mov	r1, r4
 8008f3c:	4683      	mov	fp, r0
 8008f3e:	f000 fea9 	bl	8009c94 <__mcmp>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	dcb2      	bgt.n	8008eac <_dtoa_r+0xac4>
 8008f46:	d102      	bne.n	8008f4e <_dtoa_r+0xb66>
 8008f48:	9b08      	ldr	r3, [sp, #32]
 8008f4a:	07db      	lsls	r3, r3, #31
 8008f4c:	d4ae      	bmi.n	8008eac <_dtoa_r+0xac4>
 8008f4e:	463b      	mov	r3, r7
 8008f50:	461f      	mov	r7, r3
 8008f52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f56:	2a30      	cmp	r2, #48	; 0x30
 8008f58:	d0fa      	beq.n	8008f50 <_dtoa_r+0xb68>
 8008f5a:	e6f9      	b.n	8008d50 <_dtoa_r+0x968>
 8008f5c:	9a03      	ldr	r2, [sp, #12]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d1a5      	bne.n	8008eae <_dtoa_r+0xac6>
 8008f62:	2331      	movs	r3, #49	; 0x31
 8008f64:	f10a 0a01 	add.w	sl, sl, #1
 8008f68:	e779      	b.n	8008e5e <_dtoa_r+0xa76>
 8008f6a:	4b14      	ldr	r3, [pc, #80]	; (8008fbc <_dtoa_r+0xbd4>)
 8008f6c:	f7ff baa8 	b.w	80084c0 <_dtoa_r+0xd8>
 8008f70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f47f aa81 	bne.w	800847a <_dtoa_r+0x92>
 8008f78:	4b11      	ldr	r3, [pc, #68]	; (8008fc0 <_dtoa_r+0xbd8>)
 8008f7a:	f7ff baa1 	b.w	80084c0 <_dtoa_r+0xd8>
 8008f7e:	f1b9 0f00 	cmp.w	r9, #0
 8008f82:	dc03      	bgt.n	8008f8c <_dtoa_r+0xba4>
 8008f84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	f73f aecb 	bgt.w	8008d22 <_dtoa_r+0x93a>
 8008f8c:	9f03      	ldr	r7, [sp, #12]
 8008f8e:	4621      	mov	r1, r4
 8008f90:	4658      	mov	r0, fp
 8008f92:	f7ff f99d 	bl	80082d0 <quorem>
 8008f96:	9a03      	ldr	r2, [sp, #12]
 8008f98:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008f9c:	f807 3b01 	strb.w	r3, [r7], #1
 8008fa0:	1aba      	subs	r2, r7, r2
 8008fa2:	4591      	cmp	r9, r2
 8008fa4:	ddba      	ble.n	8008f1c <_dtoa_r+0xb34>
 8008fa6:	4659      	mov	r1, fp
 8008fa8:	2300      	movs	r3, #0
 8008faa:	220a      	movs	r2, #10
 8008fac:	4628      	mov	r0, r5
 8008fae:	f000 fc0b 	bl	80097c8 <__multadd>
 8008fb2:	4683      	mov	fp, r0
 8008fb4:	e7eb      	b.n	8008f8e <_dtoa_r+0xba6>
 8008fb6:	bf00      	nop
 8008fb8:	0800b3a0 	.word	0x0800b3a0
 8008fbc:	0800b1a0 	.word	0x0800b1a0
 8008fc0:	0800b321 	.word	0x0800b321

08008fc4 <rshift>:
 8008fc4:	6903      	ldr	r3, [r0, #16]
 8008fc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008fca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008fce:	f100 0414 	add.w	r4, r0, #20
 8008fd2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008fd6:	dd46      	ble.n	8009066 <rshift+0xa2>
 8008fd8:	f011 011f 	ands.w	r1, r1, #31
 8008fdc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008fe0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008fe4:	d10c      	bne.n	8009000 <rshift+0x3c>
 8008fe6:	4629      	mov	r1, r5
 8008fe8:	f100 0710 	add.w	r7, r0, #16
 8008fec:	42b1      	cmp	r1, r6
 8008fee:	d335      	bcc.n	800905c <rshift+0x98>
 8008ff0:	1a9b      	subs	r3, r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	1eea      	subs	r2, r5, #3
 8008ff6:	4296      	cmp	r6, r2
 8008ff8:	bf38      	it	cc
 8008ffa:	2300      	movcc	r3, #0
 8008ffc:	4423      	add	r3, r4
 8008ffe:	e015      	b.n	800902c <rshift+0x68>
 8009000:	46a1      	mov	r9, r4
 8009002:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009006:	f1c1 0820 	rsb	r8, r1, #32
 800900a:	40cf      	lsrs	r7, r1
 800900c:	f105 0e04 	add.w	lr, r5, #4
 8009010:	4576      	cmp	r6, lr
 8009012:	46f4      	mov	ip, lr
 8009014:	d816      	bhi.n	8009044 <rshift+0x80>
 8009016:	1a9a      	subs	r2, r3, r2
 8009018:	0092      	lsls	r2, r2, #2
 800901a:	3a04      	subs	r2, #4
 800901c:	3501      	adds	r5, #1
 800901e:	42ae      	cmp	r6, r5
 8009020:	bf38      	it	cc
 8009022:	2200      	movcc	r2, #0
 8009024:	18a3      	adds	r3, r4, r2
 8009026:	50a7      	str	r7, [r4, r2]
 8009028:	b107      	cbz	r7, 800902c <rshift+0x68>
 800902a:	3304      	adds	r3, #4
 800902c:	42a3      	cmp	r3, r4
 800902e:	eba3 0204 	sub.w	r2, r3, r4
 8009032:	bf08      	it	eq
 8009034:	2300      	moveq	r3, #0
 8009036:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800903a:	6102      	str	r2, [r0, #16]
 800903c:	bf08      	it	eq
 800903e:	6143      	streq	r3, [r0, #20]
 8009040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009044:	f8dc c000 	ldr.w	ip, [ip]
 8009048:	fa0c fc08 	lsl.w	ip, ip, r8
 800904c:	ea4c 0707 	orr.w	r7, ip, r7
 8009050:	f849 7b04 	str.w	r7, [r9], #4
 8009054:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009058:	40cf      	lsrs	r7, r1
 800905a:	e7d9      	b.n	8009010 <rshift+0x4c>
 800905c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009060:	f847 cf04 	str.w	ip, [r7, #4]!
 8009064:	e7c2      	b.n	8008fec <rshift+0x28>
 8009066:	4623      	mov	r3, r4
 8009068:	e7e0      	b.n	800902c <rshift+0x68>

0800906a <__hexdig_fun>:
 800906a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800906e:	2b09      	cmp	r3, #9
 8009070:	d802      	bhi.n	8009078 <__hexdig_fun+0xe>
 8009072:	3820      	subs	r0, #32
 8009074:	b2c0      	uxtb	r0, r0
 8009076:	4770      	bx	lr
 8009078:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800907c:	2b05      	cmp	r3, #5
 800907e:	d801      	bhi.n	8009084 <__hexdig_fun+0x1a>
 8009080:	3847      	subs	r0, #71	; 0x47
 8009082:	e7f7      	b.n	8009074 <__hexdig_fun+0xa>
 8009084:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009088:	2b05      	cmp	r3, #5
 800908a:	d801      	bhi.n	8009090 <__hexdig_fun+0x26>
 800908c:	3827      	subs	r0, #39	; 0x27
 800908e:	e7f1      	b.n	8009074 <__hexdig_fun+0xa>
 8009090:	2000      	movs	r0, #0
 8009092:	4770      	bx	lr

08009094 <__gethex>:
 8009094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009098:	b08b      	sub	sp, #44	; 0x2c
 800909a:	9305      	str	r3, [sp, #20]
 800909c:	4bb2      	ldr	r3, [pc, #712]	; (8009368 <__gethex+0x2d4>)
 800909e:	9002      	str	r0, [sp, #8]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	468b      	mov	fp, r1
 80090a4:	4618      	mov	r0, r3
 80090a6:	4690      	mov	r8, r2
 80090a8:	9303      	str	r3, [sp, #12]
 80090aa:	f7f7 f8bd 	bl	8000228 <strlen>
 80090ae:	4682      	mov	sl, r0
 80090b0:	9b03      	ldr	r3, [sp, #12]
 80090b2:	f8db 2000 	ldr.w	r2, [fp]
 80090b6:	4403      	add	r3, r0
 80090b8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80090bc:	9306      	str	r3, [sp, #24]
 80090be:	1c93      	adds	r3, r2, #2
 80090c0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80090c4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80090c8:	32fe      	adds	r2, #254	; 0xfe
 80090ca:	18d1      	adds	r1, r2, r3
 80090cc:	461f      	mov	r7, r3
 80090ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 80090d2:	9101      	str	r1, [sp, #4]
 80090d4:	2830      	cmp	r0, #48	; 0x30
 80090d6:	d0f8      	beq.n	80090ca <__gethex+0x36>
 80090d8:	f7ff ffc7 	bl	800906a <__hexdig_fun>
 80090dc:	4604      	mov	r4, r0
 80090de:	2800      	cmp	r0, #0
 80090e0:	d13a      	bne.n	8009158 <__gethex+0xc4>
 80090e2:	4652      	mov	r2, sl
 80090e4:	4638      	mov	r0, r7
 80090e6:	9903      	ldr	r1, [sp, #12]
 80090e8:	f001 fa26 	bl	800a538 <strncmp>
 80090ec:	4605      	mov	r5, r0
 80090ee:	2800      	cmp	r0, #0
 80090f0:	d166      	bne.n	80091c0 <__gethex+0x12c>
 80090f2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80090f6:	eb07 060a 	add.w	r6, r7, sl
 80090fa:	f7ff ffb6 	bl	800906a <__hexdig_fun>
 80090fe:	2800      	cmp	r0, #0
 8009100:	d060      	beq.n	80091c4 <__gethex+0x130>
 8009102:	4633      	mov	r3, r6
 8009104:	7818      	ldrb	r0, [r3, #0]
 8009106:	461f      	mov	r7, r3
 8009108:	2830      	cmp	r0, #48	; 0x30
 800910a:	f103 0301 	add.w	r3, r3, #1
 800910e:	d0f9      	beq.n	8009104 <__gethex+0x70>
 8009110:	f7ff ffab 	bl	800906a <__hexdig_fun>
 8009114:	2301      	movs	r3, #1
 8009116:	fab0 f480 	clz	r4, r0
 800911a:	4635      	mov	r5, r6
 800911c:	0964      	lsrs	r4, r4, #5
 800911e:	9301      	str	r3, [sp, #4]
 8009120:	463a      	mov	r2, r7
 8009122:	4616      	mov	r6, r2
 8009124:	7830      	ldrb	r0, [r6, #0]
 8009126:	3201      	adds	r2, #1
 8009128:	f7ff ff9f 	bl	800906a <__hexdig_fun>
 800912c:	2800      	cmp	r0, #0
 800912e:	d1f8      	bne.n	8009122 <__gethex+0x8e>
 8009130:	4652      	mov	r2, sl
 8009132:	4630      	mov	r0, r6
 8009134:	9903      	ldr	r1, [sp, #12]
 8009136:	f001 f9ff 	bl	800a538 <strncmp>
 800913a:	b980      	cbnz	r0, 800915e <__gethex+0xca>
 800913c:	b94d      	cbnz	r5, 8009152 <__gethex+0xbe>
 800913e:	eb06 050a 	add.w	r5, r6, sl
 8009142:	462a      	mov	r2, r5
 8009144:	4616      	mov	r6, r2
 8009146:	7830      	ldrb	r0, [r6, #0]
 8009148:	3201      	adds	r2, #1
 800914a:	f7ff ff8e 	bl	800906a <__hexdig_fun>
 800914e:	2800      	cmp	r0, #0
 8009150:	d1f8      	bne.n	8009144 <__gethex+0xb0>
 8009152:	1bad      	subs	r5, r5, r6
 8009154:	00ad      	lsls	r5, r5, #2
 8009156:	e004      	b.n	8009162 <__gethex+0xce>
 8009158:	2400      	movs	r4, #0
 800915a:	4625      	mov	r5, r4
 800915c:	e7e0      	b.n	8009120 <__gethex+0x8c>
 800915e:	2d00      	cmp	r5, #0
 8009160:	d1f7      	bne.n	8009152 <__gethex+0xbe>
 8009162:	7833      	ldrb	r3, [r6, #0]
 8009164:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009168:	2b50      	cmp	r3, #80	; 0x50
 800916a:	d139      	bne.n	80091e0 <__gethex+0x14c>
 800916c:	7873      	ldrb	r3, [r6, #1]
 800916e:	2b2b      	cmp	r3, #43	; 0x2b
 8009170:	d02a      	beq.n	80091c8 <__gethex+0x134>
 8009172:	2b2d      	cmp	r3, #45	; 0x2d
 8009174:	d02c      	beq.n	80091d0 <__gethex+0x13c>
 8009176:	f04f 0900 	mov.w	r9, #0
 800917a:	1c71      	adds	r1, r6, #1
 800917c:	7808      	ldrb	r0, [r1, #0]
 800917e:	f7ff ff74 	bl	800906a <__hexdig_fun>
 8009182:	1e43      	subs	r3, r0, #1
 8009184:	b2db      	uxtb	r3, r3
 8009186:	2b18      	cmp	r3, #24
 8009188:	d82a      	bhi.n	80091e0 <__gethex+0x14c>
 800918a:	f1a0 0210 	sub.w	r2, r0, #16
 800918e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009192:	f7ff ff6a 	bl	800906a <__hexdig_fun>
 8009196:	1e43      	subs	r3, r0, #1
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b18      	cmp	r3, #24
 800919c:	d91b      	bls.n	80091d6 <__gethex+0x142>
 800919e:	f1b9 0f00 	cmp.w	r9, #0
 80091a2:	d000      	beq.n	80091a6 <__gethex+0x112>
 80091a4:	4252      	negs	r2, r2
 80091a6:	4415      	add	r5, r2
 80091a8:	f8cb 1000 	str.w	r1, [fp]
 80091ac:	b1d4      	cbz	r4, 80091e4 <__gethex+0x150>
 80091ae:	9b01      	ldr	r3, [sp, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	bf14      	ite	ne
 80091b4:	2700      	movne	r7, #0
 80091b6:	2706      	moveq	r7, #6
 80091b8:	4638      	mov	r0, r7
 80091ba:	b00b      	add	sp, #44	; 0x2c
 80091bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c0:	463e      	mov	r6, r7
 80091c2:	4625      	mov	r5, r4
 80091c4:	2401      	movs	r4, #1
 80091c6:	e7cc      	b.n	8009162 <__gethex+0xce>
 80091c8:	f04f 0900 	mov.w	r9, #0
 80091cc:	1cb1      	adds	r1, r6, #2
 80091ce:	e7d5      	b.n	800917c <__gethex+0xe8>
 80091d0:	f04f 0901 	mov.w	r9, #1
 80091d4:	e7fa      	b.n	80091cc <__gethex+0x138>
 80091d6:	230a      	movs	r3, #10
 80091d8:	fb03 0202 	mla	r2, r3, r2, r0
 80091dc:	3a10      	subs	r2, #16
 80091de:	e7d6      	b.n	800918e <__gethex+0xfa>
 80091e0:	4631      	mov	r1, r6
 80091e2:	e7e1      	b.n	80091a8 <__gethex+0x114>
 80091e4:	4621      	mov	r1, r4
 80091e6:	1bf3      	subs	r3, r6, r7
 80091e8:	3b01      	subs	r3, #1
 80091ea:	2b07      	cmp	r3, #7
 80091ec:	dc0a      	bgt.n	8009204 <__gethex+0x170>
 80091ee:	9802      	ldr	r0, [sp, #8]
 80091f0:	f000 fa88 	bl	8009704 <_Balloc>
 80091f4:	4604      	mov	r4, r0
 80091f6:	b940      	cbnz	r0, 800920a <__gethex+0x176>
 80091f8:	4602      	mov	r2, r0
 80091fa:	21de      	movs	r1, #222	; 0xde
 80091fc:	4b5b      	ldr	r3, [pc, #364]	; (800936c <__gethex+0x2d8>)
 80091fe:	485c      	ldr	r0, [pc, #368]	; (8009370 <__gethex+0x2dc>)
 8009200:	f001 f9bc 	bl	800a57c <__assert_func>
 8009204:	3101      	adds	r1, #1
 8009206:	105b      	asrs	r3, r3, #1
 8009208:	e7ef      	b.n	80091ea <__gethex+0x156>
 800920a:	f04f 0b00 	mov.w	fp, #0
 800920e:	f100 0914 	add.w	r9, r0, #20
 8009212:	f1ca 0301 	rsb	r3, sl, #1
 8009216:	f8cd 9010 	str.w	r9, [sp, #16]
 800921a:	f8cd b004 	str.w	fp, [sp, #4]
 800921e:	9308      	str	r3, [sp, #32]
 8009220:	42b7      	cmp	r7, r6
 8009222:	d33f      	bcc.n	80092a4 <__gethex+0x210>
 8009224:	9f04      	ldr	r7, [sp, #16]
 8009226:	9b01      	ldr	r3, [sp, #4]
 8009228:	f847 3b04 	str.w	r3, [r7], #4
 800922c:	eba7 0709 	sub.w	r7, r7, r9
 8009230:	10bf      	asrs	r7, r7, #2
 8009232:	6127      	str	r7, [r4, #16]
 8009234:	4618      	mov	r0, r3
 8009236:	f000 fb57 	bl	80098e8 <__hi0bits>
 800923a:	017f      	lsls	r7, r7, #5
 800923c:	f8d8 6000 	ldr.w	r6, [r8]
 8009240:	1a3f      	subs	r7, r7, r0
 8009242:	42b7      	cmp	r7, r6
 8009244:	dd62      	ble.n	800930c <__gethex+0x278>
 8009246:	1bbf      	subs	r7, r7, r6
 8009248:	4639      	mov	r1, r7
 800924a:	4620      	mov	r0, r4
 800924c:	f000 fef1 	bl	800a032 <__any_on>
 8009250:	4682      	mov	sl, r0
 8009252:	b1a8      	cbz	r0, 8009280 <__gethex+0x1ec>
 8009254:	f04f 0a01 	mov.w	sl, #1
 8009258:	1e7b      	subs	r3, r7, #1
 800925a:	1159      	asrs	r1, r3, #5
 800925c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009260:	f003 021f 	and.w	r2, r3, #31
 8009264:	fa0a f202 	lsl.w	r2, sl, r2
 8009268:	420a      	tst	r2, r1
 800926a:	d009      	beq.n	8009280 <__gethex+0x1ec>
 800926c:	4553      	cmp	r3, sl
 800926e:	dd05      	ble.n	800927c <__gethex+0x1e8>
 8009270:	4620      	mov	r0, r4
 8009272:	1eb9      	subs	r1, r7, #2
 8009274:	f000 fedd 	bl	800a032 <__any_on>
 8009278:	2800      	cmp	r0, #0
 800927a:	d144      	bne.n	8009306 <__gethex+0x272>
 800927c:	f04f 0a02 	mov.w	sl, #2
 8009280:	4639      	mov	r1, r7
 8009282:	4620      	mov	r0, r4
 8009284:	f7ff fe9e 	bl	8008fc4 <rshift>
 8009288:	443d      	add	r5, r7
 800928a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800928e:	42ab      	cmp	r3, r5
 8009290:	da4a      	bge.n	8009328 <__gethex+0x294>
 8009292:	4621      	mov	r1, r4
 8009294:	9802      	ldr	r0, [sp, #8]
 8009296:	f000 fa75 	bl	8009784 <_Bfree>
 800929a:	2300      	movs	r3, #0
 800929c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800929e:	27a3      	movs	r7, #163	; 0xa3
 80092a0:	6013      	str	r3, [r2, #0]
 80092a2:	e789      	b.n	80091b8 <__gethex+0x124>
 80092a4:	1e73      	subs	r3, r6, #1
 80092a6:	9a06      	ldr	r2, [sp, #24]
 80092a8:	9307      	str	r3, [sp, #28]
 80092aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d019      	beq.n	80092e6 <__gethex+0x252>
 80092b2:	f1bb 0f20 	cmp.w	fp, #32
 80092b6:	d107      	bne.n	80092c8 <__gethex+0x234>
 80092b8:	9b04      	ldr	r3, [sp, #16]
 80092ba:	9a01      	ldr	r2, [sp, #4]
 80092bc:	f843 2b04 	str.w	r2, [r3], #4
 80092c0:	9304      	str	r3, [sp, #16]
 80092c2:	2300      	movs	r3, #0
 80092c4:	469b      	mov	fp, r3
 80092c6:	9301      	str	r3, [sp, #4]
 80092c8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80092cc:	f7ff fecd 	bl	800906a <__hexdig_fun>
 80092d0:	9b01      	ldr	r3, [sp, #4]
 80092d2:	f000 000f 	and.w	r0, r0, #15
 80092d6:	fa00 f00b 	lsl.w	r0, r0, fp
 80092da:	4303      	orrs	r3, r0
 80092dc:	9301      	str	r3, [sp, #4]
 80092de:	f10b 0b04 	add.w	fp, fp, #4
 80092e2:	9b07      	ldr	r3, [sp, #28]
 80092e4:	e00d      	b.n	8009302 <__gethex+0x26e>
 80092e6:	9a08      	ldr	r2, [sp, #32]
 80092e8:	1e73      	subs	r3, r6, #1
 80092ea:	4413      	add	r3, r2
 80092ec:	42bb      	cmp	r3, r7
 80092ee:	d3e0      	bcc.n	80092b2 <__gethex+0x21e>
 80092f0:	4618      	mov	r0, r3
 80092f2:	4652      	mov	r2, sl
 80092f4:	9903      	ldr	r1, [sp, #12]
 80092f6:	9309      	str	r3, [sp, #36]	; 0x24
 80092f8:	f001 f91e 	bl	800a538 <strncmp>
 80092fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092fe:	2800      	cmp	r0, #0
 8009300:	d1d7      	bne.n	80092b2 <__gethex+0x21e>
 8009302:	461e      	mov	r6, r3
 8009304:	e78c      	b.n	8009220 <__gethex+0x18c>
 8009306:	f04f 0a03 	mov.w	sl, #3
 800930a:	e7b9      	b.n	8009280 <__gethex+0x1ec>
 800930c:	da09      	bge.n	8009322 <__gethex+0x28e>
 800930e:	1bf7      	subs	r7, r6, r7
 8009310:	4621      	mov	r1, r4
 8009312:	463a      	mov	r2, r7
 8009314:	9802      	ldr	r0, [sp, #8]
 8009316:	f000 fc4d 	bl	8009bb4 <__lshift>
 800931a:	4604      	mov	r4, r0
 800931c:	1bed      	subs	r5, r5, r7
 800931e:	f100 0914 	add.w	r9, r0, #20
 8009322:	f04f 0a00 	mov.w	sl, #0
 8009326:	e7b0      	b.n	800928a <__gethex+0x1f6>
 8009328:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800932c:	42a8      	cmp	r0, r5
 800932e:	dd72      	ble.n	8009416 <__gethex+0x382>
 8009330:	1b45      	subs	r5, r0, r5
 8009332:	42ae      	cmp	r6, r5
 8009334:	dc35      	bgt.n	80093a2 <__gethex+0x30e>
 8009336:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800933a:	2b02      	cmp	r3, #2
 800933c:	d029      	beq.n	8009392 <__gethex+0x2fe>
 800933e:	2b03      	cmp	r3, #3
 8009340:	d02b      	beq.n	800939a <__gethex+0x306>
 8009342:	2b01      	cmp	r3, #1
 8009344:	d11c      	bne.n	8009380 <__gethex+0x2ec>
 8009346:	42ae      	cmp	r6, r5
 8009348:	d11a      	bne.n	8009380 <__gethex+0x2ec>
 800934a:	2e01      	cmp	r6, #1
 800934c:	d112      	bne.n	8009374 <__gethex+0x2e0>
 800934e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009352:	9a05      	ldr	r2, [sp, #20]
 8009354:	2762      	movs	r7, #98	; 0x62
 8009356:	6013      	str	r3, [r2, #0]
 8009358:	2301      	movs	r3, #1
 800935a:	6123      	str	r3, [r4, #16]
 800935c:	f8c9 3000 	str.w	r3, [r9]
 8009360:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009362:	601c      	str	r4, [r3, #0]
 8009364:	e728      	b.n	80091b8 <__gethex+0x124>
 8009366:	bf00      	nop
 8009368:	0800b418 	.word	0x0800b418
 800936c:	0800b3a0 	.word	0x0800b3a0
 8009370:	0800b3b1 	.word	0x0800b3b1
 8009374:	4620      	mov	r0, r4
 8009376:	1e71      	subs	r1, r6, #1
 8009378:	f000 fe5b 	bl	800a032 <__any_on>
 800937c:	2800      	cmp	r0, #0
 800937e:	d1e6      	bne.n	800934e <__gethex+0x2ba>
 8009380:	4621      	mov	r1, r4
 8009382:	9802      	ldr	r0, [sp, #8]
 8009384:	f000 f9fe 	bl	8009784 <_Bfree>
 8009388:	2300      	movs	r3, #0
 800938a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800938c:	2750      	movs	r7, #80	; 0x50
 800938e:	6013      	str	r3, [r2, #0]
 8009390:	e712      	b.n	80091b8 <__gethex+0x124>
 8009392:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1f3      	bne.n	8009380 <__gethex+0x2ec>
 8009398:	e7d9      	b.n	800934e <__gethex+0x2ba>
 800939a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1d6      	bne.n	800934e <__gethex+0x2ba>
 80093a0:	e7ee      	b.n	8009380 <__gethex+0x2ec>
 80093a2:	1e6f      	subs	r7, r5, #1
 80093a4:	f1ba 0f00 	cmp.w	sl, #0
 80093a8:	d132      	bne.n	8009410 <__gethex+0x37c>
 80093aa:	b127      	cbz	r7, 80093b6 <__gethex+0x322>
 80093ac:	4639      	mov	r1, r7
 80093ae:	4620      	mov	r0, r4
 80093b0:	f000 fe3f 	bl	800a032 <__any_on>
 80093b4:	4682      	mov	sl, r0
 80093b6:	2101      	movs	r1, #1
 80093b8:	117b      	asrs	r3, r7, #5
 80093ba:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80093be:	f007 071f 	and.w	r7, r7, #31
 80093c2:	fa01 f707 	lsl.w	r7, r1, r7
 80093c6:	421f      	tst	r7, r3
 80093c8:	f04f 0702 	mov.w	r7, #2
 80093cc:	4629      	mov	r1, r5
 80093ce:	4620      	mov	r0, r4
 80093d0:	bf18      	it	ne
 80093d2:	f04a 0a02 	orrne.w	sl, sl, #2
 80093d6:	1b76      	subs	r6, r6, r5
 80093d8:	f7ff fdf4 	bl	8008fc4 <rshift>
 80093dc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80093e0:	f1ba 0f00 	cmp.w	sl, #0
 80093e4:	d048      	beq.n	8009478 <__gethex+0x3e4>
 80093e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d015      	beq.n	800941a <__gethex+0x386>
 80093ee:	2b03      	cmp	r3, #3
 80093f0:	d017      	beq.n	8009422 <__gethex+0x38e>
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d109      	bne.n	800940a <__gethex+0x376>
 80093f6:	f01a 0f02 	tst.w	sl, #2
 80093fa:	d006      	beq.n	800940a <__gethex+0x376>
 80093fc:	f8d9 0000 	ldr.w	r0, [r9]
 8009400:	ea4a 0a00 	orr.w	sl, sl, r0
 8009404:	f01a 0f01 	tst.w	sl, #1
 8009408:	d10e      	bne.n	8009428 <__gethex+0x394>
 800940a:	f047 0710 	orr.w	r7, r7, #16
 800940e:	e033      	b.n	8009478 <__gethex+0x3e4>
 8009410:	f04f 0a01 	mov.w	sl, #1
 8009414:	e7cf      	b.n	80093b6 <__gethex+0x322>
 8009416:	2701      	movs	r7, #1
 8009418:	e7e2      	b.n	80093e0 <__gethex+0x34c>
 800941a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800941c:	f1c3 0301 	rsb	r3, r3, #1
 8009420:	9315      	str	r3, [sp, #84]	; 0x54
 8009422:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009424:	2b00      	cmp	r3, #0
 8009426:	d0f0      	beq.n	800940a <__gethex+0x376>
 8009428:	f04f 0c00 	mov.w	ip, #0
 800942c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009430:	f104 0314 	add.w	r3, r4, #20
 8009434:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009438:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800943c:	4618      	mov	r0, r3
 800943e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009442:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009446:	d01c      	beq.n	8009482 <__gethex+0x3ee>
 8009448:	3201      	adds	r2, #1
 800944a:	6002      	str	r2, [r0, #0]
 800944c:	2f02      	cmp	r7, #2
 800944e:	f104 0314 	add.w	r3, r4, #20
 8009452:	d13d      	bne.n	80094d0 <__gethex+0x43c>
 8009454:	f8d8 2000 	ldr.w	r2, [r8]
 8009458:	3a01      	subs	r2, #1
 800945a:	42b2      	cmp	r2, r6
 800945c:	d10a      	bne.n	8009474 <__gethex+0x3e0>
 800945e:	2201      	movs	r2, #1
 8009460:	1171      	asrs	r1, r6, #5
 8009462:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009466:	f006 061f 	and.w	r6, r6, #31
 800946a:	fa02 f606 	lsl.w	r6, r2, r6
 800946e:	421e      	tst	r6, r3
 8009470:	bf18      	it	ne
 8009472:	4617      	movne	r7, r2
 8009474:	f047 0720 	orr.w	r7, r7, #32
 8009478:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800947a:	601c      	str	r4, [r3, #0]
 800947c:	9b05      	ldr	r3, [sp, #20]
 800947e:	601d      	str	r5, [r3, #0]
 8009480:	e69a      	b.n	80091b8 <__gethex+0x124>
 8009482:	4299      	cmp	r1, r3
 8009484:	f843 cc04 	str.w	ip, [r3, #-4]
 8009488:	d8d8      	bhi.n	800943c <__gethex+0x3a8>
 800948a:	68a3      	ldr	r3, [r4, #8]
 800948c:	459b      	cmp	fp, r3
 800948e:	db17      	blt.n	80094c0 <__gethex+0x42c>
 8009490:	6861      	ldr	r1, [r4, #4]
 8009492:	9802      	ldr	r0, [sp, #8]
 8009494:	3101      	adds	r1, #1
 8009496:	f000 f935 	bl	8009704 <_Balloc>
 800949a:	4681      	mov	r9, r0
 800949c:	b918      	cbnz	r0, 80094a6 <__gethex+0x412>
 800949e:	4602      	mov	r2, r0
 80094a0:	2184      	movs	r1, #132	; 0x84
 80094a2:	4b19      	ldr	r3, [pc, #100]	; (8009508 <__gethex+0x474>)
 80094a4:	e6ab      	b.n	80091fe <__gethex+0x16a>
 80094a6:	6922      	ldr	r2, [r4, #16]
 80094a8:	f104 010c 	add.w	r1, r4, #12
 80094ac:	3202      	adds	r2, #2
 80094ae:	0092      	lsls	r2, r2, #2
 80094b0:	300c      	adds	r0, #12
 80094b2:	f000 f919 	bl	80096e8 <memcpy>
 80094b6:	4621      	mov	r1, r4
 80094b8:	9802      	ldr	r0, [sp, #8]
 80094ba:	f000 f963 	bl	8009784 <_Bfree>
 80094be:	464c      	mov	r4, r9
 80094c0:	6923      	ldr	r3, [r4, #16]
 80094c2:	1c5a      	adds	r2, r3, #1
 80094c4:	6122      	str	r2, [r4, #16]
 80094c6:	2201      	movs	r2, #1
 80094c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80094cc:	615a      	str	r2, [r3, #20]
 80094ce:	e7bd      	b.n	800944c <__gethex+0x3b8>
 80094d0:	6922      	ldr	r2, [r4, #16]
 80094d2:	455a      	cmp	r2, fp
 80094d4:	dd0b      	ble.n	80094ee <__gethex+0x45a>
 80094d6:	2101      	movs	r1, #1
 80094d8:	4620      	mov	r0, r4
 80094da:	f7ff fd73 	bl	8008fc4 <rshift>
 80094de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80094e2:	3501      	adds	r5, #1
 80094e4:	42ab      	cmp	r3, r5
 80094e6:	f6ff aed4 	blt.w	8009292 <__gethex+0x1fe>
 80094ea:	2701      	movs	r7, #1
 80094ec:	e7c2      	b.n	8009474 <__gethex+0x3e0>
 80094ee:	f016 061f 	ands.w	r6, r6, #31
 80094f2:	d0fa      	beq.n	80094ea <__gethex+0x456>
 80094f4:	4453      	add	r3, sl
 80094f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80094fa:	f000 f9f5 	bl	80098e8 <__hi0bits>
 80094fe:	f1c6 0620 	rsb	r6, r6, #32
 8009502:	42b0      	cmp	r0, r6
 8009504:	dbe7      	blt.n	80094d6 <__gethex+0x442>
 8009506:	e7f0      	b.n	80094ea <__gethex+0x456>
 8009508:	0800b3a0 	.word	0x0800b3a0

0800950c <L_shift>:
 800950c:	f1c2 0208 	rsb	r2, r2, #8
 8009510:	0092      	lsls	r2, r2, #2
 8009512:	b570      	push	{r4, r5, r6, lr}
 8009514:	f1c2 0620 	rsb	r6, r2, #32
 8009518:	6843      	ldr	r3, [r0, #4]
 800951a:	6804      	ldr	r4, [r0, #0]
 800951c:	fa03 f506 	lsl.w	r5, r3, r6
 8009520:	432c      	orrs	r4, r5
 8009522:	40d3      	lsrs	r3, r2
 8009524:	6004      	str	r4, [r0, #0]
 8009526:	f840 3f04 	str.w	r3, [r0, #4]!
 800952a:	4288      	cmp	r0, r1
 800952c:	d3f4      	bcc.n	8009518 <L_shift+0xc>
 800952e:	bd70      	pop	{r4, r5, r6, pc}

08009530 <__match>:
 8009530:	b530      	push	{r4, r5, lr}
 8009532:	6803      	ldr	r3, [r0, #0]
 8009534:	3301      	adds	r3, #1
 8009536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800953a:	b914      	cbnz	r4, 8009542 <__match+0x12>
 800953c:	6003      	str	r3, [r0, #0]
 800953e:	2001      	movs	r0, #1
 8009540:	bd30      	pop	{r4, r5, pc}
 8009542:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009546:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800954a:	2d19      	cmp	r5, #25
 800954c:	bf98      	it	ls
 800954e:	3220      	addls	r2, #32
 8009550:	42a2      	cmp	r2, r4
 8009552:	d0f0      	beq.n	8009536 <__match+0x6>
 8009554:	2000      	movs	r0, #0
 8009556:	e7f3      	b.n	8009540 <__match+0x10>

08009558 <__hexnan>:
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	2500      	movs	r5, #0
 800955e:	680b      	ldr	r3, [r1, #0]
 8009560:	4682      	mov	sl, r0
 8009562:	115e      	asrs	r6, r3, #5
 8009564:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009568:	f013 031f 	ands.w	r3, r3, #31
 800956c:	bf18      	it	ne
 800956e:	3604      	addne	r6, #4
 8009570:	1f37      	subs	r7, r6, #4
 8009572:	46b9      	mov	r9, r7
 8009574:	463c      	mov	r4, r7
 8009576:	46ab      	mov	fp, r5
 8009578:	b087      	sub	sp, #28
 800957a:	4690      	mov	r8, r2
 800957c:	6802      	ldr	r2, [r0, #0]
 800957e:	9301      	str	r3, [sp, #4]
 8009580:	f846 5c04 	str.w	r5, [r6, #-4]
 8009584:	9502      	str	r5, [sp, #8]
 8009586:	7851      	ldrb	r1, [r2, #1]
 8009588:	1c53      	adds	r3, r2, #1
 800958a:	9303      	str	r3, [sp, #12]
 800958c:	b341      	cbz	r1, 80095e0 <__hexnan+0x88>
 800958e:	4608      	mov	r0, r1
 8009590:	9205      	str	r2, [sp, #20]
 8009592:	9104      	str	r1, [sp, #16]
 8009594:	f7ff fd69 	bl	800906a <__hexdig_fun>
 8009598:	2800      	cmp	r0, #0
 800959a:	d14f      	bne.n	800963c <__hexnan+0xe4>
 800959c:	9904      	ldr	r1, [sp, #16]
 800959e:	9a05      	ldr	r2, [sp, #20]
 80095a0:	2920      	cmp	r1, #32
 80095a2:	d818      	bhi.n	80095d6 <__hexnan+0x7e>
 80095a4:	9b02      	ldr	r3, [sp, #8]
 80095a6:	459b      	cmp	fp, r3
 80095a8:	dd13      	ble.n	80095d2 <__hexnan+0x7a>
 80095aa:	454c      	cmp	r4, r9
 80095ac:	d206      	bcs.n	80095bc <__hexnan+0x64>
 80095ae:	2d07      	cmp	r5, #7
 80095b0:	dc04      	bgt.n	80095bc <__hexnan+0x64>
 80095b2:	462a      	mov	r2, r5
 80095b4:	4649      	mov	r1, r9
 80095b6:	4620      	mov	r0, r4
 80095b8:	f7ff ffa8 	bl	800950c <L_shift>
 80095bc:	4544      	cmp	r4, r8
 80095be:	d950      	bls.n	8009662 <__hexnan+0x10a>
 80095c0:	2300      	movs	r3, #0
 80095c2:	f1a4 0904 	sub.w	r9, r4, #4
 80095c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80095ca:	461d      	mov	r5, r3
 80095cc:	464c      	mov	r4, r9
 80095ce:	f8cd b008 	str.w	fp, [sp, #8]
 80095d2:	9a03      	ldr	r2, [sp, #12]
 80095d4:	e7d7      	b.n	8009586 <__hexnan+0x2e>
 80095d6:	2929      	cmp	r1, #41	; 0x29
 80095d8:	d156      	bne.n	8009688 <__hexnan+0x130>
 80095da:	3202      	adds	r2, #2
 80095dc:	f8ca 2000 	str.w	r2, [sl]
 80095e0:	f1bb 0f00 	cmp.w	fp, #0
 80095e4:	d050      	beq.n	8009688 <__hexnan+0x130>
 80095e6:	454c      	cmp	r4, r9
 80095e8:	d206      	bcs.n	80095f8 <__hexnan+0xa0>
 80095ea:	2d07      	cmp	r5, #7
 80095ec:	dc04      	bgt.n	80095f8 <__hexnan+0xa0>
 80095ee:	462a      	mov	r2, r5
 80095f0:	4649      	mov	r1, r9
 80095f2:	4620      	mov	r0, r4
 80095f4:	f7ff ff8a 	bl	800950c <L_shift>
 80095f8:	4544      	cmp	r4, r8
 80095fa:	d934      	bls.n	8009666 <__hexnan+0x10e>
 80095fc:	4623      	mov	r3, r4
 80095fe:	f1a8 0204 	sub.w	r2, r8, #4
 8009602:	f853 1b04 	ldr.w	r1, [r3], #4
 8009606:	429f      	cmp	r7, r3
 8009608:	f842 1f04 	str.w	r1, [r2, #4]!
 800960c:	d2f9      	bcs.n	8009602 <__hexnan+0xaa>
 800960e:	1b3b      	subs	r3, r7, r4
 8009610:	f023 0303 	bic.w	r3, r3, #3
 8009614:	3304      	adds	r3, #4
 8009616:	3401      	adds	r4, #1
 8009618:	3e03      	subs	r6, #3
 800961a:	42b4      	cmp	r4, r6
 800961c:	bf88      	it	hi
 800961e:	2304      	movhi	r3, #4
 8009620:	2200      	movs	r2, #0
 8009622:	4443      	add	r3, r8
 8009624:	f843 2b04 	str.w	r2, [r3], #4
 8009628:	429f      	cmp	r7, r3
 800962a:	d2fb      	bcs.n	8009624 <__hexnan+0xcc>
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	b91b      	cbnz	r3, 8009638 <__hexnan+0xe0>
 8009630:	4547      	cmp	r7, r8
 8009632:	d127      	bne.n	8009684 <__hexnan+0x12c>
 8009634:	2301      	movs	r3, #1
 8009636:	603b      	str	r3, [r7, #0]
 8009638:	2005      	movs	r0, #5
 800963a:	e026      	b.n	800968a <__hexnan+0x132>
 800963c:	3501      	adds	r5, #1
 800963e:	2d08      	cmp	r5, #8
 8009640:	f10b 0b01 	add.w	fp, fp, #1
 8009644:	dd06      	ble.n	8009654 <__hexnan+0xfc>
 8009646:	4544      	cmp	r4, r8
 8009648:	d9c3      	bls.n	80095d2 <__hexnan+0x7a>
 800964a:	2300      	movs	r3, #0
 800964c:	2501      	movs	r5, #1
 800964e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009652:	3c04      	subs	r4, #4
 8009654:	6822      	ldr	r2, [r4, #0]
 8009656:	f000 000f 	and.w	r0, r0, #15
 800965a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800965e:	6022      	str	r2, [r4, #0]
 8009660:	e7b7      	b.n	80095d2 <__hexnan+0x7a>
 8009662:	2508      	movs	r5, #8
 8009664:	e7b5      	b.n	80095d2 <__hexnan+0x7a>
 8009666:	9b01      	ldr	r3, [sp, #4]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d0df      	beq.n	800962c <__hexnan+0xd4>
 800966c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009670:	f1c3 0320 	rsb	r3, r3, #32
 8009674:	fa22 f303 	lsr.w	r3, r2, r3
 8009678:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800967c:	401a      	ands	r2, r3
 800967e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009682:	e7d3      	b.n	800962c <__hexnan+0xd4>
 8009684:	3f04      	subs	r7, #4
 8009686:	e7d1      	b.n	800962c <__hexnan+0xd4>
 8009688:	2004      	movs	r0, #4
 800968a:	b007      	add	sp, #28
 800968c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009690 <_localeconv_r>:
 8009690:	4800      	ldr	r0, [pc, #0]	; (8009694 <_localeconv_r+0x4>)
 8009692:	4770      	bx	lr
 8009694:	20000164 	.word	0x20000164

08009698 <malloc>:
 8009698:	4b02      	ldr	r3, [pc, #8]	; (80096a4 <malloc+0xc>)
 800969a:	4601      	mov	r1, r0
 800969c:	6818      	ldr	r0, [r3, #0]
 800969e:	f000 bd65 	b.w	800a16c <_malloc_r>
 80096a2:	bf00      	nop
 80096a4:	2000000c 	.word	0x2000000c

080096a8 <__ascii_mbtowc>:
 80096a8:	b082      	sub	sp, #8
 80096aa:	b901      	cbnz	r1, 80096ae <__ascii_mbtowc+0x6>
 80096ac:	a901      	add	r1, sp, #4
 80096ae:	b142      	cbz	r2, 80096c2 <__ascii_mbtowc+0x1a>
 80096b0:	b14b      	cbz	r3, 80096c6 <__ascii_mbtowc+0x1e>
 80096b2:	7813      	ldrb	r3, [r2, #0]
 80096b4:	600b      	str	r3, [r1, #0]
 80096b6:	7812      	ldrb	r2, [r2, #0]
 80096b8:	1e10      	subs	r0, r2, #0
 80096ba:	bf18      	it	ne
 80096bc:	2001      	movne	r0, #1
 80096be:	b002      	add	sp, #8
 80096c0:	4770      	bx	lr
 80096c2:	4610      	mov	r0, r2
 80096c4:	e7fb      	b.n	80096be <__ascii_mbtowc+0x16>
 80096c6:	f06f 0001 	mvn.w	r0, #1
 80096ca:	e7f8      	b.n	80096be <__ascii_mbtowc+0x16>

080096cc <memchr>:
 80096cc:	4603      	mov	r3, r0
 80096ce:	b510      	push	{r4, lr}
 80096d0:	b2c9      	uxtb	r1, r1
 80096d2:	4402      	add	r2, r0
 80096d4:	4293      	cmp	r3, r2
 80096d6:	4618      	mov	r0, r3
 80096d8:	d101      	bne.n	80096de <memchr+0x12>
 80096da:	2000      	movs	r0, #0
 80096dc:	e003      	b.n	80096e6 <memchr+0x1a>
 80096de:	7804      	ldrb	r4, [r0, #0]
 80096e0:	3301      	adds	r3, #1
 80096e2:	428c      	cmp	r4, r1
 80096e4:	d1f6      	bne.n	80096d4 <memchr+0x8>
 80096e6:	bd10      	pop	{r4, pc}

080096e8 <memcpy>:
 80096e8:	440a      	add	r2, r1
 80096ea:	4291      	cmp	r1, r2
 80096ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80096f0:	d100      	bne.n	80096f4 <memcpy+0xc>
 80096f2:	4770      	bx	lr
 80096f4:	b510      	push	{r4, lr}
 80096f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096fa:	4291      	cmp	r1, r2
 80096fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009700:	d1f9      	bne.n	80096f6 <memcpy+0xe>
 8009702:	bd10      	pop	{r4, pc}

08009704 <_Balloc>:
 8009704:	b570      	push	{r4, r5, r6, lr}
 8009706:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009708:	4604      	mov	r4, r0
 800970a:	460d      	mov	r5, r1
 800970c:	b976      	cbnz	r6, 800972c <_Balloc+0x28>
 800970e:	2010      	movs	r0, #16
 8009710:	f7ff ffc2 	bl	8009698 <malloc>
 8009714:	4602      	mov	r2, r0
 8009716:	6260      	str	r0, [r4, #36]	; 0x24
 8009718:	b920      	cbnz	r0, 8009724 <_Balloc+0x20>
 800971a:	2166      	movs	r1, #102	; 0x66
 800971c:	4b17      	ldr	r3, [pc, #92]	; (800977c <_Balloc+0x78>)
 800971e:	4818      	ldr	r0, [pc, #96]	; (8009780 <_Balloc+0x7c>)
 8009720:	f000 ff2c 	bl	800a57c <__assert_func>
 8009724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009728:	6006      	str	r6, [r0, #0]
 800972a:	60c6      	str	r6, [r0, #12]
 800972c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800972e:	68f3      	ldr	r3, [r6, #12]
 8009730:	b183      	cbz	r3, 8009754 <_Balloc+0x50>
 8009732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800973a:	b9b8      	cbnz	r0, 800976c <_Balloc+0x68>
 800973c:	2101      	movs	r1, #1
 800973e:	fa01 f605 	lsl.w	r6, r1, r5
 8009742:	1d72      	adds	r2, r6, #5
 8009744:	4620      	mov	r0, r4
 8009746:	0092      	lsls	r2, r2, #2
 8009748:	f000 fc94 	bl	800a074 <_calloc_r>
 800974c:	b160      	cbz	r0, 8009768 <_Balloc+0x64>
 800974e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009752:	e00e      	b.n	8009772 <_Balloc+0x6e>
 8009754:	2221      	movs	r2, #33	; 0x21
 8009756:	2104      	movs	r1, #4
 8009758:	4620      	mov	r0, r4
 800975a:	f000 fc8b 	bl	800a074 <_calloc_r>
 800975e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009760:	60f0      	str	r0, [r6, #12]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d1e4      	bne.n	8009732 <_Balloc+0x2e>
 8009768:	2000      	movs	r0, #0
 800976a:	bd70      	pop	{r4, r5, r6, pc}
 800976c:	6802      	ldr	r2, [r0, #0]
 800976e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009772:	2300      	movs	r3, #0
 8009774:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009778:	e7f7      	b.n	800976a <_Balloc+0x66>
 800977a:	bf00      	nop
 800977c:	0800b32e 	.word	0x0800b32e
 8009780:	0800b42c 	.word	0x0800b42c

08009784 <_Bfree>:
 8009784:	b570      	push	{r4, r5, r6, lr}
 8009786:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009788:	4605      	mov	r5, r0
 800978a:	460c      	mov	r4, r1
 800978c:	b976      	cbnz	r6, 80097ac <_Bfree+0x28>
 800978e:	2010      	movs	r0, #16
 8009790:	f7ff ff82 	bl	8009698 <malloc>
 8009794:	4602      	mov	r2, r0
 8009796:	6268      	str	r0, [r5, #36]	; 0x24
 8009798:	b920      	cbnz	r0, 80097a4 <_Bfree+0x20>
 800979a:	218a      	movs	r1, #138	; 0x8a
 800979c:	4b08      	ldr	r3, [pc, #32]	; (80097c0 <_Bfree+0x3c>)
 800979e:	4809      	ldr	r0, [pc, #36]	; (80097c4 <_Bfree+0x40>)
 80097a0:	f000 feec 	bl	800a57c <__assert_func>
 80097a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097a8:	6006      	str	r6, [r0, #0]
 80097aa:	60c6      	str	r6, [r0, #12]
 80097ac:	b13c      	cbz	r4, 80097be <_Bfree+0x3a>
 80097ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80097b0:	6862      	ldr	r2, [r4, #4]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097b8:	6021      	str	r1, [r4, #0]
 80097ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097be:	bd70      	pop	{r4, r5, r6, pc}
 80097c0:	0800b32e 	.word	0x0800b32e
 80097c4:	0800b42c 	.word	0x0800b42c

080097c8 <__multadd>:
 80097c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097cc:	4607      	mov	r7, r0
 80097ce:	460c      	mov	r4, r1
 80097d0:	461e      	mov	r6, r3
 80097d2:	2000      	movs	r0, #0
 80097d4:	690d      	ldr	r5, [r1, #16]
 80097d6:	f101 0c14 	add.w	ip, r1, #20
 80097da:	f8dc 3000 	ldr.w	r3, [ip]
 80097de:	3001      	adds	r0, #1
 80097e0:	b299      	uxth	r1, r3
 80097e2:	fb02 6101 	mla	r1, r2, r1, r6
 80097e6:	0c1e      	lsrs	r6, r3, #16
 80097e8:	0c0b      	lsrs	r3, r1, #16
 80097ea:	fb02 3306 	mla	r3, r2, r6, r3
 80097ee:	b289      	uxth	r1, r1
 80097f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097f4:	4285      	cmp	r5, r0
 80097f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097fa:	f84c 1b04 	str.w	r1, [ip], #4
 80097fe:	dcec      	bgt.n	80097da <__multadd+0x12>
 8009800:	b30e      	cbz	r6, 8009846 <__multadd+0x7e>
 8009802:	68a3      	ldr	r3, [r4, #8]
 8009804:	42ab      	cmp	r3, r5
 8009806:	dc19      	bgt.n	800983c <__multadd+0x74>
 8009808:	6861      	ldr	r1, [r4, #4]
 800980a:	4638      	mov	r0, r7
 800980c:	3101      	adds	r1, #1
 800980e:	f7ff ff79 	bl	8009704 <_Balloc>
 8009812:	4680      	mov	r8, r0
 8009814:	b928      	cbnz	r0, 8009822 <__multadd+0x5a>
 8009816:	4602      	mov	r2, r0
 8009818:	21b5      	movs	r1, #181	; 0xb5
 800981a:	4b0c      	ldr	r3, [pc, #48]	; (800984c <__multadd+0x84>)
 800981c:	480c      	ldr	r0, [pc, #48]	; (8009850 <__multadd+0x88>)
 800981e:	f000 fead 	bl	800a57c <__assert_func>
 8009822:	6922      	ldr	r2, [r4, #16]
 8009824:	f104 010c 	add.w	r1, r4, #12
 8009828:	3202      	adds	r2, #2
 800982a:	0092      	lsls	r2, r2, #2
 800982c:	300c      	adds	r0, #12
 800982e:	f7ff ff5b 	bl	80096e8 <memcpy>
 8009832:	4621      	mov	r1, r4
 8009834:	4638      	mov	r0, r7
 8009836:	f7ff ffa5 	bl	8009784 <_Bfree>
 800983a:	4644      	mov	r4, r8
 800983c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009840:	3501      	adds	r5, #1
 8009842:	615e      	str	r6, [r3, #20]
 8009844:	6125      	str	r5, [r4, #16]
 8009846:	4620      	mov	r0, r4
 8009848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800984c:	0800b3a0 	.word	0x0800b3a0
 8009850:	0800b42c 	.word	0x0800b42c

08009854 <__s2b>:
 8009854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009858:	4615      	mov	r5, r2
 800985a:	2209      	movs	r2, #9
 800985c:	461f      	mov	r7, r3
 800985e:	3308      	adds	r3, #8
 8009860:	460c      	mov	r4, r1
 8009862:	fb93 f3f2 	sdiv	r3, r3, r2
 8009866:	4606      	mov	r6, r0
 8009868:	2201      	movs	r2, #1
 800986a:	2100      	movs	r1, #0
 800986c:	429a      	cmp	r2, r3
 800986e:	db09      	blt.n	8009884 <__s2b+0x30>
 8009870:	4630      	mov	r0, r6
 8009872:	f7ff ff47 	bl	8009704 <_Balloc>
 8009876:	b940      	cbnz	r0, 800988a <__s2b+0x36>
 8009878:	4602      	mov	r2, r0
 800987a:	21ce      	movs	r1, #206	; 0xce
 800987c:	4b18      	ldr	r3, [pc, #96]	; (80098e0 <__s2b+0x8c>)
 800987e:	4819      	ldr	r0, [pc, #100]	; (80098e4 <__s2b+0x90>)
 8009880:	f000 fe7c 	bl	800a57c <__assert_func>
 8009884:	0052      	lsls	r2, r2, #1
 8009886:	3101      	adds	r1, #1
 8009888:	e7f0      	b.n	800986c <__s2b+0x18>
 800988a:	9b08      	ldr	r3, [sp, #32]
 800988c:	2d09      	cmp	r5, #9
 800988e:	6143      	str	r3, [r0, #20]
 8009890:	f04f 0301 	mov.w	r3, #1
 8009894:	6103      	str	r3, [r0, #16]
 8009896:	dd16      	ble.n	80098c6 <__s2b+0x72>
 8009898:	f104 0909 	add.w	r9, r4, #9
 800989c:	46c8      	mov	r8, r9
 800989e:	442c      	add	r4, r5
 80098a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80098a4:	4601      	mov	r1, r0
 80098a6:	220a      	movs	r2, #10
 80098a8:	4630      	mov	r0, r6
 80098aa:	3b30      	subs	r3, #48	; 0x30
 80098ac:	f7ff ff8c 	bl	80097c8 <__multadd>
 80098b0:	45a0      	cmp	r8, r4
 80098b2:	d1f5      	bne.n	80098a0 <__s2b+0x4c>
 80098b4:	f1a5 0408 	sub.w	r4, r5, #8
 80098b8:	444c      	add	r4, r9
 80098ba:	1b2d      	subs	r5, r5, r4
 80098bc:	1963      	adds	r3, r4, r5
 80098be:	42bb      	cmp	r3, r7
 80098c0:	db04      	blt.n	80098cc <__s2b+0x78>
 80098c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098c6:	2509      	movs	r5, #9
 80098c8:	340a      	adds	r4, #10
 80098ca:	e7f6      	b.n	80098ba <__s2b+0x66>
 80098cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80098d0:	4601      	mov	r1, r0
 80098d2:	220a      	movs	r2, #10
 80098d4:	4630      	mov	r0, r6
 80098d6:	3b30      	subs	r3, #48	; 0x30
 80098d8:	f7ff ff76 	bl	80097c8 <__multadd>
 80098dc:	e7ee      	b.n	80098bc <__s2b+0x68>
 80098de:	bf00      	nop
 80098e0:	0800b3a0 	.word	0x0800b3a0
 80098e4:	0800b42c 	.word	0x0800b42c

080098e8 <__hi0bits>:
 80098e8:	0c02      	lsrs	r2, r0, #16
 80098ea:	0412      	lsls	r2, r2, #16
 80098ec:	4603      	mov	r3, r0
 80098ee:	b9ca      	cbnz	r2, 8009924 <__hi0bits+0x3c>
 80098f0:	0403      	lsls	r3, r0, #16
 80098f2:	2010      	movs	r0, #16
 80098f4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80098f8:	bf04      	itt	eq
 80098fa:	021b      	lsleq	r3, r3, #8
 80098fc:	3008      	addeq	r0, #8
 80098fe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009902:	bf04      	itt	eq
 8009904:	011b      	lsleq	r3, r3, #4
 8009906:	3004      	addeq	r0, #4
 8009908:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800990c:	bf04      	itt	eq
 800990e:	009b      	lsleq	r3, r3, #2
 8009910:	3002      	addeq	r0, #2
 8009912:	2b00      	cmp	r3, #0
 8009914:	db05      	blt.n	8009922 <__hi0bits+0x3a>
 8009916:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800991a:	f100 0001 	add.w	r0, r0, #1
 800991e:	bf08      	it	eq
 8009920:	2020      	moveq	r0, #32
 8009922:	4770      	bx	lr
 8009924:	2000      	movs	r0, #0
 8009926:	e7e5      	b.n	80098f4 <__hi0bits+0xc>

08009928 <__lo0bits>:
 8009928:	6803      	ldr	r3, [r0, #0]
 800992a:	4602      	mov	r2, r0
 800992c:	f013 0007 	ands.w	r0, r3, #7
 8009930:	d00b      	beq.n	800994a <__lo0bits+0x22>
 8009932:	07d9      	lsls	r1, r3, #31
 8009934:	d421      	bmi.n	800997a <__lo0bits+0x52>
 8009936:	0798      	lsls	r0, r3, #30
 8009938:	bf49      	itett	mi
 800993a:	085b      	lsrmi	r3, r3, #1
 800993c:	089b      	lsrpl	r3, r3, #2
 800993e:	2001      	movmi	r0, #1
 8009940:	6013      	strmi	r3, [r2, #0]
 8009942:	bf5c      	itt	pl
 8009944:	2002      	movpl	r0, #2
 8009946:	6013      	strpl	r3, [r2, #0]
 8009948:	4770      	bx	lr
 800994a:	b299      	uxth	r1, r3
 800994c:	b909      	cbnz	r1, 8009952 <__lo0bits+0x2a>
 800994e:	2010      	movs	r0, #16
 8009950:	0c1b      	lsrs	r3, r3, #16
 8009952:	b2d9      	uxtb	r1, r3
 8009954:	b909      	cbnz	r1, 800995a <__lo0bits+0x32>
 8009956:	3008      	adds	r0, #8
 8009958:	0a1b      	lsrs	r3, r3, #8
 800995a:	0719      	lsls	r1, r3, #28
 800995c:	bf04      	itt	eq
 800995e:	091b      	lsreq	r3, r3, #4
 8009960:	3004      	addeq	r0, #4
 8009962:	0799      	lsls	r1, r3, #30
 8009964:	bf04      	itt	eq
 8009966:	089b      	lsreq	r3, r3, #2
 8009968:	3002      	addeq	r0, #2
 800996a:	07d9      	lsls	r1, r3, #31
 800996c:	d403      	bmi.n	8009976 <__lo0bits+0x4e>
 800996e:	085b      	lsrs	r3, r3, #1
 8009970:	f100 0001 	add.w	r0, r0, #1
 8009974:	d003      	beq.n	800997e <__lo0bits+0x56>
 8009976:	6013      	str	r3, [r2, #0]
 8009978:	4770      	bx	lr
 800997a:	2000      	movs	r0, #0
 800997c:	4770      	bx	lr
 800997e:	2020      	movs	r0, #32
 8009980:	4770      	bx	lr
	...

08009984 <__i2b>:
 8009984:	b510      	push	{r4, lr}
 8009986:	460c      	mov	r4, r1
 8009988:	2101      	movs	r1, #1
 800998a:	f7ff febb 	bl	8009704 <_Balloc>
 800998e:	4602      	mov	r2, r0
 8009990:	b928      	cbnz	r0, 800999e <__i2b+0x1a>
 8009992:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009996:	4b04      	ldr	r3, [pc, #16]	; (80099a8 <__i2b+0x24>)
 8009998:	4804      	ldr	r0, [pc, #16]	; (80099ac <__i2b+0x28>)
 800999a:	f000 fdef 	bl	800a57c <__assert_func>
 800999e:	2301      	movs	r3, #1
 80099a0:	6144      	str	r4, [r0, #20]
 80099a2:	6103      	str	r3, [r0, #16]
 80099a4:	bd10      	pop	{r4, pc}
 80099a6:	bf00      	nop
 80099a8:	0800b3a0 	.word	0x0800b3a0
 80099ac:	0800b42c 	.word	0x0800b42c

080099b0 <__multiply>:
 80099b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b4:	4691      	mov	r9, r2
 80099b6:	690a      	ldr	r2, [r1, #16]
 80099b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80099bc:	460c      	mov	r4, r1
 80099be:	429a      	cmp	r2, r3
 80099c0:	bfbe      	ittt	lt
 80099c2:	460b      	movlt	r3, r1
 80099c4:	464c      	movlt	r4, r9
 80099c6:	4699      	movlt	r9, r3
 80099c8:	6927      	ldr	r7, [r4, #16]
 80099ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80099ce:	68a3      	ldr	r3, [r4, #8]
 80099d0:	6861      	ldr	r1, [r4, #4]
 80099d2:	eb07 060a 	add.w	r6, r7, sl
 80099d6:	42b3      	cmp	r3, r6
 80099d8:	b085      	sub	sp, #20
 80099da:	bfb8      	it	lt
 80099dc:	3101      	addlt	r1, #1
 80099de:	f7ff fe91 	bl	8009704 <_Balloc>
 80099e2:	b930      	cbnz	r0, 80099f2 <__multiply+0x42>
 80099e4:	4602      	mov	r2, r0
 80099e6:	f240 115d 	movw	r1, #349	; 0x15d
 80099ea:	4b43      	ldr	r3, [pc, #268]	; (8009af8 <__multiply+0x148>)
 80099ec:	4843      	ldr	r0, [pc, #268]	; (8009afc <__multiply+0x14c>)
 80099ee:	f000 fdc5 	bl	800a57c <__assert_func>
 80099f2:	f100 0514 	add.w	r5, r0, #20
 80099f6:	462b      	mov	r3, r5
 80099f8:	2200      	movs	r2, #0
 80099fa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80099fe:	4543      	cmp	r3, r8
 8009a00:	d321      	bcc.n	8009a46 <__multiply+0x96>
 8009a02:	f104 0314 	add.w	r3, r4, #20
 8009a06:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009a0a:	f109 0314 	add.w	r3, r9, #20
 8009a0e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009a12:	9202      	str	r2, [sp, #8]
 8009a14:	1b3a      	subs	r2, r7, r4
 8009a16:	3a15      	subs	r2, #21
 8009a18:	f022 0203 	bic.w	r2, r2, #3
 8009a1c:	3204      	adds	r2, #4
 8009a1e:	f104 0115 	add.w	r1, r4, #21
 8009a22:	428f      	cmp	r7, r1
 8009a24:	bf38      	it	cc
 8009a26:	2204      	movcc	r2, #4
 8009a28:	9201      	str	r2, [sp, #4]
 8009a2a:	9a02      	ldr	r2, [sp, #8]
 8009a2c:	9303      	str	r3, [sp, #12]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d80c      	bhi.n	8009a4c <__multiply+0x9c>
 8009a32:	2e00      	cmp	r6, #0
 8009a34:	dd03      	ble.n	8009a3e <__multiply+0x8e>
 8009a36:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d059      	beq.n	8009af2 <__multiply+0x142>
 8009a3e:	6106      	str	r6, [r0, #16]
 8009a40:	b005      	add	sp, #20
 8009a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a46:	f843 2b04 	str.w	r2, [r3], #4
 8009a4a:	e7d8      	b.n	80099fe <__multiply+0x4e>
 8009a4c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a50:	f1ba 0f00 	cmp.w	sl, #0
 8009a54:	d023      	beq.n	8009a9e <__multiply+0xee>
 8009a56:	46a9      	mov	r9, r5
 8009a58:	f04f 0c00 	mov.w	ip, #0
 8009a5c:	f104 0e14 	add.w	lr, r4, #20
 8009a60:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009a64:	f8d9 1000 	ldr.w	r1, [r9]
 8009a68:	fa1f fb82 	uxth.w	fp, r2
 8009a6c:	b289      	uxth	r1, r1
 8009a6e:	fb0a 110b 	mla	r1, sl, fp, r1
 8009a72:	4461      	add	r1, ip
 8009a74:	f8d9 c000 	ldr.w	ip, [r9]
 8009a78:	0c12      	lsrs	r2, r2, #16
 8009a7a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009a7e:	fb0a c202 	mla	r2, sl, r2, ip
 8009a82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009a86:	b289      	uxth	r1, r1
 8009a88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009a8c:	4577      	cmp	r7, lr
 8009a8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009a92:	f849 1b04 	str.w	r1, [r9], #4
 8009a96:	d8e3      	bhi.n	8009a60 <__multiply+0xb0>
 8009a98:	9a01      	ldr	r2, [sp, #4]
 8009a9a:	f845 c002 	str.w	ip, [r5, r2]
 8009a9e:	9a03      	ldr	r2, [sp, #12]
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009aa6:	f1b9 0f00 	cmp.w	r9, #0
 8009aaa:	d020      	beq.n	8009aee <__multiply+0x13e>
 8009aac:	46ae      	mov	lr, r5
 8009aae:	f04f 0a00 	mov.w	sl, #0
 8009ab2:	6829      	ldr	r1, [r5, #0]
 8009ab4:	f104 0c14 	add.w	ip, r4, #20
 8009ab8:	f8bc b000 	ldrh.w	fp, [ip]
 8009abc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ac0:	b289      	uxth	r1, r1
 8009ac2:	fb09 220b 	mla	r2, r9, fp, r2
 8009ac6:	4492      	add	sl, r2
 8009ac8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009acc:	f84e 1b04 	str.w	r1, [lr], #4
 8009ad0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ad4:	f8be 1000 	ldrh.w	r1, [lr]
 8009ad8:	0c12      	lsrs	r2, r2, #16
 8009ada:	fb09 1102 	mla	r1, r9, r2, r1
 8009ade:	4567      	cmp	r7, ip
 8009ae0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009ae4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009ae8:	d8e6      	bhi.n	8009ab8 <__multiply+0x108>
 8009aea:	9a01      	ldr	r2, [sp, #4]
 8009aec:	50a9      	str	r1, [r5, r2]
 8009aee:	3504      	adds	r5, #4
 8009af0:	e79b      	b.n	8009a2a <__multiply+0x7a>
 8009af2:	3e01      	subs	r6, #1
 8009af4:	e79d      	b.n	8009a32 <__multiply+0x82>
 8009af6:	bf00      	nop
 8009af8:	0800b3a0 	.word	0x0800b3a0
 8009afc:	0800b42c 	.word	0x0800b42c

08009b00 <__pow5mult>:
 8009b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b04:	4615      	mov	r5, r2
 8009b06:	f012 0203 	ands.w	r2, r2, #3
 8009b0a:	4606      	mov	r6, r0
 8009b0c:	460f      	mov	r7, r1
 8009b0e:	d007      	beq.n	8009b20 <__pow5mult+0x20>
 8009b10:	4c25      	ldr	r4, [pc, #148]	; (8009ba8 <__pow5mult+0xa8>)
 8009b12:	3a01      	subs	r2, #1
 8009b14:	2300      	movs	r3, #0
 8009b16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b1a:	f7ff fe55 	bl	80097c8 <__multadd>
 8009b1e:	4607      	mov	r7, r0
 8009b20:	10ad      	asrs	r5, r5, #2
 8009b22:	d03d      	beq.n	8009ba0 <__pow5mult+0xa0>
 8009b24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b26:	b97c      	cbnz	r4, 8009b48 <__pow5mult+0x48>
 8009b28:	2010      	movs	r0, #16
 8009b2a:	f7ff fdb5 	bl	8009698 <malloc>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	6270      	str	r0, [r6, #36]	; 0x24
 8009b32:	b928      	cbnz	r0, 8009b40 <__pow5mult+0x40>
 8009b34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009b38:	4b1c      	ldr	r3, [pc, #112]	; (8009bac <__pow5mult+0xac>)
 8009b3a:	481d      	ldr	r0, [pc, #116]	; (8009bb0 <__pow5mult+0xb0>)
 8009b3c:	f000 fd1e 	bl	800a57c <__assert_func>
 8009b40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b44:	6004      	str	r4, [r0, #0]
 8009b46:	60c4      	str	r4, [r0, #12]
 8009b48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b50:	b94c      	cbnz	r4, 8009b66 <__pow5mult+0x66>
 8009b52:	f240 2171 	movw	r1, #625	; 0x271
 8009b56:	4630      	mov	r0, r6
 8009b58:	f7ff ff14 	bl	8009984 <__i2b>
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	4604      	mov	r4, r0
 8009b60:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b64:	6003      	str	r3, [r0, #0]
 8009b66:	f04f 0900 	mov.w	r9, #0
 8009b6a:	07eb      	lsls	r3, r5, #31
 8009b6c:	d50a      	bpl.n	8009b84 <__pow5mult+0x84>
 8009b6e:	4639      	mov	r1, r7
 8009b70:	4622      	mov	r2, r4
 8009b72:	4630      	mov	r0, r6
 8009b74:	f7ff ff1c 	bl	80099b0 <__multiply>
 8009b78:	4680      	mov	r8, r0
 8009b7a:	4639      	mov	r1, r7
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	f7ff fe01 	bl	8009784 <_Bfree>
 8009b82:	4647      	mov	r7, r8
 8009b84:	106d      	asrs	r5, r5, #1
 8009b86:	d00b      	beq.n	8009ba0 <__pow5mult+0xa0>
 8009b88:	6820      	ldr	r0, [r4, #0]
 8009b8a:	b938      	cbnz	r0, 8009b9c <__pow5mult+0x9c>
 8009b8c:	4622      	mov	r2, r4
 8009b8e:	4621      	mov	r1, r4
 8009b90:	4630      	mov	r0, r6
 8009b92:	f7ff ff0d 	bl	80099b0 <__multiply>
 8009b96:	6020      	str	r0, [r4, #0]
 8009b98:	f8c0 9000 	str.w	r9, [r0]
 8009b9c:	4604      	mov	r4, r0
 8009b9e:	e7e4      	b.n	8009b6a <__pow5mult+0x6a>
 8009ba0:	4638      	mov	r0, r7
 8009ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ba6:	bf00      	nop
 8009ba8:	0800b578 	.word	0x0800b578
 8009bac:	0800b32e 	.word	0x0800b32e
 8009bb0:	0800b42c 	.word	0x0800b42c

08009bb4 <__lshift>:
 8009bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb8:	460c      	mov	r4, r1
 8009bba:	4607      	mov	r7, r0
 8009bbc:	4691      	mov	r9, r2
 8009bbe:	6923      	ldr	r3, [r4, #16]
 8009bc0:	6849      	ldr	r1, [r1, #4]
 8009bc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009bc6:	68a3      	ldr	r3, [r4, #8]
 8009bc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009bcc:	f108 0601 	add.w	r6, r8, #1
 8009bd0:	42b3      	cmp	r3, r6
 8009bd2:	db0b      	blt.n	8009bec <__lshift+0x38>
 8009bd4:	4638      	mov	r0, r7
 8009bd6:	f7ff fd95 	bl	8009704 <_Balloc>
 8009bda:	4605      	mov	r5, r0
 8009bdc:	b948      	cbnz	r0, 8009bf2 <__lshift+0x3e>
 8009bde:	4602      	mov	r2, r0
 8009be0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009be4:	4b29      	ldr	r3, [pc, #164]	; (8009c8c <__lshift+0xd8>)
 8009be6:	482a      	ldr	r0, [pc, #168]	; (8009c90 <__lshift+0xdc>)
 8009be8:	f000 fcc8 	bl	800a57c <__assert_func>
 8009bec:	3101      	adds	r1, #1
 8009bee:	005b      	lsls	r3, r3, #1
 8009bf0:	e7ee      	b.n	8009bd0 <__lshift+0x1c>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	f100 0114 	add.w	r1, r0, #20
 8009bf8:	f100 0210 	add.w	r2, r0, #16
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	4553      	cmp	r3, sl
 8009c00:	db37      	blt.n	8009c72 <__lshift+0xbe>
 8009c02:	6920      	ldr	r0, [r4, #16]
 8009c04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c08:	f104 0314 	add.w	r3, r4, #20
 8009c0c:	f019 091f 	ands.w	r9, r9, #31
 8009c10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009c18:	d02f      	beq.n	8009c7a <__lshift+0xc6>
 8009c1a:	468a      	mov	sl, r1
 8009c1c:	f04f 0c00 	mov.w	ip, #0
 8009c20:	f1c9 0e20 	rsb	lr, r9, #32
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	fa02 f209 	lsl.w	r2, r2, r9
 8009c2a:	ea42 020c 	orr.w	r2, r2, ip
 8009c2e:	f84a 2b04 	str.w	r2, [sl], #4
 8009c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c36:	4298      	cmp	r0, r3
 8009c38:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009c3c:	d8f2      	bhi.n	8009c24 <__lshift+0x70>
 8009c3e:	1b03      	subs	r3, r0, r4
 8009c40:	3b15      	subs	r3, #21
 8009c42:	f023 0303 	bic.w	r3, r3, #3
 8009c46:	3304      	adds	r3, #4
 8009c48:	f104 0215 	add.w	r2, r4, #21
 8009c4c:	4290      	cmp	r0, r2
 8009c4e:	bf38      	it	cc
 8009c50:	2304      	movcc	r3, #4
 8009c52:	f841 c003 	str.w	ip, [r1, r3]
 8009c56:	f1bc 0f00 	cmp.w	ip, #0
 8009c5a:	d001      	beq.n	8009c60 <__lshift+0xac>
 8009c5c:	f108 0602 	add.w	r6, r8, #2
 8009c60:	3e01      	subs	r6, #1
 8009c62:	4638      	mov	r0, r7
 8009c64:	4621      	mov	r1, r4
 8009c66:	612e      	str	r6, [r5, #16]
 8009c68:	f7ff fd8c 	bl	8009784 <_Bfree>
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c72:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c76:	3301      	adds	r3, #1
 8009c78:	e7c1      	b.n	8009bfe <__lshift+0x4a>
 8009c7a:	3904      	subs	r1, #4
 8009c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c80:	4298      	cmp	r0, r3
 8009c82:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c86:	d8f9      	bhi.n	8009c7c <__lshift+0xc8>
 8009c88:	e7ea      	b.n	8009c60 <__lshift+0xac>
 8009c8a:	bf00      	nop
 8009c8c:	0800b3a0 	.word	0x0800b3a0
 8009c90:	0800b42c 	.word	0x0800b42c

08009c94 <__mcmp>:
 8009c94:	4603      	mov	r3, r0
 8009c96:	690a      	ldr	r2, [r1, #16]
 8009c98:	6900      	ldr	r0, [r0, #16]
 8009c9a:	b530      	push	{r4, r5, lr}
 8009c9c:	1a80      	subs	r0, r0, r2
 8009c9e:	d10d      	bne.n	8009cbc <__mcmp+0x28>
 8009ca0:	3314      	adds	r3, #20
 8009ca2:	3114      	adds	r1, #20
 8009ca4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009ca8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009cac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009cb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009cb4:	4295      	cmp	r5, r2
 8009cb6:	d002      	beq.n	8009cbe <__mcmp+0x2a>
 8009cb8:	d304      	bcc.n	8009cc4 <__mcmp+0x30>
 8009cba:	2001      	movs	r0, #1
 8009cbc:	bd30      	pop	{r4, r5, pc}
 8009cbe:	42a3      	cmp	r3, r4
 8009cc0:	d3f4      	bcc.n	8009cac <__mcmp+0x18>
 8009cc2:	e7fb      	b.n	8009cbc <__mcmp+0x28>
 8009cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cc8:	e7f8      	b.n	8009cbc <__mcmp+0x28>
	...

08009ccc <__mdiff>:
 8009ccc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd0:	460d      	mov	r5, r1
 8009cd2:	4607      	mov	r7, r0
 8009cd4:	4611      	mov	r1, r2
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	4614      	mov	r4, r2
 8009cda:	f7ff ffdb 	bl	8009c94 <__mcmp>
 8009cde:	1e06      	subs	r6, r0, #0
 8009ce0:	d111      	bne.n	8009d06 <__mdiff+0x3a>
 8009ce2:	4631      	mov	r1, r6
 8009ce4:	4638      	mov	r0, r7
 8009ce6:	f7ff fd0d 	bl	8009704 <_Balloc>
 8009cea:	4602      	mov	r2, r0
 8009cec:	b928      	cbnz	r0, 8009cfa <__mdiff+0x2e>
 8009cee:	f240 2132 	movw	r1, #562	; 0x232
 8009cf2:	4b3a      	ldr	r3, [pc, #232]	; (8009ddc <__mdiff+0x110>)
 8009cf4:	483a      	ldr	r0, [pc, #232]	; (8009de0 <__mdiff+0x114>)
 8009cf6:	f000 fc41 	bl	800a57c <__assert_func>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009d00:	4610      	mov	r0, r2
 8009d02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d06:	bfa4      	itt	ge
 8009d08:	4623      	movge	r3, r4
 8009d0a:	462c      	movge	r4, r5
 8009d0c:	4638      	mov	r0, r7
 8009d0e:	6861      	ldr	r1, [r4, #4]
 8009d10:	bfa6      	itte	ge
 8009d12:	461d      	movge	r5, r3
 8009d14:	2600      	movge	r6, #0
 8009d16:	2601      	movlt	r6, #1
 8009d18:	f7ff fcf4 	bl	8009704 <_Balloc>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	b918      	cbnz	r0, 8009d28 <__mdiff+0x5c>
 8009d20:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d24:	4b2d      	ldr	r3, [pc, #180]	; (8009ddc <__mdiff+0x110>)
 8009d26:	e7e5      	b.n	8009cf4 <__mdiff+0x28>
 8009d28:	f102 0814 	add.w	r8, r2, #20
 8009d2c:	46c2      	mov	sl, r8
 8009d2e:	f04f 0c00 	mov.w	ip, #0
 8009d32:	6927      	ldr	r7, [r4, #16]
 8009d34:	60c6      	str	r6, [r0, #12]
 8009d36:	692e      	ldr	r6, [r5, #16]
 8009d38:	f104 0014 	add.w	r0, r4, #20
 8009d3c:	f105 0914 	add.w	r9, r5, #20
 8009d40:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009d44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009d48:	3410      	adds	r4, #16
 8009d4a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009d4e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d52:	fa1f f18b 	uxth.w	r1, fp
 8009d56:	448c      	add	ip, r1
 8009d58:	b299      	uxth	r1, r3
 8009d5a:	0c1b      	lsrs	r3, r3, #16
 8009d5c:	ebac 0101 	sub.w	r1, ip, r1
 8009d60:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d64:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009d68:	b289      	uxth	r1, r1
 8009d6a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009d6e:	454e      	cmp	r6, r9
 8009d70:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009d74:	f84a 3b04 	str.w	r3, [sl], #4
 8009d78:	d8e7      	bhi.n	8009d4a <__mdiff+0x7e>
 8009d7a:	1b73      	subs	r3, r6, r5
 8009d7c:	3b15      	subs	r3, #21
 8009d7e:	f023 0303 	bic.w	r3, r3, #3
 8009d82:	3515      	adds	r5, #21
 8009d84:	3304      	adds	r3, #4
 8009d86:	42ae      	cmp	r6, r5
 8009d88:	bf38      	it	cc
 8009d8a:	2304      	movcc	r3, #4
 8009d8c:	4418      	add	r0, r3
 8009d8e:	4443      	add	r3, r8
 8009d90:	461e      	mov	r6, r3
 8009d92:	4605      	mov	r5, r0
 8009d94:	4575      	cmp	r5, lr
 8009d96:	d30e      	bcc.n	8009db6 <__mdiff+0xea>
 8009d98:	f10e 0103 	add.w	r1, lr, #3
 8009d9c:	1a09      	subs	r1, r1, r0
 8009d9e:	f021 0103 	bic.w	r1, r1, #3
 8009da2:	3803      	subs	r0, #3
 8009da4:	4586      	cmp	lr, r0
 8009da6:	bf38      	it	cc
 8009da8:	2100      	movcc	r1, #0
 8009daa:	4419      	add	r1, r3
 8009dac:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009db0:	b18b      	cbz	r3, 8009dd6 <__mdiff+0x10a>
 8009db2:	6117      	str	r7, [r2, #16]
 8009db4:	e7a4      	b.n	8009d00 <__mdiff+0x34>
 8009db6:	f855 8b04 	ldr.w	r8, [r5], #4
 8009dba:	fa1f f188 	uxth.w	r1, r8
 8009dbe:	4461      	add	r1, ip
 8009dc0:	140c      	asrs	r4, r1, #16
 8009dc2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009dc6:	b289      	uxth	r1, r1
 8009dc8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009dcc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009dd0:	f846 1b04 	str.w	r1, [r6], #4
 8009dd4:	e7de      	b.n	8009d94 <__mdiff+0xc8>
 8009dd6:	3f01      	subs	r7, #1
 8009dd8:	e7e8      	b.n	8009dac <__mdiff+0xe0>
 8009dda:	bf00      	nop
 8009ddc:	0800b3a0 	.word	0x0800b3a0
 8009de0:	0800b42c 	.word	0x0800b42c

08009de4 <__ulp>:
 8009de4:	4b11      	ldr	r3, [pc, #68]	; (8009e2c <__ulp+0x48>)
 8009de6:	400b      	ands	r3, r1
 8009de8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	dd02      	ble.n	8009df6 <__ulp+0x12>
 8009df0:	2000      	movs	r0, #0
 8009df2:	4619      	mov	r1, r3
 8009df4:	4770      	bx	lr
 8009df6:	425b      	negs	r3, r3
 8009df8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009dfc:	f04f 0000 	mov.w	r0, #0
 8009e00:	f04f 0100 	mov.w	r1, #0
 8009e04:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009e08:	da04      	bge.n	8009e14 <__ulp+0x30>
 8009e0a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009e0e:	fa43 f102 	asr.w	r1, r3, r2
 8009e12:	4770      	bx	lr
 8009e14:	f1a2 0314 	sub.w	r3, r2, #20
 8009e18:	2b1e      	cmp	r3, #30
 8009e1a:	bfd6      	itet	le
 8009e1c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009e20:	2301      	movgt	r3, #1
 8009e22:	fa22 f303 	lsrle.w	r3, r2, r3
 8009e26:	4618      	mov	r0, r3
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	7ff00000 	.word	0x7ff00000

08009e30 <__b2d>:
 8009e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e34:	6907      	ldr	r7, [r0, #16]
 8009e36:	f100 0914 	add.w	r9, r0, #20
 8009e3a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009e3e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009e42:	f1a7 0804 	sub.w	r8, r7, #4
 8009e46:	4630      	mov	r0, r6
 8009e48:	f7ff fd4e 	bl	80098e8 <__hi0bits>
 8009e4c:	f1c0 0320 	rsb	r3, r0, #32
 8009e50:	280a      	cmp	r0, #10
 8009e52:	600b      	str	r3, [r1, #0]
 8009e54:	491f      	ldr	r1, [pc, #124]	; (8009ed4 <__b2d+0xa4>)
 8009e56:	dc17      	bgt.n	8009e88 <__b2d+0x58>
 8009e58:	45c1      	cmp	r9, r8
 8009e5a:	bf28      	it	cs
 8009e5c:	2200      	movcs	r2, #0
 8009e5e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009e62:	fa26 f30c 	lsr.w	r3, r6, ip
 8009e66:	bf38      	it	cc
 8009e68:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009e6c:	ea43 0501 	orr.w	r5, r3, r1
 8009e70:	f100 0315 	add.w	r3, r0, #21
 8009e74:	fa06 f303 	lsl.w	r3, r6, r3
 8009e78:	fa22 f20c 	lsr.w	r2, r2, ip
 8009e7c:	ea43 0402 	orr.w	r4, r3, r2
 8009e80:	4620      	mov	r0, r4
 8009e82:	4629      	mov	r1, r5
 8009e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e88:	45c1      	cmp	r9, r8
 8009e8a:	bf2e      	itee	cs
 8009e8c:	2200      	movcs	r2, #0
 8009e8e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009e92:	f1a7 0808 	subcc.w	r8, r7, #8
 8009e96:	f1b0 030b 	subs.w	r3, r0, #11
 8009e9a:	d016      	beq.n	8009eca <__b2d+0x9a>
 8009e9c:	f1c3 0720 	rsb	r7, r3, #32
 8009ea0:	fa22 f107 	lsr.w	r1, r2, r7
 8009ea4:	45c8      	cmp	r8, r9
 8009ea6:	fa06 f603 	lsl.w	r6, r6, r3
 8009eaa:	ea46 0601 	orr.w	r6, r6, r1
 8009eae:	bf94      	ite	ls
 8009eb0:	2100      	movls	r1, #0
 8009eb2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009eb6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009eba:	fa02 f003 	lsl.w	r0, r2, r3
 8009ebe:	40f9      	lsrs	r1, r7
 8009ec0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009ec4:	ea40 0401 	orr.w	r4, r0, r1
 8009ec8:	e7da      	b.n	8009e80 <__b2d+0x50>
 8009eca:	4614      	mov	r4, r2
 8009ecc:	ea46 0501 	orr.w	r5, r6, r1
 8009ed0:	e7d6      	b.n	8009e80 <__b2d+0x50>
 8009ed2:	bf00      	nop
 8009ed4:	3ff00000 	.word	0x3ff00000

08009ed8 <__d2b>:
 8009ed8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009edc:	2101      	movs	r1, #1
 8009ede:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009ee2:	4690      	mov	r8, r2
 8009ee4:	461d      	mov	r5, r3
 8009ee6:	f7ff fc0d 	bl	8009704 <_Balloc>
 8009eea:	4604      	mov	r4, r0
 8009eec:	b930      	cbnz	r0, 8009efc <__d2b+0x24>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	f240 310a 	movw	r1, #778	; 0x30a
 8009ef4:	4b24      	ldr	r3, [pc, #144]	; (8009f88 <__d2b+0xb0>)
 8009ef6:	4825      	ldr	r0, [pc, #148]	; (8009f8c <__d2b+0xb4>)
 8009ef8:	f000 fb40 	bl	800a57c <__assert_func>
 8009efc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009f00:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009f04:	bb2d      	cbnz	r5, 8009f52 <__d2b+0x7a>
 8009f06:	9301      	str	r3, [sp, #4]
 8009f08:	f1b8 0300 	subs.w	r3, r8, #0
 8009f0c:	d026      	beq.n	8009f5c <__d2b+0x84>
 8009f0e:	4668      	mov	r0, sp
 8009f10:	9300      	str	r3, [sp, #0]
 8009f12:	f7ff fd09 	bl	8009928 <__lo0bits>
 8009f16:	9900      	ldr	r1, [sp, #0]
 8009f18:	b1f0      	cbz	r0, 8009f58 <__d2b+0x80>
 8009f1a:	9a01      	ldr	r2, [sp, #4]
 8009f1c:	f1c0 0320 	rsb	r3, r0, #32
 8009f20:	fa02 f303 	lsl.w	r3, r2, r3
 8009f24:	430b      	orrs	r3, r1
 8009f26:	40c2      	lsrs	r2, r0
 8009f28:	6163      	str	r3, [r4, #20]
 8009f2a:	9201      	str	r2, [sp, #4]
 8009f2c:	9b01      	ldr	r3, [sp, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	bf14      	ite	ne
 8009f32:	2102      	movne	r1, #2
 8009f34:	2101      	moveq	r1, #1
 8009f36:	61a3      	str	r3, [r4, #24]
 8009f38:	6121      	str	r1, [r4, #16]
 8009f3a:	b1c5      	cbz	r5, 8009f6e <__d2b+0x96>
 8009f3c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f40:	4405      	add	r5, r0
 8009f42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f46:	603d      	str	r5, [r7, #0]
 8009f48:	6030      	str	r0, [r6, #0]
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	b002      	add	sp, #8
 8009f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f56:	e7d6      	b.n	8009f06 <__d2b+0x2e>
 8009f58:	6161      	str	r1, [r4, #20]
 8009f5a:	e7e7      	b.n	8009f2c <__d2b+0x54>
 8009f5c:	a801      	add	r0, sp, #4
 8009f5e:	f7ff fce3 	bl	8009928 <__lo0bits>
 8009f62:	2101      	movs	r1, #1
 8009f64:	9b01      	ldr	r3, [sp, #4]
 8009f66:	6121      	str	r1, [r4, #16]
 8009f68:	6163      	str	r3, [r4, #20]
 8009f6a:	3020      	adds	r0, #32
 8009f6c:	e7e5      	b.n	8009f3a <__d2b+0x62>
 8009f6e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009f72:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f76:	6038      	str	r0, [r7, #0]
 8009f78:	6918      	ldr	r0, [r3, #16]
 8009f7a:	f7ff fcb5 	bl	80098e8 <__hi0bits>
 8009f7e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009f82:	6031      	str	r1, [r6, #0]
 8009f84:	e7e1      	b.n	8009f4a <__d2b+0x72>
 8009f86:	bf00      	nop
 8009f88:	0800b3a0 	.word	0x0800b3a0
 8009f8c:	0800b42c 	.word	0x0800b42c

08009f90 <__ratio>:
 8009f90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f94:	4688      	mov	r8, r1
 8009f96:	4669      	mov	r1, sp
 8009f98:	4681      	mov	r9, r0
 8009f9a:	f7ff ff49 	bl	8009e30 <__b2d>
 8009f9e:	460f      	mov	r7, r1
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	460d      	mov	r5, r1
 8009fa4:	4640      	mov	r0, r8
 8009fa6:	a901      	add	r1, sp, #4
 8009fa8:	f7ff ff42 	bl	8009e30 <__b2d>
 8009fac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009fb0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009fb4:	468b      	mov	fp, r1
 8009fb6:	eba3 0c02 	sub.w	ip, r3, r2
 8009fba:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009fbe:	1a9b      	subs	r3, r3, r2
 8009fc0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	bfd5      	itete	le
 8009fc8:	460a      	movle	r2, r1
 8009fca:	462a      	movgt	r2, r5
 8009fcc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009fd0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009fd4:	bfd8      	it	le
 8009fd6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009fda:	465b      	mov	r3, fp
 8009fdc:	4602      	mov	r2, r0
 8009fde:	4639      	mov	r1, r7
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	f7f6 fcc3 	bl	800096c <__aeabi_ddiv>
 8009fe6:	b003      	add	sp, #12
 8009fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009fec <__copybits>:
 8009fec:	3901      	subs	r1, #1
 8009fee:	b570      	push	{r4, r5, r6, lr}
 8009ff0:	1149      	asrs	r1, r1, #5
 8009ff2:	6914      	ldr	r4, [r2, #16]
 8009ff4:	3101      	adds	r1, #1
 8009ff6:	f102 0314 	add.w	r3, r2, #20
 8009ffa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ffe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a002:	1f05      	subs	r5, r0, #4
 800a004:	42a3      	cmp	r3, r4
 800a006:	d30c      	bcc.n	800a022 <__copybits+0x36>
 800a008:	1aa3      	subs	r3, r4, r2
 800a00a:	3b11      	subs	r3, #17
 800a00c:	f023 0303 	bic.w	r3, r3, #3
 800a010:	3211      	adds	r2, #17
 800a012:	42a2      	cmp	r2, r4
 800a014:	bf88      	it	hi
 800a016:	2300      	movhi	r3, #0
 800a018:	4418      	add	r0, r3
 800a01a:	2300      	movs	r3, #0
 800a01c:	4288      	cmp	r0, r1
 800a01e:	d305      	bcc.n	800a02c <__copybits+0x40>
 800a020:	bd70      	pop	{r4, r5, r6, pc}
 800a022:	f853 6b04 	ldr.w	r6, [r3], #4
 800a026:	f845 6f04 	str.w	r6, [r5, #4]!
 800a02a:	e7eb      	b.n	800a004 <__copybits+0x18>
 800a02c:	f840 3b04 	str.w	r3, [r0], #4
 800a030:	e7f4      	b.n	800a01c <__copybits+0x30>

0800a032 <__any_on>:
 800a032:	f100 0214 	add.w	r2, r0, #20
 800a036:	6900      	ldr	r0, [r0, #16]
 800a038:	114b      	asrs	r3, r1, #5
 800a03a:	4298      	cmp	r0, r3
 800a03c:	b510      	push	{r4, lr}
 800a03e:	db11      	blt.n	800a064 <__any_on+0x32>
 800a040:	dd0a      	ble.n	800a058 <__any_on+0x26>
 800a042:	f011 011f 	ands.w	r1, r1, #31
 800a046:	d007      	beq.n	800a058 <__any_on+0x26>
 800a048:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a04c:	fa24 f001 	lsr.w	r0, r4, r1
 800a050:	fa00 f101 	lsl.w	r1, r0, r1
 800a054:	428c      	cmp	r4, r1
 800a056:	d10b      	bne.n	800a070 <__any_on+0x3e>
 800a058:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d803      	bhi.n	800a068 <__any_on+0x36>
 800a060:	2000      	movs	r0, #0
 800a062:	bd10      	pop	{r4, pc}
 800a064:	4603      	mov	r3, r0
 800a066:	e7f7      	b.n	800a058 <__any_on+0x26>
 800a068:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a06c:	2900      	cmp	r1, #0
 800a06e:	d0f5      	beq.n	800a05c <__any_on+0x2a>
 800a070:	2001      	movs	r0, #1
 800a072:	e7f6      	b.n	800a062 <__any_on+0x30>

0800a074 <_calloc_r>:
 800a074:	b570      	push	{r4, r5, r6, lr}
 800a076:	fba1 5402 	umull	r5, r4, r1, r2
 800a07a:	b934      	cbnz	r4, 800a08a <_calloc_r+0x16>
 800a07c:	4629      	mov	r1, r5
 800a07e:	f000 f875 	bl	800a16c <_malloc_r>
 800a082:	4606      	mov	r6, r0
 800a084:	b928      	cbnz	r0, 800a092 <_calloc_r+0x1e>
 800a086:	4630      	mov	r0, r6
 800a088:	bd70      	pop	{r4, r5, r6, pc}
 800a08a:	220c      	movs	r2, #12
 800a08c:	2600      	movs	r6, #0
 800a08e:	6002      	str	r2, [r0, #0]
 800a090:	e7f9      	b.n	800a086 <_calloc_r+0x12>
 800a092:	462a      	mov	r2, r5
 800a094:	4621      	mov	r1, r4
 800a096:	f7fc fbf3 	bl	8006880 <memset>
 800a09a:	e7f4      	b.n	800a086 <_calloc_r+0x12>

0800a09c <_free_r>:
 800a09c:	b538      	push	{r3, r4, r5, lr}
 800a09e:	4605      	mov	r5, r0
 800a0a0:	2900      	cmp	r1, #0
 800a0a2:	d040      	beq.n	800a126 <_free_r+0x8a>
 800a0a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0a8:	1f0c      	subs	r4, r1, #4
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	bfb8      	it	lt
 800a0ae:	18e4      	addlt	r4, r4, r3
 800a0b0:	f000 faae 	bl	800a610 <__malloc_lock>
 800a0b4:	4a1c      	ldr	r2, [pc, #112]	; (800a128 <_free_r+0x8c>)
 800a0b6:	6813      	ldr	r3, [r2, #0]
 800a0b8:	b933      	cbnz	r3, 800a0c8 <_free_r+0x2c>
 800a0ba:	6063      	str	r3, [r4, #4]
 800a0bc:	6014      	str	r4, [r2, #0]
 800a0be:	4628      	mov	r0, r5
 800a0c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0c4:	f000 baaa 	b.w	800a61c <__malloc_unlock>
 800a0c8:	42a3      	cmp	r3, r4
 800a0ca:	d908      	bls.n	800a0de <_free_r+0x42>
 800a0cc:	6820      	ldr	r0, [r4, #0]
 800a0ce:	1821      	adds	r1, r4, r0
 800a0d0:	428b      	cmp	r3, r1
 800a0d2:	bf01      	itttt	eq
 800a0d4:	6819      	ldreq	r1, [r3, #0]
 800a0d6:	685b      	ldreq	r3, [r3, #4]
 800a0d8:	1809      	addeq	r1, r1, r0
 800a0da:	6021      	streq	r1, [r4, #0]
 800a0dc:	e7ed      	b.n	800a0ba <_free_r+0x1e>
 800a0de:	461a      	mov	r2, r3
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	b10b      	cbz	r3, 800a0e8 <_free_r+0x4c>
 800a0e4:	42a3      	cmp	r3, r4
 800a0e6:	d9fa      	bls.n	800a0de <_free_r+0x42>
 800a0e8:	6811      	ldr	r1, [r2, #0]
 800a0ea:	1850      	adds	r0, r2, r1
 800a0ec:	42a0      	cmp	r0, r4
 800a0ee:	d10b      	bne.n	800a108 <_free_r+0x6c>
 800a0f0:	6820      	ldr	r0, [r4, #0]
 800a0f2:	4401      	add	r1, r0
 800a0f4:	1850      	adds	r0, r2, r1
 800a0f6:	4283      	cmp	r3, r0
 800a0f8:	6011      	str	r1, [r2, #0]
 800a0fa:	d1e0      	bne.n	800a0be <_free_r+0x22>
 800a0fc:	6818      	ldr	r0, [r3, #0]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	4401      	add	r1, r0
 800a102:	6011      	str	r1, [r2, #0]
 800a104:	6053      	str	r3, [r2, #4]
 800a106:	e7da      	b.n	800a0be <_free_r+0x22>
 800a108:	d902      	bls.n	800a110 <_free_r+0x74>
 800a10a:	230c      	movs	r3, #12
 800a10c:	602b      	str	r3, [r5, #0]
 800a10e:	e7d6      	b.n	800a0be <_free_r+0x22>
 800a110:	6820      	ldr	r0, [r4, #0]
 800a112:	1821      	adds	r1, r4, r0
 800a114:	428b      	cmp	r3, r1
 800a116:	bf01      	itttt	eq
 800a118:	6819      	ldreq	r1, [r3, #0]
 800a11a:	685b      	ldreq	r3, [r3, #4]
 800a11c:	1809      	addeq	r1, r1, r0
 800a11e:	6021      	streq	r1, [r4, #0]
 800a120:	6063      	str	r3, [r4, #4]
 800a122:	6054      	str	r4, [r2, #4]
 800a124:	e7cb      	b.n	800a0be <_free_r+0x22>
 800a126:	bd38      	pop	{r3, r4, r5, pc}
 800a128:	20000384 	.word	0x20000384

0800a12c <sbrk_aligned>:
 800a12c:	b570      	push	{r4, r5, r6, lr}
 800a12e:	4e0e      	ldr	r6, [pc, #56]	; (800a168 <sbrk_aligned+0x3c>)
 800a130:	460c      	mov	r4, r1
 800a132:	6831      	ldr	r1, [r6, #0]
 800a134:	4605      	mov	r5, r0
 800a136:	b911      	cbnz	r1, 800a13e <sbrk_aligned+0x12>
 800a138:	f000 f9ee 	bl	800a518 <_sbrk_r>
 800a13c:	6030      	str	r0, [r6, #0]
 800a13e:	4621      	mov	r1, r4
 800a140:	4628      	mov	r0, r5
 800a142:	f000 f9e9 	bl	800a518 <_sbrk_r>
 800a146:	1c43      	adds	r3, r0, #1
 800a148:	d00a      	beq.n	800a160 <sbrk_aligned+0x34>
 800a14a:	1cc4      	adds	r4, r0, #3
 800a14c:	f024 0403 	bic.w	r4, r4, #3
 800a150:	42a0      	cmp	r0, r4
 800a152:	d007      	beq.n	800a164 <sbrk_aligned+0x38>
 800a154:	1a21      	subs	r1, r4, r0
 800a156:	4628      	mov	r0, r5
 800a158:	f000 f9de 	bl	800a518 <_sbrk_r>
 800a15c:	3001      	adds	r0, #1
 800a15e:	d101      	bne.n	800a164 <sbrk_aligned+0x38>
 800a160:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a164:	4620      	mov	r0, r4
 800a166:	bd70      	pop	{r4, r5, r6, pc}
 800a168:	20000388 	.word	0x20000388

0800a16c <_malloc_r>:
 800a16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a170:	1ccd      	adds	r5, r1, #3
 800a172:	f025 0503 	bic.w	r5, r5, #3
 800a176:	3508      	adds	r5, #8
 800a178:	2d0c      	cmp	r5, #12
 800a17a:	bf38      	it	cc
 800a17c:	250c      	movcc	r5, #12
 800a17e:	2d00      	cmp	r5, #0
 800a180:	4607      	mov	r7, r0
 800a182:	db01      	blt.n	800a188 <_malloc_r+0x1c>
 800a184:	42a9      	cmp	r1, r5
 800a186:	d905      	bls.n	800a194 <_malloc_r+0x28>
 800a188:	230c      	movs	r3, #12
 800a18a:	2600      	movs	r6, #0
 800a18c:	603b      	str	r3, [r7, #0]
 800a18e:	4630      	mov	r0, r6
 800a190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a194:	4e2e      	ldr	r6, [pc, #184]	; (800a250 <_malloc_r+0xe4>)
 800a196:	f000 fa3b 	bl	800a610 <__malloc_lock>
 800a19a:	6833      	ldr	r3, [r6, #0]
 800a19c:	461c      	mov	r4, r3
 800a19e:	bb34      	cbnz	r4, 800a1ee <_malloc_r+0x82>
 800a1a0:	4629      	mov	r1, r5
 800a1a2:	4638      	mov	r0, r7
 800a1a4:	f7ff ffc2 	bl	800a12c <sbrk_aligned>
 800a1a8:	1c43      	adds	r3, r0, #1
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	d14d      	bne.n	800a24a <_malloc_r+0xde>
 800a1ae:	6834      	ldr	r4, [r6, #0]
 800a1b0:	4626      	mov	r6, r4
 800a1b2:	2e00      	cmp	r6, #0
 800a1b4:	d140      	bne.n	800a238 <_malloc_r+0xcc>
 800a1b6:	6823      	ldr	r3, [r4, #0]
 800a1b8:	4631      	mov	r1, r6
 800a1ba:	4638      	mov	r0, r7
 800a1bc:	eb04 0803 	add.w	r8, r4, r3
 800a1c0:	f000 f9aa 	bl	800a518 <_sbrk_r>
 800a1c4:	4580      	cmp	r8, r0
 800a1c6:	d13a      	bne.n	800a23e <_malloc_r+0xd2>
 800a1c8:	6821      	ldr	r1, [r4, #0]
 800a1ca:	3503      	adds	r5, #3
 800a1cc:	1a6d      	subs	r5, r5, r1
 800a1ce:	f025 0503 	bic.w	r5, r5, #3
 800a1d2:	3508      	adds	r5, #8
 800a1d4:	2d0c      	cmp	r5, #12
 800a1d6:	bf38      	it	cc
 800a1d8:	250c      	movcc	r5, #12
 800a1da:	4638      	mov	r0, r7
 800a1dc:	4629      	mov	r1, r5
 800a1de:	f7ff ffa5 	bl	800a12c <sbrk_aligned>
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	d02b      	beq.n	800a23e <_malloc_r+0xd2>
 800a1e6:	6823      	ldr	r3, [r4, #0]
 800a1e8:	442b      	add	r3, r5
 800a1ea:	6023      	str	r3, [r4, #0]
 800a1ec:	e00e      	b.n	800a20c <_malloc_r+0xa0>
 800a1ee:	6822      	ldr	r2, [r4, #0]
 800a1f0:	1b52      	subs	r2, r2, r5
 800a1f2:	d41e      	bmi.n	800a232 <_malloc_r+0xc6>
 800a1f4:	2a0b      	cmp	r2, #11
 800a1f6:	d916      	bls.n	800a226 <_malloc_r+0xba>
 800a1f8:	1961      	adds	r1, r4, r5
 800a1fa:	42a3      	cmp	r3, r4
 800a1fc:	6025      	str	r5, [r4, #0]
 800a1fe:	bf18      	it	ne
 800a200:	6059      	strne	r1, [r3, #4]
 800a202:	6863      	ldr	r3, [r4, #4]
 800a204:	bf08      	it	eq
 800a206:	6031      	streq	r1, [r6, #0]
 800a208:	5162      	str	r2, [r4, r5]
 800a20a:	604b      	str	r3, [r1, #4]
 800a20c:	4638      	mov	r0, r7
 800a20e:	f104 060b 	add.w	r6, r4, #11
 800a212:	f000 fa03 	bl	800a61c <__malloc_unlock>
 800a216:	f026 0607 	bic.w	r6, r6, #7
 800a21a:	1d23      	adds	r3, r4, #4
 800a21c:	1af2      	subs	r2, r6, r3
 800a21e:	d0b6      	beq.n	800a18e <_malloc_r+0x22>
 800a220:	1b9b      	subs	r3, r3, r6
 800a222:	50a3      	str	r3, [r4, r2]
 800a224:	e7b3      	b.n	800a18e <_malloc_r+0x22>
 800a226:	6862      	ldr	r2, [r4, #4]
 800a228:	42a3      	cmp	r3, r4
 800a22a:	bf0c      	ite	eq
 800a22c:	6032      	streq	r2, [r6, #0]
 800a22e:	605a      	strne	r2, [r3, #4]
 800a230:	e7ec      	b.n	800a20c <_malloc_r+0xa0>
 800a232:	4623      	mov	r3, r4
 800a234:	6864      	ldr	r4, [r4, #4]
 800a236:	e7b2      	b.n	800a19e <_malloc_r+0x32>
 800a238:	4634      	mov	r4, r6
 800a23a:	6876      	ldr	r6, [r6, #4]
 800a23c:	e7b9      	b.n	800a1b2 <_malloc_r+0x46>
 800a23e:	230c      	movs	r3, #12
 800a240:	4638      	mov	r0, r7
 800a242:	603b      	str	r3, [r7, #0]
 800a244:	f000 f9ea 	bl	800a61c <__malloc_unlock>
 800a248:	e7a1      	b.n	800a18e <_malloc_r+0x22>
 800a24a:	6025      	str	r5, [r4, #0]
 800a24c:	e7de      	b.n	800a20c <_malloc_r+0xa0>
 800a24e:	bf00      	nop
 800a250:	20000384 	.word	0x20000384

0800a254 <__ssputs_r>:
 800a254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a258:	688e      	ldr	r6, [r1, #8]
 800a25a:	4682      	mov	sl, r0
 800a25c:	429e      	cmp	r6, r3
 800a25e:	460c      	mov	r4, r1
 800a260:	4690      	mov	r8, r2
 800a262:	461f      	mov	r7, r3
 800a264:	d838      	bhi.n	800a2d8 <__ssputs_r+0x84>
 800a266:	898a      	ldrh	r2, [r1, #12]
 800a268:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a26c:	d032      	beq.n	800a2d4 <__ssputs_r+0x80>
 800a26e:	6825      	ldr	r5, [r4, #0]
 800a270:	6909      	ldr	r1, [r1, #16]
 800a272:	3301      	adds	r3, #1
 800a274:	eba5 0901 	sub.w	r9, r5, r1
 800a278:	6965      	ldr	r5, [r4, #20]
 800a27a:	444b      	add	r3, r9
 800a27c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a280:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a284:	106d      	asrs	r5, r5, #1
 800a286:	429d      	cmp	r5, r3
 800a288:	bf38      	it	cc
 800a28a:	461d      	movcc	r5, r3
 800a28c:	0553      	lsls	r3, r2, #21
 800a28e:	d531      	bpl.n	800a2f4 <__ssputs_r+0xa0>
 800a290:	4629      	mov	r1, r5
 800a292:	f7ff ff6b 	bl	800a16c <_malloc_r>
 800a296:	4606      	mov	r6, r0
 800a298:	b950      	cbnz	r0, 800a2b0 <__ssputs_r+0x5c>
 800a29a:	230c      	movs	r3, #12
 800a29c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2a0:	f8ca 3000 	str.w	r3, [sl]
 800a2a4:	89a3      	ldrh	r3, [r4, #12]
 800a2a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2aa:	81a3      	strh	r3, [r4, #12]
 800a2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b0:	464a      	mov	r2, r9
 800a2b2:	6921      	ldr	r1, [r4, #16]
 800a2b4:	f7ff fa18 	bl	80096e8 <memcpy>
 800a2b8:	89a3      	ldrh	r3, [r4, #12]
 800a2ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a2be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2c2:	81a3      	strh	r3, [r4, #12]
 800a2c4:	6126      	str	r6, [r4, #16]
 800a2c6:	444e      	add	r6, r9
 800a2c8:	6026      	str	r6, [r4, #0]
 800a2ca:	463e      	mov	r6, r7
 800a2cc:	6165      	str	r5, [r4, #20]
 800a2ce:	eba5 0509 	sub.w	r5, r5, r9
 800a2d2:	60a5      	str	r5, [r4, #8]
 800a2d4:	42be      	cmp	r6, r7
 800a2d6:	d900      	bls.n	800a2da <__ssputs_r+0x86>
 800a2d8:	463e      	mov	r6, r7
 800a2da:	4632      	mov	r2, r6
 800a2dc:	4641      	mov	r1, r8
 800a2de:	6820      	ldr	r0, [r4, #0]
 800a2e0:	f000 f97c 	bl	800a5dc <memmove>
 800a2e4:	68a3      	ldr	r3, [r4, #8]
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	1b9b      	subs	r3, r3, r6
 800a2ea:	60a3      	str	r3, [r4, #8]
 800a2ec:	6823      	ldr	r3, [r4, #0]
 800a2ee:	4433      	add	r3, r6
 800a2f0:	6023      	str	r3, [r4, #0]
 800a2f2:	e7db      	b.n	800a2ac <__ssputs_r+0x58>
 800a2f4:	462a      	mov	r2, r5
 800a2f6:	f000 f997 	bl	800a628 <_realloc_r>
 800a2fa:	4606      	mov	r6, r0
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	d1e1      	bne.n	800a2c4 <__ssputs_r+0x70>
 800a300:	4650      	mov	r0, sl
 800a302:	6921      	ldr	r1, [r4, #16]
 800a304:	f7ff feca 	bl	800a09c <_free_r>
 800a308:	e7c7      	b.n	800a29a <__ssputs_r+0x46>
	...

0800a30c <_svfiprintf_r>:
 800a30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a310:	4698      	mov	r8, r3
 800a312:	898b      	ldrh	r3, [r1, #12]
 800a314:	4607      	mov	r7, r0
 800a316:	061b      	lsls	r3, r3, #24
 800a318:	460d      	mov	r5, r1
 800a31a:	4614      	mov	r4, r2
 800a31c:	b09d      	sub	sp, #116	; 0x74
 800a31e:	d50e      	bpl.n	800a33e <_svfiprintf_r+0x32>
 800a320:	690b      	ldr	r3, [r1, #16]
 800a322:	b963      	cbnz	r3, 800a33e <_svfiprintf_r+0x32>
 800a324:	2140      	movs	r1, #64	; 0x40
 800a326:	f7ff ff21 	bl	800a16c <_malloc_r>
 800a32a:	6028      	str	r0, [r5, #0]
 800a32c:	6128      	str	r0, [r5, #16]
 800a32e:	b920      	cbnz	r0, 800a33a <_svfiprintf_r+0x2e>
 800a330:	230c      	movs	r3, #12
 800a332:	603b      	str	r3, [r7, #0]
 800a334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a338:	e0d1      	b.n	800a4de <_svfiprintf_r+0x1d2>
 800a33a:	2340      	movs	r3, #64	; 0x40
 800a33c:	616b      	str	r3, [r5, #20]
 800a33e:	2300      	movs	r3, #0
 800a340:	9309      	str	r3, [sp, #36]	; 0x24
 800a342:	2320      	movs	r3, #32
 800a344:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a348:	2330      	movs	r3, #48	; 0x30
 800a34a:	f04f 0901 	mov.w	r9, #1
 800a34e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a352:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a4f8 <_svfiprintf_r+0x1ec>
 800a356:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a35a:	4623      	mov	r3, r4
 800a35c:	469a      	mov	sl, r3
 800a35e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a362:	b10a      	cbz	r2, 800a368 <_svfiprintf_r+0x5c>
 800a364:	2a25      	cmp	r2, #37	; 0x25
 800a366:	d1f9      	bne.n	800a35c <_svfiprintf_r+0x50>
 800a368:	ebba 0b04 	subs.w	fp, sl, r4
 800a36c:	d00b      	beq.n	800a386 <_svfiprintf_r+0x7a>
 800a36e:	465b      	mov	r3, fp
 800a370:	4622      	mov	r2, r4
 800a372:	4629      	mov	r1, r5
 800a374:	4638      	mov	r0, r7
 800a376:	f7ff ff6d 	bl	800a254 <__ssputs_r>
 800a37a:	3001      	adds	r0, #1
 800a37c:	f000 80aa 	beq.w	800a4d4 <_svfiprintf_r+0x1c8>
 800a380:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a382:	445a      	add	r2, fp
 800a384:	9209      	str	r2, [sp, #36]	; 0x24
 800a386:	f89a 3000 	ldrb.w	r3, [sl]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f000 80a2 	beq.w	800a4d4 <_svfiprintf_r+0x1c8>
 800a390:	2300      	movs	r3, #0
 800a392:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a396:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a39a:	f10a 0a01 	add.w	sl, sl, #1
 800a39e:	9304      	str	r3, [sp, #16]
 800a3a0:	9307      	str	r3, [sp, #28]
 800a3a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3a6:	931a      	str	r3, [sp, #104]	; 0x68
 800a3a8:	4654      	mov	r4, sl
 800a3aa:	2205      	movs	r2, #5
 800a3ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3b0:	4851      	ldr	r0, [pc, #324]	; (800a4f8 <_svfiprintf_r+0x1ec>)
 800a3b2:	f7ff f98b 	bl	80096cc <memchr>
 800a3b6:	9a04      	ldr	r2, [sp, #16]
 800a3b8:	b9d8      	cbnz	r0, 800a3f2 <_svfiprintf_r+0xe6>
 800a3ba:	06d0      	lsls	r0, r2, #27
 800a3bc:	bf44      	itt	mi
 800a3be:	2320      	movmi	r3, #32
 800a3c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3c4:	0711      	lsls	r1, r2, #28
 800a3c6:	bf44      	itt	mi
 800a3c8:	232b      	movmi	r3, #43	; 0x2b
 800a3ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a3d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a3d4:	d015      	beq.n	800a402 <_svfiprintf_r+0xf6>
 800a3d6:	4654      	mov	r4, sl
 800a3d8:	2000      	movs	r0, #0
 800a3da:	f04f 0c0a 	mov.w	ip, #10
 800a3de:	9a07      	ldr	r2, [sp, #28]
 800a3e0:	4621      	mov	r1, r4
 800a3e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3e6:	3b30      	subs	r3, #48	; 0x30
 800a3e8:	2b09      	cmp	r3, #9
 800a3ea:	d94e      	bls.n	800a48a <_svfiprintf_r+0x17e>
 800a3ec:	b1b0      	cbz	r0, 800a41c <_svfiprintf_r+0x110>
 800a3ee:	9207      	str	r2, [sp, #28]
 800a3f0:	e014      	b.n	800a41c <_svfiprintf_r+0x110>
 800a3f2:	eba0 0308 	sub.w	r3, r0, r8
 800a3f6:	fa09 f303 	lsl.w	r3, r9, r3
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	46a2      	mov	sl, r4
 800a3fe:	9304      	str	r3, [sp, #16]
 800a400:	e7d2      	b.n	800a3a8 <_svfiprintf_r+0x9c>
 800a402:	9b03      	ldr	r3, [sp, #12]
 800a404:	1d19      	adds	r1, r3, #4
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	9103      	str	r1, [sp, #12]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	bfbb      	ittet	lt
 800a40e:	425b      	neglt	r3, r3
 800a410:	f042 0202 	orrlt.w	r2, r2, #2
 800a414:	9307      	strge	r3, [sp, #28]
 800a416:	9307      	strlt	r3, [sp, #28]
 800a418:	bfb8      	it	lt
 800a41a:	9204      	strlt	r2, [sp, #16]
 800a41c:	7823      	ldrb	r3, [r4, #0]
 800a41e:	2b2e      	cmp	r3, #46	; 0x2e
 800a420:	d10c      	bne.n	800a43c <_svfiprintf_r+0x130>
 800a422:	7863      	ldrb	r3, [r4, #1]
 800a424:	2b2a      	cmp	r3, #42	; 0x2a
 800a426:	d135      	bne.n	800a494 <_svfiprintf_r+0x188>
 800a428:	9b03      	ldr	r3, [sp, #12]
 800a42a:	3402      	adds	r4, #2
 800a42c:	1d1a      	adds	r2, r3, #4
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	9203      	str	r2, [sp, #12]
 800a432:	2b00      	cmp	r3, #0
 800a434:	bfb8      	it	lt
 800a436:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a43a:	9305      	str	r3, [sp, #20]
 800a43c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a4fc <_svfiprintf_r+0x1f0>
 800a440:	2203      	movs	r2, #3
 800a442:	4650      	mov	r0, sl
 800a444:	7821      	ldrb	r1, [r4, #0]
 800a446:	f7ff f941 	bl	80096cc <memchr>
 800a44a:	b140      	cbz	r0, 800a45e <_svfiprintf_r+0x152>
 800a44c:	2340      	movs	r3, #64	; 0x40
 800a44e:	eba0 000a 	sub.w	r0, r0, sl
 800a452:	fa03 f000 	lsl.w	r0, r3, r0
 800a456:	9b04      	ldr	r3, [sp, #16]
 800a458:	3401      	adds	r4, #1
 800a45a:	4303      	orrs	r3, r0
 800a45c:	9304      	str	r3, [sp, #16]
 800a45e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a462:	2206      	movs	r2, #6
 800a464:	4826      	ldr	r0, [pc, #152]	; (800a500 <_svfiprintf_r+0x1f4>)
 800a466:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a46a:	f7ff f92f 	bl	80096cc <memchr>
 800a46e:	2800      	cmp	r0, #0
 800a470:	d038      	beq.n	800a4e4 <_svfiprintf_r+0x1d8>
 800a472:	4b24      	ldr	r3, [pc, #144]	; (800a504 <_svfiprintf_r+0x1f8>)
 800a474:	bb1b      	cbnz	r3, 800a4be <_svfiprintf_r+0x1b2>
 800a476:	9b03      	ldr	r3, [sp, #12]
 800a478:	3307      	adds	r3, #7
 800a47a:	f023 0307 	bic.w	r3, r3, #7
 800a47e:	3308      	adds	r3, #8
 800a480:	9303      	str	r3, [sp, #12]
 800a482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a484:	4433      	add	r3, r6
 800a486:	9309      	str	r3, [sp, #36]	; 0x24
 800a488:	e767      	b.n	800a35a <_svfiprintf_r+0x4e>
 800a48a:	460c      	mov	r4, r1
 800a48c:	2001      	movs	r0, #1
 800a48e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a492:	e7a5      	b.n	800a3e0 <_svfiprintf_r+0xd4>
 800a494:	2300      	movs	r3, #0
 800a496:	f04f 0c0a 	mov.w	ip, #10
 800a49a:	4619      	mov	r1, r3
 800a49c:	3401      	adds	r4, #1
 800a49e:	9305      	str	r3, [sp, #20]
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4a6:	3a30      	subs	r2, #48	; 0x30
 800a4a8:	2a09      	cmp	r2, #9
 800a4aa:	d903      	bls.n	800a4b4 <_svfiprintf_r+0x1a8>
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d0c5      	beq.n	800a43c <_svfiprintf_r+0x130>
 800a4b0:	9105      	str	r1, [sp, #20]
 800a4b2:	e7c3      	b.n	800a43c <_svfiprintf_r+0x130>
 800a4b4:	4604      	mov	r4, r0
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4bc:	e7f0      	b.n	800a4a0 <_svfiprintf_r+0x194>
 800a4be:	ab03      	add	r3, sp, #12
 800a4c0:	9300      	str	r3, [sp, #0]
 800a4c2:	462a      	mov	r2, r5
 800a4c4:	4638      	mov	r0, r7
 800a4c6:	4b10      	ldr	r3, [pc, #64]	; (800a508 <_svfiprintf_r+0x1fc>)
 800a4c8:	a904      	add	r1, sp, #16
 800a4ca:	f7fc fa7f 	bl	80069cc <_printf_float>
 800a4ce:	1c42      	adds	r2, r0, #1
 800a4d0:	4606      	mov	r6, r0
 800a4d2:	d1d6      	bne.n	800a482 <_svfiprintf_r+0x176>
 800a4d4:	89ab      	ldrh	r3, [r5, #12]
 800a4d6:	065b      	lsls	r3, r3, #25
 800a4d8:	f53f af2c 	bmi.w	800a334 <_svfiprintf_r+0x28>
 800a4dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4de:	b01d      	add	sp, #116	; 0x74
 800a4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4e4:	ab03      	add	r3, sp, #12
 800a4e6:	9300      	str	r3, [sp, #0]
 800a4e8:	462a      	mov	r2, r5
 800a4ea:	4638      	mov	r0, r7
 800a4ec:	4b06      	ldr	r3, [pc, #24]	; (800a508 <_svfiprintf_r+0x1fc>)
 800a4ee:	a904      	add	r1, sp, #16
 800a4f0:	f7fc fd08 	bl	8006f04 <_printf_i>
 800a4f4:	e7eb      	b.n	800a4ce <_svfiprintf_r+0x1c2>
 800a4f6:	bf00      	nop
 800a4f8:	0800b584 	.word	0x0800b584
 800a4fc:	0800b58a 	.word	0x0800b58a
 800a500:	0800b58e 	.word	0x0800b58e
 800a504:	080069cd 	.word	0x080069cd
 800a508:	0800a255 	.word	0x0800a255

0800a50c <nan>:
 800a50c:	2000      	movs	r0, #0
 800a50e:	4901      	ldr	r1, [pc, #4]	; (800a514 <nan+0x8>)
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	7ff80000 	.word	0x7ff80000

0800a518 <_sbrk_r>:
 800a518:	b538      	push	{r3, r4, r5, lr}
 800a51a:	2300      	movs	r3, #0
 800a51c:	4d05      	ldr	r5, [pc, #20]	; (800a534 <_sbrk_r+0x1c>)
 800a51e:	4604      	mov	r4, r0
 800a520:	4608      	mov	r0, r1
 800a522:	602b      	str	r3, [r5, #0]
 800a524:	f7f7 fde6 	bl	80020f4 <_sbrk>
 800a528:	1c43      	adds	r3, r0, #1
 800a52a:	d102      	bne.n	800a532 <_sbrk_r+0x1a>
 800a52c:	682b      	ldr	r3, [r5, #0]
 800a52e:	b103      	cbz	r3, 800a532 <_sbrk_r+0x1a>
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	bd38      	pop	{r3, r4, r5, pc}
 800a534:	2000038c 	.word	0x2000038c

0800a538 <strncmp>:
 800a538:	4603      	mov	r3, r0
 800a53a:	b510      	push	{r4, lr}
 800a53c:	b172      	cbz	r2, 800a55c <strncmp+0x24>
 800a53e:	3901      	subs	r1, #1
 800a540:	1884      	adds	r4, r0, r2
 800a542:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a546:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a54a:	4290      	cmp	r0, r2
 800a54c:	d101      	bne.n	800a552 <strncmp+0x1a>
 800a54e:	42a3      	cmp	r3, r4
 800a550:	d101      	bne.n	800a556 <strncmp+0x1e>
 800a552:	1a80      	subs	r0, r0, r2
 800a554:	bd10      	pop	{r4, pc}
 800a556:	2800      	cmp	r0, #0
 800a558:	d1f3      	bne.n	800a542 <strncmp+0xa>
 800a55a:	e7fa      	b.n	800a552 <strncmp+0x1a>
 800a55c:	4610      	mov	r0, r2
 800a55e:	e7f9      	b.n	800a554 <strncmp+0x1c>

0800a560 <__ascii_wctomb>:
 800a560:	4603      	mov	r3, r0
 800a562:	4608      	mov	r0, r1
 800a564:	b141      	cbz	r1, 800a578 <__ascii_wctomb+0x18>
 800a566:	2aff      	cmp	r2, #255	; 0xff
 800a568:	d904      	bls.n	800a574 <__ascii_wctomb+0x14>
 800a56a:	228a      	movs	r2, #138	; 0x8a
 800a56c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a570:	601a      	str	r2, [r3, #0]
 800a572:	4770      	bx	lr
 800a574:	2001      	movs	r0, #1
 800a576:	700a      	strb	r2, [r1, #0]
 800a578:	4770      	bx	lr
	...

0800a57c <__assert_func>:
 800a57c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a57e:	4614      	mov	r4, r2
 800a580:	461a      	mov	r2, r3
 800a582:	4b09      	ldr	r3, [pc, #36]	; (800a5a8 <__assert_func+0x2c>)
 800a584:	4605      	mov	r5, r0
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	68d8      	ldr	r0, [r3, #12]
 800a58a:	b14c      	cbz	r4, 800a5a0 <__assert_func+0x24>
 800a58c:	4b07      	ldr	r3, [pc, #28]	; (800a5ac <__assert_func+0x30>)
 800a58e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a592:	9100      	str	r1, [sp, #0]
 800a594:	462b      	mov	r3, r5
 800a596:	4906      	ldr	r1, [pc, #24]	; (800a5b0 <__assert_func+0x34>)
 800a598:	f000 f80e 	bl	800a5b8 <fiprintf>
 800a59c:	f000 fa8a 	bl	800aab4 <abort>
 800a5a0:	4b04      	ldr	r3, [pc, #16]	; (800a5b4 <__assert_func+0x38>)
 800a5a2:	461c      	mov	r4, r3
 800a5a4:	e7f3      	b.n	800a58e <__assert_func+0x12>
 800a5a6:	bf00      	nop
 800a5a8:	2000000c 	.word	0x2000000c
 800a5ac:	0800b595 	.word	0x0800b595
 800a5b0:	0800b5a2 	.word	0x0800b5a2
 800a5b4:	0800b5d0 	.word	0x0800b5d0

0800a5b8 <fiprintf>:
 800a5b8:	b40e      	push	{r1, r2, r3}
 800a5ba:	b503      	push	{r0, r1, lr}
 800a5bc:	4601      	mov	r1, r0
 800a5be:	ab03      	add	r3, sp, #12
 800a5c0:	4805      	ldr	r0, [pc, #20]	; (800a5d8 <fiprintf+0x20>)
 800a5c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5c6:	6800      	ldr	r0, [r0, #0]
 800a5c8:	9301      	str	r3, [sp, #4]
 800a5ca:	f000 f883 	bl	800a6d4 <_vfiprintf_r>
 800a5ce:	b002      	add	sp, #8
 800a5d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5d4:	b003      	add	sp, #12
 800a5d6:	4770      	bx	lr
 800a5d8:	2000000c 	.word	0x2000000c

0800a5dc <memmove>:
 800a5dc:	4288      	cmp	r0, r1
 800a5de:	b510      	push	{r4, lr}
 800a5e0:	eb01 0402 	add.w	r4, r1, r2
 800a5e4:	d902      	bls.n	800a5ec <memmove+0x10>
 800a5e6:	4284      	cmp	r4, r0
 800a5e8:	4623      	mov	r3, r4
 800a5ea:	d807      	bhi.n	800a5fc <memmove+0x20>
 800a5ec:	1e43      	subs	r3, r0, #1
 800a5ee:	42a1      	cmp	r1, r4
 800a5f0:	d008      	beq.n	800a604 <memmove+0x28>
 800a5f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5fa:	e7f8      	b.n	800a5ee <memmove+0x12>
 800a5fc:	4601      	mov	r1, r0
 800a5fe:	4402      	add	r2, r0
 800a600:	428a      	cmp	r2, r1
 800a602:	d100      	bne.n	800a606 <memmove+0x2a>
 800a604:	bd10      	pop	{r4, pc}
 800a606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a60a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a60e:	e7f7      	b.n	800a600 <memmove+0x24>

0800a610 <__malloc_lock>:
 800a610:	4801      	ldr	r0, [pc, #4]	; (800a618 <__malloc_lock+0x8>)
 800a612:	f000 bc0b 	b.w	800ae2c <__retarget_lock_acquire_recursive>
 800a616:	bf00      	nop
 800a618:	20000390 	.word	0x20000390

0800a61c <__malloc_unlock>:
 800a61c:	4801      	ldr	r0, [pc, #4]	; (800a624 <__malloc_unlock+0x8>)
 800a61e:	f000 bc06 	b.w	800ae2e <__retarget_lock_release_recursive>
 800a622:	bf00      	nop
 800a624:	20000390 	.word	0x20000390

0800a628 <_realloc_r>:
 800a628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a62c:	4680      	mov	r8, r0
 800a62e:	4614      	mov	r4, r2
 800a630:	460e      	mov	r6, r1
 800a632:	b921      	cbnz	r1, 800a63e <_realloc_r+0x16>
 800a634:	4611      	mov	r1, r2
 800a636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a63a:	f7ff bd97 	b.w	800a16c <_malloc_r>
 800a63e:	b92a      	cbnz	r2, 800a64c <_realloc_r+0x24>
 800a640:	f7ff fd2c 	bl	800a09c <_free_r>
 800a644:	4625      	mov	r5, r4
 800a646:	4628      	mov	r0, r5
 800a648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a64c:	f000 fc56 	bl	800aefc <_malloc_usable_size_r>
 800a650:	4284      	cmp	r4, r0
 800a652:	4607      	mov	r7, r0
 800a654:	d802      	bhi.n	800a65c <_realloc_r+0x34>
 800a656:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a65a:	d812      	bhi.n	800a682 <_realloc_r+0x5a>
 800a65c:	4621      	mov	r1, r4
 800a65e:	4640      	mov	r0, r8
 800a660:	f7ff fd84 	bl	800a16c <_malloc_r>
 800a664:	4605      	mov	r5, r0
 800a666:	2800      	cmp	r0, #0
 800a668:	d0ed      	beq.n	800a646 <_realloc_r+0x1e>
 800a66a:	42bc      	cmp	r4, r7
 800a66c:	4622      	mov	r2, r4
 800a66e:	4631      	mov	r1, r6
 800a670:	bf28      	it	cs
 800a672:	463a      	movcs	r2, r7
 800a674:	f7ff f838 	bl	80096e8 <memcpy>
 800a678:	4631      	mov	r1, r6
 800a67a:	4640      	mov	r0, r8
 800a67c:	f7ff fd0e 	bl	800a09c <_free_r>
 800a680:	e7e1      	b.n	800a646 <_realloc_r+0x1e>
 800a682:	4635      	mov	r5, r6
 800a684:	e7df      	b.n	800a646 <_realloc_r+0x1e>

0800a686 <__sfputc_r>:
 800a686:	6893      	ldr	r3, [r2, #8]
 800a688:	b410      	push	{r4}
 800a68a:	3b01      	subs	r3, #1
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	6093      	str	r3, [r2, #8]
 800a690:	da07      	bge.n	800a6a2 <__sfputc_r+0x1c>
 800a692:	6994      	ldr	r4, [r2, #24]
 800a694:	42a3      	cmp	r3, r4
 800a696:	db01      	blt.n	800a69c <__sfputc_r+0x16>
 800a698:	290a      	cmp	r1, #10
 800a69a:	d102      	bne.n	800a6a2 <__sfputc_r+0x1c>
 800a69c:	bc10      	pop	{r4}
 800a69e:	f000 b949 	b.w	800a934 <__swbuf_r>
 800a6a2:	6813      	ldr	r3, [r2, #0]
 800a6a4:	1c58      	adds	r0, r3, #1
 800a6a6:	6010      	str	r0, [r2, #0]
 800a6a8:	7019      	strb	r1, [r3, #0]
 800a6aa:	4608      	mov	r0, r1
 800a6ac:	bc10      	pop	{r4}
 800a6ae:	4770      	bx	lr

0800a6b0 <__sfputs_r>:
 800a6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b2:	4606      	mov	r6, r0
 800a6b4:	460f      	mov	r7, r1
 800a6b6:	4614      	mov	r4, r2
 800a6b8:	18d5      	adds	r5, r2, r3
 800a6ba:	42ac      	cmp	r4, r5
 800a6bc:	d101      	bne.n	800a6c2 <__sfputs_r+0x12>
 800a6be:	2000      	movs	r0, #0
 800a6c0:	e007      	b.n	800a6d2 <__sfputs_r+0x22>
 800a6c2:	463a      	mov	r2, r7
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ca:	f7ff ffdc 	bl	800a686 <__sfputc_r>
 800a6ce:	1c43      	adds	r3, r0, #1
 800a6d0:	d1f3      	bne.n	800a6ba <__sfputs_r+0xa>
 800a6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a6d4 <_vfiprintf_r>:
 800a6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d8:	460d      	mov	r5, r1
 800a6da:	4614      	mov	r4, r2
 800a6dc:	4698      	mov	r8, r3
 800a6de:	4606      	mov	r6, r0
 800a6e0:	b09d      	sub	sp, #116	; 0x74
 800a6e2:	b118      	cbz	r0, 800a6ec <_vfiprintf_r+0x18>
 800a6e4:	6983      	ldr	r3, [r0, #24]
 800a6e6:	b90b      	cbnz	r3, 800a6ec <_vfiprintf_r+0x18>
 800a6e8:	f000 fb02 	bl	800acf0 <__sinit>
 800a6ec:	4b89      	ldr	r3, [pc, #548]	; (800a914 <_vfiprintf_r+0x240>)
 800a6ee:	429d      	cmp	r5, r3
 800a6f0:	d11b      	bne.n	800a72a <_vfiprintf_r+0x56>
 800a6f2:	6875      	ldr	r5, [r6, #4]
 800a6f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6f6:	07d9      	lsls	r1, r3, #31
 800a6f8:	d405      	bmi.n	800a706 <_vfiprintf_r+0x32>
 800a6fa:	89ab      	ldrh	r3, [r5, #12]
 800a6fc:	059a      	lsls	r2, r3, #22
 800a6fe:	d402      	bmi.n	800a706 <_vfiprintf_r+0x32>
 800a700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a702:	f000 fb93 	bl	800ae2c <__retarget_lock_acquire_recursive>
 800a706:	89ab      	ldrh	r3, [r5, #12]
 800a708:	071b      	lsls	r3, r3, #28
 800a70a:	d501      	bpl.n	800a710 <_vfiprintf_r+0x3c>
 800a70c:	692b      	ldr	r3, [r5, #16]
 800a70e:	b9eb      	cbnz	r3, 800a74c <_vfiprintf_r+0x78>
 800a710:	4629      	mov	r1, r5
 800a712:	4630      	mov	r0, r6
 800a714:	f000 f960 	bl	800a9d8 <__swsetup_r>
 800a718:	b1c0      	cbz	r0, 800a74c <_vfiprintf_r+0x78>
 800a71a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a71c:	07dc      	lsls	r4, r3, #31
 800a71e:	d50e      	bpl.n	800a73e <_vfiprintf_r+0x6a>
 800a720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a724:	b01d      	add	sp, #116	; 0x74
 800a726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a72a:	4b7b      	ldr	r3, [pc, #492]	; (800a918 <_vfiprintf_r+0x244>)
 800a72c:	429d      	cmp	r5, r3
 800a72e:	d101      	bne.n	800a734 <_vfiprintf_r+0x60>
 800a730:	68b5      	ldr	r5, [r6, #8]
 800a732:	e7df      	b.n	800a6f4 <_vfiprintf_r+0x20>
 800a734:	4b79      	ldr	r3, [pc, #484]	; (800a91c <_vfiprintf_r+0x248>)
 800a736:	429d      	cmp	r5, r3
 800a738:	bf08      	it	eq
 800a73a:	68f5      	ldreq	r5, [r6, #12]
 800a73c:	e7da      	b.n	800a6f4 <_vfiprintf_r+0x20>
 800a73e:	89ab      	ldrh	r3, [r5, #12]
 800a740:	0598      	lsls	r0, r3, #22
 800a742:	d4ed      	bmi.n	800a720 <_vfiprintf_r+0x4c>
 800a744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a746:	f000 fb72 	bl	800ae2e <__retarget_lock_release_recursive>
 800a74a:	e7e9      	b.n	800a720 <_vfiprintf_r+0x4c>
 800a74c:	2300      	movs	r3, #0
 800a74e:	9309      	str	r3, [sp, #36]	; 0x24
 800a750:	2320      	movs	r3, #32
 800a752:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a756:	2330      	movs	r3, #48	; 0x30
 800a758:	f04f 0901 	mov.w	r9, #1
 800a75c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a760:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a920 <_vfiprintf_r+0x24c>
 800a764:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a768:	4623      	mov	r3, r4
 800a76a:	469a      	mov	sl, r3
 800a76c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a770:	b10a      	cbz	r2, 800a776 <_vfiprintf_r+0xa2>
 800a772:	2a25      	cmp	r2, #37	; 0x25
 800a774:	d1f9      	bne.n	800a76a <_vfiprintf_r+0x96>
 800a776:	ebba 0b04 	subs.w	fp, sl, r4
 800a77a:	d00b      	beq.n	800a794 <_vfiprintf_r+0xc0>
 800a77c:	465b      	mov	r3, fp
 800a77e:	4622      	mov	r2, r4
 800a780:	4629      	mov	r1, r5
 800a782:	4630      	mov	r0, r6
 800a784:	f7ff ff94 	bl	800a6b0 <__sfputs_r>
 800a788:	3001      	adds	r0, #1
 800a78a:	f000 80aa 	beq.w	800a8e2 <_vfiprintf_r+0x20e>
 800a78e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a790:	445a      	add	r2, fp
 800a792:	9209      	str	r2, [sp, #36]	; 0x24
 800a794:	f89a 3000 	ldrb.w	r3, [sl]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f000 80a2 	beq.w	800a8e2 <_vfiprintf_r+0x20e>
 800a79e:	2300      	movs	r3, #0
 800a7a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7a8:	f10a 0a01 	add.w	sl, sl, #1
 800a7ac:	9304      	str	r3, [sp, #16]
 800a7ae:	9307      	str	r3, [sp, #28]
 800a7b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7b4:	931a      	str	r3, [sp, #104]	; 0x68
 800a7b6:	4654      	mov	r4, sl
 800a7b8:	2205      	movs	r2, #5
 800a7ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7be:	4858      	ldr	r0, [pc, #352]	; (800a920 <_vfiprintf_r+0x24c>)
 800a7c0:	f7fe ff84 	bl	80096cc <memchr>
 800a7c4:	9a04      	ldr	r2, [sp, #16]
 800a7c6:	b9d8      	cbnz	r0, 800a800 <_vfiprintf_r+0x12c>
 800a7c8:	06d1      	lsls	r1, r2, #27
 800a7ca:	bf44      	itt	mi
 800a7cc:	2320      	movmi	r3, #32
 800a7ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7d2:	0713      	lsls	r3, r2, #28
 800a7d4:	bf44      	itt	mi
 800a7d6:	232b      	movmi	r3, #43	; 0x2b
 800a7d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a7e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a7e2:	d015      	beq.n	800a810 <_vfiprintf_r+0x13c>
 800a7e4:	4654      	mov	r4, sl
 800a7e6:	2000      	movs	r0, #0
 800a7e8:	f04f 0c0a 	mov.w	ip, #10
 800a7ec:	9a07      	ldr	r2, [sp, #28]
 800a7ee:	4621      	mov	r1, r4
 800a7f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7f4:	3b30      	subs	r3, #48	; 0x30
 800a7f6:	2b09      	cmp	r3, #9
 800a7f8:	d94e      	bls.n	800a898 <_vfiprintf_r+0x1c4>
 800a7fa:	b1b0      	cbz	r0, 800a82a <_vfiprintf_r+0x156>
 800a7fc:	9207      	str	r2, [sp, #28]
 800a7fe:	e014      	b.n	800a82a <_vfiprintf_r+0x156>
 800a800:	eba0 0308 	sub.w	r3, r0, r8
 800a804:	fa09 f303 	lsl.w	r3, r9, r3
 800a808:	4313      	orrs	r3, r2
 800a80a:	46a2      	mov	sl, r4
 800a80c:	9304      	str	r3, [sp, #16]
 800a80e:	e7d2      	b.n	800a7b6 <_vfiprintf_r+0xe2>
 800a810:	9b03      	ldr	r3, [sp, #12]
 800a812:	1d19      	adds	r1, r3, #4
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	9103      	str	r1, [sp, #12]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	bfbb      	ittet	lt
 800a81c:	425b      	neglt	r3, r3
 800a81e:	f042 0202 	orrlt.w	r2, r2, #2
 800a822:	9307      	strge	r3, [sp, #28]
 800a824:	9307      	strlt	r3, [sp, #28]
 800a826:	bfb8      	it	lt
 800a828:	9204      	strlt	r2, [sp, #16]
 800a82a:	7823      	ldrb	r3, [r4, #0]
 800a82c:	2b2e      	cmp	r3, #46	; 0x2e
 800a82e:	d10c      	bne.n	800a84a <_vfiprintf_r+0x176>
 800a830:	7863      	ldrb	r3, [r4, #1]
 800a832:	2b2a      	cmp	r3, #42	; 0x2a
 800a834:	d135      	bne.n	800a8a2 <_vfiprintf_r+0x1ce>
 800a836:	9b03      	ldr	r3, [sp, #12]
 800a838:	3402      	adds	r4, #2
 800a83a:	1d1a      	adds	r2, r3, #4
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	9203      	str	r2, [sp, #12]
 800a840:	2b00      	cmp	r3, #0
 800a842:	bfb8      	it	lt
 800a844:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a848:	9305      	str	r3, [sp, #20]
 800a84a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a924 <_vfiprintf_r+0x250>
 800a84e:	2203      	movs	r2, #3
 800a850:	4650      	mov	r0, sl
 800a852:	7821      	ldrb	r1, [r4, #0]
 800a854:	f7fe ff3a 	bl	80096cc <memchr>
 800a858:	b140      	cbz	r0, 800a86c <_vfiprintf_r+0x198>
 800a85a:	2340      	movs	r3, #64	; 0x40
 800a85c:	eba0 000a 	sub.w	r0, r0, sl
 800a860:	fa03 f000 	lsl.w	r0, r3, r0
 800a864:	9b04      	ldr	r3, [sp, #16]
 800a866:	3401      	adds	r4, #1
 800a868:	4303      	orrs	r3, r0
 800a86a:	9304      	str	r3, [sp, #16]
 800a86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a870:	2206      	movs	r2, #6
 800a872:	482d      	ldr	r0, [pc, #180]	; (800a928 <_vfiprintf_r+0x254>)
 800a874:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a878:	f7fe ff28 	bl	80096cc <memchr>
 800a87c:	2800      	cmp	r0, #0
 800a87e:	d03f      	beq.n	800a900 <_vfiprintf_r+0x22c>
 800a880:	4b2a      	ldr	r3, [pc, #168]	; (800a92c <_vfiprintf_r+0x258>)
 800a882:	bb1b      	cbnz	r3, 800a8cc <_vfiprintf_r+0x1f8>
 800a884:	9b03      	ldr	r3, [sp, #12]
 800a886:	3307      	adds	r3, #7
 800a888:	f023 0307 	bic.w	r3, r3, #7
 800a88c:	3308      	adds	r3, #8
 800a88e:	9303      	str	r3, [sp, #12]
 800a890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a892:	443b      	add	r3, r7
 800a894:	9309      	str	r3, [sp, #36]	; 0x24
 800a896:	e767      	b.n	800a768 <_vfiprintf_r+0x94>
 800a898:	460c      	mov	r4, r1
 800a89a:	2001      	movs	r0, #1
 800a89c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8a0:	e7a5      	b.n	800a7ee <_vfiprintf_r+0x11a>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f04f 0c0a 	mov.w	ip, #10
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	3401      	adds	r4, #1
 800a8ac:	9305      	str	r3, [sp, #20]
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8b4:	3a30      	subs	r2, #48	; 0x30
 800a8b6:	2a09      	cmp	r2, #9
 800a8b8:	d903      	bls.n	800a8c2 <_vfiprintf_r+0x1ee>
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d0c5      	beq.n	800a84a <_vfiprintf_r+0x176>
 800a8be:	9105      	str	r1, [sp, #20]
 800a8c0:	e7c3      	b.n	800a84a <_vfiprintf_r+0x176>
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8ca:	e7f0      	b.n	800a8ae <_vfiprintf_r+0x1da>
 800a8cc:	ab03      	add	r3, sp, #12
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	462a      	mov	r2, r5
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	4b16      	ldr	r3, [pc, #88]	; (800a930 <_vfiprintf_r+0x25c>)
 800a8d6:	a904      	add	r1, sp, #16
 800a8d8:	f7fc f878 	bl	80069cc <_printf_float>
 800a8dc:	4607      	mov	r7, r0
 800a8de:	1c78      	adds	r0, r7, #1
 800a8e0:	d1d6      	bne.n	800a890 <_vfiprintf_r+0x1bc>
 800a8e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8e4:	07d9      	lsls	r1, r3, #31
 800a8e6:	d405      	bmi.n	800a8f4 <_vfiprintf_r+0x220>
 800a8e8:	89ab      	ldrh	r3, [r5, #12]
 800a8ea:	059a      	lsls	r2, r3, #22
 800a8ec:	d402      	bmi.n	800a8f4 <_vfiprintf_r+0x220>
 800a8ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8f0:	f000 fa9d 	bl	800ae2e <__retarget_lock_release_recursive>
 800a8f4:	89ab      	ldrh	r3, [r5, #12]
 800a8f6:	065b      	lsls	r3, r3, #25
 800a8f8:	f53f af12 	bmi.w	800a720 <_vfiprintf_r+0x4c>
 800a8fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8fe:	e711      	b.n	800a724 <_vfiprintf_r+0x50>
 800a900:	ab03      	add	r3, sp, #12
 800a902:	9300      	str	r3, [sp, #0]
 800a904:	462a      	mov	r2, r5
 800a906:	4630      	mov	r0, r6
 800a908:	4b09      	ldr	r3, [pc, #36]	; (800a930 <_vfiprintf_r+0x25c>)
 800a90a:	a904      	add	r1, sp, #16
 800a90c:	f7fc fafa 	bl	8006f04 <_printf_i>
 800a910:	e7e4      	b.n	800a8dc <_vfiprintf_r+0x208>
 800a912:	bf00      	nop
 800a914:	0800b5f4 	.word	0x0800b5f4
 800a918:	0800b614 	.word	0x0800b614
 800a91c:	0800b5d4 	.word	0x0800b5d4
 800a920:	0800b584 	.word	0x0800b584
 800a924:	0800b58a 	.word	0x0800b58a
 800a928:	0800b58e 	.word	0x0800b58e
 800a92c:	080069cd 	.word	0x080069cd
 800a930:	0800a6b1 	.word	0x0800a6b1

0800a934 <__swbuf_r>:
 800a934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a936:	460e      	mov	r6, r1
 800a938:	4614      	mov	r4, r2
 800a93a:	4605      	mov	r5, r0
 800a93c:	b118      	cbz	r0, 800a946 <__swbuf_r+0x12>
 800a93e:	6983      	ldr	r3, [r0, #24]
 800a940:	b90b      	cbnz	r3, 800a946 <__swbuf_r+0x12>
 800a942:	f000 f9d5 	bl	800acf0 <__sinit>
 800a946:	4b21      	ldr	r3, [pc, #132]	; (800a9cc <__swbuf_r+0x98>)
 800a948:	429c      	cmp	r4, r3
 800a94a:	d12b      	bne.n	800a9a4 <__swbuf_r+0x70>
 800a94c:	686c      	ldr	r4, [r5, #4]
 800a94e:	69a3      	ldr	r3, [r4, #24]
 800a950:	60a3      	str	r3, [r4, #8]
 800a952:	89a3      	ldrh	r3, [r4, #12]
 800a954:	071a      	lsls	r2, r3, #28
 800a956:	d52f      	bpl.n	800a9b8 <__swbuf_r+0x84>
 800a958:	6923      	ldr	r3, [r4, #16]
 800a95a:	b36b      	cbz	r3, 800a9b8 <__swbuf_r+0x84>
 800a95c:	6923      	ldr	r3, [r4, #16]
 800a95e:	6820      	ldr	r0, [r4, #0]
 800a960:	b2f6      	uxtb	r6, r6
 800a962:	1ac0      	subs	r0, r0, r3
 800a964:	6963      	ldr	r3, [r4, #20]
 800a966:	4637      	mov	r7, r6
 800a968:	4283      	cmp	r3, r0
 800a96a:	dc04      	bgt.n	800a976 <__swbuf_r+0x42>
 800a96c:	4621      	mov	r1, r4
 800a96e:	4628      	mov	r0, r5
 800a970:	f000 f92a 	bl	800abc8 <_fflush_r>
 800a974:	bb30      	cbnz	r0, 800a9c4 <__swbuf_r+0x90>
 800a976:	68a3      	ldr	r3, [r4, #8]
 800a978:	3001      	adds	r0, #1
 800a97a:	3b01      	subs	r3, #1
 800a97c:	60a3      	str	r3, [r4, #8]
 800a97e:	6823      	ldr	r3, [r4, #0]
 800a980:	1c5a      	adds	r2, r3, #1
 800a982:	6022      	str	r2, [r4, #0]
 800a984:	701e      	strb	r6, [r3, #0]
 800a986:	6963      	ldr	r3, [r4, #20]
 800a988:	4283      	cmp	r3, r0
 800a98a:	d004      	beq.n	800a996 <__swbuf_r+0x62>
 800a98c:	89a3      	ldrh	r3, [r4, #12]
 800a98e:	07db      	lsls	r3, r3, #31
 800a990:	d506      	bpl.n	800a9a0 <__swbuf_r+0x6c>
 800a992:	2e0a      	cmp	r6, #10
 800a994:	d104      	bne.n	800a9a0 <__swbuf_r+0x6c>
 800a996:	4621      	mov	r1, r4
 800a998:	4628      	mov	r0, r5
 800a99a:	f000 f915 	bl	800abc8 <_fflush_r>
 800a99e:	b988      	cbnz	r0, 800a9c4 <__swbuf_r+0x90>
 800a9a0:	4638      	mov	r0, r7
 800a9a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9a4:	4b0a      	ldr	r3, [pc, #40]	; (800a9d0 <__swbuf_r+0x9c>)
 800a9a6:	429c      	cmp	r4, r3
 800a9a8:	d101      	bne.n	800a9ae <__swbuf_r+0x7a>
 800a9aa:	68ac      	ldr	r4, [r5, #8]
 800a9ac:	e7cf      	b.n	800a94e <__swbuf_r+0x1a>
 800a9ae:	4b09      	ldr	r3, [pc, #36]	; (800a9d4 <__swbuf_r+0xa0>)
 800a9b0:	429c      	cmp	r4, r3
 800a9b2:	bf08      	it	eq
 800a9b4:	68ec      	ldreq	r4, [r5, #12]
 800a9b6:	e7ca      	b.n	800a94e <__swbuf_r+0x1a>
 800a9b8:	4621      	mov	r1, r4
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	f000 f80c 	bl	800a9d8 <__swsetup_r>
 800a9c0:	2800      	cmp	r0, #0
 800a9c2:	d0cb      	beq.n	800a95c <__swbuf_r+0x28>
 800a9c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a9c8:	e7ea      	b.n	800a9a0 <__swbuf_r+0x6c>
 800a9ca:	bf00      	nop
 800a9cc:	0800b5f4 	.word	0x0800b5f4
 800a9d0:	0800b614 	.word	0x0800b614
 800a9d4:	0800b5d4 	.word	0x0800b5d4

0800a9d8 <__swsetup_r>:
 800a9d8:	4b32      	ldr	r3, [pc, #200]	; (800aaa4 <__swsetup_r+0xcc>)
 800a9da:	b570      	push	{r4, r5, r6, lr}
 800a9dc:	681d      	ldr	r5, [r3, #0]
 800a9de:	4606      	mov	r6, r0
 800a9e0:	460c      	mov	r4, r1
 800a9e2:	b125      	cbz	r5, 800a9ee <__swsetup_r+0x16>
 800a9e4:	69ab      	ldr	r3, [r5, #24]
 800a9e6:	b913      	cbnz	r3, 800a9ee <__swsetup_r+0x16>
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	f000 f981 	bl	800acf0 <__sinit>
 800a9ee:	4b2e      	ldr	r3, [pc, #184]	; (800aaa8 <__swsetup_r+0xd0>)
 800a9f0:	429c      	cmp	r4, r3
 800a9f2:	d10f      	bne.n	800aa14 <__swsetup_r+0x3c>
 800a9f4:	686c      	ldr	r4, [r5, #4]
 800a9f6:	89a3      	ldrh	r3, [r4, #12]
 800a9f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9fc:	0719      	lsls	r1, r3, #28
 800a9fe:	d42c      	bmi.n	800aa5a <__swsetup_r+0x82>
 800aa00:	06dd      	lsls	r5, r3, #27
 800aa02:	d411      	bmi.n	800aa28 <__swsetup_r+0x50>
 800aa04:	2309      	movs	r3, #9
 800aa06:	6033      	str	r3, [r6, #0]
 800aa08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa10:	81a3      	strh	r3, [r4, #12]
 800aa12:	e03e      	b.n	800aa92 <__swsetup_r+0xba>
 800aa14:	4b25      	ldr	r3, [pc, #148]	; (800aaac <__swsetup_r+0xd4>)
 800aa16:	429c      	cmp	r4, r3
 800aa18:	d101      	bne.n	800aa1e <__swsetup_r+0x46>
 800aa1a:	68ac      	ldr	r4, [r5, #8]
 800aa1c:	e7eb      	b.n	800a9f6 <__swsetup_r+0x1e>
 800aa1e:	4b24      	ldr	r3, [pc, #144]	; (800aab0 <__swsetup_r+0xd8>)
 800aa20:	429c      	cmp	r4, r3
 800aa22:	bf08      	it	eq
 800aa24:	68ec      	ldreq	r4, [r5, #12]
 800aa26:	e7e6      	b.n	800a9f6 <__swsetup_r+0x1e>
 800aa28:	0758      	lsls	r0, r3, #29
 800aa2a:	d512      	bpl.n	800aa52 <__swsetup_r+0x7a>
 800aa2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa2e:	b141      	cbz	r1, 800aa42 <__swsetup_r+0x6a>
 800aa30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa34:	4299      	cmp	r1, r3
 800aa36:	d002      	beq.n	800aa3e <__swsetup_r+0x66>
 800aa38:	4630      	mov	r0, r6
 800aa3a:	f7ff fb2f 	bl	800a09c <_free_r>
 800aa3e:	2300      	movs	r3, #0
 800aa40:	6363      	str	r3, [r4, #52]	; 0x34
 800aa42:	89a3      	ldrh	r3, [r4, #12]
 800aa44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa48:	81a3      	strh	r3, [r4, #12]
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	6063      	str	r3, [r4, #4]
 800aa4e:	6923      	ldr	r3, [r4, #16]
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	89a3      	ldrh	r3, [r4, #12]
 800aa54:	f043 0308 	orr.w	r3, r3, #8
 800aa58:	81a3      	strh	r3, [r4, #12]
 800aa5a:	6923      	ldr	r3, [r4, #16]
 800aa5c:	b94b      	cbnz	r3, 800aa72 <__swsetup_r+0x9a>
 800aa5e:	89a3      	ldrh	r3, [r4, #12]
 800aa60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa68:	d003      	beq.n	800aa72 <__swsetup_r+0x9a>
 800aa6a:	4621      	mov	r1, r4
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	f000 fa05 	bl	800ae7c <__smakebuf_r>
 800aa72:	89a0      	ldrh	r0, [r4, #12]
 800aa74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa78:	f010 0301 	ands.w	r3, r0, #1
 800aa7c:	d00a      	beq.n	800aa94 <__swsetup_r+0xbc>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	60a3      	str	r3, [r4, #8]
 800aa82:	6963      	ldr	r3, [r4, #20]
 800aa84:	425b      	negs	r3, r3
 800aa86:	61a3      	str	r3, [r4, #24]
 800aa88:	6923      	ldr	r3, [r4, #16]
 800aa8a:	b943      	cbnz	r3, 800aa9e <__swsetup_r+0xc6>
 800aa8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa90:	d1ba      	bne.n	800aa08 <__swsetup_r+0x30>
 800aa92:	bd70      	pop	{r4, r5, r6, pc}
 800aa94:	0781      	lsls	r1, r0, #30
 800aa96:	bf58      	it	pl
 800aa98:	6963      	ldrpl	r3, [r4, #20]
 800aa9a:	60a3      	str	r3, [r4, #8]
 800aa9c:	e7f4      	b.n	800aa88 <__swsetup_r+0xb0>
 800aa9e:	2000      	movs	r0, #0
 800aaa0:	e7f7      	b.n	800aa92 <__swsetup_r+0xba>
 800aaa2:	bf00      	nop
 800aaa4:	2000000c 	.word	0x2000000c
 800aaa8:	0800b5f4 	.word	0x0800b5f4
 800aaac:	0800b614 	.word	0x0800b614
 800aab0:	0800b5d4 	.word	0x0800b5d4

0800aab4 <abort>:
 800aab4:	2006      	movs	r0, #6
 800aab6:	b508      	push	{r3, lr}
 800aab8:	f000 fa50 	bl	800af5c <raise>
 800aabc:	2001      	movs	r0, #1
 800aabe:	f7f7 faa6 	bl	800200e <_exit>
	...

0800aac4 <__sflush_r>:
 800aac4:	898a      	ldrh	r2, [r1, #12]
 800aac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac8:	4605      	mov	r5, r0
 800aaca:	0710      	lsls	r0, r2, #28
 800aacc:	460c      	mov	r4, r1
 800aace:	d457      	bmi.n	800ab80 <__sflush_r+0xbc>
 800aad0:	684b      	ldr	r3, [r1, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	dc04      	bgt.n	800aae0 <__sflush_r+0x1c>
 800aad6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aad8:	2b00      	cmp	r3, #0
 800aada:	dc01      	bgt.n	800aae0 <__sflush_r+0x1c>
 800aadc:	2000      	movs	r0, #0
 800aade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aae0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aae2:	2e00      	cmp	r6, #0
 800aae4:	d0fa      	beq.n	800aadc <__sflush_r+0x18>
 800aae6:	2300      	movs	r3, #0
 800aae8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aaec:	682f      	ldr	r7, [r5, #0]
 800aaee:	602b      	str	r3, [r5, #0]
 800aaf0:	d032      	beq.n	800ab58 <__sflush_r+0x94>
 800aaf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aaf4:	89a3      	ldrh	r3, [r4, #12]
 800aaf6:	075a      	lsls	r2, r3, #29
 800aaf8:	d505      	bpl.n	800ab06 <__sflush_r+0x42>
 800aafa:	6863      	ldr	r3, [r4, #4]
 800aafc:	1ac0      	subs	r0, r0, r3
 800aafe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab00:	b10b      	cbz	r3, 800ab06 <__sflush_r+0x42>
 800ab02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab04:	1ac0      	subs	r0, r0, r3
 800ab06:	2300      	movs	r3, #0
 800ab08:	4602      	mov	r2, r0
 800ab0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	6a21      	ldr	r1, [r4, #32]
 800ab10:	47b0      	blx	r6
 800ab12:	1c43      	adds	r3, r0, #1
 800ab14:	89a3      	ldrh	r3, [r4, #12]
 800ab16:	d106      	bne.n	800ab26 <__sflush_r+0x62>
 800ab18:	6829      	ldr	r1, [r5, #0]
 800ab1a:	291d      	cmp	r1, #29
 800ab1c:	d82c      	bhi.n	800ab78 <__sflush_r+0xb4>
 800ab1e:	4a29      	ldr	r2, [pc, #164]	; (800abc4 <__sflush_r+0x100>)
 800ab20:	40ca      	lsrs	r2, r1
 800ab22:	07d6      	lsls	r6, r2, #31
 800ab24:	d528      	bpl.n	800ab78 <__sflush_r+0xb4>
 800ab26:	2200      	movs	r2, #0
 800ab28:	6062      	str	r2, [r4, #4]
 800ab2a:	6922      	ldr	r2, [r4, #16]
 800ab2c:	04d9      	lsls	r1, r3, #19
 800ab2e:	6022      	str	r2, [r4, #0]
 800ab30:	d504      	bpl.n	800ab3c <__sflush_r+0x78>
 800ab32:	1c42      	adds	r2, r0, #1
 800ab34:	d101      	bne.n	800ab3a <__sflush_r+0x76>
 800ab36:	682b      	ldr	r3, [r5, #0]
 800ab38:	b903      	cbnz	r3, 800ab3c <__sflush_r+0x78>
 800ab3a:	6560      	str	r0, [r4, #84]	; 0x54
 800ab3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab3e:	602f      	str	r7, [r5, #0]
 800ab40:	2900      	cmp	r1, #0
 800ab42:	d0cb      	beq.n	800aadc <__sflush_r+0x18>
 800ab44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab48:	4299      	cmp	r1, r3
 800ab4a:	d002      	beq.n	800ab52 <__sflush_r+0x8e>
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	f7ff faa5 	bl	800a09c <_free_r>
 800ab52:	2000      	movs	r0, #0
 800ab54:	6360      	str	r0, [r4, #52]	; 0x34
 800ab56:	e7c2      	b.n	800aade <__sflush_r+0x1a>
 800ab58:	6a21      	ldr	r1, [r4, #32]
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	47b0      	blx	r6
 800ab60:	1c41      	adds	r1, r0, #1
 800ab62:	d1c7      	bne.n	800aaf4 <__sflush_r+0x30>
 800ab64:	682b      	ldr	r3, [r5, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d0c4      	beq.n	800aaf4 <__sflush_r+0x30>
 800ab6a:	2b1d      	cmp	r3, #29
 800ab6c:	d001      	beq.n	800ab72 <__sflush_r+0xae>
 800ab6e:	2b16      	cmp	r3, #22
 800ab70:	d101      	bne.n	800ab76 <__sflush_r+0xb2>
 800ab72:	602f      	str	r7, [r5, #0]
 800ab74:	e7b2      	b.n	800aadc <__sflush_r+0x18>
 800ab76:	89a3      	ldrh	r3, [r4, #12]
 800ab78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab7c:	81a3      	strh	r3, [r4, #12]
 800ab7e:	e7ae      	b.n	800aade <__sflush_r+0x1a>
 800ab80:	690f      	ldr	r7, [r1, #16]
 800ab82:	2f00      	cmp	r7, #0
 800ab84:	d0aa      	beq.n	800aadc <__sflush_r+0x18>
 800ab86:	0793      	lsls	r3, r2, #30
 800ab88:	bf18      	it	ne
 800ab8a:	2300      	movne	r3, #0
 800ab8c:	680e      	ldr	r6, [r1, #0]
 800ab8e:	bf08      	it	eq
 800ab90:	694b      	ldreq	r3, [r1, #20]
 800ab92:	1bf6      	subs	r6, r6, r7
 800ab94:	600f      	str	r7, [r1, #0]
 800ab96:	608b      	str	r3, [r1, #8]
 800ab98:	2e00      	cmp	r6, #0
 800ab9a:	dd9f      	ble.n	800aadc <__sflush_r+0x18>
 800ab9c:	4633      	mov	r3, r6
 800ab9e:	463a      	mov	r2, r7
 800aba0:	4628      	mov	r0, r5
 800aba2:	6a21      	ldr	r1, [r4, #32]
 800aba4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800aba8:	47e0      	blx	ip
 800abaa:	2800      	cmp	r0, #0
 800abac:	dc06      	bgt.n	800abbc <__sflush_r+0xf8>
 800abae:	89a3      	ldrh	r3, [r4, #12]
 800abb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abb8:	81a3      	strh	r3, [r4, #12]
 800abba:	e790      	b.n	800aade <__sflush_r+0x1a>
 800abbc:	4407      	add	r7, r0
 800abbe:	1a36      	subs	r6, r6, r0
 800abc0:	e7ea      	b.n	800ab98 <__sflush_r+0xd4>
 800abc2:	bf00      	nop
 800abc4:	20400001 	.word	0x20400001

0800abc8 <_fflush_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	690b      	ldr	r3, [r1, #16]
 800abcc:	4605      	mov	r5, r0
 800abce:	460c      	mov	r4, r1
 800abd0:	b913      	cbnz	r3, 800abd8 <_fflush_r+0x10>
 800abd2:	2500      	movs	r5, #0
 800abd4:	4628      	mov	r0, r5
 800abd6:	bd38      	pop	{r3, r4, r5, pc}
 800abd8:	b118      	cbz	r0, 800abe2 <_fflush_r+0x1a>
 800abda:	6983      	ldr	r3, [r0, #24]
 800abdc:	b90b      	cbnz	r3, 800abe2 <_fflush_r+0x1a>
 800abde:	f000 f887 	bl	800acf0 <__sinit>
 800abe2:	4b14      	ldr	r3, [pc, #80]	; (800ac34 <_fflush_r+0x6c>)
 800abe4:	429c      	cmp	r4, r3
 800abe6:	d11b      	bne.n	800ac20 <_fflush_r+0x58>
 800abe8:	686c      	ldr	r4, [r5, #4]
 800abea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d0ef      	beq.n	800abd2 <_fflush_r+0xa>
 800abf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abf4:	07d0      	lsls	r0, r2, #31
 800abf6:	d404      	bmi.n	800ac02 <_fflush_r+0x3a>
 800abf8:	0599      	lsls	r1, r3, #22
 800abfa:	d402      	bmi.n	800ac02 <_fflush_r+0x3a>
 800abfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abfe:	f000 f915 	bl	800ae2c <__retarget_lock_acquire_recursive>
 800ac02:	4628      	mov	r0, r5
 800ac04:	4621      	mov	r1, r4
 800ac06:	f7ff ff5d 	bl	800aac4 <__sflush_r>
 800ac0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac0c:	4605      	mov	r5, r0
 800ac0e:	07da      	lsls	r2, r3, #31
 800ac10:	d4e0      	bmi.n	800abd4 <_fflush_r+0xc>
 800ac12:	89a3      	ldrh	r3, [r4, #12]
 800ac14:	059b      	lsls	r3, r3, #22
 800ac16:	d4dd      	bmi.n	800abd4 <_fflush_r+0xc>
 800ac18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac1a:	f000 f908 	bl	800ae2e <__retarget_lock_release_recursive>
 800ac1e:	e7d9      	b.n	800abd4 <_fflush_r+0xc>
 800ac20:	4b05      	ldr	r3, [pc, #20]	; (800ac38 <_fflush_r+0x70>)
 800ac22:	429c      	cmp	r4, r3
 800ac24:	d101      	bne.n	800ac2a <_fflush_r+0x62>
 800ac26:	68ac      	ldr	r4, [r5, #8]
 800ac28:	e7df      	b.n	800abea <_fflush_r+0x22>
 800ac2a:	4b04      	ldr	r3, [pc, #16]	; (800ac3c <_fflush_r+0x74>)
 800ac2c:	429c      	cmp	r4, r3
 800ac2e:	bf08      	it	eq
 800ac30:	68ec      	ldreq	r4, [r5, #12]
 800ac32:	e7da      	b.n	800abea <_fflush_r+0x22>
 800ac34:	0800b5f4 	.word	0x0800b5f4
 800ac38:	0800b614 	.word	0x0800b614
 800ac3c:	0800b5d4 	.word	0x0800b5d4

0800ac40 <std>:
 800ac40:	2300      	movs	r3, #0
 800ac42:	b510      	push	{r4, lr}
 800ac44:	4604      	mov	r4, r0
 800ac46:	e9c0 3300 	strd	r3, r3, [r0]
 800ac4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac4e:	6083      	str	r3, [r0, #8]
 800ac50:	8181      	strh	r1, [r0, #12]
 800ac52:	6643      	str	r3, [r0, #100]	; 0x64
 800ac54:	81c2      	strh	r2, [r0, #14]
 800ac56:	6183      	str	r3, [r0, #24]
 800ac58:	4619      	mov	r1, r3
 800ac5a:	2208      	movs	r2, #8
 800ac5c:	305c      	adds	r0, #92	; 0x5c
 800ac5e:	f7fb fe0f 	bl	8006880 <memset>
 800ac62:	4b05      	ldr	r3, [pc, #20]	; (800ac78 <std+0x38>)
 800ac64:	6224      	str	r4, [r4, #32]
 800ac66:	6263      	str	r3, [r4, #36]	; 0x24
 800ac68:	4b04      	ldr	r3, [pc, #16]	; (800ac7c <std+0x3c>)
 800ac6a:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac6c:	4b04      	ldr	r3, [pc, #16]	; (800ac80 <std+0x40>)
 800ac6e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac70:	4b04      	ldr	r3, [pc, #16]	; (800ac84 <std+0x44>)
 800ac72:	6323      	str	r3, [r4, #48]	; 0x30
 800ac74:	bd10      	pop	{r4, pc}
 800ac76:	bf00      	nop
 800ac78:	0800af95 	.word	0x0800af95
 800ac7c:	0800afb7 	.word	0x0800afb7
 800ac80:	0800afef 	.word	0x0800afef
 800ac84:	0800b013 	.word	0x0800b013

0800ac88 <_cleanup_r>:
 800ac88:	4901      	ldr	r1, [pc, #4]	; (800ac90 <_cleanup_r+0x8>)
 800ac8a:	f000 b8af 	b.w	800adec <_fwalk_reent>
 800ac8e:	bf00      	nop
 800ac90:	0800abc9 	.word	0x0800abc9

0800ac94 <__sfmoreglue>:
 800ac94:	2268      	movs	r2, #104	; 0x68
 800ac96:	b570      	push	{r4, r5, r6, lr}
 800ac98:	1e4d      	subs	r5, r1, #1
 800ac9a:	4355      	muls	r5, r2
 800ac9c:	460e      	mov	r6, r1
 800ac9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aca2:	f7ff fa63 	bl	800a16c <_malloc_r>
 800aca6:	4604      	mov	r4, r0
 800aca8:	b140      	cbz	r0, 800acbc <__sfmoreglue+0x28>
 800acaa:	2100      	movs	r1, #0
 800acac:	e9c0 1600 	strd	r1, r6, [r0]
 800acb0:	300c      	adds	r0, #12
 800acb2:	60a0      	str	r0, [r4, #8]
 800acb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800acb8:	f7fb fde2 	bl	8006880 <memset>
 800acbc:	4620      	mov	r0, r4
 800acbe:	bd70      	pop	{r4, r5, r6, pc}

0800acc0 <__sfp_lock_acquire>:
 800acc0:	4801      	ldr	r0, [pc, #4]	; (800acc8 <__sfp_lock_acquire+0x8>)
 800acc2:	f000 b8b3 	b.w	800ae2c <__retarget_lock_acquire_recursive>
 800acc6:	bf00      	nop
 800acc8:	20000391 	.word	0x20000391

0800accc <__sfp_lock_release>:
 800accc:	4801      	ldr	r0, [pc, #4]	; (800acd4 <__sfp_lock_release+0x8>)
 800acce:	f000 b8ae 	b.w	800ae2e <__retarget_lock_release_recursive>
 800acd2:	bf00      	nop
 800acd4:	20000391 	.word	0x20000391

0800acd8 <__sinit_lock_acquire>:
 800acd8:	4801      	ldr	r0, [pc, #4]	; (800ace0 <__sinit_lock_acquire+0x8>)
 800acda:	f000 b8a7 	b.w	800ae2c <__retarget_lock_acquire_recursive>
 800acde:	bf00      	nop
 800ace0:	20000392 	.word	0x20000392

0800ace4 <__sinit_lock_release>:
 800ace4:	4801      	ldr	r0, [pc, #4]	; (800acec <__sinit_lock_release+0x8>)
 800ace6:	f000 b8a2 	b.w	800ae2e <__retarget_lock_release_recursive>
 800acea:	bf00      	nop
 800acec:	20000392 	.word	0x20000392

0800acf0 <__sinit>:
 800acf0:	b510      	push	{r4, lr}
 800acf2:	4604      	mov	r4, r0
 800acf4:	f7ff fff0 	bl	800acd8 <__sinit_lock_acquire>
 800acf8:	69a3      	ldr	r3, [r4, #24]
 800acfa:	b11b      	cbz	r3, 800ad04 <__sinit+0x14>
 800acfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad00:	f7ff bff0 	b.w	800ace4 <__sinit_lock_release>
 800ad04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad08:	6523      	str	r3, [r4, #80]	; 0x50
 800ad0a:	4b13      	ldr	r3, [pc, #76]	; (800ad58 <__sinit+0x68>)
 800ad0c:	4a13      	ldr	r2, [pc, #76]	; (800ad5c <__sinit+0x6c>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad12:	42a3      	cmp	r3, r4
 800ad14:	bf08      	it	eq
 800ad16:	2301      	moveq	r3, #1
 800ad18:	4620      	mov	r0, r4
 800ad1a:	bf08      	it	eq
 800ad1c:	61a3      	streq	r3, [r4, #24]
 800ad1e:	f000 f81f 	bl	800ad60 <__sfp>
 800ad22:	6060      	str	r0, [r4, #4]
 800ad24:	4620      	mov	r0, r4
 800ad26:	f000 f81b 	bl	800ad60 <__sfp>
 800ad2a:	60a0      	str	r0, [r4, #8]
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	f000 f817 	bl	800ad60 <__sfp>
 800ad32:	2200      	movs	r2, #0
 800ad34:	2104      	movs	r1, #4
 800ad36:	60e0      	str	r0, [r4, #12]
 800ad38:	6860      	ldr	r0, [r4, #4]
 800ad3a:	f7ff ff81 	bl	800ac40 <std>
 800ad3e:	2201      	movs	r2, #1
 800ad40:	2109      	movs	r1, #9
 800ad42:	68a0      	ldr	r0, [r4, #8]
 800ad44:	f7ff ff7c 	bl	800ac40 <std>
 800ad48:	2202      	movs	r2, #2
 800ad4a:	2112      	movs	r1, #18
 800ad4c:	68e0      	ldr	r0, [r4, #12]
 800ad4e:	f7ff ff77 	bl	800ac40 <std>
 800ad52:	2301      	movs	r3, #1
 800ad54:	61a3      	str	r3, [r4, #24]
 800ad56:	e7d1      	b.n	800acfc <__sinit+0xc>
 800ad58:	0800b18c 	.word	0x0800b18c
 800ad5c:	0800ac89 	.word	0x0800ac89

0800ad60 <__sfp>:
 800ad60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad62:	4607      	mov	r7, r0
 800ad64:	f7ff ffac 	bl	800acc0 <__sfp_lock_acquire>
 800ad68:	4b1e      	ldr	r3, [pc, #120]	; (800ade4 <__sfp+0x84>)
 800ad6a:	681e      	ldr	r6, [r3, #0]
 800ad6c:	69b3      	ldr	r3, [r6, #24]
 800ad6e:	b913      	cbnz	r3, 800ad76 <__sfp+0x16>
 800ad70:	4630      	mov	r0, r6
 800ad72:	f7ff ffbd 	bl	800acf0 <__sinit>
 800ad76:	3648      	adds	r6, #72	; 0x48
 800ad78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	d503      	bpl.n	800ad88 <__sfp+0x28>
 800ad80:	6833      	ldr	r3, [r6, #0]
 800ad82:	b30b      	cbz	r3, 800adc8 <__sfp+0x68>
 800ad84:	6836      	ldr	r6, [r6, #0]
 800ad86:	e7f7      	b.n	800ad78 <__sfp+0x18>
 800ad88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad8c:	b9d5      	cbnz	r5, 800adc4 <__sfp+0x64>
 800ad8e:	4b16      	ldr	r3, [pc, #88]	; (800ade8 <__sfp+0x88>)
 800ad90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad94:	60e3      	str	r3, [r4, #12]
 800ad96:	6665      	str	r5, [r4, #100]	; 0x64
 800ad98:	f000 f847 	bl	800ae2a <__retarget_lock_init_recursive>
 800ad9c:	f7ff ff96 	bl	800accc <__sfp_lock_release>
 800ada0:	2208      	movs	r2, #8
 800ada2:	4629      	mov	r1, r5
 800ada4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ada8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800adac:	6025      	str	r5, [r4, #0]
 800adae:	61a5      	str	r5, [r4, #24]
 800adb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800adb4:	f7fb fd64 	bl	8006880 <memset>
 800adb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800adbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800adc0:	4620      	mov	r0, r4
 800adc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adc4:	3468      	adds	r4, #104	; 0x68
 800adc6:	e7d9      	b.n	800ad7c <__sfp+0x1c>
 800adc8:	2104      	movs	r1, #4
 800adca:	4638      	mov	r0, r7
 800adcc:	f7ff ff62 	bl	800ac94 <__sfmoreglue>
 800add0:	4604      	mov	r4, r0
 800add2:	6030      	str	r0, [r6, #0]
 800add4:	2800      	cmp	r0, #0
 800add6:	d1d5      	bne.n	800ad84 <__sfp+0x24>
 800add8:	f7ff ff78 	bl	800accc <__sfp_lock_release>
 800addc:	230c      	movs	r3, #12
 800adde:	603b      	str	r3, [r7, #0]
 800ade0:	e7ee      	b.n	800adc0 <__sfp+0x60>
 800ade2:	bf00      	nop
 800ade4:	0800b18c 	.word	0x0800b18c
 800ade8:	ffff0001 	.word	0xffff0001

0800adec <_fwalk_reent>:
 800adec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adf0:	4606      	mov	r6, r0
 800adf2:	4688      	mov	r8, r1
 800adf4:	2700      	movs	r7, #0
 800adf6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800adfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adfe:	f1b9 0901 	subs.w	r9, r9, #1
 800ae02:	d505      	bpl.n	800ae10 <_fwalk_reent+0x24>
 800ae04:	6824      	ldr	r4, [r4, #0]
 800ae06:	2c00      	cmp	r4, #0
 800ae08:	d1f7      	bne.n	800adfa <_fwalk_reent+0xe>
 800ae0a:	4638      	mov	r0, r7
 800ae0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae10:	89ab      	ldrh	r3, [r5, #12]
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d907      	bls.n	800ae26 <_fwalk_reent+0x3a>
 800ae16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	d003      	beq.n	800ae26 <_fwalk_reent+0x3a>
 800ae1e:	4629      	mov	r1, r5
 800ae20:	4630      	mov	r0, r6
 800ae22:	47c0      	blx	r8
 800ae24:	4307      	orrs	r7, r0
 800ae26:	3568      	adds	r5, #104	; 0x68
 800ae28:	e7e9      	b.n	800adfe <_fwalk_reent+0x12>

0800ae2a <__retarget_lock_init_recursive>:
 800ae2a:	4770      	bx	lr

0800ae2c <__retarget_lock_acquire_recursive>:
 800ae2c:	4770      	bx	lr

0800ae2e <__retarget_lock_release_recursive>:
 800ae2e:	4770      	bx	lr

0800ae30 <__swhatbuf_r>:
 800ae30:	b570      	push	{r4, r5, r6, lr}
 800ae32:	460e      	mov	r6, r1
 800ae34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae38:	4614      	mov	r4, r2
 800ae3a:	2900      	cmp	r1, #0
 800ae3c:	461d      	mov	r5, r3
 800ae3e:	b096      	sub	sp, #88	; 0x58
 800ae40:	da08      	bge.n	800ae54 <__swhatbuf_r+0x24>
 800ae42:	2200      	movs	r2, #0
 800ae44:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ae48:	602a      	str	r2, [r5, #0]
 800ae4a:	061a      	lsls	r2, r3, #24
 800ae4c:	d410      	bmi.n	800ae70 <__swhatbuf_r+0x40>
 800ae4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae52:	e00e      	b.n	800ae72 <__swhatbuf_r+0x42>
 800ae54:	466a      	mov	r2, sp
 800ae56:	f000 f903 	bl	800b060 <_fstat_r>
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	dbf1      	blt.n	800ae42 <__swhatbuf_r+0x12>
 800ae5e:	9a01      	ldr	r2, [sp, #4]
 800ae60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae68:	425a      	negs	r2, r3
 800ae6a:	415a      	adcs	r2, r3
 800ae6c:	602a      	str	r2, [r5, #0]
 800ae6e:	e7ee      	b.n	800ae4e <__swhatbuf_r+0x1e>
 800ae70:	2340      	movs	r3, #64	; 0x40
 800ae72:	2000      	movs	r0, #0
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	b016      	add	sp, #88	; 0x58
 800ae78:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae7c <__smakebuf_r>:
 800ae7c:	898b      	ldrh	r3, [r1, #12]
 800ae7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae80:	079d      	lsls	r5, r3, #30
 800ae82:	4606      	mov	r6, r0
 800ae84:	460c      	mov	r4, r1
 800ae86:	d507      	bpl.n	800ae98 <__smakebuf_r+0x1c>
 800ae88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae8c:	6023      	str	r3, [r4, #0]
 800ae8e:	6123      	str	r3, [r4, #16]
 800ae90:	2301      	movs	r3, #1
 800ae92:	6163      	str	r3, [r4, #20]
 800ae94:	b002      	add	sp, #8
 800ae96:	bd70      	pop	{r4, r5, r6, pc}
 800ae98:	466a      	mov	r2, sp
 800ae9a:	ab01      	add	r3, sp, #4
 800ae9c:	f7ff ffc8 	bl	800ae30 <__swhatbuf_r>
 800aea0:	9900      	ldr	r1, [sp, #0]
 800aea2:	4605      	mov	r5, r0
 800aea4:	4630      	mov	r0, r6
 800aea6:	f7ff f961 	bl	800a16c <_malloc_r>
 800aeaa:	b948      	cbnz	r0, 800aec0 <__smakebuf_r+0x44>
 800aeac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeb0:	059a      	lsls	r2, r3, #22
 800aeb2:	d4ef      	bmi.n	800ae94 <__smakebuf_r+0x18>
 800aeb4:	f023 0303 	bic.w	r3, r3, #3
 800aeb8:	f043 0302 	orr.w	r3, r3, #2
 800aebc:	81a3      	strh	r3, [r4, #12]
 800aebe:	e7e3      	b.n	800ae88 <__smakebuf_r+0xc>
 800aec0:	4b0d      	ldr	r3, [pc, #52]	; (800aef8 <__smakebuf_r+0x7c>)
 800aec2:	62b3      	str	r3, [r6, #40]	; 0x28
 800aec4:	89a3      	ldrh	r3, [r4, #12]
 800aec6:	6020      	str	r0, [r4, #0]
 800aec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aecc:	81a3      	strh	r3, [r4, #12]
 800aece:	9b00      	ldr	r3, [sp, #0]
 800aed0:	6120      	str	r0, [r4, #16]
 800aed2:	6163      	str	r3, [r4, #20]
 800aed4:	9b01      	ldr	r3, [sp, #4]
 800aed6:	b15b      	cbz	r3, 800aef0 <__smakebuf_r+0x74>
 800aed8:	4630      	mov	r0, r6
 800aeda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aede:	f000 f8d1 	bl	800b084 <_isatty_r>
 800aee2:	b128      	cbz	r0, 800aef0 <__smakebuf_r+0x74>
 800aee4:	89a3      	ldrh	r3, [r4, #12]
 800aee6:	f023 0303 	bic.w	r3, r3, #3
 800aeea:	f043 0301 	orr.w	r3, r3, #1
 800aeee:	81a3      	strh	r3, [r4, #12]
 800aef0:	89a0      	ldrh	r0, [r4, #12]
 800aef2:	4305      	orrs	r5, r0
 800aef4:	81a5      	strh	r5, [r4, #12]
 800aef6:	e7cd      	b.n	800ae94 <__smakebuf_r+0x18>
 800aef8:	0800ac89 	.word	0x0800ac89

0800aefc <_malloc_usable_size_r>:
 800aefc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af00:	1f18      	subs	r0, r3, #4
 800af02:	2b00      	cmp	r3, #0
 800af04:	bfbc      	itt	lt
 800af06:	580b      	ldrlt	r3, [r1, r0]
 800af08:	18c0      	addlt	r0, r0, r3
 800af0a:	4770      	bx	lr

0800af0c <_raise_r>:
 800af0c:	291f      	cmp	r1, #31
 800af0e:	b538      	push	{r3, r4, r5, lr}
 800af10:	4604      	mov	r4, r0
 800af12:	460d      	mov	r5, r1
 800af14:	d904      	bls.n	800af20 <_raise_r+0x14>
 800af16:	2316      	movs	r3, #22
 800af18:	6003      	str	r3, [r0, #0]
 800af1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af1e:	bd38      	pop	{r3, r4, r5, pc}
 800af20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af22:	b112      	cbz	r2, 800af2a <_raise_r+0x1e>
 800af24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af28:	b94b      	cbnz	r3, 800af3e <_raise_r+0x32>
 800af2a:	4620      	mov	r0, r4
 800af2c:	f000 f830 	bl	800af90 <_getpid_r>
 800af30:	462a      	mov	r2, r5
 800af32:	4601      	mov	r1, r0
 800af34:	4620      	mov	r0, r4
 800af36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af3a:	f000 b817 	b.w	800af6c <_kill_r>
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d00a      	beq.n	800af58 <_raise_r+0x4c>
 800af42:	1c59      	adds	r1, r3, #1
 800af44:	d103      	bne.n	800af4e <_raise_r+0x42>
 800af46:	2316      	movs	r3, #22
 800af48:	6003      	str	r3, [r0, #0]
 800af4a:	2001      	movs	r0, #1
 800af4c:	e7e7      	b.n	800af1e <_raise_r+0x12>
 800af4e:	2400      	movs	r4, #0
 800af50:	4628      	mov	r0, r5
 800af52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af56:	4798      	blx	r3
 800af58:	2000      	movs	r0, #0
 800af5a:	e7e0      	b.n	800af1e <_raise_r+0x12>

0800af5c <raise>:
 800af5c:	4b02      	ldr	r3, [pc, #8]	; (800af68 <raise+0xc>)
 800af5e:	4601      	mov	r1, r0
 800af60:	6818      	ldr	r0, [r3, #0]
 800af62:	f7ff bfd3 	b.w	800af0c <_raise_r>
 800af66:	bf00      	nop
 800af68:	2000000c 	.word	0x2000000c

0800af6c <_kill_r>:
 800af6c:	b538      	push	{r3, r4, r5, lr}
 800af6e:	2300      	movs	r3, #0
 800af70:	4d06      	ldr	r5, [pc, #24]	; (800af8c <_kill_r+0x20>)
 800af72:	4604      	mov	r4, r0
 800af74:	4608      	mov	r0, r1
 800af76:	4611      	mov	r1, r2
 800af78:	602b      	str	r3, [r5, #0]
 800af7a:	f7f7 f838 	bl	8001fee <_kill>
 800af7e:	1c43      	adds	r3, r0, #1
 800af80:	d102      	bne.n	800af88 <_kill_r+0x1c>
 800af82:	682b      	ldr	r3, [r5, #0]
 800af84:	b103      	cbz	r3, 800af88 <_kill_r+0x1c>
 800af86:	6023      	str	r3, [r4, #0]
 800af88:	bd38      	pop	{r3, r4, r5, pc}
 800af8a:	bf00      	nop
 800af8c:	2000038c 	.word	0x2000038c

0800af90 <_getpid_r>:
 800af90:	f7f7 b826 	b.w	8001fe0 <_getpid>

0800af94 <__sread>:
 800af94:	b510      	push	{r4, lr}
 800af96:	460c      	mov	r4, r1
 800af98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af9c:	f000 f894 	bl	800b0c8 <_read_r>
 800afa0:	2800      	cmp	r0, #0
 800afa2:	bfab      	itete	ge
 800afa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800afa6:	89a3      	ldrhlt	r3, [r4, #12]
 800afa8:	181b      	addge	r3, r3, r0
 800afaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800afae:	bfac      	ite	ge
 800afb0:	6563      	strge	r3, [r4, #84]	; 0x54
 800afb2:	81a3      	strhlt	r3, [r4, #12]
 800afb4:	bd10      	pop	{r4, pc}

0800afb6 <__swrite>:
 800afb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afba:	461f      	mov	r7, r3
 800afbc:	898b      	ldrh	r3, [r1, #12]
 800afbe:	4605      	mov	r5, r0
 800afc0:	05db      	lsls	r3, r3, #23
 800afc2:	460c      	mov	r4, r1
 800afc4:	4616      	mov	r6, r2
 800afc6:	d505      	bpl.n	800afd4 <__swrite+0x1e>
 800afc8:	2302      	movs	r3, #2
 800afca:	2200      	movs	r2, #0
 800afcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afd0:	f000 f868 	bl	800b0a4 <_lseek_r>
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	4632      	mov	r2, r6
 800afd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afdc:	81a3      	strh	r3, [r4, #12]
 800afde:	4628      	mov	r0, r5
 800afe0:	463b      	mov	r3, r7
 800afe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afea:	f000 b817 	b.w	800b01c <_write_r>

0800afee <__sseek>:
 800afee:	b510      	push	{r4, lr}
 800aff0:	460c      	mov	r4, r1
 800aff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aff6:	f000 f855 	bl	800b0a4 <_lseek_r>
 800affa:	1c43      	adds	r3, r0, #1
 800affc:	89a3      	ldrh	r3, [r4, #12]
 800affe:	bf15      	itete	ne
 800b000:	6560      	strne	r0, [r4, #84]	; 0x54
 800b002:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b006:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b00a:	81a3      	strheq	r3, [r4, #12]
 800b00c:	bf18      	it	ne
 800b00e:	81a3      	strhne	r3, [r4, #12]
 800b010:	bd10      	pop	{r4, pc}

0800b012 <__sclose>:
 800b012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b016:	f000 b813 	b.w	800b040 <_close_r>
	...

0800b01c <_write_r>:
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	4604      	mov	r4, r0
 800b020:	4608      	mov	r0, r1
 800b022:	4611      	mov	r1, r2
 800b024:	2200      	movs	r2, #0
 800b026:	4d05      	ldr	r5, [pc, #20]	; (800b03c <_write_r+0x20>)
 800b028:	602a      	str	r2, [r5, #0]
 800b02a:	461a      	mov	r2, r3
 800b02c:	f7f7 f816 	bl	800205c <_write>
 800b030:	1c43      	adds	r3, r0, #1
 800b032:	d102      	bne.n	800b03a <_write_r+0x1e>
 800b034:	682b      	ldr	r3, [r5, #0]
 800b036:	b103      	cbz	r3, 800b03a <_write_r+0x1e>
 800b038:	6023      	str	r3, [r4, #0]
 800b03a:	bd38      	pop	{r3, r4, r5, pc}
 800b03c:	2000038c 	.word	0x2000038c

0800b040 <_close_r>:
 800b040:	b538      	push	{r3, r4, r5, lr}
 800b042:	2300      	movs	r3, #0
 800b044:	4d05      	ldr	r5, [pc, #20]	; (800b05c <_close_r+0x1c>)
 800b046:	4604      	mov	r4, r0
 800b048:	4608      	mov	r0, r1
 800b04a:	602b      	str	r3, [r5, #0]
 800b04c:	f7f7 f822 	bl	8002094 <_close>
 800b050:	1c43      	adds	r3, r0, #1
 800b052:	d102      	bne.n	800b05a <_close_r+0x1a>
 800b054:	682b      	ldr	r3, [r5, #0]
 800b056:	b103      	cbz	r3, 800b05a <_close_r+0x1a>
 800b058:	6023      	str	r3, [r4, #0]
 800b05a:	bd38      	pop	{r3, r4, r5, pc}
 800b05c:	2000038c 	.word	0x2000038c

0800b060 <_fstat_r>:
 800b060:	b538      	push	{r3, r4, r5, lr}
 800b062:	2300      	movs	r3, #0
 800b064:	4d06      	ldr	r5, [pc, #24]	; (800b080 <_fstat_r+0x20>)
 800b066:	4604      	mov	r4, r0
 800b068:	4608      	mov	r0, r1
 800b06a:	4611      	mov	r1, r2
 800b06c:	602b      	str	r3, [r5, #0]
 800b06e:	f7f7 f81c 	bl	80020aa <_fstat>
 800b072:	1c43      	adds	r3, r0, #1
 800b074:	d102      	bne.n	800b07c <_fstat_r+0x1c>
 800b076:	682b      	ldr	r3, [r5, #0]
 800b078:	b103      	cbz	r3, 800b07c <_fstat_r+0x1c>
 800b07a:	6023      	str	r3, [r4, #0]
 800b07c:	bd38      	pop	{r3, r4, r5, pc}
 800b07e:	bf00      	nop
 800b080:	2000038c 	.word	0x2000038c

0800b084 <_isatty_r>:
 800b084:	b538      	push	{r3, r4, r5, lr}
 800b086:	2300      	movs	r3, #0
 800b088:	4d05      	ldr	r5, [pc, #20]	; (800b0a0 <_isatty_r+0x1c>)
 800b08a:	4604      	mov	r4, r0
 800b08c:	4608      	mov	r0, r1
 800b08e:	602b      	str	r3, [r5, #0]
 800b090:	f7f7 f81a 	bl	80020c8 <_isatty>
 800b094:	1c43      	adds	r3, r0, #1
 800b096:	d102      	bne.n	800b09e <_isatty_r+0x1a>
 800b098:	682b      	ldr	r3, [r5, #0]
 800b09a:	b103      	cbz	r3, 800b09e <_isatty_r+0x1a>
 800b09c:	6023      	str	r3, [r4, #0]
 800b09e:	bd38      	pop	{r3, r4, r5, pc}
 800b0a0:	2000038c 	.word	0x2000038c

0800b0a4 <_lseek_r>:
 800b0a4:	b538      	push	{r3, r4, r5, lr}
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	4608      	mov	r0, r1
 800b0aa:	4611      	mov	r1, r2
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	4d05      	ldr	r5, [pc, #20]	; (800b0c4 <_lseek_r+0x20>)
 800b0b0:	602a      	str	r2, [r5, #0]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	f7f7 f812 	bl	80020dc <_lseek>
 800b0b8:	1c43      	adds	r3, r0, #1
 800b0ba:	d102      	bne.n	800b0c2 <_lseek_r+0x1e>
 800b0bc:	682b      	ldr	r3, [r5, #0]
 800b0be:	b103      	cbz	r3, 800b0c2 <_lseek_r+0x1e>
 800b0c0:	6023      	str	r3, [r4, #0]
 800b0c2:	bd38      	pop	{r3, r4, r5, pc}
 800b0c4:	2000038c 	.word	0x2000038c

0800b0c8 <_read_r>:
 800b0c8:	b538      	push	{r3, r4, r5, lr}
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	4608      	mov	r0, r1
 800b0ce:	4611      	mov	r1, r2
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	4d05      	ldr	r5, [pc, #20]	; (800b0e8 <_read_r+0x20>)
 800b0d4:	602a      	str	r2, [r5, #0]
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	f7f6 ffa3 	bl	8002022 <_read>
 800b0dc:	1c43      	adds	r3, r0, #1
 800b0de:	d102      	bne.n	800b0e6 <_read_r+0x1e>
 800b0e0:	682b      	ldr	r3, [r5, #0]
 800b0e2:	b103      	cbz	r3, 800b0e6 <_read_r+0x1e>
 800b0e4:	6023      	str	r3, [r4, #0]
 800b0e6:	bd38      	pop	{r3, r4, r5, pc}
 800b0e8:	2000038c 	.word	0x2000038c

0800b0ec <_init>:
 800b0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ee:	bf00      	nop
 800b0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0f2:	bc08      	pop	{r3}
 800b0f4:	469e      	mov	lr, r3
 800b0f6:	4770      	bx	lr

0800b0f8 <_fini>:
 800b0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0fa:	bf00      	nop
 800b0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0fe:	bc08      	pop	{r3}
 800b100:	469e      	mov	lr, r3
 800b102:	4770      	bx	lr
