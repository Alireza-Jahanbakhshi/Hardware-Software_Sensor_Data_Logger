
Sensor_Data_Logger_PRJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0ac  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  0800c298  0800c298  0001c298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c854  0800c854  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c854  0800c854  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c854  0800c854  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c854  0800c854  0001c854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c858  0800c858  0001c858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c85c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  200001e0  0800ca3c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  0800ca3c  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cbe  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003837  00000000  00000000  00033ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  00037700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  00038ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001debc  00000000  00000000  00039ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017465  00000000  00000000  00057d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4c3b  00000000  00000000  0006f1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00113e04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069d4  00000000  00000000  00113e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	0800c27c 	.word	0x0800c27c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	0800c27c 	.word	0x0800c27c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_fmul>:
 8000238:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000240:	bf1e      	ittt	ne
 8000242:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000246:	ea92 0f0c 	teqne	r2, ip
 800024a:	ea93 0f0c 	teqne	r3, ip
 800024e:	d06f      	beq.n	8000330 <__aeabi_fmul+0xf8>
 8000250:	441a      	add	r2, r3
 8000252:	ea80 0c01 	eor.w	ip, r0, r1
 8000256:	0240      	lsls	r0, r0, #9
 8000258:	bf18      	it	ne
 800025a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800025e:	d01e      	beq.n	800029e <__aeabi_fmul+0x66>
 8000260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000264:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000268:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800026c:	fba0 3101 	umull	r3, r1, r0, r1
 8000270:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000274:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000278:	bf3e      	ittt	cc
 800027a:	0049      	lslcc	r1, r1, #1
 800027c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000280:	005b      	lslcc	r3, r3, #1
 8000282:	ea40 0001 	orr.w	r0, r0, r1
 8000286:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800028a:	2afd      	cmp	r2, #253	; 0xfd
 800028c:	d81d      	bhi.n	80002ca <__aeabi_fmul+0x92>
 800028e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000296:	bf08      	it	eq
 8000298:	f020 0001 	biceq.w	r0, r0, #1
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002a6:	bf08      	it	eq
 80002a8:	0249      	lsleq	r1, r1, #9
 80002aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002b2:	3a7f      	subs	r2, #127	; 0x7f
 80002b4:	bfc2      	ittt	gt
 80002b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002be:	4770      	bxgt	lr
 80002c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c4:	f04f 0300 	mov.w	r3, #0
 80002c8:	3a01      	subs	r2, #1
 80002ca:	dc5d      	bgt.n	8000388 <__aeabi_fmul+0x150>
 80002cc:	f112 0f19 	cmn.w	r2, #25
 80002d0:	bfdc      	itt	le
 80002d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002d6:	4770      	bxle	lr
 80002d8:	f1c2 0200 	rsb	r2, r2, #0
 80002dc:	0041      	lsls	r1, r0, #1
 80002de:	fa21 f102 	lsr.w	r1, r1, r2
 80002e2:	f1c2 0220 	rsb	r2, r2, #32
 80002e6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002ea:	ea5f 0031 	movs.w	r0, r1, rrx
 80002ee:	f140 0000 	adc.w	r0, r0, #0
 80002f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002f6:	bf08      	it	eq
 80002f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002fc:	4770      	bx	lr
 80002fe:	f092 0f00 	teq	r2, #0
 8000302:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000306:	bf02      	ittt	eq
 8000308:	0040      	lsleq	r0, r0, #1
 800030a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800030e:	3a01      	subeq	r2, #1
 8000310:	d0f9      	beq.n	8000306 <__aeabi_fmul+0xce>
 8000312:	ea40 000c 	orr.w	r0, r0, ip
 8000316:	f093 0f00 	teq	r3, #0
 800031a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800031e:	bf02      	ittt	eq
 8000320:	0049      	lsleq	r1, r1, #1
 8000322:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000326:	3b01      	subeq	r3, #1
 8000328:	d0f9      	beq.n	800031e <__aeabi_fmul+0xe6>
 800032a:	ea41 010c 	orr.w	r1, r1, ip
 800032e:	e78f      	b.n	8000250 <__aeabi_fmul+0x18>
 8000330:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000334:	ea92 0f0c 	teq	r2, ip
 8000338:	bf18      	it	ne
 800033a:	ea93 0f0c 	teqne	r3, ip
 800033e:	d00a      	beq.n	8000356 <__aeabi_fmul+0x11e>
 8000340:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000344:	bf18      	it	ne
 8000346:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800034a:	d1d8      	bne.n	80002fe <__aeabi_fmul+0xc6>
 800034c:	ea80 0001 	eor.w	r0, r0, r1
 8000350:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f090 0f00 	teq	r0, #0
 800035a:	bf17      	itett	ne
 800035c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000360:	4608      	moveq	r0, r1
 8000362:	f091 0f00 	teqne	r1, #0
 8000366:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800036a:	d014      	beq.n	8000396 <__aeabi_fmul+0x15e>
 800036c:	ea92 0f0c 	teq	r2, ip
 8000370:	d101      	bne.n	8000376 <__aeabi_fmul+0x13e>
 8000372:	0242      	lsls	r2, r0, #9
 8000374:	d10f      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000376:	ea93 0f0c 	teq	r3, ip
 800037a:	d103      	bne.n	8000384 <__aeabi_fmul+0x14c>
 800037c:	024b      	lsls	r3, r1, #9
 800037e:	bf18      	it	ne
 8000380:	4608      	movne	r0, r1
 8000382:	d108      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000384:	ea80 0001 	eor.w	r0, r0, r1
 8000388:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800038c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000390:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000394:	4770      	bx	lr
 8000396:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800039a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_dmul>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8de 	bleq	80008f4 <__aeabi_dmul+0x1dc>
 8000738:	442c      	add	r4, r5
 800073a:	ea81 0603 	eor.w	r6, r1, r3
 800073e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800074a:	bf18      	it	ne
 800074c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000758:	d038      	beq.n	80007cc <__aeabi_dmul+0xb4>
 800075a:	fba0 ce02 	umull	ip, lr, r0, r2
 800075e:	f04f 0500 	mov.w	r5, #0
 8000762:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800076a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800076e:	f04f 0600 	mov.w	r6, #0
 8000772:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000776:	f09c 0f00 	teq	ip, #0
 800077a:	bf18      	it	ne
 800077c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800078c:	d204      	bcs.n	8000798 <__aeabi_dmul+0x80>
 800078e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000792:	416d      	adcs	r5, r5
 8000794:	eb46 0606 	adc.w	r6, r6, r6
 8000798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800079c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007b0:	bf88      	it	hi
 80007b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007b6:	d81e      	bhi.n	80007f6 <__aeabi_dmul+0xde>
 80007b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007bc:	bf08      	it	eq
 80007be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007c2:	f150 0000 	adcs.w	r0, r0, #0
 80007c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007d0:	ea46 0101 	orr.w	r1, r6, r1
 80007d4:	ea40 0002 	orr.w	r0, r0, r2
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e0:	bfc2      	ittt	gt
 80007e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ea:	bd70      	popgt	{r4, r5, r6, pc}
 80007ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f0:	f04f 0e00 	mov.w	lr, #0
 80007f4:	3c01      	subs	r4, #1
 80007f6:	f300 80ab 	bgt.w	8000950 <__aeabi_dmul+0x238>
 80007fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007fe:	bfde      	ittt	le
 8000800:	2000      	movle	r0, #0
 8000802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000806:	bd70      	pople	{r4, r5, r6, pc}
 8000808:	f1c4 0400 	rsb	r4, r4, #0
 800080c:	3c20      	subs	r4, #32
 800080e:	da35      	bge.n	800087c <__aeabi_dmul+0x164>
 8000810:	340c      	adds	r4, #12
 8000812:	dc1b      	bgt.n	800084c <__aeabi_dmul+0x134>
 8000814:	f104 0414 	add.w	r4, r4, #20
 8000818:	f1c4 0520 	rsb	r5, r4, #32
 800081c:	fa00 f305 	lsl.w	r3, r0, r5
 8000820:	fa20 f004 	lsr.w	r0, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea40 0002 	orr.w	r0, r0, r2
 800082c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000838:	fa21 f604 	lsr.w	r6, r1, r4
 800083c:	eb42 0106 	adc.w	r1, r2, r6
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 040c 	rsb	r4, r4, #12
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f304 	lsl.w	r3, r0, r4
 8000858:	fa20 f005 	lsr.w	r0, r0, r5
 800085c:	fa01 f204 	lsl.w	r2, r1, r4
 8000860:	ea40 0002 	orr.w	r0, r0, r2
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800086c:	f141 0100 	adc.w	r1, r1, #0
 8000870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000874:	bf08      	it	eq
 8000876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f1c4 0520 	rsb	r5, r4, #32
 8000880:	fa00 f205 	lsl.w	r2, r0, r5
 8000884:	ea4e 0e02 	orr.w	lr, lr, r2
 8000888:	fa20 f304 	lsr.w	r3, r0, r4
 800088c:	fa01 f205 	lsl.w	r2, r1, r5
 8000890:	ea43 0302 	orr.w	r3, r3, r2
 8000894:	fa21 f004 	lsr.w	r0, r1, r4
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	fa21 f204 	lsr.w	r2, r1, r4
 80008a0:	ea20 0002 	bic.w	r0, r0, r2
 80008a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ac:	bf08      	it	eq
 80008ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f094 0f00 	teq	r4, #0
 80008b8:	d10f      	bne.n	80008da <__aeabi_dmul+0x1c2>
 80008ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	eb41 0101 	adc.w	r1, r1, r1
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3c01      	subeq	r4, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1a6>
 80008ce:	ea41 0106 	orr.w	r1, r1, r6
 80008d2:	f095 0f00 	teq	r5, #0
 80008d6:	bf18      	it	ne
 80008d8:	4770      	bxne	lr
 80008da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	eb43 0303 	adc.w	r3, r3, r3
 80008e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008e8:	bf08      	it	eq
 80008ea:	3d01      	subeq	r5, #1
 80008ec:	d0f7      	beq.n	80008de <__aeabi_dmul+0x1c6>
 80008ee:	ea43 0306 	orr.w	r3, r3, r6
 80008f2:	4770      	bx	lr
 80008f4:	ea94 0f0c 	teq	r4, ip
 80008f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fc:	bf18      	it	ne
 80008fe:	ea95 0f0c 	teqne	r5, ip
 8000902:	d00c      	beq.n	800091e <__aeabi_dmul+0x206>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	d1d1      	bne.n	80008b4 <__aeabi_dmul+0x19c>
 8000910:	ea81 0103 	eor.w	r1, r1, r3
 8000914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000922:	bf06      	itte	eq
 8000924:	4610      	moveq	r0, r2
 8000926:	4619      	moveq	r1, r3
 8000928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092c:	d019      	beq.n	8000962 <__aeabi_dmul+0x24a>
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	d102      	bne.n	800093a <__aeabi_dmul+0x222>
 8000934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000938:	d113      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	d105      	bne.n	800094c <__aeabi_dmul+0x234>
 8000940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000944:	bf1c      	itt	ne
 8000946:	4610      	movne	r0, r2
 8000948:	4619      	movne	r1, r3
 800094a:	d10a      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	bd70      	pop	{r4, r5, r6, pc}
 8000962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800096a:	bd70      	pop	{r4, r5, r6, pc}

0800096c <__aeabi_ddiv>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800097a:	bf1d      	ittte	ne
 800097c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000980:	ea94 0f0c 	teqne	r4, ip
 8000984:	ea95 0f0c 	teqne	r5, ip
 8000988:	f000 f8a7 	bleq	8000ada <__aeabi_ddiv+0x16e>
 800098c:	eba4 0405 	sub.w	r4, r4, r5
 8000990:	ea81 0e03 	eor.w	lr, r1, r3
 8000994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800099c:	f000 8088 	beq.w	8000ab0 <__aeabi_ddiv+0x144>
 80009a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009c4:	429d      	cmp	r5, r3
 80009c6:	bf08      	it	eq
 80009c8:	4296      	cmpeq	r6, r2
 80009ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009d2:	d202      	bcs.n	80009da <__aeabi_ddiv+0x6e>
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	1ab6      	subs	r6, r6, r2
 80009dc:	eb65 0503 	sbc.w	r5, r5, r3
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a4c:	d018      	beq.n	8000a80 <__aeabi_ddiv+0x114>
 8000a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a6a:	d1c0      	bne.n	80009ee <__aeabi_ddiv+0x82>
 8000a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a70:	d10b      	bne.n	8000a8a <__aeabi_ddiv+0x11e>
 8000a72:	ea41 0100 	orr.w	r1, r1, r0
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a7e:	e7b6      	b.n	80009ee <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a84:	bf04      	itt	eq
 8000a86:	4301      	orreq	r1, r0
 8000a88:	2000      	moveq	r0, #0
 8000a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a8e:	bf88      	it	hi
 8000a90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a94:	f63f aeaf 	bhi.w	80007f6 <__aeabi_dmul+0xde>
 8000a98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a9c:	bf04      	itt	eq
 8000a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aa6:	f150 0000 	adcs.w	r0, r0, #0
 8000aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000abc:	bfc2      	ittt	gt
 8000abe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000acc:	f04f 0e00 	mov.w	lr, #0
 8000ad0:	3c01      	subs	r4, #1
 8000ad2:	e690      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ad4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad8:	e68d      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	bf08      	it	eq
 8000ae4:	ea95 0f0c 	teqeq	r5, ip
 8000ae8:	f43f af3b 	beq.w	8000962 <__aeabi_dmul+0x24a>
 8000aec:	ea94 0f0c 	teq	r4, ip
 8000af0:	d10a      	bne.n	8000b08 <__aeabi_ddiv+0x19c>
 8000af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000af6:	f47f af34 	bne.w	8000962 <__aeabi_dmul+0x24a>
 8000afa:	ea95 0f0c 	teq	r5, ip
 8000afe:	f47f af25 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	e72c      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b08:	ea95 0f0c 	teq	r5, ip
 8000b0c:	d106      	bne.n	8000b1c <__aeabi_ddiv+0x1b0>
 8000b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b12:	f43f aefd 	beq.w	8000910 <__aeabi_dmul+0x1f8>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e722      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b26:	f47f aec5 	bne.w	80008b4 <__aeabi_dmul+0x19c>
 8000b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b2e:	f47f af0d 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b36:	f47f aeeb 	bne.w	8000910 <__aeabi_dmul+0x1f8>
 8000b3a:	e712      	b.n	8000962 <__aeabi_dmul+0x24a>

08000b3c <__gedf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b40:	e006      	b.n	8000b50 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__ledf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpdf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b66:	d01b      	beq.n	8000ba0 <__cmpdf2+0x54>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b6e:	bf0c      	ite	eq
 8000b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b74:	ea91 0f03 	teqne	r1, r3
 8000b78:	bf02      	ittt	eq
 8000b7a:	ea90 0f02 	teqeq	r0, r2
 8000b7e:	2000      	moveq	r0, #0
 8000b80:	4770      	bxeq	lr
 8000b82:	f110 0f00 	cmn.w	r0, #0
 8000b86:	ea91 0f03 	teq	r1, r3
 8000b8a:	bf58      	it	pl
 8000b8c:	4299      	cmppl	r1, r3
 8000b8e:	bf08      	it	eq
 8000b90:	4290      	cmpeq	r0, r2
 8000b92:	bf2c      	ite	cs
 8000b94:	17d8      	asrcs	r0, r3, #31
 8000b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b9a:	f040 0001 	orr.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__cmpdf2+0x64>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d107      	bne.n	8000bc0 <__cmpdf2+0x74>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d1d6      	bne.n	8000b68 <__cmpdf2+0x1c>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d0d3      	beq.n	8000b68 <__cmpdf2+0x1c>
 8000bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdrcmple>:
 8000bc8:	4684      	mov	ip, r0
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4662      	mov	r2, ip
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	e000      	b.n	8000bd8 <__aeabi_cdcmpeq>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cdcmpeq>:
 8000bd8:	b501      	push	{r0, lr}
 8000bda:	f7ff ffb7 	bl	8000b4c <__cmpdf2>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	bf48      	it	mi
 8000be2:	f110 0f00 	cmnmi.w	r0, #0
 8000be6:	bd01      	pop	{r0, pc}

08000be8 <__aeabi_dcmpeq>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff fff4 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2001      	moveq	r0, #1
 8000bf4:	2000      	movne	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmplt>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffea 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c04:	bf34      	ite	cc
 8000c06:	2001      	movcc	r0, #1
 8000c08:	2000      	movcs	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmple>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffe0 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c18:	bf94      	ite	ls
 8000c1a:	2001      	movls	r0, #1
 8000c1c:	2000      	movhi	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpge>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffce 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpgt>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffc4 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c40:	bf34      	ite	cc
 8000c42:	2001      	movcc	r0, #1
 8000c44:	2000      	movcs	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpun>:
 8000c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x10>
 8000c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c5a:	d10a      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c64:	d102      	bne.n	8000c6c <__aeabi_dcmpun+0x20>
 8000c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c6a:	d102      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0001 	mov.w	r0, #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2iz>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c80:	d215      	bcs.n	8000cae <__aeabi_d2iz+0x36>
 8000c82:	d511      	bpl.n	8000ca8 <__aeabi_d2iz+0x30>
 8000c84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d912      	bls.n	8000cb4 <__aeabi_d2iz+0x3c>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cb2:	d105      	bne.n	8000cc0 <__aeabi_d2iz+0x48>
 8000cb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cb8:	bf08      	it	eq
 8000cba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2uiz>:
 8000cc8:	004a      	lsls	r2, r1, #1
 8000cca:	d211      	bcs.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000ccc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cd0:	d211      	bcs.n	8000cf6 <__aeabi_d2uiz+0x2e>
 8000cd2:	d50d      	bpl.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000cd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cdc:	d40e      	bmi.n	8000cfc <__aeabi_d2uiz+0x34>
 8000cde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ce2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ce6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cea:	fa23 f002 	lsr.w	r0, r3, r2
 8000cee:	4770      	bx	lr
 8000cf0:	f04f 0000 	mov.w	r0, #0
 8000cf4:	4770      	bx	lr
 8000cf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cfa:	d102      	bne.n	8000d02 <__aeabi_d2uiz+0x3a>
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	4770      	bx	lr
 8000d02:	f04f 0000 	mov.w	r0, #0
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2f>:
 8000d08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d10:	bf24      	itt	cs
 8000d12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d1a:	d90d      	bls.n	8000d38 <__aeabi_d2f+0x30>
 8000d1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d3c:	d121      	bne.n	8000d82 <__aeabi_d2f+0x7a>
 8000d3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d42:	bfbc      	itt	lt
 8000d44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d48:	4770      	bxlt	lr
 8000d4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d52:	f1c2 0218 	rsb	r2, r2, #24
 8000d56:	f1c2 0c20 	rsb	ip, r2, #32
 8000d5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d62:	bf18      	it	ne
 8000d64:	f040 0001 	orrne.w	r0, r0, #1
 8000d68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d74:	ea40 000c 	orr.w	r0, r0, ip
 8000d78:	fa23 f302 	lsr.w	r3, r3, r2
 8000d7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d80:	e7cc      	b.n	8000d1c <__aeabi_d2f+0x14>
 8000d82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d86:	d107      	bne.n	8000d98 <__aeabi_d2f+0x90>
 8000d88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d96:	4770      	bxne	lr
 8000d98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <__aeabi_frsub>:
 8000da8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000dac:	e002      	b.n	8000db4 <__addsf3>
 8000dae:	bf00      	nop

08000db0 <__aeabi_fsub>:
 8000db0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000db4 <__addsf3>:
 8000db4:	0042      	lsls	r2, r0, #1
 8000db6:	bf1f      	itttt	ne
 8000db8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000dbc:	ea92 0f03 	teqne	r2, r3
 8000dc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000dc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dc8:	d06a      	beq.n	8000ea0 <__addsf3+0xec>
 8000dca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000dce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000dd2:	bfc1      	itttt	gt
 8000dd4:	18d2      	addgt	r2, r2, r3
 8000dd6:	4041      	eorgt	r1, r0
 8000dd8:	4048      	eorgt	r0, r1
 8000dda:	4041      	eorgt	r1, r0
 8000ddc:	bfb8      	it	lt
 8000dde:	425b      	neglt	r3, r3
 8000de0:	2b19      	cmp	r3, #25
 8000de2:	bf88      	it	hi
 8000de4:	4770      	bxhi	lr
 8000de6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000dea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000df2:	bf18      	it	ne
 8000df4:	4240      	negne	r0, r0
 8000df6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000dfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000dfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e02:	bf18      	it	ne
 8000e04:	4249      	negne	r1, r1
 8000e06:	ea92 0f03 	teq	r2, r3
 8000e0a:	d03f      	beq.n	8000e8c <__addsf3+0xd8>
 8000e0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000e10:	fa41 fc03 	asr.w	ip, r1, r3
 8000e14:	eb10 000c 	adds.w	r0, r0, ip
 8000e18:	f1c3 0320 	rsb	r3, r3, #32
 8000e1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000e20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e24:	d502      	bpl.n	8000e2c <__addsf3+0x78>
 8000e26:	4249      	negs	r1, r1
 8000e28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e30:	d313      	bcc.n	8000e5a <__addsf3+0xa6>
 8000e32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e36:	d306      	bcc.n	8000e46 <__addsf3+0x92>
 8000e38:	0840      	lsrs	r0, r0, #1
 8000e3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e3e:	f102 0201 	add.w	r2, r2, #1
 8000e42:	2afe      	cmp	r2, #254	; 0xfe
 8000e44:	d251      	bcs.n	8000eea <__addsf3+0x136>
 8000e46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e4e:	bf08      	it	eq
 8000e50:	f020 0001 	biceq.w	r0, r0, #1
 8000e54:	ea40 0003 	orr.w	r0, r0, r3
 8000e58:	4770      	bx	lr
 8000e5a:	0049      	lsls	r1, r1, #1
 8000e5c:	eb40 0000 	adc.w	r0, r0, r0
 8000e60:	3a01      	subs	r2, #1
 8000e62:	bf28      	it	cs
 8000e64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e68:	d2ed      	bcs.n	8000e46 <__addsf3+0x92>
 8000e6a:	fab0 fc80 	clz	ip, r0
 8000e6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e72:	ebb2 020c 	subs.w	r2, r2, ip
 8000e76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e7a:	bfaa      	itet	ge
 8000e7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e80:	4252      	neglt	r2, r2
 8000e82:	4318      	orrge	r0, r3
 8000e84:	bfbc      	itt	lt
 8000e86:	40d0      	lsrlt	r0, r2
 8000e88:	4318      	orrlt	r0, r3
 8000e8a:	4770      	bx	lr
 8000e8c:	f092 0f00 	teq	r2, #0
 8000e90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000e94:	bf06      	itte	eq
 8000e96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000e9a:	3201      	addeq	r2, #1
 8000e9c:	3b01      	subne	r3, #1
 8000e9e:	e7b5      	b.n	8000e0c <__addsf3+0x58>
 8000ea0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ea8:	bf18      	it	ne
 8000eaa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eae:	d021      	beq.n	8000ef4 <__addsf3+0x140>
 8000eb0:	ea92 0f03 	teq	r2, r3
 8000eb4:	d004      	beq.n	8000ec0 <__addsf3+0x10c>
 8000eb6:	f092 0f00 	teq	r2, #0
 8000eba:	bf08      	it	eq
 8000ebc:	4608      	moveq	r0, r1
 8000ebe:	4770      	bx	lr
 8000ec0:	ea90 0f01 	teq	r0, r1
 8000ec4:	bf1c      	itt	ne
 8000ec6:	2000      	movne	r0, #0
 8000ec8:	4770      	bxne	lr
 8000eca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ece:	d104      	bne.n	8000eda <__addsf3+0x126>
 8000ed0:	0040      	lsls	r0, r0, #1
 8000ed2:	bf28      	it	cs
 8000ed4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ede:	bf3c      	itt	cc
 8000ee0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ee4:	4770      	bxcc	lr
 8000ee6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000eea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000eee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef2:	4770      	bx	lr
 8000ef4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ef8:	bf16      	itet	ne
 8000efa:	4608      	movne	r0, r1
 8000efc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f00:	4601      	movne	r1, r0
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	bf06      	itte	eq
 8000f06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f0a:	ea90 0f01 	teqeq	r0, r1
 8000f0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f12:	4770      	bx	lr

08000f14 <__aeabi_ui2f>:
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e004      	b.n	8000f24 <__aeabi_i2f+0x8>
 8000f1a:	bf00      	nop

08000f1c <__aeabi_i2f>:
 8000f1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f20:	bf48      	it	mi
 8000f22:	4240      	negmi	r0, r0
 8000f24:	ea5f 0c00 	movs.w	ip, r0
 8000f28:	bf08      	it	eq
 8000f2a:	4770      	bxeq	lr
 8000f2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f30:	4601      	mov	r1, r0
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	e01c      	b.n	8000f72 <__aeabi_l2f+0x2a>

08000f38 <__aeabi_ul2f>:
 8000f38:	ea50 0201 	orrs.w	r2, r0, r1
 8000f3c:	bf08      	it	eq
 8000f3e:	4770      	bxeq	lr
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	e00a      	b.n	8000f5c <__aeabi_l2f+0x14>
 8000f46:	bf00      	nop

08000f48 <__aeabi_l2f>:
 8000f48:	ea50 0201 	orrs.w	r2, r0, r1
 8000f4c:	bf08      	it	eq
 8000f4e:	4770      	bxeq	lr
 8000f50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f54:	d502      	bpl.n	8000f5c <__aeabi_l2f+0x14>
 8000f56:	4240      	negs	r0, r0
 8000f58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f5c:	ea5f 0c01 	movs.w	ip, r1
 8000f60:	bf02      	ittt	eq
 8000f62:	4684      	moveq	ip, r0
 8000f64:	4601      	moveq	r1, r0
 8000f66:	2000      	moveq	r0, #0
 8000f68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f6c:	bf08      	it	eq
 8000f6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f76:	fabc f28c 	clz	r2, ip
 8000f7a:	3a08      	subs	r2, #8
 8000f7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f80:	db10      	blt.n	8000fa4 <__aeabi_l2f+0x5c>
 8000f82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f86:	4463      	add	r3, ip
 8000f88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f8c:	f1c2 0220 	rsb	r2, r2, #32
 8000f90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	eb43 0002 	adc.w	r0, r3, r2
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f102 0220 	add.w	r2, r2, #32
 8000fa8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fac:	f1c2 0220 	rsb	r2, r2, #32
 8000fb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000fb8:	eb43 0002 	adc.w	r0, r3, r2
 8000fbc:	bf08      	it	eq
 8000fbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_d2lz>:
 8000fc4:	b538      	push	{r3, r4, r5, lr}
 8000fc6:	4605      	mov	r5, r0
 8000fc8:	460c      	mov	r4, r1
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4628      	mov	r0, r5
 8000fd0:	4621      	mov	r1, r4
 8000fd2:	f7ff fe13 	bl	8000bfc <__aeabi_dcmplt>
 8000fd6:	b928      	cbnz	r0, 8000fe4 <__aeabi_d2lz+0x20>
 8000fd8:	4628      	mov	r0, r5
 8000fda:	4621      	mov	r1, r4
 8000fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fe0:	f000 b80a 	b.w	8000ff8 <__aeabi_d2ulz>
 8000fe4:	4628      	mov	r0, r5
 8000fe6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000fea:	f000 f805 	bl	8000ff8 <__aeabi_d2ulz>
 8000fee:	4240      	negs	r0, r0
 8000ff0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ff4:	bd38      	pop	{r3, r4, r5, pc}
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_d2ulz>:
 8000ff8:	b5d0      	push	{r4, r6, r7, lr}
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <__aeabi_d2ulz+0x34>)
 8000ffe:	4606      	mov	r6, r0
 8001000:	460f      	mov	r7, r1
 8001002:	f7ff fb89 	bl	8000718 <__aeabi_dmul>
 8001006:	f7ff fe5f 	bl	8000cc8 <__aeabi_d2uiz>
 800100a:	4604      	mov	r4, r0
 800100c:	f7ff fb0a 	bl	8000624 <__aeabi_ui2d>
 8001010:	2200      	movs	r2, #0
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <__aeabi_d2ulz+0x38>)
 8001014:	f7ff fb80 	bl	8000718 <__aeabi_dmul>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4630      	mov	r0, r6
 800101e:	4639      	mov	r1, r7
 8001020:	f7ff f9c2 	bl	80003a8 <__aeabi_dsub>
 8001024:	f7ff fe50 	bl	8000cc8 <__aeabi_d2uiz>
 8001028:	4621      	mov	r1, r4
 800102a:	bdd0      	pop	{r4, r6, r7, pc}
 800102c:	3df00000 	.word	0x3df00000
 8001030:	41f00000 	.word	0x41f00000

08001034 <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0308 	add.w	r3, r7, #8
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]

  //By default the line is high
  lineUp();
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6818      	ldr	r0, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	889b      	ldrh	r3, [r3, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	4619      	mov	r1, r3
 8001056:	f002 fa32 	bl	80034be <HAL_GPIO_WritePin>

  //Setting the port to exit
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	889b      	ldrh	r3, [r3, #4]
 800105e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//open drain
 8001060:	2311      	movs	r3, #17
 8001062:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Pull-up to nutrition
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	79db      	ldrb	r3, [r3, #7]
 8001068:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //High port speed
 800106a:	2303      	movs	r3, #3
 800106c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f107 0208 	add.w	r2, r7, #8
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f002 f875 	bl	8003168 <HAL_GPIO_Init>
}
 800107e:	bf00      	nop
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]

  //Input port setting
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	889b      	ldrh	r3, [r3, #4]
 80010a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Pull-up to nutrition
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	79db      	ldrb	r3, [r3, #7]
 80010aa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f107 0208 	add.w	r2, r7, #8
 80010b4:	4611      	mov	r1, r2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 f856 	bl	8003168 <HAL_GPIO_Init>
}
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
	DHT_data data = {-128.0f, -128.0f};
 80010ce:	4a76      	ldr	r2, [pc, #472]	; (80012a8 <DHT_getData+0x1e4>)
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010d8:	e883 0003 	stmia.w	r3, {r0, r1}
	
	#if DHT_POLLING_CONTROL == 1
	/* Limitation on the frequency of polling the sensor */
	//Determining the polling interval depending on the sensor
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	799b      	ldrb	r3, [r3, #6]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d103      	bne.n	80010ec <DHT_getData+0x28>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 80010e4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010e8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80010ea:	e002      	b.n	80010f2 <DHT_getData+0x2e>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 80010ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f0:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	//If the interval is small, then return the last known good value
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 80010f2:	f001 fd61 	bl	8002bb8 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	1ad2      	subs	r2, r2, r3
 80010fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001100:	429a      	cmp	r2, r3
 8001102:	d212      	bcs.n	800112a <DHT_getData+0x66>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00e      	beq.n	800112a <DHT_getData+0x66>
		data.hum = sensor->lastHum;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	617b      	str	r3, [r7, #20]
		data.temp = sensor->lastTemp;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	61bb      	str	r3, [r7, #24]
		return data;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	461a      	mov	r2, r3
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001124:	e882 0003 	stmia.w	r2, {r0, r1}
 8001128:	e166      	b.n	80013f8 <DHT_getData+0x334>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 800112a:	f001 fd45 	bl	8002bb8 <HAL_GetTick>
 800112e:	4603      	mov	r3, r0
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	609a      	str	r2, [r3, #8]
	#endif

	/* Requesting data from the sensor */
	//Translation of the pin "to the exit"
	goToOutput(sensor);
 8001136:	6838      	ldr	r0, [r7, #0]
 8001138:	f7ff ff7c 	bl	8001034 <goToOutput>
	//Data line down 18ms
	lineDown();
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	889b      	ldrh	r3, [r3, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	4619      	mov	r1, r3
 8001148:	f002 f9b9 	bl	80034be <HAL_GPIO_WritePin>
	Delay(18);
 800114c:	2012      	movs	r0, #18
 800114e:	f001 fd3d 	bl	8002bcc <HAL_Delay>
	//Lifting the line, transferring the port "to the input"
	lineUp();
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	889b      	ldrh	r3, [r3, #4]
 800115a:	2201      	movs	r2, #1
 800115c:	4619      	mov	r1, r3
 800115e:	f002 f9ae 	bl	80034be <HAL_GPIO_WritePin>
	goToInput(sensor);
 8001162:	6838      	ldr	r0, [r7, #0]
 8001164:	f7ff ff8f 	bl	8001086 <goToInput>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
	#ifdef DHT_IRQ_CONTROL
	//Turn off interrupts so that nothing interferes with data processing
	__disable_irq();
	#endif
	/* Waiting for a response from the sensor */
	uint16_t timeout = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	84bb      	strh	r3, [r7, #36]	; 0x24
	//Waiting for recession
	while(getLine()) {
 8001170:	e01a      	b.n	80011a8 <DHT_getData+0xe4>
		timeout++;
 8001172:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001174:	3301      	adds	r3, #1
 8001176:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (timeout > DHT_TIMEOUT) {
 8001178:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800117a:	f242 7210 	movw	r2, #10000	; 0x2710
 800117e:	4293      	cmp	r3, r2
 8001180:	d912      	bls.n	80011a8 <DHT_getData+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 8001182:	b662      	cpsie	i
}
 8001184:	bf00      	nop
			__enable_irq();
			#endif
			//If the sensor did not respond, then it definitely does not exist.
			//Resetting the Last Known Good Value to
			//don't get phantom values
			sensor->lastHum = -128.0f;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 800118c:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 8001194:	60da      	str	r2, [r3, #12]

			return data;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	461a      	mov	r2, r3
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011a2:	e882 0003 	stmia.w	r2, {r0, r1}
 80011a6:	e127      	b.n	80013f8 <DHT_getData+0x334>
	while(getLine()) {
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	889b      	ldrh	r3, [r3, #4]
 80011b0:	4619      	mov	r1, r3
 80011b2:	4610      	mov	r0, r2
 80011b4:	f002 f96c 	bl	8003490 <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d0d9      	beq.n	8001172 <DHT_getData+0xae>
		}
	}
	timeout = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	84bb      	strh	r3, [r7, #36]	; 0x24
	//Waiting for the rise
	while(!getLine()) {
 80011c2:	e01a      	b.n	80011fa <DHT_getData+0x136>
		timeout++;
 80011c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011c6:	3301      	adds	r3, #1
 80011c8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (timeout > DHT_TIMEOUT) {
 80011ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011cc:	f242 7210 	movw	r2, #10000	; 0x2710
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d912      	bls.n	80011fa <DHT_getData+0x136>
  __ASM volatile ("cpsie i" : : : "memory");
 80011d4:	b662      	cpsie	i
}
 80011d6:	bf00      	nop
			__enable_irq();
			#endif
			//If the sensor did not respond, then it definitely does not exist.
			//Resetting the Last Known Good Value to
			//don't get phantom values
			sensor->lastHum = -128.0f;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 80011de:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 80011e6:	60da      	str	r2, [r3, #12]

			return data;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	461a      	mov	r2, r3
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011f4:	e882 0003 	stmia.w	r2, {r0, r1}
 80011f8:	e0fe      	b.n	80013f8 <DHT_getData+0x334>
	while(!getLine()) {
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	889b      	ldrh	r3, [r3, #4]
 8001202:	4619      	mov	r1, r3
 8001204:	4610      	mov	r0, r2
 8001206:	f002 f943 	bl	8003490 <HAL_GPIO_ReadPin>
 800120a:	4603      	mov	r3, r0
 800120c:	2b01      	cmp	r3, #1
 800120e:	d1d9      	bne.n	80011c4 <DHT_getData+0x100>
		}
	}
	timeout = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	84bb      	strh	r3, [r7, #36]	; 0x24
	//Waiting for recession
	while(getLine()) {
 8001214:	e012      	b.n	800123c <DHT_getData+0x178>
		timeout++;
 8001216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001218:	3301      	adds	r3, #1
 800121a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (timeout > DHT_TIMEOUT) {
 800121c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800121e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001222:	4293      	cmp	r3, r2
 8001224:	d90a      	bls.n	800123c <DHT_getData+0x178>
  __ASM volatile ("cpsie i" : : : "memory");
 8001226:	b662      	cpsie	i
}
 8001228:	bf00      	nop
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	461a      	mov	r2, r3
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001236:	e882 0003 	stmia.w	r2, {r0, r1}
 800123a:	e0dd      	b.n	80013f8 <DHT_getData+0x334>
	while(getLine()) {
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	889b      	ldrh	r3, [r3, #4]
 8001244:	4619      	mov	r1, r3
 8001246:	4610      	mov	r0, r2
 8001248:	f002 f922 	bl	8003490 <HAL_GPIO_ReadPin>
 800124c:	4603      	mov	r3, r0
 800124e:	2b01      	cmp	r3, #1
 8001250:	d0e1      	beq.n	8001216 <DHT_getData+0x152>
		}
	}
	
	/* Reading the response from the sensor */
	uint8_t rawData[5] = {0,0,0,0,0};
 8001252:	4a16      	ldr	r2, [pc, #88]	; (80012ac <DHT_getData+0x1e8>)
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	e892 0003 	ldmia.w	r2, {r0, r1}
 800125c:	6018      	str	r0, [r3, #0]
 800125e:	3304      	adds	r3, #4
 8001260:	7019      	strb	r1, [r3, #0]
	for(uint8_t a = 0; a < 5; a++) {
 8001262:	2300      	movs	r3, #0
 8001264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001268:	e05d      	b.n	8001326 <DHT_getData+0x262>
		for(uint8_t b = 7; b != 255; b--) {
 800126a:	2307      	movs	r3, #7
 800126c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001270:	e050      	b.n	8001314 <DHT_getData+0x250>
			uint16_t hT = 0, lT = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	843b      	strh	r3, [r7, #32]
 8001276:	2300      	movs	r3, #0
 8001278:	83fb      	strh	r3, [r7, #30]
			//While the line is low, the lT variable increment
			while(!getLine() && lT != 65535) lT++;
 800127a:	e002      	b.n	8001282 <DHT_getData+0x1be>
 800127c:	8bfb      	ldrh	r3, [r7, #30]
 800127e:	3301      	adds	r3, #1
 8001280:	83fb      	strh	r3, [r7, #30]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	889b      	ldrh	r3, [r3, #4]
 800128a:	4619      	mov	r1, r3
 800128c:	4610      	mov	r0, r2
 800128e:	f002 f8ff 	bl	8003490 <HAL_GPIO_ReadPin>
 8001292:	4603      	mov	r3, r0
 8001294:	2b01      	cmp	r3, #1
 8001296:	d004      	beq.n	80012a2 <DHT_getData+0x1de>
 8001298:	8bfb      	ldrh	r3, [r7, #30]
 800129a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800129e:	4293      	cmp	r3, r2
 80012a0:	d1ec      	bne.n	800127c <DHT_getData+0x1b8>
			//While the line is high, hT variable increment
			timeout = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	84bb      	strh	r3, [r7, #36]	; 0x24
			while(getLine()&& hT != 65535) hT++;
 80012a6:	e006      	b.n	80012b6 <DHT_getData+0x1f2>
 80012a8:	0800c298 	.word	0x0800c298
 80012ac:	0800c2a0 	.word	0x0800c2a0
 80012b0:	8c3b      	ldrh	r3, [r7, #32]
 80012b2:	3301      	adds	r3, #1
 80012b4:	843b      	strh	r3, [r7, #32]
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	889b      	ldrh	r3, [r3, #4]
 80012be:	4619      	mov	r1, r3
 80012c0:	4610      	mov	r0, r2
 80012c2:	f002 f8e5 	bl	8003490 <HAL_GPIO_ReadPin>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d104      	bne.n	80012d6 <DHT_getData+0x212>
 80012cc:	8c3b      	ldrh	r3, [r7, #32]
 80012ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d1ec      	bne.n	80012b0 <DHT_getData+0x1ec>
			//If hT is greater than lT, then one has arrived
			if(hT > lT) rawData[a] |= (1<<b);
 80012d6:	8c3a      	ldrh	r2, [r7, #32]
 80012d8:	8bfb      	ldrh	r3, [r7, #30]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d915      	bls.n	800130a <DHT_getData+0x246>
 80012de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80012e2:	3328      	adds	r3, #40	; 0x28
 80012e4:	443b      	add	r3, r7
 80012e6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80012ea:	b25a      	sxtb	r2, r3
 80012ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80012f0:	2101      	movs	r1, #1
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b25a      	sxtb	r2, r3
 80012fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	3328      	adds	r3, #40	; 0x28
 8001304:	443b      	add	r3, r7
 8001306:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for(uint8_t b = 7; b != 255; b--) {
 800130a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800130e:	3b01      	subs	r3, #1
 8001310:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001314:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001318:	2bff      	cmp	r3, #255	; 0xff
 800131a:	d1aa      	bne.n	8001272 <DHT_getData+0x1ae>
	for(uint8_t a = 0; a < 5; a++) {
 800131c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001320:	3301      	adds	r3, #1
 8001322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001326:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800132a:	2b04      	cmp	r3, #4
 800132c:	d99d      	bls.n	800126a <DHT_getData+0x1a6>
  __ASM volatile ("cpsie i" : : : "memory");
 800132e:	b662      	cpsie	i
}
 8001330:	bf00      	nop
	//Enabling interrupts after receiving data
	__enable_irq();
    #endif

	/* Data integrity check */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 8001332:	7b3a      	ldrb	r2, [r7, #12]
 8001334:	7b7b      	ldrb	r3, [r7, #13]
 8001336:	4413      	add	r3, r2
 8001338:	b2da      	uxtb	r2, r3
 800133a:	7bbb      	ldrb	r3, [r7, #14]
 800133c:	4413      	add	r3, r2
 800133e:	b2da      	uxtb	r2, r3
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	4413      	add	r3, r2
 8001344:	b2da      	uxtb	r2, r3
 8001346:	7c3b      	ldrb	r3, [r7, #16]
 8001348:	429a      	cmp	r2, r3
 800134a:	d147      	bne.n	80013dc <DHT_getData+0x318>
		//If the checksum matches, then convert and return the resulting values
		if (sensor->type == DHT22) {
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	799b      	ldrb	r3, [r3, #6]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d133      	bne.n	80013bc <DHT_getData+0x2f8>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8001354:	7b3b      	ldrb	r3, [r7, #12]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	7b7a      	ldrb	r2, [r7, #13]
 800135a:	4313      	orrs	r3, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fddd 	bl	8000f1c <__aeabi_i2f>
 8001362:	4603      	mov	r3, r0
 8001364:	4926      	ldr	r1, [pc, #152]	; (8001400 <DHT_getData+0x33c>)
 8001366:	4618      	mov	r0, r3
 8001368:	f7fe ff66 	bl	8000238 <__aeabi_fmul>
 800136c:	4603      	mov	r3, r0
 800136e:	617b      	str	r3, [r7, #20]
			//Check for negative temperature
			if(!(rawData[2] & (1<<7))) {
 8001370:	7bbb      	ldrb	r3, [r7, #14]
 8001372:	b25b      	sxtb	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0e      	blt.n	8001396 <DHT_getData+0x2d2>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8001378:	7bbb      	ldrb	r3, [r7, #14]
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	4313      	orrs	r3, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fdcb 	bl	8000f1c <__aeabi_i2f>
 8001386:	4603      	mov	r3, r0
 8001388:	491d      	ldr	r1, [pc, #116]	; (8001400 <DHT_getData+0x33c>)
 800138a:	4618      	mov	r0, r3
 800138c:	f7fe ff54 	bl	8000238 <__aeabi_fmul>
 8001390:	4603      	mov	r3, r0
 8001392:	61bb      	str	r3, [r7, #24]
 8001394:	e012      	b.n	80013bc <DHT_getData+0x2f8>
			}	else {
				rawData[2] &= ~(1<<7);
 8001396:	7bbb      	ldrb	r3, [r7, #14]
 8001398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800139c:	b2db      	uxtb	r3, r3
 800139e:	73bb      	strb	r3, [r7, #14]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 80013a0:	7bbb      	ldrb	r3, [r7, #14]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fdb7 	bl	8000f1c <__aeabi_i2f>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4914      	ldr	r1, [pc, #80]	; (8001404 <DHT_getData+0x340>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7fe ff40 	bl	8000238 <__aeabi_fmul>
 80013b8:	4603      	mov	r3, r0
 80013ba:	61bb      	str	r3, [r7, #24]
			}
		}
		if (sensor->type == DHT11) {
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	799b      	ldrb	r3, [r3, #6]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10b      	bne.n	80013dc <DHT_getData+0x318>
			data.hum = (float)rawData[0];
 80013c4:	7b3b      	ldrb	r3, [r7, #12]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fda4 	bl	8000f14 <__aeabi_ui2f>
 80013cc:	4603      	mov	r3, r0
 80013ce:	617b      	str	r3, [r7, #20]
			data.temp = (float)rawData[2];
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fd9e 	bl	8000f14 <__aeabi_ui2f>
 80013d8:	4603      	mov	r3, r0
 80013da:	61bb      	str	r3, [r7, #24]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	461a      	mov	r2, r3
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013f4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	3dcccccd 	.word	0x3dcccccd
 8001404:	bdcccccd 	.word	0xbdcccccd

08001408 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	80fb      	strh	r3, [r7, #6]
  uint16_t validpage = PAGE0;
 8001414:	2300      	movs	r3, #0
 8001416:	81fb      	strh	r3, [r7, #14]
  uint16_t addressvalue = 0x5555, readstatus = 1;
 8001418:	f245 5355 	movw	r3, #21845	; 0x5555
 800141c:	81bb      	strh	r3, [r7, #12]
 800141e:	2301      	movs	r3, #1
 8001420:	82fb      	strh	r3, [r7, #22]
  uint32_t address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <EE_ReadVariable+0x8c>)
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <EE_ReadVariable+0x8c>)
 8001428:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800142a:	2000      	movs	r0, #0
 800142c:	f000 f858 	bl	80014e0 <EE_FindValidPage>
 8001430:	4603      	mov	r3, r0
 8001432:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8001434:	89fb      	ldrh	r3, [r7, #14]
 8001436:	2bab      	cmp	r3, #171	; 0xab
 8001438:	d101      	bne.n	800143e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800143a:	23ab      	movs	r3, #171	; 0xab
 800143c:	e025      	b.n	800148a <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 800143e:	89fb      	ldrh	r3, [r7, #14]
 8001440:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001444:	3310      	adds	r3, #16
 8001446:	02db      	lsls	r3, r3, #11
 8001448:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 800144a:	89fb      	ldrh	r3, [r7, #14]
 800144c:	3301      	adds	r3, #1
 800144e:	02da      	lsls	r2, r3, #11
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <EE_ReadVariable+0x90>)
 8001452:	4413      	add	r3, r2
 8001454:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (address > (PageStartAddress + 2))
 8001456:	e012      	b.n	800147e <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)address);
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (addressvalue == VirtAddress)
 800145e:	89ba      	ldrh	r2, [r7, #12]
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	429a      	cmp	r2, r3
 8001464:	d108      	bne.n	8001478 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(address - 2));
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	3b02      	subs	r3, #2
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	b29a      	uxth	r2, r3
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	82fb      	strh	r3, [r7, #22]

      break;
 8001476:	e007      	b.n	8001488 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      address = address - 4;
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	3b04      	subs	r3, #4
 800147c:	613b      	str	r3, [r7, #16]
  while (address > (PageStartAddress + 2))
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	3302      	adds	r3, #2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	429a      	cmp	r2, r3
 8001486:	d8e7      	bhi.n	8001458 <EE_ReadVariable+0x50>
    }
  }

  /* Return readstatus value: (0: variable exist, 1: variable doesn't exist) */
  return readstatus;
 8001488:	8afb      	ldrh	r3, [r7, #22]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	08008000 	.word	0x08008000
 8001498:	08007ffe 	.word	0x08007ffe

0800149c <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	460a      	mov	r2, r1
 80014a6:	80fb      	strh	r3, [r7, #6]
 80014a8:	4613      	mov	r3, r2
 80014aa:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80014b0:	88ba      	ldrh	r2, [r7, #4]
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	4611      	mov	r1, r2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 f856 	bl	8001568 <EE_VerifyPageFullWriteVariable>
 80014bc:	4603      	mov	r3, r0
 80014be:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80014c0:	89fb      	ldrh	r3, [r7, #14]
 80014c2:	2b80      	cmp	r3, #128	; 0x80
 80014c4:	d107      	bne.n	80014d6 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80014c6:	88ba      	ldrh	r2, [r7, #4]
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 f8ad 	bl	800162c <EE_PageTransfer>
 80014d2:	4603      	mov	r3, r0
 80014d4:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80014d6:	89fb      	ldrh	r3, [r7, #14]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 80014ea:	2306      	movs	r3, #6
 80014ec:	81fb      	strh	r3, [r7, #14]
 80014ee:	2306      	movs	r3, #6
 80014f0:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80014f2:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <EE_FindValidPage+0x80>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <EE_FindValidPage+0x84>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d01b      	beq.n	800153c <EE_FindValidPage+0x5c>
 8001504:	2b01      	cmp	r3, #1
 8001506:	d125      	bne.n	8001554 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (pagestatus1 == VALID_PAGE)
 8001508:	89bb      	ldrh	r3, [r7, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d108      	bne.n	8001520 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (pagestatus0 == RECEIVE_DATA)
 800150e:	89fb      	ldrh	r3, [r7, #14]
 8001510:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001514:	4293      	cmp	r3, r2
 8001516:	d101      	bne.n	800151c <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001518:	2300      	movs	r3, #0
 800151a:	e01c      	b.n	8001556 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 800151c:	2340      	movs	r3, #64	; 0x40
 800151e:	e01a      	b.n	8001556 <EE_FindValidPage+0x76>
        }
      }
      else if (pagestatus0 == VALID_PAGE)
 8001520:	89fb      	ldrh	r3, [r7, #14]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d108      	bne.n	8001538 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (pagestatus1 == RECEIVE_DATA)
 8001526:	89bb      	ldrh	r3, [r7, #12]
 8001528:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800152c:	4293      	cmp	r3, r2
 800152e:	d101      	bne.n	8001534 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001530:	2340      	movs	r3, #64	; 0x40
 8001532:	e010      	b.n	8001556 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001534:	2300      	movs	r3, #0
 8001536:	e00e      	b.n	8001556 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001538:	23ab      	movs	r3, #171	; 0xab
 800153a:	e00c      	b.n	8001556 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 800153c:	89fb      	ldrh	r3, [r7, #14]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001542:	2300      	movs	r3, #0
 8001544:	e007      	b.n	8001556 <EE_FindValidPage+0x76>
      }
      else if (pagestatus1 == VALID_PAGE)
 8001546:	89bb      	ldrh	r3, [r7, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 800154c:	2340      	movs	r3, #64	; 0x40
 800154e:	e002      	b.n	8001556 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001550:	23ab      	movs	r3, #171	; 0xab
 8001552:	e000      	b.n	8001556 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001554:	2300      	movs	r3, #0
  }
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	08008000 	.word	0x08008000
 8001564:	08018000 	.word	0x08018000

08001568 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001568:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	460a      	mov	r2, r1
 8001574:	80fb      	strh	r3, [r7, #6]
 8001576:	4613      	mov	r3, r2
 8001578:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	74fb      	strb	r3, [r7, #19]
  uint16_t validpage = PAGE0;
 800157e:	2300      	movs	r3, #0
 8001580:	823b      	strh	r3, [r7, #16]
  uint32_t address = EEPROM_START_ADDRESS, pageendaddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001582:	4b27      	ldr	r3, [pc, #156]	; (8001620 <EE_VerifyPageFullWriteVariable+0xb8>)
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	4b27      	ldr	r3, [pc, #156]	; (8001624 <EE_VerifyPageFullWriteVariable+0xbc>)
 8001588:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  validpage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 800158a:	2001      	movs	r0, #1
 800158c:	f7ff ffa8 	bl	80014e0 <EE_FindValidPage>
 8001590:	4603      	mov	r3, r0
 8001592:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8001594:	8a3b      	ldrh	r3, [r7, #16]
 8001596:	2bab      	cmp	r3, #171	; 0xab
 8001598:	d101      	bne.n	800159e <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800159a:	23ab      	movs	r3, #171	; 0xab
 800159c:	e03b      	b.n	8001616 <EE_VerifyPageFullWriteVariable+0xae>
  }

  /* Get the valid Page start address */
  address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 800159e:	8a3b      	ldrh	r3, [r7, #16]
 80015a0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80015a4:	3310      	adds	r3, #16
 80015a6:	02db      	lsls	r3, r3, #11
 80015a8:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end address */
  pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE));
 80015aa:	8a3b      	ldrh	r3, [r7, #16]
 80015ac:	3301      	adds	r3, #1
 80015ae:	02da      	lsls	r2, r3, #11
 80015b0:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <EE_VerifyPageFullWriteVariable+0xc0>)
 80015b2:	4413      	add	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (address < pageendaddress)
 80015b6:	e029      	b.n	800160c <EE_VerifyPageFullWriteVariable+0xa4>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c0:	d121      	bne.n	8001606 <EE_VerifyPageFullWriteVariable+0x9e>
    {
      /* Set variable data */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 80015c2:	88bb      	ldrh	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	461c      	mov	r4, r3
 80015c8:	4615      	mov	r5, r2
 80015ca:	4622      	mov	r2, r4
 80015cc:	462b      	mov	r3, r5
 80015ce:	6979      	ldr	r1, [r7, #20]
 80015d0:	2001      	movs	r0, #1
 80015d2:	f001 fbff 	bl	8002dd4 <HAL_FLASH_Program>
 80015d6:	4603      	mov	r3, r0
 80015d8:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 80015da:	7cfb      	ldrb	r3, [r7, #19]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <EE_VerifyPageFullWriteVariable+0x7e>
      {
        return flashstatus;
 80015e0:	7cfb      	ldrb	r3, [r7, #19]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	e017      	b.n	8001616 <EE_VerifyPageFullWriteVariable+0xae>
      }
      /* Set variable virtual address */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	1c99      	adds	r1, r3, #2
 80015ea:	88fb      	ldrh	r3, [r7, #6]
 80015ec:	2200      	movs	r2, #0
 80015ee:	4698      	mov	r8, r3
 80015f0:	4691      	mov	r9, r2
 80015f2:	4642      	mov	r2, r8
 80015f4:	464b      	mov	r3, r9
 80015f6:	2001      	movs	r0, #1
 80015f8:	f001 fbec 	bl	8002dd4 <HAL_FLASH_Program>
 80015fc:	4603      	mov	r3, r0
 80015fe:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return flashstatus;
 8001600:	7cfb      	ldrb	r3, [r7, #19]
 8001602:	b29b      	uxth	r3, r3
 8001604:	e007      	b.n	8001616 <EE_VerifyPageFullWriteVariable+0xae>
    }
    else
    {
      /* Next address location */
      address = address + 4;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3304      	adds	r3, #4
 800160a:	617b      	str	r3, [r7, #20]
  while (address < pageendaddress)
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	429a      	cmp	r2, r3
 8001612:	d3d1      	bcc.n	80015b8 <EE_VerifyPageFullWriteVariable+0x50>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001614:	2380      	movs	r3, #128	; 0x80
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001620:	08008000 	.word	0x08008000
 8001624:	08008800 	.word	0x08008800
 8001628:	08007fff 	.word	0x08007fff

0800162c <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08c      	sub	sp, #48	; 0x30
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	460a      	mov	r2, r1
 8001636:	80fb      	strh	r3, [r7, #6]
 8001638:	4613      	mov	r3, r2
 800163a:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 800163c:	2300      	movs	r3, #0
 800163e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
 8001642:	4b53      	ldr	r3, [pc, #332]	; (8001790 <EE_PageTransfer+0x164>)
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t oldpageid = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t validpage = PAGE0, varidx = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	847b      	strh	r3, [r7, #34]	; 0x22
 800164e:	2300      	movs	r3, #0
 8001650:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t eepromstatus = 0, readstatus = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	843b      	strh	r3, [r7, #32]
 8001656:	2300      	movs	r3, #0
 8001658:	83fb      	strh	r3, [r7, #30]
  uint32_t page_error = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef s_eraseinit;

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800165e:	2000      	movs	r0, #0
 8001660:	f7ff ff3e 	bl	80014e0 <EE_FindValidPage>
 8001664:	4603      	mov	r3, r0
 8001666:	847b      	strh	r3, [r7, #34]	; 0x22

  if (validpage == PAGE1)       /* Page1 valid */
 8001668:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800166a:	2b40      	cmp	r3, #64	; 0x40
 800166c:	d104      	bne.n	8001678 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    newpageaddress = PAGE0_BASE_ADDRESS;
 800166e:	4b48      	ldr	r3, [pc, #288]	; (8001790 <EE_PageTransfer+0x164>)
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE1_ID;
 8001672:	4b48      	ldr	r3, [pc, #288]	; (8001794 <EE_PageTransfer+0x168>)
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
 8001676:	e009      	b.n	800168c <EE_PageTransfer+0x60>
  }
  else if (validpage == PAGE0)  /* Page0 valid */
 8001678:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800167a:	2b00      	cmp	r3, #0
 800167c:	d104      	bne.n	8001688 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    newpageaddress = PAGE1_BASE_ADDRESS;
 800167e:	4b45      	ldr	r3, [pc, #276]	; (8001794 <EE_PageTransfer+0x168>)
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE0_ID;
 8001682:	4b43      	ldr	r3, [pc, #268]	; (8001790 <EE_PageTransfer+0x164>)
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
 8001686:	e001      	b.n	800168c <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001688:	23ab      	movs	r3, #171	; 0xab
 800168a:	e07c      	b.n	8001786 <EE_PageTransfer+0x15a>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);  
 800168c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001696:	2001      	movs	r0, #1
 8001698:	f001 fb9c 	bl	8002dd4 <HAL_FLASH_Program>
 800169c:	4603      	mov	r3, r0
 800169e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 80016a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <EE_PageTransfer+0x86>
  {
    return flashstatus;
 80016aa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	e069      	b.n	8001786 <EE_PageTransfer+0x15a>
  }
  
  /* Write the variable passed as parameter in the new active page */
  eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80016b2:	88ba      	ldrh	r2, [r7, #4]
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff55 	bl	8001568 <EE_VerifyPageFullWriteVariable>
 80016be:	4603      	mov	r3, r0
 80016c0:	843b      	strh	r3, [r7, #32]
  /* If program operation was failed, a Flash error code is returned */
  if (eepromstatus != HAL_OK)
 80016c2:	8c3b      	ldrh	r3, [r7, #32]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <EE_PageTransfer+0xa0>
  {
    return eepromstatus;
 80016c8:	8c3b      	ldrh	r3, [r7, #32]
 80016ca:	e05c      	b.n	8001786 <EE_PageTransfer+0x15a>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 80016d0:	e027      	b.n	8001722 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80016d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016d4:	4a30      	ldr	r2, [pc, #192]	; (8001798 <EE_PageTransfer+0x16c>)
 80016d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016da:	88fa      	ldrh	r2, [r7, #6]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d01d      	beq.n	800171c <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 80016e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016e2:	4a2d      	ldr	r2, [pc, #180]	; (8001798 <EE_PageTransfer+0x16c>)
 80016e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016e8:	492c      	ldr	r1, [pc, #176]	; (800179c <EE_PageTransfer+0x170>)
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fe8c 	bl	8001408 <EE_ReadVariable>
 80016f0:	4603      	mov	r3, r0
 80016f2:	83fb      	strh	r3, [r7, #30]
      /* In case variable corresponding to the virtual address was found */
      if (readstatus != 0x1)
 80016f4:	8bfb      	ldrh	r3, [r7, #30]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d010      	beq.n	800171c <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 80016fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016fc:	4a26      	ldr	r2, [pc, #152]	; (8001798 <EE_PageTransfer+0x16c>)
 80016fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001702:	4a26      	ldr	r2, [pc, #152]	; (800179c <EE_PageTransfer+0x170>)
 8001704:	8812      	ldrh	r2, [r2, #0]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff2d 	bl	8001568 <EE_VerifyPageFullWriteVariable>
 800170e:	4603      	mov	r3, r0
 8001710:	843b      	strh	r3, [r7, #32]
        /* If program operation was failed, a Flash error code is returned */
        if (eepromstatus != HAL_OK)
 8001712:	8c3b      	ldrh	r3, [r7, #32]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <EE_PageTransfer+0xf0>
        {
          return eepromstatus;
 8001718:	8c3b      	ldrh	r3, [r7, #32]
 800171a:	e034      	b.n	8001786 <EE_PageTransfer+0x15a>
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 800171c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800171e:	3301      	adds	r3, #1
 8001720:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001722:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001724:	2b02      	cmp	r3, #2
 8001726:	d9d4      	bls.n	80016d2 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
  s_eraseinit.PageAddress = oldpageid;
 800172c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172e:	613b      	str	r3, [r7, #16]
  s_eraseinit.NbPages     = 1;
 8001730:	2301      	movs	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 8001734:	f107 0218 	add.w	r2, r7, #24
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f001 fc6a 	bl	8003018 <HAL_FLASHEx_Erase>
 8001744:	4603      	mov	r3, r0
 8001746:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If erase operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 800174a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <EE_PageTransfer+0x12e>
  {
    return flashstatus;
 8001752:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001756:	b29b      	uxth	r3, r3
 8001758:	e015      	b.n	8001786 <EE_PageTransfer+0x15a>
  }

  /* Set new Page status to VALID_PAGE status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);   
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001764:	2001      	movs	r0, #1
 8001766:	f001 fb35 	bl	8002dd4 <HAL_FLASH_Program>
 800176a:	4603      	mov	r3, r0
 800176c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8001770:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <EE_PageTransfer+0x154>
  {
    return flashstatus;
 8001778:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800177c:	b29b      	uxth	r3, r3
 800177e:	e002      	b.n	8001786 <EE_PageTransfer+0x15a>
  }
  
  

  /* Return last operation flash status */
  return flashstatus;
 8001780:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001784:	b29b      	uxth	r3, r3
}
 8001786:	4618      	mov	r0, r3
 8001788:	3730      	adds	r7, #48	; 0x30
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	08008000 	.word	0x08008000
 8001794:	08018000 	.word	0x08018000
 8001798:	20000200 	.word	0x20000200
 800179c:	200001fc 	.word	0x200001fc

080017a0 <lcd_strobe>:
static void lcd_wait_until_not_busy();
static void lcd_strobe(void);
static void lcd_write_nibble(uint8_t c);

static void lcd_strobe(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	// E = ENABLED;
	HAL_GPIO_WritePin(E_PORT, E_PIN, GPIO_PIN_SET);
 80017a4:	2201      	movs	r2, #1
 80017a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <lcd_strobe+0x20>)
 80017ac:	f001 fe87 	bl	80034be <HAL_GPIO_WritePin>

	// E = DISABLED;
	HAL_GPIO_WritePin(E_PORT, E_PIN, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b6:	4802      	ldr	r0, [pc, #8]	; (80017c0 <lcd_strobe+0x20>)
 80017b8:	f001 fe81 	bl	80034be <HAL_GPIO_WritePin>
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40011400 	.word	0x40011400

080017c4 <lcd_wait_until_not_busy>:

static void lcd_wait_until_not_busy()
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
	volatile uint32_t i;

	for (i = 0UL; i < 5000UL; i++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	e003      	b.n	80017d8 <lcd_wait_until_not_busy+0x14>
	{
		__asm__("NOP");
 80017d0:	bf00      	nop
	for (i = 0UL; i < 5000UL; i++)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3301      	adds	r3, #1
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f241 3287 	movw	r2, #4999	; 0x1387
 80017de:	4293      	cmp	r3, r2
 80017e0:	d9f6      	bls.n	80017d0 <lcd_wait_until_not_busy+0xc>
	}
}
 80017e2:	bf00      	nop
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr

080017ee <lcd_clear>:
void lcd_clear(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0
  lcd_write_command(0x01U);
 80017f2:	2001      	movs	r0, #1
 80017f4:	f000 f86e 	bl	80018d4 <lcd_write_command>
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}

080017fc <lcd_puts>:

void lcd_puts(uint8_t row, uint8_t column, const char *s)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	603a      	str	r2, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
 8001808:	460b      	mov	r3, r1
 800180a:	71bb      	strb	r3, [r7, #6]
	size_t i;
	size_t length = strlen(s);
 800180c:	6838      	ldr	r0, [r7, #0]
 800180e:	f7fe fd0b 	bl	8000228 <strlen>
 8001812:	60b8      	str	r0, [r7, #8]

	if (row == 0U)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d106      	bne.n	8001828 <lcd_puts+0x2c>
	{
		lcd_write_command(0x80U + column);
 800181a:	79bb      	ldrb	r3, [r7, #6]
 800181c:	3b80      	subs	r3, #128	; 0x80
 800181e:	b2db      	uxtb	r3, r3
 8001820:	4618      	mov	r0, r3
 8001822:	f000 f857 	bl	80018d4 <lcd_write_command>
 8001826:	e005      	b.n	8001834 <lcd_puts+0x38>
	}
	else
	{
        lcd_write_command(0xc0U + column);
 8001828:	79bb      	ldrb	r3, [r7, #6]
 800182a:	3b40      	subs	r3, #64	; 0x40
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f850 	bl	80018d4 <lcd_write_command>
    }

    for (i = 0U; i < length; i++)
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	e009      	b.n	800184e <lcd_puts+0x52>
    {
        lcd_write_data(s[i]);
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f868 	bl	8001918 <lcd_write_data>
    for (i = 0U; i < length; i++)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	3301      	adds	r3, #1
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	429a      	cmp	r2, r3
 8001854:	d3f1      	bcc.n	800183a <lcd_puts+0x3e>
    }
}
 8001856:	bf00      	nop
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <lcd_write_nibble>:

static void lcd_write_nibble(uint8_t c)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(D4_PORT, D4_PIN, (GPIO_PinState)(c & 0x01U));
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	b2db      	uxtb	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001878:	4815      	ldr	r0, [pc, #84]	; (80018d0 <lcd_write_nibble+0x70>)
 800187a:	f001 fe20 	bl	80034be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_PORT, D5_PIN, (GPIO_PinState)((c >> 1) & 0x01U));
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	085b      	lsrs	r3, r3, #1
 8001882:	b2db      	uxtb	r3, r3
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	461a      	mov	r2, r3
 800188c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001890:	480f      	ldr	r0, [pc, #60]	; (80018d0 <lcd_write_nibble+0x70>)
 8001892:	f001 fe14 	bl	80034be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_PORT, D6_PIN, (GPIO_PinState)((c >> 2) & 0x01U));
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	b2db      	uxtb	r3, r3
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	461a      	mov	r2, r3
 80018a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018a8:	4809      	ldr	r0, [pc, #36]	; (80018d0 <lcd_write_nibble+0x70>)
 80018aa:	f001 fe08 	bl	80034be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PORT, D7_PIN, (GPIO_PinState)((c >> 3) & 0x01U));
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	08db      	lsrs	r3, r3, #3
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c0:	4803      	ldr	r0, [pc, #12]	; (80018d0 <lcd_write_nibble+0x70>)
 80018c2:	f001 fdfc 	bl	80034be <HAL_GPIO_WritePin>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40011400 	.word	0x40011400

080018d4 <lcd_write_command>:

static void lcd_write_command(uint8_t c)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
	lcd_wait_until_not_busy();
 80018de:	f7ff ff71 	bl	80017c4 <lcd_wait_until_not_busy>

	// RS = COMMAND
	HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e8:	480a      	ldr	r0, [pc, #40]	; (8001914 <lcd_write_command+0x40>)
 80018ea:	f001 fde8 	bl	80034be <HAL_GPIO_WritePin>

	lcd_write_nibble(c >> 4);
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ffb3 	bl	8001860 <lcd_write_nibble>
    lcd_strobe();
 80018fa:	f7ff ff51 	bl	80017a0 <lcd_strobe>
	lcd_write_nibble(c);
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ffad 	bl	8001860 <lcd_write_nibble>
    lcd_strobe();
 8001906:	f7ff ff4b 	bl	80017a0 <lcd_strobe>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40011400 	.word	0x40011400

08001918 <lcd_write_data>:

static void lcd_write_data(uint8_t c)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
	// wait until previous operation is finished
	lcd_wait_until_not_busy();
 8001922:	f7ff ff4f 	bl	80017c4 <lcd_wait_until_not_busy>

	// RS = DATA
	HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_SET);
 8001926:	2201      	movs	r2, #1
 8001928:	f44f 7180 	mov.w	r1, #256	; 0x100
 800192c:	480a      	ldr	r0, [pc, #40]	; (8001958 <lcd_write_data+0x40>)
 800192e:	f001 fdc6 	bl	80034be <HAL_GPIO_WritePin>

	lcd_write_nibble(c >> 4);
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	b2db      	uxtb	r3, r3
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff91 	bl	8001860 <lcd_write_nibble>
    lcd_strobe();
 800193e:	f7ff ff2f 	bl	80017a0 <lcd_strobe>
	lcd_write_nibble(c);
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff8b 	bl	8001860 <lcd_write_nibble>
    lcd_strobe();
 800194a:	f7ff ff29 	bl	80017a0 <lcd_strobe>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40011400 	.word	0x40011400

0800195c <lcd_init>:
		lcd_write_data(bytes[row]);
	}
}

void lcd_init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	// pins E_PORT:E_PIN, RS_PORT:RS_PIN and RW_PORT:RW_PIN all default to zero on reset so don't need setting here

    HAL_Delay(15U);
 8001960:	200f      	movs	r0, #15
 8001962:	f001 f933 	bl	8002bcc <HAL_Delay>
    lcd_write_nibble(0x03U);
 8001966:	2003      	movs	r0, #3
 8001968:	f7ff ff7a 	bl	8001860 <lcd_write_nibble>
    lcd_strobe();
 800196c:	f7ff ff18 	bl	80017a0 <lcd_strobe>
    HAL_Delay(5U);
 8001970:	2005      	movs	r0, #5
 8001972:	f001 f92b 	bl	8002bcc <HAL_Delay>
    lcd_strobe();
 8001976:	f7ff ff13 	bl	80017a0 <lcd_strobe>
    HAL_Delay(200U);
 800197a:	20c8      	movs	r0, #200	; 0xc8
 800197c:	f001 f926 	bl	8002bcc <HAL_Delay>
    lcd_strobe();
 8001980:	f7ff ff0e 	bl	80017a0 <lcd_strobe>
    HAL_Delay(1U);
 8001984:	2001      	movs	r0, #1
 8001986:	f001 f921 	bl	8002bcc <HAL_Delay>
	lcd_write_nibble(0x02U);
 800198a:	2002      	movs	r0, #2
 800198c:	f7ff ff68 	bl	8001860 <lcd_write_nibble>
    lcd_strobe();
 8001990:	f7ff ff06 	bl	80017a0 <lcd_strobe>
	lcd_write_command(0x28U);
 8001994:	2028      	movs	r0, #40	; 0x28
 8001996:	f7ff ff9d 	bl	80018d4 <lcd_write_command>
	HAL_Delay(40U);
 800199a:	2028      	movs	r0, #40	; 0x28
 800199c:	f001 f916 	bl	8002bcc <HAL_Delay>
    lcd_write_command(0x06U);
 80019a0:	2006      	movs	r0, #6
 80019a2:	f7ff ff97 	bl	80018d4 <lcd_write_command>
    lcd_write_command(0x0cU);
 80019a6:	200c      	movs	r0, #12
 80019a8:	f7ff ff94 	bl	80018d4 <lcd_write_command>
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <Check_Internet.0>:

  	// this function must called at the same time as the request sent to the server.
  	//print (connecting...) every 650 ms.
  	//user waits for the server response and view it through the Connection_Status function
  	void Check_Internet()
  	{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	f8c7 c004 	str.w	ip, [r7, #4]
  		lcd_init();
 80019ba:	f7ff ffcf 	bl	800195c <lcd_init>
  		lcd_clear();
 80019be:	f7ff ff16 	bl	80017ee <lcd_clear>
  		lcd_puts(0U, 0U, "Connecting...");
 80019c2:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <Check_Internet.0+0x30>)
 80019c4:	2100      	movs	r1, #0
 80019c6:	2000      	movs	r0, #0
 80019c8:	f7ff ff18 	bl	80017fc <lcd_puts>
  		HAL_Delay (650);
 80019cc:	f240 208a 	movw	r0, #650	; 0x28a
 80019d0:	f001 f8fc 	bl	8002bcc <HAL_Delay>
  		lcd_clear();
 80019d4:	f7ff ff0b 	bl	80017ee <lcd_clear>
  	}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	0800c2a8 	.word	0x0800c2a8

080019e4 <main>:
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b0ba      	sub	sp, #232	; 0xe8
 80019e8:	af02      	add	r7, sp, #8
int main(void)
 80019ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80019ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_Init();
 80019f2:	f001 f8b9 	bl	8002b68 <HAL_Init>
  SystemClock_Config();
 80019f6:	f000 fb35 	bl	8002064 <SystemClock_Config>
  MX_GPIO_Init();
 80019fa:	f000 fceb 	bl	80023d4 <MX_GPIO_Init>
  MX_RTC_Init();
 80019fe:	f000 fb91 	bl	8002124 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8001a02:	f000 fbd9 	bl	80021b8 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 8001a06:	f000 fbf7 	bl	80021f8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001a0a:	f000 fcb9 	bl	8002380 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001a0e:	f005 fdfb 	bl	8007608 <MX_FATFS_Init>
  lcd_init();
 8001a12:	f7ff ffa3 	bl	800195c <lcd_init>
  lcd_clear();
 8001a16:	f7ff feea 	bl	80017ee <lcd_clear>
  lcd_puts(0U, 0U, "LCD Project Test");
 8001a1a:	4a7f      	ldr	r2, [pc, #508]	; (8001c18 <main+0x234>)
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f7ff feec 	bl	80017fc <lcd_puts>
  HAL_Delay (1000);
 8001a24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a28:	f001 f8d0 	bl	8002bcc <HAL_Delay>
  lcd_clear();
 8001a2c:	f7ff fedf 	bl	80017ee <lcd_clear>
  DHT_sensor sensor = {
 8001a30:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
 8001a40:	4b76      	ldr	r3, [pc, #472]	; (8001c1c <main+0x238>)
 8001a42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001a46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a4a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
  	lcd_init();
 8001a4e:	f7ff ff85 	bl	800195c <lcd_init>
  	lcd_clear();
 8001a52:	f7ff fecc 	bl	80017ee <lcd_clear>
  	uint8_t i = 1;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
  		}
  	}


  	//Set password
  	char arr_3[40]= "3-Enter PW";
 8001a5c:	4a70      	ldr	r2, [pc, #448]	; (8001c20 <main+0x23c>)
 8001a5e:	f107 0308 	add.w	r3, r7, #8
 8001a62:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a64:	c303      	stmia	r3!, {r0, r1}
 8001a66:	801a      	strh	r2, [r3, #0]
 8001a68:	3302      	adds	r3, #2
 8001a6a:	0c12      	lsrs	r2, r2, #16
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	f107 0313 	add.w	r3, r7, #19
 8001a72:	221d      	movs	r2, #29
 8001a74:	2100      	movs	r1, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f005 ffc8 	bl	8007a0c <memset>
  	int num=0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  i = KEY_PRESS();
 8001a82:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a86:	469c      	mov	ip, r3
 8001a88:	f000 f8fa 	bl	8001c80 <KEY_PRESS.2>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb

	  switch(i)
 8001a92:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001a96:	3b01      	subs	r3, #1
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d8f2      	bhi.n	8001a82 <main+0x9e>
 8001a9c:	a201      	add	r2, pc, #4	; (adr r2, 8001aa4 <main+0xc0>)
 8001a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa2:	bf00      	nop
 8001aa4:	08001ab9 	.word	0x08001ab9
 8001aa8:	08001b1b 	.word	0x08001b1b
 8001aac:	08001ba1 	.word	0x08001ba1
 8001ab0:	08001bb7 	.word	0x08001bb7
 8001ab4:	08001a83 	.word	0x08001a83
	  {
	  	  //Temperature and Humidity
		  case 1:
			  lcd_clear();
 8001ab8:	f7ff fe99 	bl	80017ee <lcd_clear>

			  data = DHT_getData(&sensor);
 8001abc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ac0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fafc 	bl	80010c4 <DHT_getData>
			  sprintf(message1 , "Temprature is : %F",data.temp);
 8001acc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fdc9 	bl	8000668 <__aeabi_f2d>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001ade:	4951      	ldr	r1, [pc, #324]	; (8001c24 <main+0x240>)
 8001ae0:	f006 fe0e 	bl	8008700 <siprintf>
			  lcd_puts(0,0,message1);
 8001ae4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ae8:	461a      	mov	r2, r3
 8001aea:	2100      	movs	r1, #0
 8001aec:	2000      	movs	r0, #0
 8001aee:	f7ff fe85 	bl	80017fc <lcd_puts>
			  sprintf(message2,"Humidity is : %F",data.hum);
 8001af2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fdb6 	bl	8000668 <__aeabi_f2d>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001b04:	4948      	ldr	r1, [pc, #288]	; (8001c28 <main+0x244>)
 8001b06:	f006 fdfb 	bl	8008700 <siprintf>
			  lcd_puts(1,0,message2);
 8001b0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b0e:	461a      	mov	r2, r3
 8001b10:	2100      	movs	r1, #0
 8001b12:	2001      	movs	r0, #1
 8001b14:	f7ff fe72 	bl	80017fc <lcd_puts>
			  break;
 8001b18:	e07d      	b.n	8001c16 <main+0x232>

		  //Date and Time
		  case 2:
			  lcd_clear();
 8001b1a:	f7ff fe68 	bl	80017ee <lcd_clear>
			  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001b1e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b22:	2200      	movs	r2, #0
 8001b24:	4619      	mov	r1, r3
 8001b26:	4841      	ldr	r0, [pc, #260]	; (8001c2c <main+0x248>)
 8001b28:	f002 fc22 	bl	8004370 <HAL_RTC_GetTime>
			  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001b2c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b30:	2200      	movs	r2, #0
 8001b32:	4619      	mov	r1, r3
 8001b34:	483d      	ldr	r0, [pc, #244]	; (8001c2c <main+0x248>)
 8001b36:	f002 fda9 	bl	800468c <HAL_RTC_GetDate>
			  lcd_clear();
 8001b3a:	f7ff fe58 	bl	80017ee <lcd_clear>
			  sprintf((char*)time,"%2.2d:%2.2d:%2.2d", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8001b3e:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8001b42:	461a      	mov	r2, r3
 8001b44:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001b4e:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	460b      	mov	r3, r1
 8001b56:	4936      	ldr	r1, [pc, #216]	; (8001c30 <main+0x24c>)
 8001b58:	f006 fdd2 	bl	8008700 <siprintf>
			  lcd_puts(0U, 0U, time);
 8001b5c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b60:	461a      	mov	r2, r3
 8001b62:	2100      	movs	r1, #0
 8001b64:	2000      	movs	r0, #0
 8001b66:	f7ff fe49 	bl	80017fc <lcd_puts>
			  sprintf((char*)date,"20%2.2d/%2.2d/%2.2d", gDate.Year, gDate.Month, gDate.Date);
 8001b6a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 8001b74:	4619      	mov	r1, r3
 8001b76:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8001b7a:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	460b      	mov	r3, r1
 8001b82:	492c      	ldr	r1, [pc, #176]	; (8001c34 <main+0x250>)
 8001b84:	f006 fdbc 	bl	8008700 <siprintf>
			  lcd_puts(1U, 0U, date);
 8001b88:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	2100      	movs	r1, #0
 8001b90:	2001      	movs	r0, #1
 8001b92:	f7ff fe33 	bl	80017fc <lcd_puts>
			  HAL_Delay(1000);
 8001b96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b9a:	f001 f817 	bl	8002bcc <HAL_Delay>
			  break;
 8001b9e:	e03a      	b.n	8001c16 <main+0x232>

		  //Server connection
		  case 3:
			  Check_Internet();
 8001ba0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ba4:	469c      	mov	ip, r3
 8001ba6:	f7ff ff03 	bl	80019b0 <Check_Internet.0>
			  Connection_Status(1);
 8001baa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bae:	469c      	mov	ip, r3
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f000 f841 	bl	8001c38 <Connection_Status.1>

		  //Set password
		  case 4:
			  lcd_puts(0U, 0U, arr_3);
 8001bb6:	f107 0308 	add.w	r3, r7, #8
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f7ff fe1c 	bl	80017fc <lcd_puts>
			  while(num!=4)
 8001bc4:	e01d      	b.n	8001c02 <main+0x21e>
			  {
				  password[num]=KEY_PRESS();
 8001bc6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bca:	469c      	mov	ip, r3
 8001bcc:	f000 f858 	bl	8001c80 <KEY_PRESS.2>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	1d3a      	adds	r2, r7, #4
 8001bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001bda:	4413      	add	r3, r2
 8001bdc:	460a      	mov	r2, r1
 8001bde:	701a      	strb	r2, [r3, #0]
				  EE_WriteVariable(num, password[num]);
 8001be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001be4:	b298      	uxth	r0, r3
 8001be6:	1d3a      	adds	r2, r7, #4
 8001be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001bec:	4413      	add	r3, r2
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7ff fc52 	bl	800149c <EE_WriteVariable>
			  	  num++;
 8001bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			  while(num!=4)
 8001c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d1dd      	bne.n	8001bc6 <main+0x1e2>
			  }
			  HAL_Delay(10U);
 8001c0a:	200a      	movs	r0, #10
 8001c0c:	f000 ffde 	bl	8002bcc <HAL_Delay>
			  lcd_clear();
 8001c10:	f7ff fded 	bl	80017ee <lcd_clear>
			  break;
 8001c14:	bf00      	nop
	  i = KEY_PRESS();
 8001c16:	e734      	b.n	8001a82 <main+0x9e>
 8001c18:	0800c2b8 	.word	0x0800c2b8
 8001c1c:	40011400 	.word	0x40011400
 8001c20:	0800c31c 	.word	0x0800c31c
 8001c24:	0800c2cc 	.word	0x0800c2cc
 8001c28:	0800c2e0 	.word	0x0800c2e0
 8001c2c:	20000208 	.word	0x20000208
 8001c30:	0800c2f4 	.word	0x0800c2f4
 8001c34:	0800c308 	.word	0x0800c308

08001c38 <Connection_Status.1>:
  	{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	f8c7 c000 	str.w	ip, [r7]
  		lcd_init();
 8001c44:	f7ff fe8a 	bl	800195c <lcd_init>
  		if(Is_Connect==1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d106      	bne.n	8001c5c <Connection_Status.1+0x24>
  			lcd_clear();
 8001c4e:	f7ff fdce 	bl	80017ee <lcd_clear>
  			lcd_puts(0U, 0U, "Connected");
 8001c52:	4a09      	ldr	r2, [pc, #36]	; (8001c78 <Connection_Status.1+0x40>)
 8001c54:	2100      	movs	r1, #0
 8001c56:	2000      	movs	r0, #0
 8001c58:	f7ff fdd0 	bl	80017fc <lcd_puts>
  		if(Is_Connect==2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d106      	bne.n	8001c70 <Connection_Status.1+0x38>
  			lcd_clear();
 8001c62:	f7ff fdc4 	bl	80017ee <lcd_clear>
  			lcd_puts(0U, 0U, "NotConnect");
 8001c66:	4a05      	ldr	r2, [pc, #20]	; (8001c7c <Connection_Status.1+0x44>)
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f7ff fdc6 	bl	80017fc <lcd_puts>
  	}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	0800c344 	.word	0x0800c344
 8001c7c:	0800c350 	.word	0x0800c350

08001c80 <KEY_PRESS.2>:
  	{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	f8c7 c004 	str.w	ip, [r7, #4]
  	  i++;
 8001c8a:	4bb6      	ldr	r3, [pc, #728]	; (8001f64 <KEY_PRESS.2+0x2e4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	4ab4      	ldr	r2, [pc, #720]	; (8001f64 <KEY_PRESS.2+0x2e4>)
 8001c92:	6013      	str	r3, [r2, #0]
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8001c94:	2201      	movs	r2, #1
 8001c96:	2104      	movs	r1, #4
 8001c98:	48b3      	ldr	r0, [pc, #716]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001c9a:	f001 fc10 	bl	80034be <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2108      	movs	r1, #8
 8001ca2:	48b1      	ldr	r0, [pc, #708]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001ca4:	f001 fc0b 	bl	80034be <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2110      	movs	r1, #16
 8001cac:	48ae      	ldr	r0, [pc, #696]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001cae:	f001 fc06 	bl	80034be <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2120      	movs	r1, #32
 8001cb6:	48ac      	ldr	r0, [pc, #688]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001cb8:	f001 fc01 	bl	80034be <HAL_GPIO_WritePin>
  	  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6)==1)
 8001cbc:	2140      	movs	r1, #64	; 0x40
 8001cbe:	48aa      	ldr	r0, [pc, #680]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001cc0:	f001 fbe6 	bl	8003490 <HAL_GPIO_ReadPin>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d10d      	bne.n	8001ce6 <KEY_PRESS.2+0x66>
  	    key_press = 49; //ASCII value of 1
 8001cca:	2331      	movs	r3, #49	; 0x31
 8001ccc:	60bb      	str	r3, [r7, #8]
  	    sprintf(input, "%c", key_press);
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	49a6      	ldr	r1, [pc, #664]	; (8001f6c <KEY_PRESS.2+0x2ec>)
 8001cd2:	48a7      	ldr	r0, [pc, #668]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001cd4:	f006 fd14 	bl	8008700 <siprintf>
  	    lcd_puts(1U, 0U, input);
 8001cd8:	4aa5      	ldr	r2, [pc, #660]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001cda:	2100      	movs	r1, #0
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7ff fd8d 	bl	80017fc <lcd_puts>
  	    return '1';
 8001ce2:	2331      	movs	r3, #49	; 0x31
 8001ce4:	e1b2      	b.n	800204c <KEY_PRESS.2+0x3cc>
  	  else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7)==1)
 8001ce6:	2180      	movs	r1, #128	; 0x80
 8001ce8:	489f      	ldr	r0, [pc, #636]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001cea:	f001 fbd1 	bl	8003490 <HAL_GPIO_ReadPin>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d10d      	bne.n	8001d10 <KEY_PRESS.2+0x90>
  	    key_press = 52; //ASCII value of 4
 8001cf4:	2334      	movs	r3, #52	; 0x34
 8001cf6:	60bb      	str	r3, [r7, #8]
  	    sprintf(input, "%c", key_press);
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	499c      	ldr	r1, [pc, #624]	; (8001f6c <KEY_PRESS.2+0x2ec>)
 8001cfc:	489c      	ldr	r0, [pc, #624]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001cfe:	f006 fcff 	bl	8008700 <siprintf>
  	    lcd_puts(1U, 0U, input);
 8001d02:	4a9b      	ldr	r2, [pc, #620]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001d04:	2100      	movs	r1, #0
 8001d06:	2001      	movs	r0, #1
 8001d08:	f7ff fd78 	bl	80017fc <lcd_puts>
  	    return '4';
 8001d0c:	2334      	movs	r3, #52	; 0x34
 8001d0e:	e19d      	b.n	800204c <KEY_PRESS.2+0x3cc>
  	  else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8) ==1)
 8001d10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d14:	4894      	ldr	r0, [pc, #592]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001d16:	f001 fbbb 	bl	8003490 <HAL_GPIO_ReadPin>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d10d      	bne.n	8001d3c <KEY_PRESS.2+0xbc>
  	    key_press = 55; //ASCII value of 7
 8001d20:	2337      	movs	r3, #55	; 0x37
 8001d22:	60bb      	str	r3, [r7, #8]
  	    sprintf(input, "%c", key_press);
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	4991      	ldr	r1, [pc, #580]	; (8001f6c <KEY_PRESS.2+0x2ec>)
 8001d28:	4891      	ldr	r0, [pc, #580]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001d2a:	f006 fce9 	bl	8008700 <siprintf>
  	    lcd_puts(1U, 0U, input);
 8001d2e:	4a90      	ldr	r2, [pc, #576]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001d30:	2100      	movs	r1, #0
 8001d32:	2001      	movs	r0, #1
 8001d34:	f7ff fd62 	bl	80017fc <lcd_puts>
  	    return '7';
 8001d38:	2337      	movs	r3, #55	; 0x37
 8001d3a:	e187      	b.n	800204c <KEY_PRESS.2+0x3cc>
  	  else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9) ==1)
 8001d3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d40:	4889      	ldr	r0, [pc, #548]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001d42:	f001 fba5 	bl	8003490 <HAL_GPIO_ReadPin>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d10d      	bne.n	8001d68 <KEY_PRESS.2+0xe8>
  	    key_press = 42; //ASCII value of *
 8001d4c:	232a      	movs	r3, #42	; 0x2a
 8001d4e:	60bb      	str	r3, [r7, #8]
  	    sprintf(input, "%c", key_press);
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	4986      	ldr	r1, [pc, #536]	; (8001f6c <KEY_PRESS.2+0x2ec>)
 8001d54:	4886      	ldr	r0, [pc, #536]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001d56:	f006 fcd3 	bl	8008700 <siprintf>
  	    lcd_puts(1U, 0U, input);
 8001d5a:	4a85      	ldr	r2, [pc, #532]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f7ff fd4c 	bl	80017fc <lcd_puts>
  	    return '*';
 8001d64:	232a      	movs	r3, #42	; 0x2a
 8001d66:	e171      	b.n	800204c <KEY_PRESS.2+0x3cc>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2104      	movs	r1, #4
 8001d6c:	487e      	ldr	r0, [pc, #504]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001d6e:	f001 fba6 	bl	80034be <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 8001d72:	2201      	movs	r2, #1
 8001d74:	2108      	movs	r1, #8
 8001d76:	487c      	ldr	r0, [pc, #496]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001d78:	f001 fba1 	bl	80034be <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2110      	movs	r1, #16
 8001d80:	4879      	ldr	r0, [pc, #484]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001d82:	f001 fb9c 	bl	80034be <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2120      	movs	r1, #32
 8001d8a:	4877      	ldr	r0, [pc, #476]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001d8c:	f001 fb97 	bl	80034be <HAL_GPIO_WritePin>
  	  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6) ==1)
 8001d90:	2140      	movs	r1, #64	; 0x40
 8001d92:	4875      	ldr	r0, [pc, #468]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001d94:	f001 fb7c 	bl	8003490 <HAL_GPIO_ReadPin>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d10d      	bne.n	8001dba <KEY_PRESS.2+0x13a>
  	    key_press = 50; //ASCII value of 2
 8001d9e:	2332      	movs	r3, #50	; 0x32
 8001da0:	60bb      	str	r3, [r7, #8]
  	    sprintf(input, "%c", key_press);
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	4971      	ldr	r1, [pc, #452]	; (8001f6c <KEY_PRESS.2+0x2ec>)
 8001da6:	4872      	ldr	r0, [pc, #456]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001da8:	f006 fcaa 	bl	8008700 <siprintf>
  	    lcd_puts(1U, 0U, input);
 8001dac:	4a70      	ldr	r2, [pc, #448]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001dae:	2100      	movs	r1, #0
 8001db0:	2001      	movs	r0, #1
 8001db2:	f7ff fd23 	bl	80017fc <lcd_puts>
  	    return '2';
 8001db6:	2332      	movs	r3, #50	; 0x32
 8001db8:	e148      	b.n	800204c <KEY_PRESS.2+0x3cc>
  	  else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7) ==1)
 8001dba:	2180      	movs	r1, #128	; 0x80
 8001dbc:	486a      	ldr	r0, [pc, #424]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001dbe:	f001 fb67 	bl	8003490 <HAL_GPIO_ReadPin>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d10d      	bne.n	8001de4 <KEY_PRESS.2+0x164>
  	    key_press = 53; //ASCII value of 5
 8001dc8:	2335      	movs	r3, #53	; 0x35
 8001dca:	60bb      	str	r3, [r7, #8]
  	    sprintf(input, "%c", key_press);
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	4967      	ldr	r1, [pc, #412]	; (8001f6c <KEY_PRESS.2+0x2ec>)
 8001dd0:	4867      	ldr	r0, [pc, #412]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001dd2:	f006 fc95 	bl	8008700 <siprintf>
  	    lcd_puts(1U, 0U, input);
 8001dd6:	4a66      	ldr	r2, [pc, #408]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7ff fd0e 	bl	80017fc <lcd_puts>
  	    return '5';
 8001de0:	2335      	movs	r3, #53	; 0x35
 8001de2:	e133      	b.n	800204c <KEY_PRESS.2+0x3cc>
  	  else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8) ==1)
 8001de4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001de8:	485f      	ldr	r0, [pc, #380]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001dea:	f001 fb51 	bl	8003490 <HAL_GPIO_ReadPin>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d10d      	bne.n	8001e10 <KEY_PRESS.2+0x190>
  	    key_press = 56; //ASCII value of 8
 8001df4:	2338      	movs	r3, #56	; 0x38
 8001df6:	60bb      	str	r3, [r7, #8]
  	    sprintf(input, "%c", key_press);
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	495c      	ldr	r1, [pc, #368]	; (8001f6c <KEY_PRESS.2+0x2ec>)
 8001dfc:	485c      	ldr	r0, [pc, #368]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001dfe:	f006 fc7f 	bl	8008700 <siprintf>
  	    lcd_puts(1U, 0U, input);
 8001e02:	4a5b      	ldr	r2, [pc, #364]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001e04:	2100      	movs	r1, #0
 8001e06:	2001      	movs	r0, #1
 8001e08:	f7ff fcf8 	bl	80017fc <lcd_puts>
  	    return '8';
 8001e0c:	2338      	movs	r3, #56	; 0x38
 8001e0e:	e11d      	b.n	800204c <KEY_PRESS.2+0x3cc>
  	  else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9)==1)
 8001e10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e14:	4854      	ldr	r0, [pc, #336]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001e16:	f001 fb3b 	bl	8003490 <HAL_GPIO_ReadPin>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d10d      	bne.n	8001e3c <KEY_PRESS.2+0x1bc>
  	    key_press = 48; //ASCII value of 0
 8001e20:	2330      	movs	r3, #48	; 0x30
 8001e22:	60bb      	str	r3, [r7, #8]
  	    sprintf(input, "%c", key_press);
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	4951      	ldr	r1, [pc, #324]	; (8001f6c <KEY_PRESS.2+0x2ec>)
 8001e28:	4851      	ldr	r0, [pc, #324]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001e2a:	f006 fc69 	bl	8008700 <siprintf>
  	    lcd_puts(1U, 0U, input);
 8001e2e:	4a50      	ldr	r2, [pc, #320]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001e30:	2100      	movs	r1, #0
 8001e32:	2001      	movs	r0, #1
 8001e34:	f7ff fce2 	bl	80017fc <lcd_puts>
  	    return '0';
 8001e38:	2330      	movs	r3, #48	; 0x30
 8001e3a:	e107      	b.n	800204c <KEY_PRESS.2+0x3cc>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2104      	movs	r1, #4
 8001e40:	4849      	ldr	r0, [pc, #292]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001e42:	f001 fb3c 	bl	80034be <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2108      	movs	r1, #8
 8001e4a:	4847      	ldr	r0, [pc, #284]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001e4c:	f001 fb37 	bl	80034be <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);
 8001e50:	2201      	movs	r2, #1
 8001e52:	2110      	movs	r1, #16
 8001e54:	4844      	ldr	r0, [pc, #272]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001e56:	f001 fb32 	bl	80034be <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2120      	movs	r1, #32
 8001e5e:	4842      	ldr	r0, [pc, #264]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001e60:	f001 fb2d 	bl	80034be <HAL_GPIO_WritePin>
  	  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6)==1)
 8001e64:	2140      	movs	r1, #64	; 0x40
 8001e66:	4840      	ldr	r0, [pc, #256]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001e68:	f001 fb12 	bl	8003490 <HAL_GPIO_ReadPin>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d10d      	bne.n	8001e8e <KEY_PRESS.2+0x20e>
  	    key_press = 51; //ASCII value of 3
 8001e72:	2333      	movs	r3, #51	; 0x33
 8001e74:	60bb      	str	r3, [r7, #8]
  	    sprintf(input, "%c", key_press);
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	493c      	ldr	r1, [pc, #240]	; (8001f6c <KEY_PRESS.2+0x2ec>)
 8001e7a:	483d      	ldr	r0, [pc, #244]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001e7c:	f006 fc40 	bl	8008700 <siprintf>
  	    lcd_puts(1U, 0U, input);
 8001e80:	4a3b      	ldr	r2, [pc, #236]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001e82:	2100      	movs	r1, #0
 8001e84:	2001      	movs	r0, #1
 8001e86:	f7ff fcb9 	bl	80017fc <lcd_puts>
  	    return '3';
 8001e8a:	2333      	movs	r3, #51	; 0x33
 8001e8c:	e0de      	b.n	800204c <KEY_PRESS.2+0x3cc>
  	  else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7)==1)
 8001e8e:	2180      	movs	r1, #128	; 0x80
 8001e90:	4835      	ldr	r0, [pc, #212]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001e92:	f001 fafd 	bl	8003490 <HAL_GPIO_ReadPin>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d10d      	bne.n	8001eb8 <KEY_PRESS.2+0x238>
  	    key_press = 54; //ASCII value of 6
 8001e9c:	2336      	movs	r3, #54	; 0x36
 8001e9e:	60bb      	str	r3, [r7, #8]
  	    sprintf(input, "%c", key_press);
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	4932      	ldr	r1, [pc, #200]	; (8001f6c <KEY_PRESS.2+0x2ec>)
 8001ea4:	4832      	ldr	r0, [pc, #200]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001ea6:	f006 fc2b 	bl	8008700 <siprintf>
  	    lcd_puts(1U, 0U, input);
 8001eaa:	4a31      	ldr	r2, [pc, #196]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001eac:	2100      	movs	r1, #0
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f7ff fca4 	bl	80017fc <lcd_puts>
  	    return '6';
 8001eb4:	2336      	movs	r3, #54	; 0x36
 8001eb6:	e0c9      	b.n	800204c <KEY_PRESS.2+0x3cc>
  	  else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8)==1)
 8001eb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ebc:	482a      	ldr	r0, [pc, #168]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001ebe:	f001 fae7 	bl	8003490 <HAL_GPIO_ReadPin>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d10d      	bne.n	8001ee4 <KEY_PRESS.2+0x264>
  	    key_press = 57; //ASCII value of 9
 8001ec8:	2339      	movs	r3, #57	; 0x39
 8001eca:	60bb      	str	r3, [r7, #8]
  	    sprintf(input, "%c", key_press);
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	4927      	ldr	r1, [pc, #156]	; (8001f6c <KEY_PRESS.2+0x2ec>)
 8001ed0:	4827      	ldr	r0, [pc, #156]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001ed2:	f006 fc15 	bl	8008700 <siprintf>
  	    lcd_puts(1U, 0U, input);
 8001ed6:	4a26      	ldr	r2, [pc, #152]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2001      	movs	r0, #1
 8001edc:	f7ff fc8e 	bl	80017fc <lcd_puts>
  	    return 9;
 8001ee0:	2309      	movs	r3, #9
 8001ee2:	e0b3      	b.n	800204c <KEY_PRESS.2+0x3cc>
  	  else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9)==1)
 8001ee4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ee8:	481f      	ldr	r0, [pc, #124]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001eea:	f001 fad1 	bl	8003490 <HAL_GPIO_ReadPin>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d10d      	bne.n	8001f10 <KEY_PRESS.2+0x290>
  	    key_press = 35; //ASCII value of #
 8001ef4:	2323      	movs	r3, #35	; 0x23
 8001ef6:	60bb      	str	r3, [r7, #8]
  	    sprintf(input, "%c", key_press);
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	491c      	ldr	r1, [pc, #112]	; (8001f6c <KEY_PRESS.2+0x2ec>)
 8001efc:	481c      	ldr	r0, [pc, #112]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001efe:	f006 fbff 	bl	8008700 <siprintf>
  	    lcd_puts(1U, 0U, input);
 8001f02:	4a1b      	ldr	r2, [pc, #108]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001f04:	2100      	movs	r1, #0
 8001f06:	2001      	movs	r0, #1
 8001f08:	f7ff fc78 	bl	80017fc <lcd_puts>
  	    return '#';
 8001f0c:	2323      	movs	r3, #35	; 0x23
 8001f0e:	e09d      	b.n	800204c <KEY_PRESS.2+0x3cc>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2104      	movs	r1, #4
 8001f14:	4814      	ldr	r0, [pc, #80]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001f16:	f001 fad2 	bl	80034be <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2108      	movs	r1, #8
 8001f1e:	4812      	ldr	r0, [pc, #72]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001f20:	f001 facd 	bl	80034be <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f24:	2200      	movs	r2, #0
 8001f26:	2110      	movs	r1, #16
 8001f28:	480f      	ldr	r0, [pc, #60]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001f2a:	f001 fac8 	bl	80034be <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_SET);
 8001f2e:	2201      	movs	r2, #1
 8001f30:	2120      	movs	r1, #32
 8001f32:	480d      	ldr	r0, [pc, #52]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001f34:	f001 fac3 	bl	80034be <HAL_GPIO_WritePin>
  	  if( HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6) == 1)
 8001f38:	2140      	movs	r1, #64	; 0x40
 8001f3a:	480b      	ldr	r0, [pc, #44]	; (8001f68 <KEY_PRESS.2+0x2e8>)
 8001f3c:	f001 faa8 	bl	8003490 <HAL_GPIO_ReadPin>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d116      	bne.n	8001f74 <KEY_PRESS.2+0x2f4>
  	    key_press = 65; //ASCII value of A
 8001f46:	2341      	movs	r3, #65	; 0x41
 8001f48:	60bb      	str	r3, [r7, #8]
  	    sprintf(input, "%c", key_press);
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	4907      	ldr	r1, [pc, #28]	; (8001f6c <KEY_PRESS.2+0x2ec>)
 8001f4e:	4808      	ldr	r0, [pc, #32]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001f50:	f006 fbd6 	bl	8008700 <siprintf>
  	    lcd_puts(1U, 0U, input);
 8001f54:	4a06      	ldr	r2, [pc, #24]	; (8001f70 <KEY_PRESS.2+0x2f0>)
 8001f56:	2100      	movs	r1, #0
 8001f58:	2001      	movs	r0, #1
 8001f5a:	f7ff fc4f 	bl	80017fc <lcd_puts>
  	    return 'A';
 8001f5e:	2341      	movs	r3, #65	; 0x41
 8001f60:	e074      	b.n	800204c <KEY_PRESS.2+0x3cc>
 8001f62:	bf00      	nop
 8001f64:	2000032c 	.word	0x2000032c
 8001f68:	40011c00 	.word	0x40011c00
 8001f6c:	0800c35c 	.word	0x0800c35c
 8001f70:	20000330 	.word	0x20000330
  	  else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7)==1)
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	4837      	ldr	r0, [pc, #220]	; (8002054 <KEY_PRESS.2+0x3d4>)
 8001f78:	f001 fa8a 	bl	8003490 <HAL_GPIO_ReadPin>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d10d      	bne.n	8001f9e <KEY_PRESS.2+0x31e>
  	    key_press = 66; //ASCII value of B
 8001f82:	2342      	movs	r3, #66	; 0x42
 8001f84:	60bb      	str	r3, [r7, #8]
  	    sprintf(input, "%c", key_press);
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	4933      	ldr	r1, [pc, #204]	; (8002058 <KEY_PRESS.2+0x3d8>)
 8001f8a:	4834      	ldr	r0, [pc, #208]	; (800205c <KEY_PRESS.2+0x3dc>)
 8001f8c:	f006 fbb8 	bl	8008700 <siprintf>
  	    lcd_puts(1U, 0U, input);
 8001f90:	4a32      	ldr	r2, [pc, #200]	; (800205c <KEY_PRESS.2+0x3dc>)
 8001f92:	2100      	movs	r1, #0
 8001f94:	2001      	movs	r0, #1
 8001f96:	f7ff fc31 	bl	80017fc <lcd_puts>
  	    return 'B';
 8001f9a:	2342      	movs	r3, #66	; 0x42
 8001f9c:	e056      	b.n	800204c <KEY_PRESS.2+0x3cc>
  	  else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8)==1)
 8001f9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fa2:	482c      	ldr	r0, [pc, #176]	; (8002054 <KEY_PRESS.2+0x3d4>)
 8001fa4:	f001 fa74 	bl	8003490 <HAL_GPIO_ReadPin>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d10d      	bne.n	8001fca <KEY_PRESS.2+0x34a>
  	    key_press = 67; //ASCII value of C
 8001fae:	2343      	movs	r3, #67	; 0x43
 8001fb0:	60bb      	str	r3, [r7, #8]
  	    sprintf(input, "%c", key_press);
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	4928      	ldr	r1, [pc, #160]	; (8002058 <KEY_PRESS.2+0x3d8>)
 8001fb6:	4829      	ldr	r0, [pc, #164]	; (800205c <KEY_PRESS.2+0x3dc>)
 8001fb8:	f006 fba2 	bl	8008700 <siprintf>
  	    lcd_puts(1U, 0U, input);
 8001fbc:	4a27      	ldr	r2, [pc, #156]	; (800205c <KEY_PRESS.2+0x3dc>)
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f7ff fc1b 	bl	80017fc <lcd_puts>
  	    return 'C';
 8001fc6:	2343      	movs	r3, #67	; 0x43
 8001fc8:	e040      	b.n	800204c <KEY_PRESS.2+0x3cc>
  	  else if( HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9) == 1)
 8001fca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fce:	4821      	ldr	r0, [pc, #132]	; (8002054 <KEY_PRESS.2+0x3d4>)
 8001fd0:	f001 fa5e 	bl	8003490 <HAL_GPIO_ReadPin>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d10d      	bne.n	8001ff6 <KEY_PRESS.2+0x376>
  	    key_press = 68; //ASCII value of D
 8001fda:	2344      	movs	r3, #68	; 0x44
 8001fdc:	60bb      	str	r3, [r7, #8]
  	    sprintf(input, "%c", key_press);
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	491d      	ldr	r1, [pc, #116]	; (8002058 <KEY_PRESS.2+0x3d8>)
 8001fe2:	481e      	ldr	r0, [pc, #120]	; (800205c <KEY_PRESS.2+0x3dc>)
 8001fe4:	f006 fb8c 	bl	8008700 <siprintf>
  	    lcd_puts(1U, 0U, input);
 8001fe8:	4a1c      	ldr	r2, [pc, #112]	; (800205c <KEY_PRESS.2+0x3dc>)
 8001fea:	2100      	movs	r1, #0
 8001fec:	2001      	movs	r0, #1
 8001fee:	f7ff fc05 	bl	80017fc <lcd_puts>
  	    return 'D';
 8001ff2:	2344      	movs	r3, #68	; 0x44
 8001ff4:	e02a      	b.n	800204c <KEY_PRESS.2+0x3cc>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	2104      	movs	r1, #4
 8001ffa:	4816      	ldr	r0, [pc, #88]	; (8002054 <KEY_PRESS.2+0x3d4>)
 8001ffc:	f001 fa5f 	bl	80034be <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 8002000:	2201      	movs	r2, #1
 8002002:	2108      	movs	r1, #8
 8002004:	4813      	ldr	r0, [pc, #76]	; (8002054 <KEY_PRESS.2+0x3d4>)
 8002006:	f001 fa5a 	bl	80034be <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);
 800200a:	2201      	movs	r2, #1
 800200c:	2110      	movs	r1, #16
 800200e:	4811      	ldr	r0, [pc, #68]	; (8002054 <KEY_PRESS.2+0x3d4>)
 8002010:	f001 fa55 	bl	80034be <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_SET);
 8002014:	2201      	movs	r2, #1
 8002016:	2120      	movs	r1, #32
 8002018:	480e      	ldr	r0, [pc, #56]	; (8002054 <KEY_PRESS.2+0x3d4>)
 800201a:	f001 fa50 	bl	80034be <HAL_GPIO_WritePin>
  	  if(i==4){
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <KEY_PRESS.2+0x3e0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b04      	cmp	r3, #4
 8002024:	d112      	bne.n	800204c <KEY_PRESS.2+0x3cc>
  		  for(int j=0;j<4;i++)
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	e009      	b.n	8002040 <KEY_PRESS.2+0x3c0>
  			  input[j] = 0;
 800202c:	4a0b      	ldr	r2, [pc, #44]	; (800205c <KEY_PRESS.2+0x3dc>)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4413      	add	r3, r2
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
  		  for(int j=0;j<4;i++)
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <KEY_PRESS.2+0x3e0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	3301      	adds	r3, #1
 800203c:	4a08      	ldr	r2, [pc, #32]	; (8002060 <KEY_PRESS.2+0x3e0>)
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b03      	cmp	r3, #3
 8002044:	ddf2      	ble.n	800202c <KEY_PRESS.2+0x3ac>
  		  i=0;
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <KEY_PRESS.2+0x3e0>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
  	}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40011c00 	.word	0x40011c00
 8002058:	0800c35c 	.word	0x0800c35c
 800205c:	20000330 	.word	0x20000330
 8002060:	2000032c 	.word	0x2000032c

08002064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b096      	sub	sp, #88	; 0x58
 8002068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800206a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800206e:	2228      	movs	r2, #40	; 0x28
 8002070:	2100      	movs	r1, #0
 8002072:	4618      	mov	r0, r3
 8002074:	f005 fcca 	bl	8007a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	60da      	str	r2, [r3, #12]
 8002094:	611a      	str	r2, [r3, #16]
 8002096:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002098:	2309      	movs	r3, #9
 800209a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800209c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80020a2:	2300      	movs	r3, #0
 80020a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020a6:	2301      	movs	r3, #1
 80020a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80020aa:	2301      	movs	r3, #1
 80020ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020ae:	2302      	movs	r3, #2
 80020b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80020b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80020bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020c2:	4618      	mov	r0, r3
 80020c4:	f001 fa42 	bl	800354c <HAL_RCC_OscConfig>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80020ce:	f000 fa45 	bl	800255c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020d2:	230f      	movs	r3, #15
 80020d4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020d6:	2302      	movs	r3, #2
 80020d8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020e4:	2300      	movs	r3, #0
 80020e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020e8:	f107 031c 	add.w	r3, r7, #28
 80020ec:	2102      	movs	r1, #2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f001 fcae 	bl	8003a50 <HAL_RCC_ClockConfig>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80020fa:	f000 fa2f 	bl	800255c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020fe:	2301      	movs	r3, #1
 8002100:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002102:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002106:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002108:	1d3b      	adds	r3, r7, #4
 800210a:	4618      	mov	r0, r3
 800210c:	f001 fe68 	bl	8003de0 <HAL_RCCEx_PeriphCLKConfig>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002116:	f000 fa21 	bl	800255c <Error_Handler>
  }
}
 800211a:	bf00      	nop
 800211c:	3758      	adds	r7, #88	; 0x58
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800212a:	1d3b      	adds	r3, r7, #4
 800212c:	2100      	movs	r1, #0
 800212e:	460a      	mov	r2, r1
 8002130:	801a      	strh	r2, [r3, #0]
 8002132:	460a      	mov	r2, r1
 8002134:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002136:	2300      	movs	r3, #0
 8002138:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800213a:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <MX_RTC_Init+0x8c>)
 800213c:	4a1d      	ldr	r2, [pc, #116]	; (80021b4 <MX_RTC_Init+0x90>)
 800213e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002140:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <MX_RTC_Init+0x8c>)
 8002142:	f04f 32ff 	mov.w	r2, #4294967295
 8002146:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002148:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <MX_RTC_Init+0x8c>)
 800214a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800214e:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002150:	4817      	ldr	r0, [pc, #92]	; (80021b0 <MX_RTC_Init+0x8c>)
 8002152:	f001 ffdf 	bl	8004114 <HAL_RTC_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 800215c:	f000 f9fe 	bl	800255c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8002160:	2312      	movs	r3, #18
 8002162:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x14;
 8002164:	2314      	movs	r3, #20
 8002166:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x17;
 8002168:	2317      	movs	r3, #23
 800216a:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800216c:	1d3b      	adds	r3, r7, #4
 800216e:	2201      	movs	r2, #1
 8002170:	4619      	mov	r1, r3
 8002172:	480f      	ldr	r0, [pc, #60]	; (80021b0 <MX_RTC_Init+0x8c>)
 8002174:	f002 f864 	bl	8004240 <HAL_RTC_SetTime>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800217e:	f000 f9ed 	bl	800255c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002182:	2301      	movs	r3, #1
 8002184:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002186:	2301      	movs	r3, #1
 8002188:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 800218a:	2301      	movs	r3, #1
 800218c:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x22;
 800218e:	2322      	movs	r3, #34	; 0x22
 8002190:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002192:	463b      	mov	r3, r7
 8002194:	2201      	movs	r2, #1
 8002196:	4619      	mov	r1, r3
 8002198:	4805      	ldr	r0, [pc, #20]	; (80021b0 <MX_RTC_Init+0x8c>)
 800219a:	f002 f9c1 	bl	8004520 <HAL_RTC_SetDate>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80021a4:	f000 f9da 	bl	800255c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000208 	.word	0x20000208
 80021b4:	40002800 	.word	0x40002800

080021b8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <MX_SDIO_SD_Init+0x38>)
 80021be:	4a0d      	ldr	r2, [pc, #52]	; (80021f4 <MX_SDIO_SD_Init+0x3c>)
 80021c0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80021c2:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <MX_SDIO_SD_Init+0x38>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80021c8:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <MX_SDIO_SD_Init+0x38>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80021ce:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <MX_SDIO_SD_Init+0x38>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <MX_SDIO_SD_Init+0x38>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <MX_SDIO_SD_Init+0x38>)
 80021dc:	2200      	movs	r2, #0
 80021de:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80021e0:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <MX_SDIO_SD_Init+0x38>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	2000021c 	.word	0x2000021c
 80021f4:	40018000 	.word	0x40018000

080021f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b096      	sub	sp, #88	; 0x58
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800220c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	60da      	str	r2, [r3, #12]
 8002224:	611a      	str	r2, [r3, #16]
 8002226:	615a      	str	r2, [r3, #20]
 8002228:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	2220      	movs	r2, #32
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f005 fbeb 	bl	8007a0c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002236:	4b50      	ldr	r3, [pc, #320]	; (8002378 <MX_TIM1_Init+0x180>)
 8002238:	4a50      	ldr	r2, [pc, #320]	; (800237c <MX_TIM1_Init+0x184>)
 800223a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1107-1;
 800223c:	4b4e      	ldr	r3, [pc, #312]	; (8002378 <MX_TIM1_Init+0x180>)
 800223e:	f240 4252 	movw	r2, #1106	; 0x452
 8002242:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002244:	4b4c      	ldr	r3, [pc, #304]	; (8002378 <MX_TIM1_Init+0x180>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 800224a:	4b4b      	ldr	r3, [pc, #300]	; (8002378 <MX_TIM1_Init+0x180>)
 800224c:	22fe      	movs	r2, #254	; 0xfe
 800224e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002250:	4b49      	ldr	r3, [pc, #292]	; (8002378 <MX_TIM1_Init+0x180>)
 8002252:	2200      	movs	r2, #0
 8002254:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002256:	4b48      	ldr	r3, [pc, #288]	; (8002378 <MX_TIM1_Init+0x180>)
 8002258:	2200      	movs	r2, #0
 800225a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800225c:	4b46      	ldr	r3, [pc, #280]	; (8002378 <MX_TIM1_Init+0x180>)
 800225e:	2200      	movs	r2, #0
 8002260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002262:	4845      	ldr	r0, [pc, #276]	; (8002378 <MX_TIM1_Init+0x180>)
 8002264:	f003 fc8e 	bl	8005b84 <HAL_TIM_Base_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800226e:	f000 f975 	bl	800255c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002276:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002278:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800227c:	4619      	mov	r1, r3
 800227e:	483e      	ldr	r0, [pc, #248]	; (8002378 <MX_TIM1_Init+0x180>)
 8002280:	f003 ff4e 	bl	8006120 <HAL_TIM_ConfigClockSource>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800228a:	f000 f967 	bl	800255c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800228e:	483a      	ldr	r0, [pc, #232]	; (8002378 <MX_TIM1_Init+0x180>)
 8002290:	f003 fd28 	bl	8005ce4 <HAL_TIM_PWM_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800229a:	f000 f95f 	bl	800255c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800229e:	2300      	movs	r3, #0
 80022a0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022aa:	4619      	mov	r1, r3
 80022ac:	4832      	ldr	r0, [pc, #200]	; (8002378 <MX_TIM1_Init+0x180>)
 80022ae:	f004 fadb 	bl	8006868 <HAL_TIMEx_MasterConfigSynchronization>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80022b8:	f000 f950 	bl	800255c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022bc:	2360      	movs	r3, #96	; 0x60
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022c4:	2300      	movs	r3, #0
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022c8:	2300      	movs	r3, #0
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022cc:	2300      	movs	r3, #0
 80022ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022d0:	2300      	movs	r3, #0
 80022d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022d4:	2300      	movs	r3, #0
 80022d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022dc:	2200      	movs	r2, #0
 80022de:	4619      	mov	r1, r3
 80022e0:	4825      	ldr	r0, [pc, #148]	; (8002378 <MX_TIM1_Init+0x180>)
 80022e2:	f003 fe5f 	bl	8005fa4 <HAL_TIM_PWM_ConfigChannel>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80022ec:	f000 f936 	bl	800255c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f4:	2204      	movs	r2, #4
 80022f6:	4619      	mov	r1, r3
 80022f8:	481f      	ldr	r0, [pc, #124]	; (8002378 <MX_TIM1_Init+0x180>)
 80022fa:	f003 fe53 	bl	8005fa4 <HAL_TIM_PWM_ConfigChannel>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002304:	f000 f92a 	bl	800255c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800230c:	2208      	movs	r2, #8
 800230e:	4619      	mov	r1, r3
 8002310:	4819      	ldr	r0, [pc, #100]	; (8002378 <MX_TIM1_Init+0x180>)
 8002312:	f003 fe47 	bl	8005fa4 <HAL_TIM_PWM_ConfigChannel>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800231c:	f000 f91e 	bl	800255c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002324:	220c      	movs	r2, #12
 8002326:	4619      	mov	r1, r3
 8002328:	4813      	ldr	r0, [pc, #76]	; (8002378 <MX_TIM1_Init+0x180>)
 800232a:	f003 fe3b 	bl	8005fa4 <HAL_TIM_PWM_ConfigChannel>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002334:	f000 f912 	bl	800255c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800233c:	2300      	movs	r3, #0
 800233e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800234c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002350:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	4619      	mov	r1, r3
 800235a:	4807      	ldr	r0, [pc, #28]	; (8002378 <MX_TIM1_Init+0x180>)
 800235c:	f004 faf0 	bl	8006940 <HAL_TIMEx_ConfigBreakDeadTime>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002366:	f000 f8f9 	bl	800255c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800236a:	4803      	ldr	r0, [pc, #12]	; (8002378 <MX_TIM1_Init+0x180>)
 800236c:	f000 f9ba 	bl	80026e4 <HAL_TIM_MspPostInit>

}
 8002370:	bf00      	nop
 8002372:	3758      	adds	r7, #88	; 0x58
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	200002a0 	.word	0x200002a0
 800237c:	40012c00 	.word	0x40012c00

08002380 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <MX_USART1_UART_Init+0x4c>)
 8002386:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <MX_USART1_UART_Init+0x50>)
 8002388:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <MX_USART1_UART_Init+0x4c>)
 800238c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002390:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <MX_USART1_UART_Init+0x4c>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <MX_USART1_UART_Init+0x4c>)
 800239a:	2200      	movs	r2, #0
 800239c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800239e:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <MX_USART1_UART_Init+0x4c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <MX_USART1_UART_Init+0x4c>)
 80023a6:	220c      	movs	r2, #12
 80023a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <MX_USART1_UART_Init+0x4c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <MX_USART1_UART_Init+0x4c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023b6:	4805      	ldr	r0, [pc, #20]	; (80023cc <MX_USART1_UART_Init+0x4c>)
 80023b8:	f004 fb25 	bl	8006a06 <HAL_UART_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023c2:	f000 f8cb 	bl	800255c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	200002e8 	.word	0x200002e8
 80023d0:	40013800 	.word	0x40013800

080023d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023da:	f107 0318 	add.w	r3, r7, #24
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e8:	4b4d      	ldr	r3, [pc, #308]	; (8002520 <MX_GPIO_Init+0x14c>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	4a4c      	ldr	r2, [pc, #304]	; (8002520 <MX_GPIO_Init+0x14c>)
 80023ee:	f043 0310 	orr.w	r3, r3, #16
 80023f2:	6193      	str	r3, [r2, #24]
 80023f4:	4b4a      	ldr	r3, [pc, #296]	; (8002520 <MX_GPIO_Init+0x14c>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002400:	4b47      	ldr	r3, [pc, #284]	; (8002520 <MX_GPIO_Init+0x14c>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	4a46      	ldr	r2, [pc, #280]	; (8002520 <MX_GPIO_Init+0x14c>)
 8002406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800240a:	6193      	str	r3, [r2, #24]
 800240c:	4b44      	ldr	r3, [pc, #272]	; (8002520 <MX_GPIO_Init+0x14c>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002418:	4b41      	ldr	r3, [pc, #260]	; (8002520 <MX_GPIO_Init+0x14c>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	4a40      	ldr	r2, [pc, #256]	; (8002520 <MX_GPIO_Init+0x14c>)
 800241e:	f043 0304 	orr.w	r3, r3, #4
 8002422:	6193      	str	r3, [r2, #24]
 8002424:	4b3e      	ldr	r3, [pc, #248]	; (8002520 <MX_GPIO_Init+0x14c>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002430:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <MX_GPIO_Init+0x14c>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	4a3a      	ldr	r2, [pc, #232]	; (8002520 <MX_GPIO_Init+0x14c>)
 8002436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800243a:	6193      	str	r3, [r2, #24]
 800243c:	4b38      	ldr	r3, [pc, #224]	; (8002520 <MX_GPIO_Init+0x14c>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002448:	4b35      	ldr	r3, [pc, #212]	; (8002520 <MX_GPIO_Init+0x14c>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	4a34      	ldr	r2, [pc, #208]	; (8002520 <MX_GPIO_Init+0x14c>)
 800244e:	f043 0320 	orr.w	r3, r3, #32
 8002452:	6193      	str	r3, [r2, #24]
 8002454:	4b32      	ldr	r3, [pc, #200]	; (8002520 <MX_GPIO_Init+0x14c>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002460:	2200      	movs	r2, #0
 8002462:	213c      	movs	r1, #60	; 0x3c
 8002464:	482f      	ldr	r0, [pc, #188]	; (8002524 <MX_GPIO_Init+0x150>)
 8002466:	f001 f82a 	bl	80034be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800246a:	2200      	movs	r2, #0
 800246c:	210d      	movs	r1, #13
 800246e:	482e      	ldr	r0, [pc, #184]	; (8002528 <MX_GPIO_Init+0x154>)
 8002470:	f001 f825 	bl	80034be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RS_Pin|E_Pin|D4_Pin|D5_Pin
 8002474:	2200      	movs	r2, #0
 8002476:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 800247a:	482c      	ldr	r0, [pc, #176]	; (800252c <MX_GPIO_Init+0x158>)
 800247c:	f001 f81f 	bl	80034be <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pins : PF2 PF3 PF4 PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002480:	233c      	movs	r3, #60	; 0x3c
 8002482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002484:	2301      	movs	r3, #1
 8002486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2302      	movs	r3, #2
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002490:	f107 0318 	add.w	r3, r7, #24
 8002494:	4619      	mov	r1, r3
 8002496:	4823      	ldr	r0, [pc, #140]	; (8002524 <MX_GPIO_Init+0x150>)
 8002498:	f000 fe66 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800249c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80024a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024a2:	4b23      	ldr	r3, [pc, #140]	; (8002530 <MX_GPIO_Init+0x15c>)
 80024a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024aa:	f107 0318 	add.w	r3, r7, #24
 80024ae:	4619      	mov	r1, r3
 80024b0:	481c      	ldr	r0, [pc, #112]	; (8002524 <MX_GPIO_Init+0x150>)
 80024b2:	f000 fe59 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED2_Pin;
 80024b6:	230d      	movs	r3, #13
 80024b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ba:	2301      	movs	r3, #1
 80024bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	2302      	movs	r3, #2
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c6:	f107 0318 	add.w	r3, r7, #24
 80024ca:	4619      	mov	r1, r3
 80024cc:	4816      	ldr	r0, [pc, #88]	; (8002528 <MX_GPIO_Init+0x154>)
 80024ce:	f000 fe4b 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBTN2_Pin PBTN3_Pin PBTN1_Pin */
  GPIO_InitStruct.Pin = PBTN2_Pin|PBTN3_Pin|PBTN1_Pin;
 80024d2:	2338      	movs	r3, #56	; 0x38
 80024d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024da:	2301      	movs	r3, #1
 80024dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024de:	f107 0318 	add.w	r3, r7, #24
 80024e2:	4619      	mov	r1, r3
 80024e4:	4813      	ldr	r0, [pc, #76]	; (8002534 <MX_GPIO_Init+0x160>)
 80024e6:	f000 fe3f 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin E_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin PD14 */
  GPIO_InitStruct.Pin = RS_Pin|E_Pin|D4_Pin|D5_Pin
 80024ea:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 80024ee:	61bb      	str	r3, [r7, #24]
                          |D6_Pin|D7_Pin|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f0:	2301      	movs	r3, #1
 80024f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f8:	2302      	movs	r3, #2
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024fc:	f107 0318 	add.w	r3, r7, #24
 8002500:	4619      	mov	r1, r3
 8002502:	480a      	ldr	r0, [pc, #40]	; (800252c <MX_GPIO_Init+0x158>)
 8002504:	f000 fe30 	bl	8003168 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002508:	2200      	movs	r2, #0
 800250a:	2100      	movs	r1, #0
 800250c:	2017      	movs	r0, #23
 800250e:	f000 fc36 	bl	8002d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002512:	2017      	movs	r0, #23
 8002514:	f000 fc4f 	bl	8002db6 <HAL_NVIC_EnableIRQ>

}
 8002518:	bf00      	nop
 800251a:	3728      	adds	r7, #40	; 0x28
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40021000 	.word	0x40021000
 8002524:	40011c00 	.word	0x40011c00
 8002528:	40011000 	.word	0x40011000
 800252c:	40011400 	.word	0x40011400
 8002530:	10110000 	.word	0x10110000
 8002534:	40010800 	.word	0x40010800

08002538 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a04      	ldr	r2, [pc, #16]	; (8002558 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d101      	bne.n	800254e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800254a:	f000 fb23 	bl	8002b94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40001400 	.word	0x40001400

0800255c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002560:	b672      	cpsid	i
}
 8002562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002564:	e7fe      	b.n	8002564 <Error_Handler+0x8>
	...

08002568 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <HAL_MspInit+0x40>)
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	4a0d      	ldr	r2, [pc, #52]	; (80025a8 <HAL_MspInit+0x40>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	6193      	str	r3, [r2, #24]
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_MspInit+0x40>)
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	607b      	str	r3, [r7, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <HAL_MspInit+0x40>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	4a07      	ldr	r2, [pc, #28]	; (80025a8 <HAL_MspInit+0x40>)
 800258c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002590:	61d3      	str	r3, [r2, #28]
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_MspInit+0x40>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	40021000 	.word	0x40021000

080025ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0b      	ldr	r2, [pc, #44]	; (80025e8 <HAL_RTC_MspInit+0x3c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d110      	bne.n	80025e0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80025be:	f000 ffb9 	bl	8003534 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80025c2:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <HAL_RTC_MspInit+0x40>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	4a09      	ldr	r2, [pc, #36]	; (80025ec <HAL_RTC_MspInit+0x40>)
 80025c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025cc:	61d3      	str	r3, [r2, #28]
 80025ce:	4b07      	ldr	r3, [pc, #28]	; (80025ec <HAL_RTC_MspInit+0x40>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_RTC_MspInit+0x44>)
 80025dc:	2201      	movs	r2, #1
 80025de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40002800 	.word	0x40002800
 80025ec:	40021000 	.word	0x40021000
 80025f0:	4242043c 	.word	0x4242043c

080025f4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	; 0x28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 0318 	add.w	r3, r7, #24
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a22      	ldr	r2, [pc, #136]	; (8002698 <HAL_SD_MspInit+0xa4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d13c      	bne.n	800268e <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002614:	4b21      	ldr	r3, [pc, #132]	; (800269c <HAL_SD_MspInit+0xa8>)
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	4a20      	ldr	r2, [pc, #128]	; (800269c <HAL_SD_MspInit+0xa8>)
 800261a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800261e:	6153      	str	r3, [r2, #20]
 8002620:	4b1e      	ldr	r3, [pc, #120]	; (800269c <HAL_SD_MspInit+0xa8>)
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800262c:	4b1b      	ldr	r3, [pc, #108]	; (800269c <HAL_SD_MspInit+0xa8>)
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	4a1a      	ldr	r2, [pc, #104]	; (800269c <HAL_SD_MspInit+0xa8>)
 8002632:	f043 0310 	orr.w	r3, r3, #16
 8002636:	6193      	str	r3, [r2, #24]
 8002638:	4b18      	ldr	r3, [pc, #96]	; (800269c <HAL_SD_MspInit+0xa8>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	f003 0310 	and.w	r3, r3, #16
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002644:	4b15      	ldr	r3, [pc, #84]	; (800269c <HAL_SD_MspInit+0xa8>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	4a14      	ldr	r2, [pc, #80]	; (800269c <HAL_SD_MspInit+0xa8>)
 800264a:	f043 0320 	orr.w	r3, r3, #32
 800264e:	6193      	str	r3, [r2, #24]
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_SD_MspInit+0xa8>)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800265c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8002660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	2302      	movs	r3, #2
 8002664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002666:	2303      	movs	r3, #3
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800266a:	f107 0318 	add.w	r3, r7, #24
 800266e:	4619      	mov	r1, r3
 8002670:	480b      	ldr	r0, [pc, #44]	; (80026a0 <HAL_SD_MspInit+0xac>)
 8002672:	f000 fd79 	bl	8003168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002676:	2304      	movs	r3, #4
 8002678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800267e:	2303      	movs	r3, #3
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002682:	f107 0318 	add.w	r3, r7, #24
 8002686:	4619      	mov	r1, r3
 8002688:	4806      	ldr	r0, [pc, #24]	; (80026a4 <HAL_SD_MspInit+0xb0>)
 800268a:	f000 fd6d 	bl	8003168 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800268e:	bf00      	nop
 8002690:	3728      	adds	r7, #40	; 0x28
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40018000 	.word	0x40018000
 800269c:	40021000 	.word	0x40021000
 80026a0:	40011000 	.word	0x40011000
 80026a4:	40011400 	.word	0x40011400

080026a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a09      	ldr	r2, [pc, #36]	; (80026dc <HAL_TIM_Base_MspInit+0x34>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d10b      	bne.n	80026d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <HAL_TIM_Base_MspInit+0x38>)
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	4a08      	ldr	r2, [pc, #32]	; (80026e0 <HAL_TIM_Base_MspInit+0x38>)
 80026c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026c4:	6193      	str	r3, [r2, #24]
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <HAL_TIM_Base_MspInit+0x38>)
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	40012c00 	.word	0x40012c00
 80026e0:	40021000 	.word	0x40021000

080026e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 030c 	add.w	r3, r7, #12
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a19      	ldr	r2, [pc, #100]	; (8002764 <HAL_TIM_MspPostInit+0x80>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d12a      	bne.n	800275a <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002704:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_TIM_MspPostInit+0x84>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	4a17      	ldr	r2, [pc, #92]	; (8002768 <HAL_TIM_MspPostInit+0x84>)
 800270a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800270e:	6193      	str	r3, [r2, #24]
 8002710:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_TIM_MspPostInit+0x84>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin|BLUE_Pin|BUZZER_Pin;
 800271c:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002720:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002722:	2302      	movs	r3, #2
 8002724:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2302      	movs	r3, #2
 8002728:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800272a:	f107 030c 	add.w	r3, r7, #12
 800272e:	4619      	mov	r1, r3
 8002730:	480e      	ldr	r0, [pc, #56]	; (800276c <HAL_TIM_MspPostInit+0x88>)
 8002732:	f000 fd19 	bl	8003168 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <HAL_TIM_MspPostInit+0x8c>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002742:	61fb      	str	r3, [r7, #28]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002752:	61fb      	str	r3, [r7, #28]
 8002754:	4a06      	ldr	r2, [pc, #24]	; (8002770 <HAL_TIM_MspPostInit+0x8c>)
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800275a:	bf00      	nop
 800275c:	3720      	adds	r7, #32
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40012c00 	.word	0x40012c00
 8002768:	40021000 	.word	0x40021000
 800276c:	40011800 	.word	0x40011800
 8002770:	40010000 	.word	0x40010000

08002774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277c:	f107 0310 	add.w	r3, r7, #16
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a1c      	ldr	r2, [pc, #112]	; (8002800 <HAL_UART_MspInit+0x8c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d131      	bne.n	80027f8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002794:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <HAL_UART_MspInit+0x90>)
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	4a1a      	ldr	r2, [pc, #104]	; (8002804 <HAL_UART_MspInit+0x90>)
 800279a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800279e:	6193      	str	r3, [r2, #24]
 80027a0:	4b18      	ldr	r3, [pc, #96]	; (8002804 <HAL_UART_MspInit+0x90>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ac:	4b15      	ldr	r3, [pc, #84]	; (8002804 <HAL_UART_MspInit+0x90>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	4a14      	ldr	r2, [pc, #80]	; (8002804 <HAL_UART_MspInit+0x90>)
 80027b2:	f043 0304 	orr.w	r3, r3, #4
 80027b6:	6193      	str	r3, [r2, #24]
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_UART_MspInit+0x90>)
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ce:	2303      	movs	r3, #3
 80027d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d2:	f107 0310 	add.w	r3, r7, #16
 80027d6:	4619      	mov	r1, r3
 80027d8:	480b      	ldr	r0, [pc, #44]	; (8002808 <HAL_UART_MspInit+0x94>)
 80027da:	f000 fcc5 	bl	8003168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ec:	f107 0310 	add.w	r3, r7, #16
 80027f0:	4619      	mov	r1, r3
 80027f2:	4805      	ldr	r0, [pc, #20]	; (8002808 <HAL_UART_MspInit+0x94>)
 80027f4:	f000 fcb8 	bl	8003168 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027f8:	bf00      	nop
 80027fa:	3720      	adds	r7, #32
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40013800 	.word	0x40013800
 8002804:	40021000 	.word	0x40021000
 8002808:	40010800 	.word	0x40010800

0800280c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08e      	sub	sp, #56	; 0x38
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002822:	4b34      	ldr	r3, [pc, #208]	; (80028f4 <HAL_InitTick+0xe8>)
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	4a33      	ldr	r2, [pc, #204]	; (80028f4 <HAL_InitTick+0xe8>)
 8002828:	f043 0320 	orr.w	r3, r3, #32
 800282c:	61d3      	str	r3, [r2, #28]
 800282e:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <HAL_InitTick+0xe8>)
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f003 0320 	and.w	r3, r3, #32
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800283a:	f107 0210 	add.w	r2, r7, #16
 800283e:	f107 0314 	add.w	r3, r7, #20
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f001 fa7d 	bl	8003d44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800284e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002850:	2b00      	cmp	r3, #0
 8002852:	d103      	bne.n	800285c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002854:	f001 fa4e 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 8002858:	6378      	str	r0, [r7, #52]	; 0x34
 800285a:	e004      	b.n	8002866 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800285c:	f001 fa4a 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 8002860:	4603      	mov	r3, r0
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002868:	4a23      	ldr	r2, [pc, #140]	; (80028f8 <HAL_InitTick+0xec>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	0c9b      	lsrs	r3, r3, #18
 8002870:	3b01      	subs	r3, #1
 8002872:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002874:	4b21      	ldr	r3, [pc, #132]	; (80028fc <HAL_InitTick+0xf0>)
 8002876:	4a22      	ldr	r2, [pc, #136]	; (8002900 <HAL_InitTick+0xf4>)
 8002878:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800287a:	4b20      	ldr	r3, [pc, #128]	; (80028fc <HAL_InitTick+0xf0>)
 800287c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002880:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002882:	4a1e      	ldr	r2, [pc, #120]	; (80028fc <HAL_InitTick+0xf0>)
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002888:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <HAL_InitTick+0xf0>)
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800288e:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <HAL_InitTick+0xf0>)
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002894:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_InitTick+0xf0>)
 8002896:	2200      	movs	r2, #0
 8002898:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 800289a:	4818      	ldr	r0, [pc, #96]	; (80028fc <HAL_InitTick+0xf0>)
 800289c:	f003 f972 	bl	8005b84 <HAL_TIM_Base_Init>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80028a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d11b      	bne.n	80028e6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80028ae:	4813      	ldr	r0, [pc, #76]	; (80028fc <HAL_InitTick+0xf0>)
 80028b0:	f003 f9b8 	bl	8005c24 <HAL_TIM_Base_Start_IT>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80028ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d111      	bne.n	80028e6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80028c2:	2037      	movs	r0, #55	; 0x37
 80028c4:	f000 fa77 	bl	8002db6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b0f      	cmp	r3, #15
 80028cc:	d808      	bhi.n	80028e0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80028ce:	2200      	movs	r2, #0
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	2037      	movs	r0, #55	; 0x37
 80028d4:	f000 fa53 	bl	8002d7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028d8:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <HAL_InitTick+0xf8>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e002      	b.n	80028e6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80028e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3738      	adds	r7, #56	; 0x38
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40021000 	.word	0x40021000
 80028f8:	431bde83 	.word	0x431bde83
 80028fc:	20000334 	.word	0x20000334
 8002900:	40001400 	.word	0x40001400
 8002904:	20000004 	.word	0x20000004

08002908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800290c:	e7fe      	b.n	800290c <NMI_Handler+0x4>

0800290e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002912:	e7fe      	b.n	8002912 <HardFault_Handler+0x4>

08002914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002918:	e7fe      	b.n	8002918 <MemManage_Handler+0x4>

0800291a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800291e:	e7fe      	b.n	800291e <BusFault_Handler+0x4>

08002920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002924:	e7fe      	b.n	8002924 <UsageFault_Handler+0x4>

08002926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr

08002932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002932:	b480      	push	{r7}
 8002934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800295a:	2040      	movs	r0, #64	; 0x40
 800295c:	f000 fdc8 	bl	80034f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002960:	2080      	movs	r0, #128	; 0x80
 8002962:	f000 fdc5 	bl	80034f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002966:	f44f 7080 	mov.w	r0, #256	; 0x100
 800296a:	f000 fdc1 	bl	80034f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800296e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002972:	f000 fdbd 	bl	80034f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002980:	4802      	ldr	r0, [pc, #8]	; (800298c <TIM7_IRQHandler+0x10>)
 8002982:	f003 fa07 	bl	8005d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000334 	.word	0x20000334

08002990 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
	return 1;
 8002994:	2301      	movs	r3, #1
}
 8002996:	4618      	mov	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr

0800299e <_kill>:

int _kill(int pid, int sig)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029a8:	f005 f806 	bl	80079b8 <__errno>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2216      	movs	r2, #22
 80029b0:	601a      	str	r2, [r3, #0]
	return -1;
 80029b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <_exit>:

void _exit (int status)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029c6:	f04f 31ff 	mov.w	r1, #4294967295
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff ffe7 	bl	800299e <_kill>
	while (1) {}		/* Make sure we hang here */
 80029d0:	e7fe      	b.n	80029d0 <_exit+0x12>

080029d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b086      	sub	sp, #24
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	e00a      	b.n	80029fa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029e4:	f3af 8000 	nop.w
 80029e8:	4601      	mov	r1, r0
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	60ba      	str	r2, [r7, #8]
 80029f0:	b2ca      	uxtb	r2, r1
 80029f2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	3301      	adds	r3, #1
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	dbf0      	blt.n	80029e4 <_read+0x12>
	}

return len;
 8002a02:	687b      	ldr	r3, [r7, #4]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	e009      	b.n	8002a32 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	60ba      	str	r2, [r7, #8]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	dbf1      	blt.n	8002a1e <_write+0x12>
	}
	return len;
 8002a3a:	687b      	ldr	r3, [r7, #4]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <_close>:

int _close(int file)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
	return -1;
 8002a4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr

08002a5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a6a:	605a      	str	r2, [r3, #4]
	return 0;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <_isatty>:

int _isatty(int file)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
	return 1;
 8002a80:	2301      	movs	r3, #1
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
	return 0;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aac:	4a14      	ldr	r2, [pc, #80]	; (8002b00 <_sbrk+0x5c>)
 8002aae:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <_sbrk+0x60>)
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ab8:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <_sbrk+0x64>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d102      	bne.n	8002ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ac0:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <_sbrk+0x64>)
 8002ac2:	4a12      	ldr	r2, [pc, #72]	; (8002b0c <_sbrk+0x68>)
 8002ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ac6:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <_sbrk+0x64>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d207      	bcs.n	8002ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ad4:	f004 ff70 	bl	80079b8 <__errno>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	220c      	movs	r2, #12
 8002adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae2:	e009      	b.n	8002af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ae4:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <_sbrk+0x64>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aea:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <_sbrk+0x64>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4413      	add	r3, r2
 8002af2:	4a05      	ldr	r2, [pc, #20]	; (8002b08 <_sbrk+0x64>)
 8002af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002af6:	68fb      	ldr	r3, [r7, #12]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20010000 	.word	0x20010000
 8002b04:	00000400 	.word	0x00000400
 8002b08:	2000037c 	.word	0x2000037c
 8002b0c:	200003d0 	.word	0x200003d0

08002b10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b1c:	480c      	ldr	r0, [pc, #48]	; (8002b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b1e:	490d      	ldr	r1, [pc, #52]	; (8002b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b20:	4a0d      	ldr	r2, [pc, #52]	; (8002b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b24:	e002      	b.n	8002b2c <LoopCopyDataInit>

08002b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b2a:	3304      	adds	r3, #4

08002b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b30:	d3f9      	bcc.n	8002b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b32:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b34:	4c0a      	ldr	r4, [pc, #40]	; (8002b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b38:	e001      	b.n	8002b3e <LoopFillZerobss>

08002b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b3c:	3204      	adds	r2, #4

08002b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b40:	d3fb      	bcc.n	8002b3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b42:	f7ff ffe5 	bl	8002b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b46:	f004 ff3d 	bl	80079c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b4a:	f7fe ff4b 	bl	80019e4 <main>
  bx lr
 8002b4e:	4770      	bx	lr
  ldr r0, =_sdata
 8002b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b54:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002b58:	0800c85c 	.word	0x0800c85c
  ldr r2, =_sbss
 8002b5c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002b60:	200003cc 	.word	0x200003cc

08002b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b64:	e7fe      	b.n	8002b64 <ADC1_2_IRQHandler>
	...

08002b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b6c:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <HAL_Init+0x28>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a07      	ldr	r2, [pc, #28]	; (8002b90 <HAL_Init+0x28>)
 8002b72:	f043 0310 	orr.w	r3, r3, #16
 8002b76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b78:	2003      	movs	r0, #3
 8002b7a:	f000 f8f5 	bl	8002d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b7e:	200f      	movs	r0, #15
 8002b80:	f7ff fe44 	bl	800280c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b84:	f7ff fcf0 	bl	8002568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40022000 	.word	0x40022000

08002b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <HAL_IncTick+0x1c>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_IncTick+0x20>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	4a03      	ldr	r2, [pc, #12]	; (8002bb4 <HAL_IncTick+0x20>)
 8002ba6:	6013      	str	r3, [r2, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	20000008 	.word	0x20000008
 8002bb4:	20000380 	.word	0x20000380

08002bb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return uwTick;
 8002bbc:	4b02      	ldr	r3, [pc, #8]	; (8002bc8 <HAL_GetTick+0x10>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	20000380 	.word	0x20000380

08002bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bd4:	f7ff fff0 	bl	8002bb8 <HAL_GetTick>
 8002bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d005      	beq.n	8002bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <HAL_Delay+0x44>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4413      	add	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bf2:	bf00      	nop
 8002bf4:	f7ff ffe0 	bl	8002bb8 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d8f7      	bhi.n	8002bf4 <HAL_Delay+0x28>
  {
  }
}
 8002c04:	bf00      	nop
 8002c06:	bf00      	nop
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000008 	.word	0x20000008

08002c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <__NVIC_SetPriorityGrouping+0x44>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c30:	4013      	ands	r3, r2
 8002c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c46:	4a04      	ldr	r2, [pc, #16]	; (8002c58 <__NVIC_SetPriorityGrouping+0x44>)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	60d3      	str	r3, [r2, #12]
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c60:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <__NVIC_GetPriorityGrouping+0x18>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	0a1b      	lsrs	r3, r3, #8
 8002c66:	f003 0307 	and.w	r3, r3, #7
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	e000ed00 	.word	0xe000ed00

08002c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	db0b      	blt.n	8002ca2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	f003 021f 	and.w	r2, r3, #31
 8002c90:	4906      	ldr	r1, [pc, #24]	; (8002cac <__NVIC_EnableIRQ+0x34>)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	095b      	lsrs	r3, r3, #5
 8002c98:	2001      	movs	r0, #1
 8002c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	e000e100 	.word	0xe000e100

08002cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	6039      	str	r1, [r7, #0]
 8002cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	db0a      	blt.n	8002cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	490c      	ldr	r1, [pc, #48]	; (8002cfc <__NVIC_SetPriority+0x4c>)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	0112      	lsls	r2, r2, #4
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cd8:	e00a      	b.n	8002cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	4908      	ldr	r1, [pc, #32]	; (8002d00 <__NVIC_SetPriority+0x50>)
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	3b04      	subs	r3, #4
 8002ce8:	0112      	lsls	r2, r2, #4
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	440b      	add	r3, r1
 8002cee:	761a      	strb	r2, [r3, #24]
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	e000e100 	.word	0xe000e100
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	; 0x24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f1c3 0307 	rsb	r3, r3, #7
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	bf28      	it	cs
 8002d22:	2304      	movcs	r3, #4
 8002d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	2b06      	cmp	r3, #6
 8002d2c:	d902      	bls.n	8002d34 <NVIC_EncodePriority+0x30>
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3b03      	subs	r3, #3
 8002d32:	e000      	b.n	8002d36 <NVIC_EncodePriority+0x32>
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d38:	f04f 32ff 	mov.w	r2, #4294967295
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43da      	mvns	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	401a      	ands	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	43d9      	mvns	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d5c:	4313      	orrs	r3, r2
         );
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3724      	adds	r7, #36	; 0x24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff ff4f 	bl	8002c14 <__NVIC_SetPriorityGrouping>
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b086      	sub	sp, #24
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	4603      	mov	r3, r0
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	607a      	str	r2, [r7, #4]
 8002d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d90:	f7ff ff64 	bl	8002c5c <__NVIC_GetPriorityGrouping>
 8002d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	68b9      	ldr	r1, [r7, #8]
 8002d9a:	6978      	ldr	r0, [r7, #20]
 8002d9c:	f7ff ffb2 	bl	8002d04 <NVIC_EncodePriority>
 8002da0:	4602      	mov	r2, r0
 8002da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ff81 	bl	8002cb0 <__NVIC_SetPriority>
}
 8002dae:	bf00      	nop
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff57 	bl	8002c78 <__NVIC_EnableIRQ>
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002dea:	2300      	movs	r3, #0
 8002dec:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002dee:	4b2f      	ldr	r3, [pc, #188]	; (8002eac <HAL_FLASH_Program+0xd8>)
 8002df0:	7e1b      	ldrb	r3, [r3, #24]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_FLASH_Program+0x26>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e054      	b.n	8002ea4 <HAL_FLASH_Program+0xd0>
 8002dfa:	4b2c      	ldr	r3, [pc, #176]	; (8002eac <HAL_FLASH_Program+0xd8>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002e00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e04:	f000 f872 	bl	8002eec <FLASH_WaitForLastOperation>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d144      	bne.n	8002e9c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d102      	bne.n	8002e1e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	757b      	strb	r3, [r7, #21]
 8002e1c:	e007      	b.n	8002e2e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d102      	bne.n	8002e2a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002e24:	2302      	movs	r3, #2
 8002e26:	757b      	strb	r3, [r7, #21]
 8002e28:	e001      	b.n	8002e2e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002e2a:	2304      	movs	r3, #4
 8002e2c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	75bb      	strb	r3, [r7, #22]
 8002e32:	e02d      	b.n	8002e90 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002e34:	7dbb      	ldrb	r3, [r7, #22]
 8002e36:	005a      	lsls	r2, r3, #1
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	eb02 0c03 	add.w	ip, r2, r3
 8002e3e:	7dbb      	ldrb	r3, [r7, #22]
 8002e40:	0119      	lsls	r1, r3, #4
 8002e42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e46:	f1c1 0620 	rsb	r6, r1, #32
 8002e4a:	f1a1 0020 	sub.w	r0, r1, #32
 8002e4e:	fa22 f401 	lsr.w	r4, r2, r1
 8002e52:	fa03 f606 	lsl.w	r6, r3, r6
 8002e56:	4334      	orrs	r4, r6
 8002e58:	fa23 f000 	lsr.w	r0, r3, r0
 8002e5c:	4304      	orrs	r4, r0
 8002e5e:	fa23 f501 	lsr.w	r5, r3, r1
 8002e62:	b2a3      	uxth	r3, r4
 8002e64:	4619      	mov	r1, r3
 8002e66:	4660      	mov	r0, ip
 8002e68:	f000 f824 	bl	8002eb4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002e6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e70:	f000 f83c 	bl	8002eec <FLASH_WaitForLastOperation>
 8002e74:	4603      	mov	r3, r0
 8002e76:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002e78:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <HAL_FLASH_Program+0xdc>)
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	4a0c      	ldr	r2, [pc, #48]	; (8002eb0 <HAL_FLASH_Program+0xdc>)
 8002e7e:	f023 0301 	bic.w	r3, r3, #1
 8002e82:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002e84:	7dfb      	ldrb	r3, [r7, #23]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d107      	bne.n	8002e9a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002e8a:	7dbb      	ldrb	r3, [r7, #22]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	75bb      	strb	r3, [r7, #22]
 8002e90:	7dba      	ldrb	r2, [r7, #22]
 8002e92:	7d7b      	ldrb	r3, [r7, #21]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d3cd      	bcc.n	8002e34 <HAL_FLASH_Program+0x60>
 8002e98:	e000      	b.n	8002e9c <HAL_FLASH_Program+0xc8>
      {
        break;
 8002e9a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002e9c:	4b03      	ldr	r3, [pc, #12]	; (8002eac <HAL_FLASH_Program+0xd8>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	761a      	strb	r2, [r3, #24]

  return status;
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eac:	20000388 	.word	0x20000388
 8002eb0:	40022000 	.word	0x40022000

08002eb4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ec0:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <FLASH_Program_HalfWord+0x30>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002ec6:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <FLASH_Program_HalfWord+0x34>)
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	4a07      	ldr	r2, [pc, #28]	; (8002ee8 <FLASH_Program_HalfWord+0x34>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	887a      	ldrh	r2, [r7, #2]
 8002ed6:	801a      	strh	r2, [r3, #0]
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20000388 	.word	0x20000388
 8002ee8:	40022000 	.word	0x40022000

08002eec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002ef4:	f7ff fe60 	bl	8002bb8 <HAL_GetTick>
 8002ef8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002efa:	e010      	b.n	8002f1e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f02:	d00c      	beq.n	8002f1e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <FLASH_WaitForLastOperation+0x2e>
 8002f0a:	f7ff fe55 	bl	8002bb8 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d201      	bcs.n	8002f1e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e025      	b.n	8002f6a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002f1e:	4b15      	ldr	r3, [pc, #84]	; (8002f74 <FLASH_WaitForLastOperation+0x88>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1e8      	bne.n	8002efc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <FLASH_WaitForLastOperation+0x88>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002f36:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <FLASH_WaitForLastOperation+0x88>)
 8002f38:	2220      	movs	r2, #32
 8002f3a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002f3c:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <FLASH_WaitForLastOperation+0x88>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10b      	bne.n	8002f60 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <FLASH_WaitForLastOperation+0x88>)
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d105      	bne.n	8002f60 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002f54:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <FLASH_WaitForLastOperation+0x88>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002f60:	f000 f80a 	bl	8002f78 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40022000 	.word	0x40022000

08002f78 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002f82:	4b23      	ldr	r3, [pc, #140]	; (8003010 <FLASH_SetErrorCode+0x98>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d009      	beq.n	8002fa2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002f8e:	4b21      	ldr	r3, [pc, #132]	; (8003014 <FLASH_SetErrorCode+0x9c>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f043 0302 	orr.w	r3, r3, #2
 8002f96:	4a1f      	ldr	r2, [pc, #124]	; (8003014 <FLASH_SetErrorCode+0x9c>)
 8002f98:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f043 0310 	orr.w	r3, r3, #16
 8002fa0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002fa2:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <FLASH_SetErrorCode+0x98>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002fae:	4b19      	ldr	r3, [pc, #100]	; (8003014 <FLASH_SetErrorCode+0x9c>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	4a17      	ldr	r2, [pc, #92]	; (8003014 <FLASH_SetErrorCode+0x9c>)
 8002fb8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f043 0304 	orr.w	r3, r3, #4
 8002fc0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002fc2:	4b13      	ldr	r3, [pc, #76]	; (8003010 <FLASH_SetErrorCode+0x98>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00b      	beq.n	8002fe6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002fce:	4b11      	ldr	r3, [pc, #68]	; (8003014 <FLASH_SetErrorCode+0x9c>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f043 0304 	orr.w	r3, r3, #4
 8002fd6:	4a0f      	ldr	r2, [pc, #60]	; (8003014 <FLASH_SetErrorCode+0x9c>)
 8002fd8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002fda:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <FLASH_SetErrorCode+0x98>)
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	4a0c      	ldr	r2, [pc, #48]	; (8003010 <FLASH_SetErrorCode+0x98>)
 8002fe0:	f023 0301 	bic.w	r3, r3, #1
 8002fe4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f240 1201 	movw	r2, #257	; 0x101
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d106      	bne.n	8002ffe <FLASH_SetErrorCode+0x86>
 8002ff0:	4b07      	ldr	r3, [pc, #28]	; (8003010 <FLASH_SetErrorCode+0x98>)
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	4a06      	ldr	r2, [pc, #24]	; (8003010 <FLASH_SetErrorCode+0x98>)
 8002ff6:	f023 0301 	bic.w	r3, r3, #1
 8002ffa:	61d3      	str	r3, [r2, #28]
}  
 8002ffc:	e002      	b.n	8003004 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002ffe:	4a04      	ldr	r2, [pc, #16]	; (8003010 <FLASH_SetErrorCode+0x98>)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	60d3      	str	r3, [r2, #12]
}  
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40022000 	.word	0x40022000
 8003014:	20000388 	.word	0x20000388

08003018 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800302a:	4b2f      	ldr	r3, [pc, #188]	; (80030e8 <HAL_FLASHEx_Erase+0xd0>)
 800302c:	7e1b      	ldrb	r3, [r3, #24]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_FLASHEx_Erase+0x1e>
 8003032:	2302      	movs	r3, #2
 8003034:	e053      	b.n	80030de <HAL_FLASHEx_Erase+0xc6>
 8003036:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <HAL_FLASHEx_Erase+0xd0>)
 8003038:	2201      	movs	r2, #1
 800303a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d116      	bne.n	8003072 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003044:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003048:	f7ff ff50 	bl	8002eec <FLASH_WaitForLastOperation>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d141      	bne.n	80030d6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003052:	2001      	movs	r0, #1
 8003054:	f000 f84c 	bl	80030f0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003058:	f24c 3050 	movw	r0, #50000	; 0xc350
 800305c:	f7ff ff46 	bl	8002eec <FLASH_WaitForLastOperation>
 8003060:	4603      	mov	r3, r0
 8003062:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003064:	4b21      	ldr	r3, [pc, #132]	; (80030ec <HAL_FLASHEx_Erase+0xd4>)
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	4a20      	ldr	r2, [pc, #128]	; (80030ec <HAL_FLASHEx_Erase+0xd4>)
 800306a:	f023 0304 	bic.w	r3, r3, #4
 800306e:	6113      	str	r3, [r2, #16]
 8003070:	e031      	b.n	80030d6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003072:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003076:	f7ff ff39 	bl	8002eec <FLASH_WaitForLastOperation>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d12a      	bne.n	80030d6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	f04f 32ff 	mov.w	r2, #4294967295
 8003086:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	e019      	b.n	80030c4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003090:	68b8      	ldr	r0, [r7, #8]
 8003092:	f000 f849 	bl	8003128 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003096:	f24c 3050 	movw	r0, #50000	; 0xc350
 800309a:	f7ff ff27 	bl	8002eec <FLASH_WaitForLastOperation>
 800309e:	4603      	mov	r3, r0
 80030a0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80030a2:	4b12      	ldr	r3, [pc, #72]	; (80030ec <HAL_FLASHEx_Erase+0xd4>)
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	4a11      	ldr	r2, [pc, #68]	; (80030ec <HAL_FLASHEx_Erase+0xd4>)
 80030a8:	f023 0302 	bic.w	r3, r3, #2
 80030ac:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	601a      	str	r2, [r3, #0]
            break;
 80030ba:	e00c      	b.n	80030d6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	02da      	lsls	r2, r3, #11
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d3dc      	bcc.n	8003090 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80030d6:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <HAL_FLASHEx_Erase+0xd0>)
 80030d8:	2200      	movs	r2, #0
 80030da:	761a      	strb	r2, [r3, #24]

  return status;
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000388 	.word	0x20000388
 80030ec:	40022000 	.word	0x40022000

080030f0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030f8:	4b09      	ldr	r3, [pc, #36]	; (8003120 <FLASH_MassErase+0x30>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80030fe:	4b09      	ldr	r3, [pc, #36]	; (8003124 <FLASH_MassErase+0x34>)
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	4a08      	ldr	r2, [pc, #32]	; (8003124 <FLASH_MassErase+0x34>)
 8003104:	f043 0304 	orr.w	r3, r3, #4
 8003108:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <FLASH_MassErase+0x34>)
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	4a05      	ldr	r2, [pc, #20]	; (8003124 <FLASH_MassErase+0x34>)
 8003110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003114:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr
 8003120:	20000388 	.word	0x20000388
 8003124:	40022000 	.word	0x40022000

08003128 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <FLASH_PageErase+0x38>)
 8003132:	2200      	movs	r2, #0
 8003134:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003136:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <FLASH_PageErase+0x3c>)
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <FLASH_PageErase+0x3c>)
 800313c:	f043 0302 	orr.w	r3, r3, #2
 8003140:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003142:	4a08      	ldr	r2, [pc, #32]	; (8003164 <FLASH_PageErase+0x3c>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003148:	4b06      	ldr	r3, [pc, #24]	; (8003164 <FLASH_PageErase+0x3c>)
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	4a05      	ldr	r2, [pc, #20]	; (8003164 <FLASH_PageErase+0x3c>)
 800314e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003152:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	20000388 	.word	0x20000388
 8003164:	40022000 	.word	0x40022000

08003168 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003168:	b480      	push	{r7}
 800316a:	b08b      	sub	sp, #44	; 0x2c
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003172:	2300      	movs	r3, #0
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003176:	2300      	movs	r3, #0
 8003178:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800317a:	e179      	b.n	8003470 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800317c:	2201      	movs	r2, #1
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	429a      	cmp	r2, r3
 8003196:	f040 8168 	bne.w	800346a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	4a96      	ldr	r2, [pc, #600]	; (80033f8 <HAL_GPIO_Init+0x290>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d05e      	beq.n	8003262 <HAL_GPIO_Init+0xfa>
 80031a4:	4a94      	ldr	r2, [pc, #592]	; (80033f8 <HAL_GPIO_Init+0x290>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d875      	bhi.n	8003296 <HAL_GPIO_Init+0x12e>
 80031aa:	4a94      	ldr	r2, [pc, #592]	; (80033fc <HAL_GPIO_Init+0x294>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d058      	beq.n	8003262 <HAL_GPIO_Init+0xfa>
 80031b0:	4a92      	ldr	r2, [pc, #584]	; (80033fc <HAL_GPIO_Init+0x294>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d86f      	bhi.n	8003296 <HAL_GPIO_Init+0x12e>
 80031b6:	4a92      	ldr	r2, [pc, #584]	; (8003400 <HAL_GPIO_Init+0x298>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d052      	beq.n	8003262 <HAL_GPIO_Init+0xfa>
 80031bc:	4a90      	ldr	r2, [pc, #576]	; (8003400 <HAL_GPIO_Init+0x298>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d869      	bhi.n	8003296 <HAL_GPIO_Init+0x12e>
 80031c2:	4a90      	ldr	r2, [pc, #576]	; (8003404 <HAL_GPIO_Init+0x29c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d04c      	beq.n	8003262 <HAL_GPIO_Init+0xfa>
 80031c8:	4a8e      	ldr	r2, [pc, #568]	; (8003404 <HAL_GPIO_Init+0x29c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d863      	bhi.n	8003296 <HAL_GPIO_Init+0x12e>
 80031ce:	4a8e      	ldr	r2, [pc, #568]	; (8003408 <HAL_GPIO_Init+0x2a0>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d046      	beq.n	8003262 <HAL_GPIO_Init+0xfa>
 80031d4:	4a8c      	ldr	r2, [pc, #560]	; (8003408 <HAL_GPIO_Init+0x2a0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d85d      	bhi.n	8003296 <HAL_GPIO_Init+0x12e>
 80031da:	2b12      	cmp	r3, #18
 80031dc:	d82a      	bhi.n	8003234 <HAL_GPIO_Init+0xcc>
 80031de:	2b12      	cmp	r3, #18
 80031e0:	d859      	bhi.n	8003296 <HAL_GPIO_Init+0x12e>
 80031e2:	a201      	add	r2, pc, #4	; (adr r2, 80031e8 <HAL_GPIO_Init+0x80>)
 80031e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e8:	08003263 	.word	0x08003263
 80031ec:	0800323d 	.word	0x0800323d
 80031f0:	0800324f 	.word	0x0800324f
 80031f4:	08003291 	.word	0x08003291
 80031f8:	08003297 	.word	0x08003297
 80031fc:	08003297 	.word	0x08003297
 8003200:	08003297 	.word	0x08003297
 8003204:	08003297 	.word	0x08003297
 8003208:	08003297 	.word	0x08003297
 800320c:	08003297 	.word	0x08003297
 8003210:	08003297 	.word	0x08003297
 8003214:	08003297 	.word	0x08003297
 8003218:	08003297 	.word	0x08003297
 800321c:	08003297 	.word	0x08003297
 8003220:	08003297 	.word	0x08003297
 8003224:	08003297 	.word	0x08003297
 8003228:	08003297 	.word	0x08003297
 800322c:	08003245 	.word	0x08003245
 8003230:	08003259 	.word	0x08003259
 8003234:	4a75      	ldr	r2, [pc, #468]	; (800340c <HAL_GPIO_Init+0x2a4>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d013      	beq.n	8003262 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800323a:	e02c      	b.n	8003296 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	623b      	str	r3, [r7, #32]
          break;
 8003242:	e029      	b.n	8003298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	3304      	adds	r3, #4
 800324a:	623b      	str	r3, [r7, #32]
          break;
 800324c:	e024      	b.n	8003298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	3308      	adds	r3, #8
 8003254:	623b      	str	r3, [r7, #32]
          break;
 8003256:	e01f      	b.n	8003298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	330c      	adds	r3, #12
 800325e:	623b      	str	r3, [r7, #32]
          break;
 8003260:	e01a      	b.n	8003298 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d102      	bne.n	8003270 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800326a:	2304      	movs	r3, #4
 800326c:	623b      	str	r3, [r7, #32]
          break;
 800326e:	e013      	b.n	8003298 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d105      	bne.n	8003284 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003278:	2308      	movs	r3, #8
 800327a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69fa      	ldr	r2, [r7, #28]
 8003280:	611a      	str	r2, [r3, #16]
          break;
 8003282:	e009      	b.n	8003298 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003284:	2308      	movs	r3, #8
 8003286:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	615a      	str	r2, [r3, #20]
          break;
 800328e:	e003      	b.n	8003298 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003290:	2300      	movs	r3, #0
 8003292:	623b      	str	r3, [r7, #32]
          break;
 8003294:	e000      	b.n	8003298 <HAL_GPIO_Init+0x130>
          break;
 8003296:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	2bff      	cmp	r3, #255	; 0xff
 800329c:	d801      	bhi.n	80032a2 <HAL_GPIO_Init+0x13a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	e001      	b.n	80032a6 <HAL_GPIO_Init+0x13e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3304      	adds	r3, #4
 80032a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	2bff      	cmp	r3, #255	; 0xff
 80032ac:	d802      	bhi.n	80032b4 <HAL_GPIO_Init+0x14c>
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	e002      	b.n	80032ba <HAL_GPIO_Init+0x152>
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	3b08      	subs	r3, #8
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	210f      	movs	r1, #15
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	401a      	ands	r2, r3
 80032cc:	6a39      	ldr	r1, [r7, #32]
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	fa01 f303 	lsl.w	r3, r1, r3
 80032d4:	431a      	orrs	r2, r3
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80c1 	beq.w	800346a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032e8:	4b49      	ldr	r3, [pc, #292]	; (8003410 <HAL_GPIO_Init+0x2a8>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	4a48      	ldr	r2, [pc, #288]	; (8003410 <HAL_GPIO_Init+0x2a8>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6193      	str	r3, [r2, #24]
 80032f4:	4b46      	ldr	r3, [pc, #280]	; (8003410 <HAL_GPIO_Init+0x2a8>)
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003300:	4a44      	ldr	r2, [pc, #272]	; (8003414 <HAL_GPIO_Init+0x2ac>)
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	089b      	lsrs	r3, r3, #2
 8003306:	3302      	adds	r3, #2
 8003308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	220f      	movs	r2, #15
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4013      	ands	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a3c      	ldr	r2, [pc, #240]	; (8003418 <HAL_GPIO_Init+0x2b0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d01f      	beq.n	800336c <HAL_GPIO_Init+0x204>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a3b      	ldr	r2, [pc, #236]	; (800341c <HAL_GPIO_Init+0x2b4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d019      	beq.n	8003368 <HAL_GPIO_Init+0x200>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a3a      	ldr	r2, [pc, #232]	; (8003420 <HAL_GPIO_Init+0x2b8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d013      	beq.n	8003364 <HAL_GPIO_Init+0x1fc>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a39      	ldr	r2, [pc, #228]	; (8003424 <HAL_GPIO_Init+0x2bc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d00d      	beq.n	8003360 <HAL_GPIO_Init+0x1f8>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a38      	ldr	r2, [pc, #224]	; (8003428 <HAL_GPIO_Init+0x2c0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d007      	beq.n	800335c <HAL_GPIO_Init+0x1f4>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a37      	ldr	r2, [pc, #220]	; (800342c <HAL_GPIO_Init+0x2c4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d101      	bne.n	8003358 <HAL_GPIO_Init+0x1f0>
 8003354:	2305      	movs	r3, #5
 8003356:	e00a      	b.n	800336e <HAL_GPIO_Init+0x206>
 8003358:	2306      	movs	r3, #6
 800335a:	e008      	b.n	800336e <HAL_GPIO_Init+0x206>
 800335c:	2304      	movs	r3, #4
 800335e:	e006      	b.n	800336e <HAL_GPIO_Init+0x206>
 8003360:	2303      	movs	r3, #3
 8003362:	e004      	b.n	800336e <HAL_GPIO_Init+0x206>
 8003364:	2302      	movs	r3, #2
 8003366:	e002      	b.n	800336e <HAL_GPIO_Init+0x206>
 8003368:	2301      	movs	r3, #1
 800336a:	e000      	b.n	800336e <HAL_GPIO_Init+0x206>
 800336c:	2300      	movs	r3, #0
 800336e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003370:	f002 0203 	and.w	r2, r2, #3
 8003374:	0092      	lsls	r2, r2, #2
 8003376:	4093      	lsls	r3, r2
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800337e:	4925      	ldr	r1, [pc, #148]	; (8003414 <HAL_GPIO_Init+0x2ac>)
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	089b      	lsrs	r3, r3, #2
 8003384:	3302      	adds	r3, #2
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d006      	beq.n	80033a6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003398:	4b25      	ldr	r3, [pc, #148]	; (8003430 <HAL_GPIO_Init+0x2c8>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4924      	ldr	r1, [pc, #144]	; (8003430 <HAL_GPIO_Init+0x2c8>)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	600b      	str	r3, [r1, #0]
 80033a4:	e006      	b.n	80033b4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033a6:	4b22      	ldr	r3, [pc, #136]	; (8003430 <HAL_GPIO_Init+0x2c8>)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	4920      	ldr	r1, [pc, #128]	; (8003430 <HAL_GPIO_Init+0x2c8>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d006      	beq.n	80033ce <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033c0:	4b1b      	ldr	r3, [pc, #108]	; (8003430 <HAL_GPIO_Init+0x2c8>)
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	491a      	ldr	r1, [pc, #104]	; (8003430 <HAL_GPIO_Init+0x2c8>)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	604b      	str	r3, [r1, #4]
 80033cc:	e006      	b.n	80033dc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033ce:	4b18      	ldr	r3, [pc, #96]	; (8003430 <HAL_GPIO_Init+0x2c8>)
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	4916      	ldr	r1, [pc, #88]	; (8003430 <HAL_GPIO_Init+0x2c8>)
 80033d8:	4013      	ands	r3, r2
 80033da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d025      	beq.n	8003434 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033e8:	4b11      	ldr	r3, [pc, #68]	; (8003430 <HAL_GPIO_Init+0x2c8>)
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	4910      	ldr	r1, [pc, #64]	; (8003430 <HAL_GPIO_Init+0x2c8>)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	608b      	str	r3, [r1, #8]
 80033f4:	e025      	b.n	8003442 <HAL_GPIO_Init+0x2da>
 80033f6:	bf00      	nop
 80033f8:	10320000 	.word	0x10320000
 80033fc:	10310000 	.word	0x10310000
 8003400:	10220000 	.word	0x10220000
 8003404:	10210000 	.word	0x10210000
 8003408:	10120000 	.word	0x10120000
 800340c:	10110000 	.word	0x10110000
 8003410:	40021000 	.word	0x40021000
 8003414:	40010000 	.word	0x40010000
 8003418:	40010800 	.word	0x40010800
 800341c:	40010c00 	.word	0x40010c00
 8003420:	40011000 	.word	0x40011000
 8003424:	40011400 	.word	0x40011400
 8003428:	40011800 	.word	0x40011800
 800342c:	40011c00 	.word	0x40011c00
 8003430:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003434:	4b15      	ldr	r3, [pc, #84]	; (800348c <HAL_GPIO_Init+0x324>)
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	43db      	mvns	r3, r3
 800343c:	4913      	ldr	r1, [pc, #76]	; (800348c <HAL_GPIO_Init+0x324>)
 800343e:	4013      	ands	r3, r2
 8003440:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d006      	beq.n	800345c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800344e:	4b0f      	ldr	r3, [pc, #60]	; (800348c <HAL_GPIO_Init+0x324>)
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	490e      	ldr	r1, [pc, #56]	; (800348c <HAL_GPIO_Init+0x324>)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	4313      	orrs	r3, r2
 8003458:	60cb      	str	r3, [r1, #12]
 800345a:	e006      	b.n	800346a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_GPIO_Init+0x324>)
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	43db      	mvns	r3, r3
 8003464:	4909      	ldr	r1, [pc, #36]	; (800348c <HAL_GPIO_Init+0x324>)
 8003466:	4013      	ands	r3, r2
 8003468:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	3301      	adds	r3, #1
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	fa22 f303 	lsr.w	r3, r2, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	f47f ae7e 	bne.w	800317c <HAL_GPIO_Init+0x14>
  }
}
 8003480:	bf00      	nop
 8003482:	bf00      	nop
 8003484:	372c      	adds	r7, #44	; 0x2c
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr
 800348c:	40010400 	.word	0x40010400

08003490 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	887b      	ldrh	r3, [r7, #2]
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034a8:	2301      	movs	r3, #1
 80034aa:	73fb      	strb	r3, [r7, #15]
 80034ac:	e001      	b.n	80034b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr

080034be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	460b      	mov	r3, r1
 80034c8:	807b      	strh	r3, [r7, #2]
 80034ca:	4613      	mov	r3, r2
 80034cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034ce:	787b      	ldrb	r3, [r7, #1]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034d4:	887a      	ldrh	r2, [r7, #2]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80034da:	e003      	b.n	80034e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80034dc:	887b      	ldrh	r3, [r7, #2]
 80034de:	041a      	lsls	r2, r3, #16
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	611a      	str	r2, [r3, #16]
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr
	...

080034f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034fa:	4b08      	ldr	r3, [pc, #32]	; (800351c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	4013      	ands	r3, r2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d006      	beq.n	8003514 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003506:	4a05      	ldr	r2, [pc, #20]	; (800351c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800350c:	88fb      	ldrh	r3, [r7, #6]
 800350e:	4618      	mov	r0, r3
 8003510:	f000 f806 	bl	8003520 <HAL_GPIO_EXTI_Callback>
  }
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40010400 	.word	0x40010400

08003520 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003538:	4b03      	ldr	r3, [pc, #12]	; (8003548 <HAL_PWR_EnableBkUpAccess+0x14>)
 800353a:	2201      	movs	r2, #1
 800353c:	601a      	str	r2, [r3, #0]
}
 800353e:	bf00      	nop
 8003540:	46bd      	mov	sp, r7
 8003542:	bc80      	pop	{r7}
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	420e0020 	.word	0x420e0020

0800354c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e272      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8087 	beq.w	800367a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800356c:	4b92      	ldr	r3, [pc, #584]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 030c 	and.w	r3, r3, #12
 8003574:	2b04      	cmp	r3, #4
 8003576:	d00c      	beq.n	8003592 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003578:	4b8f      	ldr	r3, [pc, #572]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 030c 	and.w	r3, r3, #12
 8003580:	2b08      	cmp	r3, #8
 8003582:	d112      	bne.n	80035aa <HAL_RCC_OscConfig+0x5e>
 8003584:	4b8c      	ldr	r3, [pc, #560]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800358c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003590:	d10b      	bne.n	80035aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003592:	4b89      	ldr	r3, [pc, #548]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d06c      	beq.n	8003678 <HAL_RCC_OscConfig+0x12c>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d168      	bne.n	8003678 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e24c      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b2:	d106      	bne.n	80035c2 <HAL_RCC_OscConfig+0x76>
 80035b4:	4b80      	ldr	r3, [pc, #512]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a7f      	ldr	r2, [pc, #508]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80035ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035be:	6013      	str	r3, [r2, #0]
 80035c0:	e02e      	b.n	8003620 <HAL_RCC_OscConfig+0xd4>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCC_OscConfig+0x98>
 80035ca:	4b7b      	ldr	r3, [pc, #492]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a7a      	ldr	r2, [pc, #488]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	4b78      	ldr	r3, [pc, #480]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a77      	ldr	r2, [pc, #476]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e01d      	b.n	8003620 <HAL_RCC_OscConfig+0xd4>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035ec:	d10c      	bne.n	8003608 <HAL_RCC_OscConfig+0xbc>
 80035ee:	4b72      	ldr	r3, [pc, #456]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a71      	ldr	r2, [pc, #452]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80035f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	4b6f      	ldr	r3, [pc, #444]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a6e      	ldr	r2, [pc, #440]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 8003600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	e00b      	b.n	8003620 <HAL_RCC_OscConfig+0xd4>
 8003608:	4b6b      	ldr	r3, [pc, #428]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a6a      	ldr	r2, [pc, #424]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 800360e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	4b68      	ldr	r3, [pc, #416]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a67      	ldr	r2, [pc, #412]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 800361a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800361e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d013      	beq.n	8003650 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7ff fac6 	bl	8002bb8 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003630:	f7ff fac2 	bl	8002bb8 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	; 0x64
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e200      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	4b5d      	ldr	r3, [pc, #372]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0xe4>
 800364e:	e014      	b.n	800367a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7ff fab2 	bl	8002bb8 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003658:	f7ff faae 	bl	8002bb8 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	; 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e1ec      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	4b53      	ldr	r3, [pc, #332]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x10c>
 8003676:	e000      	b.n	800367a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d063      	beq.n	800374e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003686:	4b4c      	ldr	r3, [pc, #304]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 030c 	and.w	r3, r3, #12
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003692:	4b49      	ldr	r3, [pc, #292]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b08      	cmp	r3, #8
 800369c:	d11c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x18c>
 800369e:	4b46      	ldr	r3, [pc, #280]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d116      	bne.n	80036d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036aa:	4b43      	ldr	r3, [pc, #268]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_RCC_OscConfig+0x176>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d001      	beq.n	80036c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e1c0      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c2:	4b3d      	ldr	r3, [pc, #244]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4939      	ldr	r1, [pc, #228]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d6:	e03a      	b.n	800374e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d020      	beq.n	8003722 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e0:	4b36      	ldr	r3, [pc, #216]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e6:	f7ff fa67 	bl	8002bb8 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ee:	f7ff fa63 	bl	8002bb8 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e1a1      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003700:	4b2d      	ldr	r3, [pc, #180]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370c:	4b2a      	ldr	r3, [pc, #168]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4927      	ldr	r1, [pc, #156]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 800371c:	4313      	orrs	r3, r2
 800371e:	600b      	str	r3, [r1, #0]
 8003720:	e015      	b.n	800374e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003722:	4b26      	ldr	r3, [pc, #152]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7ff fa46 	bl	8002bb8 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003730:	f7ff fa42 	bl	8002bb8 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e180      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003742:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d03a      	beq.n	80037d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d019      	beq.n	8003796 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003762:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <HAL_RCC_OscConfig+0x274>)
 8003764:	2201      	movs	r2, #1
 8003766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003768:	f7ff fa26 	bl	8002bb8 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003770:	f7ff fa22 	bl	8002bb8 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e160      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003782:	4b0d      	ldr	r3, [pc, #52]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800378e:	2001      	movs	r0, #1
 8003790:	f000 fb08 	bl	8003da4 <RCC_Delay>
 8003794:	e01c      	b.n	80037d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003796:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <HAL_RCC_OscConfig+0x274>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379c:	f7ff fa0c 	bl	8002bb8 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a2:	e00f      	b.n	80037c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a4:	f7ff fa08 	bl	8002bb8 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d908      	bls.n	80037c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e146      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
 80037b6:	bf00      	nop
 80037b8:	40021000 	.word	0x40021000
 80037bc:	42420000 	.word	0x42420000
 80037c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c4:	4b92      	ldr	r3, [pc, #584]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1e9      	bne.n	80037a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80a6 	beq.w	800392a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037de:	2300      	movs	r3, #0
 80037e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e2:	4b8b      	ldr	r3, [pc, #556]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10d      	bne.n	800380a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ee:	4b88      	ldr	r3, [pc, #544]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	4a87      	ldr	r2, [pc, #540]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80037f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f8:	61d3      	str	r3, [r2, #28]
 80037fa:	4b85      	ldr	r3, [pc, #532]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003806:	2301      	movs	r3, #1
 8003808:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380a:	4b82      	ldr	r3, [pc, #520]	; (8003a14 <HAL_RCC_OscConfig+0x4c8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d118      	bne.n	8003848 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003816:	4b7f      	ldr	r3, [pc, #508]	; (8003a14 <HAL_RCC_OscConfig+0x4c8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a7e      	ldr	r2, [pc, #504]	; (8003a14 <HAL_RCC_OscConfig+0x4c8>)
 800381c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003822:	f7ff f9c9 	bl	8002bb8 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382a:	f7ff f9c5 	bl	8002bb8 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b64      	cmp	r3, #100	; 0x64
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e103      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383c:	4b75      	ldr	r3, [pc, #468]	; (8003a14 <HAL_RCC_OscConfig+0x4c8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0f0      	beq.n	800382a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d106      	bne.n	800385e <HAL_RCC_OscConfig+0x312>
 8003850:	4b6f      	ldr	r3, [pc, #444]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	4a6e      	ldr	r2, [pc, #440]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	6213      	str	r3, [r2, #32]
 800385c:	e02d      	b.n	80038ba <HAL_RCC_OscConfig+0x36e>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10c      	bne.n	8003880 <HAL_RCC_OscConfig+0x334>
 8003866:	4b6a      	ldr	r3, [pc, #424]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	4a69      	ldr	r2, [pc, #420]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	6213      	str	r3, [r2, #32]
 8003872:	4b67      	ldr	r3, [pc, #412]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	4a66      	ldr	r2, [pc, #408]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 8003878:	f023 0304 	bic.w	r3, r3, #4
 800387c:	6213      	str	r3, [r2, #32]
 800387e:	e01c      	b.n	80038ba <HAL_RCC_OscConfig+0x36e>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	2b05      	cmp	r3, #5
 8003886:	d10c      	bne.n	80038a2 <HAL_RCC_OscConfig+0x356>
 8003888:	4b61      	ldr	r3, [pc, #388]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	4a60      	ldr	r2, [pc, #384]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 800388e:	f043 0304 	orr.w	r3, r3, #4
 8003892:	6213      	str	r3, [r2, #32]
 8003894:	4b5e      	ldr	r3, [pc, #376]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	4a5d      	ldr	r2, [pc, #372]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	6213      	str	r3, [r2, #32]
 80038a0:	e00b      	b.n	80038ba <HAL_RCC_OscConfig+0x36e>
 80038a2:	4b5b      	ldr	r3, [pc, #364]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	4a5a      	ldr	r2, [pc, #360]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	f023 0301 	bic.w	r3, r3, #1
 80038ac:	6213      	str	r3, [r2, #32]
 80038ae:	4b58      	ldr	r3, [pc, #352]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	4a57      	ldr	r2, [pc, #348]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80038b4:	f023 0304 	bic.w	r3, r3, #4
 80038b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d015      	beq.n	80038ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c2:	f7ff f979 	bl	8002bb8 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c8:	e00a      	b.n	80038e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ca:	f7ff f975 	bl	8002bb8 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d8:	4293      	cmp	r3, r2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e0b1      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e0:	4b4b      	ldr	r3, [pc, #300]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0ee      	beq.n	80038ca <HAL_RCC_OscConfig+0x37e>
 80038ec:	e014      	b.n	8003918 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ee:	f7ff f963 	bl	8002bb8 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f4:	e00a      	b.n	800390c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f6:	f7ff f95f 	bl	8002bb8 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	f241 3288 	movw	r2, #5000	; 0x1388
 8003904:	4293      	cmp	r3, r2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e09b      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800390c:	4b40      	ldr	r3, [pc, #256]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1ee      	bne.n	80038f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003918:	7dfb      	ldrb	r3, [r7, #23]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d105      	bne.n	800392a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800391e:	4b3c      	ldr	r3, [pc, #240]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	4a3b      	ldr	r2, [pc, #236]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 8003924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003928:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 8087 	beq.w	8003a42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003934:	4b36      	ldr	r3, [pc, #216]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 030c 	and.w	r3, r3, #12
 800393c:	2b08      	cmp	r3, #8
 800393e:	d061      	beq.n	8003a04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	2b02      	cmp	r3, #2
 8003946:	d146      	bne.n	80039d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003948:	4b33      	ldr	r3, [pc, #204]	; (8003a18 <HAL_RCC_OscConfig+0x4cc>)
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394e:	f7ff f933 	bl	8002bb8 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003956:	f7ff f92f 	bl	8002bb8 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e06d      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003968:	4b29      	ldr	r3, [pc, #164]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f0      	bne.n	8003956 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800397c:	d108      	bne.n	8003990 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800397e:	4b24      	ldr	r3, [pc, #144]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	4921      	ldr	r1, [pc, #132]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 800398c:	4313      	orrs	r3, r2
 800398e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003990:	4b1f      	ldr	r3, [pc, #124]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a19      	ldr	r1, [r3, #32]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	430b      	orrs	r3, r1
 80039a2:	491b      	ldr	r1, [pc, #108]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a8:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <HAL_RCC_OscConfig+0x4cc>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ae:	f7ff f903 	bl	8002bb8 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b6:	f7ff f8ff 	bl	8002bb8 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e03d      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039c8:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x46a>
 80039d4:	e035      	b.n	8003a42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d6:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <HAL_RCC_OscConfig+0x4cc>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039dc:	f7ff f8ec 	bl	8002bb8 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e4:	f7ff f8e8 	bl	8002bb8 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e026      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x498>
 8003a02:	e01e      	b.n	8003a42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d107      	bne.n	8003a1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e019      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
 8003a10:	40021000 	.word	0x40021000
 8003a14:	40007000 	.word	0x40007000
 8003a18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <HAL_RCC_OscConfig+0x500>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d106      	bne.n	8003a3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d001      	beq.n	8003a42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000

08003a50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0d0      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a64:	4b6a      	ldr	r3, [pc, #424]	; (8003c10 <HAL_RCC_ClockConfig+0x1c0>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d910      	bls.n	8003a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a72:	4b67      	ldr	r3, [pc, #412]	; (8003c10 <HAL_RCC_ClockConfig+0x1c0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 0207 	bic.w	r2, r3, #7
 8003a7a:	4965      	ldr	r1, [pc, #404]	; (8003c10 <HAL_RCC_ClockConfig+0x1c0>)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a82:	4b63      	ldr	r3, [pc, #396]	; (8003c10 <HAL_RCC_ClockConfig+0x1c0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0b8      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d020      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aac:	4b59      	ldr	r3, [pc, #356]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4a58      	ldr	r2, [pc, #352]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ab6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ac4:	4b53      	ldr	r3, [pc, #332]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	4a52      	ldr	r2, [pc, #328]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003aca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ace:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad0:	4b50      	ldr	r3, [pc, #320]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	494d      	ldr	r1, [pc, #308]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d040      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d107      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af6:	4b47      	ldr	r3, [pc, #284]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d115      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e07f      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d107      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0e:	4b41      	ldr	r3, [pc, #260]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e073      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1e:	4b3d      	ldr	r3, [pc, #244]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e06b      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b2e:	4b39      	ldr	r3, [pc, #228]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f023 0203 	bic.w	r2, r3, #3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	4936      	ldr	r1, [pc, #216]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b40:	f7ff f83a 	bl	8002bb8 <HAL_GetTick>
 8003b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b46:	e00a      	b.n	8003b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b48:	f7ff f836 	bl	8002bb8 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e053      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5e:	4b2d      	ldr	r3, [pc, #180]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f003 020c 	and.w	r2, r3, #12
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d1eb      	bne.n	8003b48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b70:	4b27      	ldr	r3, [pc, #156]	; (8003c10 <HAL_RCC_ClockConfig+0x1c0>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d210      	bcs.n	8003ba0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7e:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <HAL_RCC_ClockConfig+0x1c0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 0207 	bic.w	r2, r3, #7
 8003b86:	4922      	ldr	r1, [pc, #136]	; (8003c10 <HAL_RCC_ClockConfig+0x1c0>)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8e:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <HAL_RCC_ClockConfig+0x1c0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e032      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bac:	4b19      	ldr	r3, [pc, #100]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4916      	ldr	r1, [pc, #88]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d009      	beq.n	8003bde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bca:	4b12      	ldr	r3, [pc, #72]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	490e      	ldr	r1, [pc, #56]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bde:	f000 f821 	bl	8003c24 <HAL_RCC_GetSysClockFreq>
 8003be2:	4602      	mov	r2, r0
 8003be4:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	490a      	ldr	r1, [pc, #40]	; (8003c18 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf0:	5ccb      	ldrb	r3, [r1, r3]
 8003bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf6:	4a09      	ldr	r2, [pc, #36]	; (8003c1c <HAL_RCC_ClockConfig+0x1cc>)
 8003bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bfa:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <HAL_RCC_ClockConfig+0x1d0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe fe04 	bl	800280c <HAL_InitTick>

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40022000 	.word	0x40022000
 8003c14:	40021000 	.word	0x40021000
 8003c18:	0800c380 	.word	0x0800c380
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	20000004 	.word	0x20000004

08003c24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c24:	b490      	push	{r4, r7}
 8003c26:	b08a      	sub	sp, #40	; 0x28
 8003c28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c2a:	4b29      	ldr	r3, [pc, #164]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0xac>)
 8003c2c:	1d3c      	adds	r4, r7, #4
 8003c2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c34:	f240 2301 	movw	r3, #513	; 0x201
 8003c38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	2300      	movs	r3, #0
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c4e:	4b21      	ldr	r3, [pc, #132]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d002      	beq.n	8003c64 <HAL_RCC_GetSysClockFreq+0x40>
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d003      	beq.n	8003c6a <HAL_RCC_GetSysClockFreq+0x46>
 8003c62:	e02b      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c64:	4b1c      	ldr	r3, [pc, #112]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c66:	623b      	str	r3, [r7, #32]
      break;
 8003c68:	e02b      	b.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	0c9b      	lsrs	r3, r3, #18
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	3328      	adds	r3, #40	; 0x28
 8003c74:	443b      	add	r3, r7
 8003c76:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c7a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d012      	beq.n	8003cac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c86:	4b13      	ldr	r3, [pc, #76]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	0c5b      	lsrs	r3, r3, #17
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	3328      	adds	r3, #40	; 0x28
 8003c92:	443b      	add	r3, r7
 8003c94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	4a0e      	ldr	r2, [pc, #56]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c9e:	fb03 f202 	mul.w	r2, r3, r2
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8003caa:	e004      	b.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	4a0b      	ldr	r2, [pc, #44]	; (8003cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cb0:	fb02 f303 	mul.w	r3, r2, r3
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	623b      	str	r3, [r7, #32]
      break;
 8003cba:	e002      	b.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cbc:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cbe:	623b      	str	r3, [r7, #32]
      break;
 8003cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3728      	adds	r7, #40	; 0x28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc90      	pop	{r4, r7}
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	0800c360 	.word	0x0800c360
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	007a1200 	.word	0x007a1200
 8003cdc:	003d0900 	.word	0x003d0900

08003ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ce4:	4b02      	ldr	r3, [pc, #8]	; (8003cf0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr
 8003cf0:	20000000 	.word	0x20000000

08003cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cf8:	f7ff fff2 	bl	8003ce0 <HAL_RCC_GetHCLKFreq>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	0a1b      	lsrs	r3, r3, #8
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	4903      	ldr	r1, [pc, #12]	; (8003d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d0a:	5ccb      	ldrb	r3, [r1, r3]
 8003d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000
 8003d18:	0800c390 	.word	0x0800c390

08003d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d20:	f7ff ffde 	bl	8003ce0 <HAL_RCC_GetHCLKFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	0adb      	lsrs	r3, r3, #11
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	4903      	ldr	r1, [pc, #12]	; (8003d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d32:	5ccb      	ldrb	r3, [r1, r3]
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	0800c390 	.word	0x0800c390

08003d44 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	220f      	movs	r2, #15
 8003d52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d54:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <HAL_RCC_GetClockConfig+0x58>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 0203 	and.w	r2, r3, #3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d60:	4b0e      	ldr	r3, [pc, #56]	; (8003d9c <HAL_RCC_GetClockConfig+0x58>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <HAL_RCC_GetClockConfig+0x58>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003d78:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <HAL_RCC_GetClockConfig+0x58>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	08db      	lsrs	r3, r3, #3
 8003d7e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0207 	and.w	r2, r3, #7
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	40022000 	.word	0x40022000

08003da4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003dac:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <RCC_Delay+0x34>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a0a      	ldr	r2, [pc, #40]	; (8003ddc <RCC_Delay+0x38>)
 8003db2:	fba2 2303 	umull	r2, r3, r2, r3
 8003db6:	0a5b      	lsrs	r3, r3, #9
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	fb02 f303 	mul.w	r3, r2, r3
 8003dbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003dc0:	bf00      	nop
  }
  while (Delay --);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	1e5a      	subs	r2, r3, #1
 8003dc6:	60fa      	str	r2, [r7, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1f9      	bne.n	8003dc0 <RCC_Delay+0x1c>
}
 8003dcc:	bf00      	nop
 8003dce:	bf00      	nop
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr
 8003dd8:	20000000 	.word	0x20000000
 8003ddc:	10624dd3 	.word	0x10624dd3

08003de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d07d      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e00:	4b4f      	ldr	r3, [pc, #316]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10d      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0c:	4b4c      	ldr	r3, [pc, #304]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	4a4b      	ldr	r2, [pc, #300]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e16:	61d3      	str	r3, [r2, #28]
 8003e18:	4b49      	ldr	r3, [pc, #292]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e24:	2301      	movs	r3, #1
 8003e26:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e28:	4b46      	ldr	r3, [pc, #280]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d118      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e34:	4b43      	ldr	r3, [pc, #268]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a42      	ldr	r2, [pc, #264]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e40:	f7fe feba 	bl	8002bb8 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e46:	e008      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e48:	f7fe feb6 	bl	8002bb8 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b64      	cmp	r3, #100	; 0x64
 8003e54:	d901      	bls.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e06d      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5a:	4b3a      	ldr	r3, [pc, #232]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0f0      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e66:	4b36      	ldr	r3, [pc, #216]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d02e      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d027      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e84:	4b2e      	ldr	r3, [pc, #184]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e8e:	4b2e      	ldr	r3, [pc, #184]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e90:	2201      	movs	r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e94:	4b2c      	ldr	r3, [pc, #176]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e9a:	4a29      	ldr	r2, [pc, #164]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d014      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eaa:	f7fe fe85 	bl	8002bb8 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb0:	e00a      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb2:	f7fe fe81 	bl	8002bb8 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e036      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec8:	4b1d      	ldr	r3, [pc, #116]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0ee      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ed4:	4b1a      	ldr	r3, [pc, #104]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	4917      	ldr	r1, [pc, #92]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ee6:	7dfb      	ldrb	r3, [r7, #23]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d105      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eec:	4b14      	ldr	r3, [pc, #80]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	4a13      	ldr	r2, [pc, #76]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f04:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	490b      	ldr	r1, [pc, #44]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0310 	and.w	r3, r3, #16
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d008      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f22:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	4904      	ldr	r1, [pc, #16]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40021000 	.word	0x40021000
 8003f44:	40007000 	.word	0x40007000
 8003f48:	42420440 	.word	0x42420440

08003f4c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f4c:	b590      	push	{r4, r7, lr}
 8003f4e:	b08d      	sub	sp, #52	; 0x34
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f54:	4b6a      	ldr	r3, [pc, #424]	; (8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8003f56:	f107 040c 	add.w	r4, r7, #12
 8003f5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f60:	f240 2301 	movw	r3, #513	; 0x201
 8003f64:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f6e:	2300      	movs	r3, #0
 8003f70:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	2300      	movs	r3, #0
 8003f78:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	2b0f      	cmp	r3, #15
 8003f80:	f200 80b4 	bhi.w	80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8003f84:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8003f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8a:	bf00      	nop
 8003f8c:	0800406b 	.word	0x0800406b
 8003f90:	080040d1 	.word	0x080040d1
 8003f94:	080040ed 	.word	0x080040ed
 8003f98:	0800405b 	.word	0x0800405b
 8003f9c:	080040ed 	.word	0x080040ed
 8003fa0:	080040ed 	.word	0x080040ed
 8003fa4:	080040ed 	.word	0x080040ed
 8003fa8:	08004063 	.word	0x08004063
 8003fac:	080040ed 	.word	0x080040ed
 8003fb0:	080040ed 	.word	0x080040ed
 8003fb4:	080040ed 	.word	0x080040ed
 8003fb8:	080040ed 	.word	0x080040ed
 8003fbc:	080040ed 	.word	0x080040ed
 8003fc0:	080040ed 	.word	0x080040ed
 8003fc4:	080040ed 	.word	0x080040ed
 8003fc8:	08003fcd 	.word	0x08003fcd
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8003fcc:	4b4d      	ldr	r3, [pc, #308]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003fd2:	4b4c      	ldr	r3, [pc, #304]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 8088 	beq.w	80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	0c9b      	lsrs	r3, r3, #18
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	3330      	adds	r3, #48	; 0x30
 8003fea:	443b      	add	r3, r7
 8003fec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ff0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d017      	beq.n	800402c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ffc:	4b41      	ldr	r3, [pc, #260]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	0c5b      	lsrs	r3, r3, #17
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	3330      	adds	r3, #48	; 0x30
 8004008:	443b      	add	r3, r7
 800400a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00d      	beq.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800401a:	4a3b      	ldr	r2, [pc, #236]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	fb02 f303 	mul.w	r3, r2, r3
 8004028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800402a:	e004      	b.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	4a37      	ldr	r2, [pc, #220]	; (800410c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8004030:	fb02 f303 	mul.w	r3, r2, r3
 8004034:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004036:	4b33      	ldr	r3, [pc, #204]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004042:	d102      	bne.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8004044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004046:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004048:	e052      	b.n	80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 800404a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	4a30      	ldr	r2, [pc, #192]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8004050:	fba2 2303 	umull	r2, r3, r2, r3
 8004054:	085b      	lsrs	r3, r3, #1
 8004056:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004058:	e04a      	b.n	80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800405a:	f7ff fde3 	bl	8003c24 <HAL_RCC_GetSysClockFreq>
 800405e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004060:	e049      	b.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004062:	f7ff fddf 	bl	8003c24 <HAL_RCC_GetSysClockFreq>
 8004066:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004068:	e045      	b.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800406a:	4b26      	ldr	r3, [pc, #152]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407a:	d108      	bne.n	800408e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 8004086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800408a:	62bb      	str	r3, [r7, #40]	; 0x28
 800408c:	e01f      	b.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004098:	d109      	bne.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 800409a:	4b1a      	ldr	r3, [pc, #104]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 80040a6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80040aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ac:	e00f      	b.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040b8:	d11c      	bne.n	80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80040ba:	4b12      	ldr	r3, [pc, #72]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d016      	beq.n	80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 80040c6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80040ca:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80040cc:	e012      	b.n	80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80040ce:	e011      	b.n	80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80040d0:	f7ff fe24 	bl	8003d1c <HAL_RCC_GetPCLK2Freq>
 80040d4:	4602      	mov	r2, r0
 80040d6:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	0b9b      	lsrs	r3, r3, #14
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	3301      	adds	r3, #1
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80040ea:	e004      	b.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 80040ec:	bf00      	nop
 80040ee:	e002      	b.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 80040f0:	bf00      	nop
 80040f2:	e000      	b.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 80040f4:	bf00      	nop
    }
  }
  return (frequency);
 80040f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3734      	adds	r7, #52	; 0x34
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd90      	pop	{r4, r7, pc}
 8004100:	0800c370 	.word	0x0800c370
 8004104:	40021000 	.word	0x40021000
 8004108:	007a1200 	.word	0x007a1200
 800410c:	003d0900 	.word	0x003d0900
 8004110:	aaaaaaab 	.word	0xaaaaaaab

08004114 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e084      	b.n	8004234 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	7c5b      	ldrb	r3, [r3, #17]
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d105      	bne.n	8004140 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fe fa36 	bl	80025ac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 faf4 	bl	8004734 <HAL_RTC_WaitForSynchro>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d004      	beq.n	800415c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2204      	movs	r2, #4
 8004156:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e06b      	b.n	8004234 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fbad 	bl	80048bc <RTC_EnterInitMode>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d004      	beq.n	8004172 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2204      	movs	r2, #4
 800416c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e060      	b.n	8004234 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0207 	bic.w	r2, r2, #7
 8004180:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d005      	beq.n	8004196 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800418a:	4b2c      	ldr	r3, [pc, #176]	; (800423c <HAL_RTC_Init+0x128>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	4a2b      	ldr	r2, [pc, #172]	; (800423c <HAL_RTC_Init+0x128>)
 8004190:	f023 0301 	bic.w	r3, r3, #1
 8004194:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004196:	4b29      	ldr	r3, [pc, #164]	; (800423c <HAL_RTC_Init+0x128>)
 8004198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	4926      	ldr	r1, [pc, #152]	; (800423c <HAL_RTC_Init+0x128>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b0:	d003      	beq.n	80041ba <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	e00e      	b.n	80041d8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80041ba:	2001      	movs	r0, #1
 80041bc:	f7ff fec6 	bl	8003f4c <HAL_RCCEx_GetPeriphCLKFreq>
 80041c0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d104      	bne.n	80041d2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2204      	movs	r2, #4
 80041cc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e030      	b.n	8004234 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f023 010f 	bic.w	r1, r3, #15
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	0c1a      	lsrs	r2, r3, #16
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	0c1b      	lsrs	r3, r3, #16
 80041f6:	041b      	lsls	r3, r3, #16
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	b291      	uxth	r1, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6812      	ldr	r2, [r2, #0]
 8004200:	430b      	orrs	r3, r1
 8004202:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 fb81 	bl	800490c <RTC_ExitInitMode>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d004      	beq.n	800421a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2204      	movs	r2, #4
 8004214:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e00c      	b.n	8004234 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004232:	2300      	movs	r3, #0
  }
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40006c00 	.word	0x40006c00

08004240 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004240:	b590      	push	{r4, r7, lr}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	2300      	movs	r3, #0
 8004252:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <HAL_RTC_SetTime+0x20>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e080      	b.n	8004366 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	7c1b      	ldrb	r3, [r3, #16]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_RTC_SetTime+0x30>
 800426c:	2302      	movs	r3, #2
 800426e:	e07a      	b.n	8004366 <HAL_RTC_SetTime+0x126>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2201      	movs	r2, #1
 8004274:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2202      	movs	r2, #2
 800427a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d113      	bne.n	80042aa <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800428c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	785b      	ldrb	r3, [r3, #1]
 8004294:	4619      	mov	r1, r3
 8004296:	460b      	mov	r3, r1
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	1a5b      	subs	r3, r3, r1
 800429c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800429e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80042a4:	4413      	add	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	e01e      	b.n	80042e8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fb71 	bl	8004996 <RTC_Bcd2ToByte>
 80042b4:	4603      	mov	r3, r0
 80042b6:	461a      	mov	r2, r3
 80042b8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80042bc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fb66 	bl	8004996 <RTC_Bcd2ToByte>
 80042ca:	4603      	mov	r3, r0
 80042cc:	461a      	mov	r2, r3
 80042ce:	4613      	mov	r3, r2
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	1a9b      	subs	r3, r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80042d6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	789b      	ldrb	r3, [r3, #2]
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 fb5a 	bl	8004996 <RTC_Bcd2ToByte>
 80042e2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80042e4:	4423      	add	r3, r4
 80042e6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80042e8:	6979      	ldr	r1, [r7, #20]
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 fa7f 	bl	80047ee <RTC_WriteTimeCounter>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d007      	beq.n	8004306 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2204      	movs	r2, #4
 80042fa:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e02f      	b.n	8004366 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0205 	bic.w	r2, r2, #5
 8004314:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 fa90 	bl	800483c <RTC_ReadAlarmCounter>
 800431c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004324:	d018      	beq.n	8004358 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	429a      	cmp	r2, r3
 800432c:	d214      	bcs.n	8004358 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004334:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004338:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800433a:	6939      	ldr	r1, [r7, #16]
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 fa96 	bl	800486e <RTC_WriteAlarmCounter>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d007      	beq.n	8004358 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2204      	movs	r2, #4
 800434c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e006      	b.n	8004366 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2201      	movs	r2, #1
 800435c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004364:	2300      	movs	r3, #0
  }
}
 8004366:	4618      	mov	r0, r3
 8004368:	371c      	adds	r7, #28
 800436a:	46bd      	mov	sp, r7
 800436c:	bd90      	pop	{r4, r7, pc}
	...

08004370 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	61bb      	str	r3, [r7, #24]
 8004380:	2300      	movs	r3, #0
 8004382:	61fb      	str	r3, [r7, #28]
 8004384:	2300      	movs	r3, #0
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	2300      	movs	r3, #0
 800438a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <HAL_RTC_GetTime+0x28>
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0b5      	b.n	8004508 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e0ac      	b.n	8004508 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f9ed 	bl	800478e <RTC_ReadTimeCounter>
 80043b4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	4a55      	ldr	r2, [pc, #340]	; (8004510 <HAL_RTC_GetTime+0x1a0>)
 80043ba:	fba2 2303 	umull	r2, r3, r2, r3
 80043be:	0adb      	lsrs	r3, r3, #11
 80043c0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	4b52      	ldr	r3, [pc, #328]	; (8004510 <HAL_RTC_GetTime+0x1a0>)
 80043c6:	fba3 1302 	umull	r1, r3, r3, r2
 80043ca:	0adb      	lsrs	r3, r3, #11
 80043cc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	4a4f      	ldr	r2, [pc, #316]	; (8004514 <HAL_RTC_GetTime+0x1a4>)
 80043d8:	fba2 2303 	umull	r2, r3, r2, r3
 80043dc:	095b      	lsrs	r3, r3, #5
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	4a4a      	ldr	r2, [pc, #296]	; (8004510 <HAL_RTC_GetTime+0x1a0>)
 80043e8:	fba2 1203 	umull	r1, r2, r2, r3
 80043ec:	0ad2      	lsrs	r2, r2, #11
 80043ee:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80043f2:	fb01 f202 	mul.w	r2, r1, r2
 80043f6:	1a9a      	subs	r2, r3, r2
 80043f8:	4b46      	ldr	r3, [pc, #280]	; (8004514 <HAL_RTC_GetTime+0x1a4>)
 80043fa:	fba3 1302 	umull	r1, r3, r3, r2
 80043fe:	0959      	lsrs	r1, r3, #5
 8004400:	460b      	mov	r3, r1
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	1a5b      	subs	r3, r3, r1
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	1ad1      	subs	r1, r2, r3
 800440a:	b2ca      	uxtb	r2, r1
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	2b17      	cmp	r3, #23
 8004414:	d955      	bls.n	80044c2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	4a3f      	ldr	r2, [pc, #252]	; (8004518 <HAL_RTC_GetTime+0x1a8>)
 800441a:	fba2 2303 	umull	r2, r3, r2, r3
 800441e:	091b      	lsrs	r3, r3, #4
 8004420:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004422:	6939      	ldr	r1, [r7, #16]
 8004424:	4b3c      	ldr	r3, [pc, #240]	; (8004518 <HAL_RTC_GetTime+0x1a8>)
 8004426:	fba3 2301 	umull	r2, r3, r3, r1
 800442a:	091a      	lsrs	r2, r3, #4
 800442c:	4613      	mov	r3, r2
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	4413      	add	r3, r2
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	1aca      	subs	r2, r1, r3
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f9fd 	bl	800483c <RTC_ReadAlarmCounter>
 8004442:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444a:	d008      	beq.n	800445e <HAL_RTC_GetTime+0xee>
 800444c:	69fa      	ldr	r2, [r7, #28]
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	429a      	cmp	r2, r3
 8004452:	d904      	bls.n	800445e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	61fb      	str	r3, [r7, #28]
 800445c:	e002      	b.n	8004464 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800445e:	f04f 33ff 	mov.w	r3, #4294967295
 8004462:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	4a2d      	ldr	r2, [pc, #180]	; (800451c <HAL_RTC_GetTime+0x1ac>)
 8004468:	fb02 f303 	mul.w	r3, r2, r3
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004472:	69b9      	ldr	r1, [r7, #24]
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 f9ba 	bl	80047ee <RTC_WriteTimeCounter>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e041      	b.n	8004508 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448a:	d00c      	beq.n	80044a6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	4413      	add	r3, r2
 8004492:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004494:	69f9      	ldr	r1, [r7, #28]
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 f9e9 	bl	800486e <RTC_WriteAlarmCounter>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e030      	b.n	8004508 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80044a6:	69f9      	ldr	r1, [r7, #28]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f9e0 	bl	800486e <RTC_WriteAlarmCounter>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e027      	b.n	8004508 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80044b8:	6979      	ldr	r1, [r7, #20]
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 fa88 	bl	80049d0 <RTC_DateUpdate>
 80044c0:	e003      	b.n	80044ca <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d01a      	beq.n	8004506 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fa41 	bl	800495c <RTC_ByteToBcd2>
 80044da:	4603      	mov	r3, r0
 80044dc:	461a      	mov	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	785b      	ldrb	r3, [r3, #1]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fa38 	bl	800495c <RTC_ByteToBcd2>
 80044ec:	4603      	mov	r3, r0
 80044ee:	461a      	mov	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	789b      	ldrb	r3, [r3, #2]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fa2f 	bl	800495c <RTC_ByteToBcd2>
 80044fe:	4603      	mov	r3, r0
 8004500:	461a      	mov	r2, r3
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3720      	adds	r7, #32
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	91a2b3c5 	.word	0x91a2b3c5
 8004514:	88888889 	.word	0x88888889
 8004518:	aaaaaaab 	.word	0xaaaaaaab
 800451c:	00015180 	.word	0x00015180

08004520 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	61fb      	str	r3, [r7, #28]
 8004530:	2300      	movs	r3, #0
 8004532:	61bb      	str	r3, [r7, #24]
 8004534:	2300      	movs	r3, #0
 8004536:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <HAL_RTC_SetDate+0x24>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e097      	b.n	8004678 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	7c1b      	ldrb	r3, [r3, #16]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_RTC_SetDate+0x34>
 8004550:	2302      	movs	r3, #2
 8004552:	e091      	b.n	8004678 <HAL_RTC_SetDate+0x158>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2201      	movs	r2, #1
 8004558:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2202      	movs	r2, #2
 800455e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10c      	bne.n	8004580 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	78da      	ldrb	r2, [r3, #3]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	785a      	ldrb	r2, [r3, #1]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	789a      	ldrb	r2, [r3, #2]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	739a      	strb	r2, [r3, #14]
 800457e:	e01a      	b.n	80045b6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	78db      	ldrb	r3, [r3, #3]
 8004584:	4618      	mov	r0, r3
 8004586:	f000 fa06 	bl	8004996 <RTC_Bcd2ToByte>
 800458a:	4603      	mov	r3, r0
 800458c:	461a      	mov	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	785b      	ldrb	r3, [r3, #1]
 8004596:	4618      	mov	r0, r3
 8004598:	f000 f9fd 	bl	8004996 <RTC_Bcd2ToByte>
 800459c:	4603      	mov	r3, r0
 800459e:	461a      	mov	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	789b      	ldrb	r3, [r3, #2]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 f9f4 	bl	8004996 <RTC_Bcd2ToByte>
 80045ae:	4603      	mov	r3, r0
 80045b0:	461a      	mov	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	7bdb      	ldrb	r3, [r3, #15]
 80045ba:	4618      	mov	r0, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	7b59      	ldrb	r1, [r3, #13]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	7b9b      	ldrb	r3, [r3, #14]
 80045c4:	461a      	mov	r2, r3
 80045c6:	f000 fadf 	bl	8004b88 <RTC_WeekDayNum>
 80045ca:	4603      	mov	r3, r0
 80045cc:	461a      	mov	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	7b1a      	ldrb	r2, [r3, #12]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 f8d7 	bl	800478e <RTC_ReadTimeCounter>
 80045e0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	4a26      	ldr	r2, [pc, #152]	; (8004680 <HAL_RTC_SetDate+0x160>)
 80045e6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ea:	0adb      	lsrs	r3, r3, #11
 80045ec:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2b18      	cmp	r3, #24
 80045f2:	d93a      	bls.n	800466a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	4a23      	ldr	r2, [pc, #140]	; (8004684 <HAL_RTC_SetDate+0x164>)
 80045f8:	fba2 2303 	umull	r2, r3, r2, r3
 80045fc:	091b      	lsrs	r3, r3, #4
 80045fe:	4a22      	ldr	r2, [pc, #136]	; (8004688 <HAL_RTC_SetDate+0x168>)
 8004600:	fb02 f303 	mul.w	r3, r2, r3
 8004604:	69fa      	ldr	r2, [r7, #28]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800460a:	69f9      	ldr	r1, [r7, #28]
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f8ee 	bl	80047ee <RTC_WriteTimeCounter>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d007      	beq.n	8004628 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2204      	movs	r2, #4
 800461c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e027      	b.n	8004678 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 f907 	bl	800483c <RTC_ReadAlarmCounter>
 800462e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004636:	d018      	beq.n	800466a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	429a      	cmp	r2, r3
 800463e:	d214      	bcs.n	800466a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004646:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800464a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800464c:	69b9      	ldr	r1, [r7, #24]
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 f90d 	bl	800486e <RTC_WriteAlarmCounter>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d007      	beq.n	800466a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2204      	movs	r2, #4
 800465e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e006      	b.n	8004678 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3720      	adds	r7, #32
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	91a2b3c5 	.word	0x91a2b3c5
 8004684:	aaaaaaab 	.word	0xaaaaaaab
 8004688:	00015180 	.word	0x00015180

0800468c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004698:	f107 0314 	add.w	r3, r7, #20
 800469c:	2100      	movs	r1, #0
 800469e:	460a      	mov	r2, r1
 80046a0:	801a      	strh	r2, [r3, #0]
 80046a2:	460a      	mov	r2, r1
 80046a4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <HAL_RTC_GetDate+0x26>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e03a      	b.n	800472c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80046b6:	f107 0314 	add.w	r3, r7, #20
 80046ba:	2200      	movs	r2, #0
 80046bc:	4619      	mov	r1, r3
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f7ff fe56 	bl	8004370 <HAL_RTC_GetTime>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e02e      	b.n	800472c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	7b1a      	ldrb	r2, [r3, #12]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	7bda      	ldrb	r2, [r3, #15]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	7b5a      	ldrb	r2, [r3, #13]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	7b9a      	ldrb	r2, [r3, #14]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01a      	beq.n	800472a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	78db      	ldrb	r3, [r3, #3]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 f92f 	bl	800495c <RTC_ByteToBcd2>
 80046fe:	4603      	mov	r3, r0
 8004700:	461a      	mov	r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	785b      	ldrb	r3, [r3, #1]
 800470a:	4618      	mov	r0, r3
 800470c:	f000 f926 	bl	800495c <RTC_ByteToBcd2>
 8004710:	4603      	mov	r3, r0
 8004712:	461a      	mov	r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	789b      	ldrb	r3, [r3, #2]
 800471c:	4618      	mov	r0, r3
 800471e:	f000 f91d 	bl	800495c <RTC_ByteToBcd2>
 8004722:	4603      	mov	r3, r0
 8004724:	461a      	mov	r2, r3
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e01d      	b.n	8004786 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0208 	bic.w	r2, r2, #8
 8004758:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800475a:	f7fe fa2d 	bl	8002bb8 <HAL_GetTick>
 800475e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004760:	e009      	b.n	8004776 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004762:	f7fe fa29 	bl	8002bb8 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004770:	d901      	bls.n	8004776 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e007      	b.n	8004786 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0ee      	beq.n	8004762 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800478e:	b480      	push	{r7}
 8004790:	b087      	sub	sp, #28
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	827b      	strh	r3, [r7, #18]
 800479a:	2300      	movs	r3, #0
 800479c:	823b      	strh	r3, [r7, #16]
 800479e:	2300      	movs	r3, #0
 80047a0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80047be:	8a7a      	ldrh	r2, [r7, #18]
 80047c0:	8a3b      	ldrh	r3, [r7, #16]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d008      	beq.n	80047d8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80047c6:	8a3b      	ldrh	r3, [r7, #16]
 80047c8:	041a      	lsls	r2, r3, #16
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	e004      	b.n	80047e2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80047d8:	8a7b      	ldrh	r3, [r7, #18]
 80047da:	041a      	lsls	r2, r3, #16
 80047dc:	89fb      	ldrh	r3, [r7, #14]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80047e2:	697b      	ldr	r3, [r7, #20]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	371c      	adds	r7, #28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bc80      	pop	{r7}
 80047ec:	4770      	bx	lr

080047ee <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f85d 	bl	80048bc <RTC_EnterInitMode>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	73fb      	strb	r3, [r7, #15]
 800480c:	e011      	b.n	8004832 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	0c12      	lsrs	r2, r2, #16
 8004816:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	b292      	uxth	r2, r2
 8004820:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f872 	bl	800490c <RTC_ExitInitMode>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004832:	7bfb      	ldrb	r3, [r7, #15]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	81fb      	strh	r3, [r7, #14]
 8004848:	2300      	movs	r3, #0
 800484a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800485c:	89fb      	ldrh	r3, [r7, #14]
 800485e:	041a      	lsls	r2, r3, #16
 8004860:	89bb      	ldrh	r3, [r7, #12]
 8004862:	4313      	orrs	r3, r2
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	bc80      	pop	{r7}
 800486c:	4770      	bx	lr

0800486e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f81d 	bl	80048bc <RTC_EnterInitMode>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	73fb      	strb	r3, [r7, #15]
 800488c:	e011      	b.n	80048b2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	0c12      	lsrs	r2, r2, #16
 8004896:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	b292      	uxth	r2, r2
 80048a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f832 	bl	800490c <RTC_ExitInitMode>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80048c8:	f7fe f976 	bl	8002bb8 <HAL_GetTick>
 80048cc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80048ce:	e009      	b.n	80048e4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80048d0:	f7fe f972 	bl	8002bb8 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048de:	d901      	bls.n	80048e4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e00f      	b.n	8004904 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0ee      	beq.n	80048d0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0210 	orr.w	r2, r2, #16
 8004900:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0210 	bic.w	r2, r2, #16
 8004926:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004928:	f7fe f946 	bl	8002bb8 <HAL_GetTick>
 800492c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800492e:	e009      	b.n	8004944 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004930:	f7fe f942 	bl	8002bb8 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800493e:	d901      	bls.n	8004944 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e007      	b.n	8004954 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0ee      	beq.n	8004930 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	4603      	mov	r3, r0
 8004964:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004966:	2300      	movs	r3, #0
 8004968:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800496a:	e005      	b.n	8004978 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3301      	adds	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004972:	79fb      	ldrb	r3, [r7, #7]
 8004974:	3b0a      	subs	r3, #10
 8004976:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	2b09      	cmp	r3, #9
 800497c:	d8f6      	bhi.n	800496c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	b2da      	uxtb	r2, r3
 8004986:	79fb      	ldrb	r3, [r7, #7]
 8004988:	4313      	orrs	r3, r2
 800498a:	b2db      	uxtb	r3, r3
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	bc80      	pop	{r7}
 8004994:	4770      	bx	lr

08004996 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004996:	b480      	push	{r7}
 8004998:	b085      	sub	sp, #20
 800499a:	af00      	add	r7, sp, #0
 800499c:	4603      	mov	r3, r0
 800499e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80049a4:	79fb      	ldrb	r3, [r7, #7]
 80049a6:	091b      	lsrs	r3, r3, #4
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	461a      	mov	r2, r3
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	4413      	add	r3, r2
 80049c4:	b2db      	uxtb	r3, r3
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bc80      	pop	{r7}
 80049ce:	4770      	bx	lr

080049d0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	2300      	movs	r3, #0
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	2300      	movs	r3, #0
 80049e4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	7bdb      	ldrb	r3, [r3, #15]
 80049ee:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	7b5b      	ldrb	r3, [r3, #13]
 80049f4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	7b9b      	ldrb	r3, [r3, #14]
 80049fa:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80049fc:	2300      	movs	r3, #0
 80049fe:	60bb      	str	r3, [r7, #8]
 8004a00:	e06f      	b.n	8004ae2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d011      	beq.n	8004a2c <RTC_DateUpdate+0x5c>
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d00e      	beq.n	8004a2c <RTC_DateUpdate+0x5c>
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	2b05      	cmp	r3, #5
 8004a12:	d00b      	beq.n	8004a2c <RTC_DateUpdate+0x5c>
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	2b07      	cmp	r3, #7
 8004a18:	d008      	beq.n	8004a2c <RTC_DateUpdate+0x5c>
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d005      	beq.n	8004a2c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	2b0a      	cmp	r3, #10
 8004a24:	d002      	beq.n	8004a2c <RTC_DateUpdate+0x5c>
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2b0c      	cmp	r3, #12
 8004a2a:	d117      	bne.n	8004a5c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b1e      	cmp	r3, #30
 8004a30:	d803      	bhi.n	8004a3a <RTC_DateUpdate+0x6a>
      {
        day++;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	3301      	adds	r3, #1
 8004a36:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004a38:	e050      	b.n	8004adc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b0c      	cmp	r3, #12
 8004a3e:	d005      	beq.n	8004a4c <RTC_DateUpdate+0x7c>
        {
          month++;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	3301      	adds	r3, #1
 8004a44:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004a46:	2301      	movs	r3, #1
 8004a48:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004a4a:	e047      	b.n	8004adc <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004a50:	2301      	movs	r3, #1
 8004a52:	60fb      	str	r3, [r7, #12]
          year++;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	3301      	adds	r3, #1
 8004a58:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004a5a:	e03f      	b.n	8004adc <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d008      	beq.n	8004a74 <RTC_DateUpdate+0xa4>
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	2b06      	cmp	r3, #6
 8004a66:	d005      	beq.n	8004a74 <RTC_DateUpdate+0xa4>
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	2b09      	cmp	r3, #9
 8004a6c:	d002      	beq.n	8004a74 <RTC_DateUpdate+0xa4>
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2b0b      	cmp	r3, #11
 8004a72:	d10c      	bne.n	8004a8e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b1d      	cmp	r3, #29
 8004a78:	d803      	bhi.n	8004a82 <RTC_DateUpdate+0xb2>
      {
        day++;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004a80:	e02c      	b.n	8004adc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	3301      	adds	r3, #1
 8004a86:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004a8c:	e026      	b.n	8004adc <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d123      	bne.n	8004adc <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b1b      	cmp	r3, #27
 8004a98:	d803      	bhi.n	8004aa2 <RTC_DateUpdate+0xd2>
      {
        day++;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	e01c      	b.n	8004adc <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2b1c      	cmp	r3, #28
 8004aa6:	d111      	bne.n	8004acc <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 f839 	bl	8004b24 <RTC_IsLeapYear>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <RTC_DateUpdate+0xf0>
        {
          day++;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	3301      	adds	r3, #1
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	e00d      	b.n	8004adc <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	e007      	b.n	8004adc <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b1d      	cmp	r3, #29
 8004ad0:	d104      	bne.n	8004adc <RTC_DateUpdate+0x10c>
      {
        month++;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d38b      	bcc.n	8004a02 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	6978      	ldr	r0, [r7, #20]
 8004b0e:	f000 f83b 	bl	8004b88 <RTC_WeekDayNum>
 8004b12:	4603      	mov	r3, r0
 8004b14:	461a      	mov	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	731a      	strb	r2, [r3, #12]
}
 8004b1a:	bf00      	nop
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8004b2e:	88fb      	ldrh	r3, [r7, #6]
 8004b30:	f003 0303 	and.w	r3, r3, #3
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	e01d      	b.n	8004b7a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004b3e:	88fb      	ldrh	r3, [r7, #6]
 8004b40:	4a10      	ldr	r2, [pc, #64]	; (8004b84 <RTC_IsLeapYear+0x60>)
 8004b42:	fba2 1203 	umull	r1, r2, r2, r3
 8004b46:	0952      	lsrs	r2, r2, #5
 8004b48:	2164      	movs	r1, #100	; 0x64
 8004b4a:	fb01 f202 	mul.w	r2, r1, r2
 8004b4e:	1a9b      	subs	r3, r3, r2
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e00f      	b.n	8004b7a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004b5a:	88fb      	ldrh	r3, [r7, #6]
 8004b5c:	4a09      	ldr	r2, [pc, #36]	; (8004b84 <RTC_IsLeapYear+0x60>)
 8004b5e:	fba2 1203 	umull	r1, r2, r2, r3
 8004b62:	09d2      	lsrs	r2, r2, #7
 8004b64:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004b68:	fb01 f202 	mul.w	r2, r1, r2
 8004b6c:	1a9b      	subs	r3, r3, r2
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e000      	b.n	8004b7a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004b78:	2300      	movs	r3, #0
  }
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bc80      	pop	{r7}
 8004b82:	4770      	bx	lr
 8004b84:	51eb851f 	.word	0x51eb851f

08004b88 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	70fb      	strb	r3, [r7, #3]
 8004b94:	4613      	mov	r3, r2
 8004b96:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60bb      	str	r3, [r7, #8]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004ba6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004ba8:	78fb      	ldrb	r3, [r7, #3]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d82d      	bhi.n	8004c0a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004bae:	78fa      	ldrb	r2, [r7, #3]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	4413      	add	r3, r2
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	4a2c      	ldr	r2, [pc, #176]	; (8004c6c <RTC_WeekDayNum+0xe4>)
 8004bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc0:	085a      	lsrs	r2, r3, #1
 8004bc2:	78bb      	ldrb	r3, [r7, #2]
 8004bc4:	441a      	add	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	441a      	add	r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	089b      	lsrs	r3, r3, #2
 8004bd0:	441a      	add	r2, r3
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	4926      	ldr	r1, [pc, #152]	; (8004c70 <RTC_WeekDayNum+0xe8>)
 8004bd8:	fba1 1303 	umull	r1, r3, r1, r3
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	1ad2      	subs	r2, r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	4922      	ldr	r1, [pc, #136]	; (8004c70 <RTC_WeekDayNum+0xe8>)
 8004be6:	fba1 1303 	umull	r1, r3, r1, r3
 8004bea:	09db      	lsrs	r3, r3, #7
 8004bec:	4413      	add	r3, r2
 8004bee:	1d1a      	adds	r2, r3, #4
 8004bf0:	4b20      	ldr	r3, [pc, #128]	; (8004c74 <RTC_WeekDayNum+0xec>)
 8004bf2:	fba3 1302 	umull	r1, r3, r3, r2
 8004bf6:	1ad1      	subs	r1, r2, r3
 8004bf8:	0849      	lsrs	r1, r1, #1
 8004bfa:	440b      	add	r3, r1
 8004bfc:	0899      	lsrs	r1, r3, #2
 8004bfe:	460b      	mov	r3, r1
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	1a5b      	subs	r3, r3, r1
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	e029      	b.n	8004c5e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004c0a:	78fa      	ldrb	r2, [r7, #3]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	4413      	add	r3, r2
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	1a9b      	subs	r3, r3, r2
 8004c16:	4a15      	ldr	r2, [pc, #84]	; (8004c6c <RTC_WeekDayNum+0xe4>)
 8004c18:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1c:	085a      	lsrs	r2, r3, #1
 8004c1e:	78bb      	ldrb	r3, [r7, #2]
 8004c20:	441a      	add	r2, r3
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	441a      	add	r2, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	089b      	lsrs	r3, r3, #2
 8004c2a:	441a      	add	r2, r3
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4910      	ldr	r1, [pc, #64]	; (8004c70 <RTC_WeekDayNum+0xe8>)
 8004c30:	fba1 1303 	umull	r1, r3, r1, r3
 8004c34:	095b      	lsrs	r3, r3, #5
 8004c36:	1ad2      	subs	r2, r2, r3
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	490d      	ldr	r1, [pc, #52]	; (8004c70 <RTC_WeekDayNum+0xe8>)
 8004c3c:	fba1 1303 	umull	r1, r3, r1, r3
 8004c40:	09db      	lsrs	r3, r3, #7
 8004c42:	4413      	add	r3, r2
 8004c44:	1c9a      	adds	r2, r3, #2
 8004c46:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <RTC_WeekDayNum+0xec>)
 8004c48:	fba3 1302 	umull	r1, r3, r3, r2
 8004c4c:	1ad1      	subs	r1, r2, r3
 8004c4e:	0849      	lsrs	r1, r1, #1
 8004c50:	440b      	add	r3, r1
 8004c52:	0899      	lsrs	r1, r3, #2
 8004c54:	460b      	mov	r3, r1
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	1a5b      	subs	r3, r3, r1
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	b2db      	uxtb	r3, r3
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr
 8004c6c:	38e38e39 	.word	0x38e38e39
 8004c70:	51eb851f 	.word	0x51eb851f
 8004c74:	24924925 	.word	0x24924925

08004c78 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e022      	b.n	8004cd0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d105      	bne.n	8004ca2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7fd fca9 	bl	80025f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2203      	movs	r2, #3
 8004ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f814 	bl	8004cd8 <HAL_SD_InitCard>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e00a      	b.n	8004cd0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004cd8:	b5b0      	push	{r4, r5, r7, lr}
 8004cda:	b08e      	sub	sp, #56	; 0x38
 8004cdc:	af04      	add	r7, sp, #16
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004cf4:	2376      	movs	r3, #118	; 0x76
 8004cf6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681d      	ldr	r5, [r3, #0]
 8004cfc:	466c      	mov	r4, sp
 8004cfe:	f107 0314 	add.w	r3, r7, #20
 8004d02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004d06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004d0a:	f107 0308 	add.w	r3, r7, #8
 8004d0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d10:	4628      	mov	r0, r5
 8004d12:	f001 ff53 	bl	8006bbc <SDIO_Init>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e04c      	b.n	8004dc2 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004d28:	4b28      	ldr	r3, [pc, #160]	; (8004dcc <HAL_SD_InitCard+0xf4>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f001 ff88 	bl	8006c48 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004d38:	4b24      	ldr	r3, [pc, #144]	; (8004dcc <HAL_SD_InitCard+0xf4>)
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fe6a 	bl	8005a18 <SD_PowerON>
 8004d44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00b      	beq.n	8004d64 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e02e      	b.n	8004dc2 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fd88 	bl	800587a <SD_InitCard>
 8004d6a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00b      	beq.n	8004d8a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e01b      	b.n	8004dc2 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d92:	4618      	mov	r0, r3
 8004d94:	f001 ffe6 	bl	8006d64 <SDMMC_CmdBlockLength>
 8004d98:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00f      	beq.n	8004dc0 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a0a      	ldr	r2, [pc, #40]	; (8004dd0 <HAL_SD_InitCard+0xf8>)
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e000      	b.n	8004dc2 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3728      	adds	r7, #40	; 0x28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	423000a0 	.word	0x423000a0
 8004dd0:	004005ff 	.word	0x004005ff

08004dd4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b092      	sub	sp, #72	; 0x48
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004de2:	f7fd fee9 	bl	8002bb8 <HAL_GetTick>
 8004de6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d107      	bne.n	8004e06 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e1bd      	b.n	8005182 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	f040 81b0 	bne.w	8005174 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	441a      	add	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d907      	bls.n	8004e38 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e1a4      	b.n	8005182 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2200      	movs	r2, #0
 8004e46:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d002      	beq.n	8004e56 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e52:	025b      	lsls	r3, r3, #9
 8004e54:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004e56:	f04f 33ff 	mov.w	r3, #4294967295
 8004e5a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	025b      	lsls	r3, r3, #9
 8004e60:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004e62:	2390      	movs	r3, #144	; 0x90
 8004e64:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004e66:	2302      	movs	r3, #2
 8004e68:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f107 0214 	add.w	r2, r7, #20
 8004e7a:	4611      	mov	r1, r2
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f001 ff46 	bl	8006d0e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d90a      	bls.n	8004e9e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e94:	4618      	mov	r0, r3
 8004e96:	f001 ffa9 	bl	8006dec <SDMMC_CmdReadMultiBlock>
 8004e9a:	6478      	str	r0, [r7, #68]	; 0x44
 8004e9c:	e009      	b.n	8004eb2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f001 ff7c 	bl	8006da8 <SDMMC_CmdReadSingleBlock>
 8004eb0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d012      	beq.n	8004ede <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a7a      	ldr	r2, [pc, #488]	; (80050a8 <HAL_SD_ReadBlocks+0x2d4>)
 8004ebe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e151      	b.n	8005182 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004ee2:	e061      	b.n	8004fa8 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d03c      	beq.n	8004f6c <HAL_SD_ReadBlocks+0x198>
 8004ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d039      	beq.n	8004f6c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004ef8:	2300      	movs	r3, #0
 8004efa:	643b      	str	r3, [r7, #64]	; 0x40
 8004efc:	e033      	b.n	8004f66 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f001 fe84 	bl	8006c10 <SDIO_ReadFIFO>
 8004f08:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f10:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f14:	3301      	adds	r3, #1
 8004f16:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f20:	0a1b      	lsrs	r3, r3, #8
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f26:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f30:	3b01      	subs	r3, #1
 8004f32:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f36:	0c1b      	lsrs	r3, r3, #16
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f3c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f40:	3301      	adds	r3, #1
 8004f42:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f46:	3b01      	subs	r3, #1
 8004f48:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4c:	0e1b      	lsrs	r3, r3, #24
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f52:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f56:	3301      	adds	r3, #1
 8004f58:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8004f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f62:	3301      	adds	r3, #1
 8004f64:	643b      	str	r3, [r7, #64]	; 0x40
 8004f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f68:	2b07      	cmp	r3, #7
 8004f6a:	d9c8      	bls.n	8004efe <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004f6c:	f7fd fe24 	bl	8002bb8 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d902      	bls.n	8004f82 <HAL_SD_ReadBlocks+0x1ae>
 8004f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d112      	bne.n	8004fa8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a48      	ldr	r2, [pc, #288]	; (80050a8 <HAL_SD_ReadBlocks+0x2d4>)
 8004f88:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e0ec      	b.n	8005182 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fae:	f240 332a 	movw	r3, #810	; 0x32a
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d095      	beq.n	8004ee4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d022      	beq.n	800500c <HAL_SD_ReadBlocks+0x238>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d91f      	bls.n	800500c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd0:	2b03      	cmp	r3, #3
 8004fd2:	d01b      	beq.n	800500c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f001 ff6d 	bl	8006eb8 <SDMMC_CmdStopTransfer>
 8004fde:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d012      	beq.n	800500c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a2f      	ldr	r2, [pc, #188]	; (80050a8 <HAL_SD_ReadBlocks+0x2d4>)
 8004fec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e0ba      	b.n	8005182 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b00      	cmp	r3, #0
 8005018:	d012      	beq.n	8005040 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a22      	ldr	r2, [pc, #136]	; (80050a8 <HAL_SD_ReadBlocks+0x2d4>)
 8005020:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	f043 0208 	orr.w	r2, r3, #8
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e0a0      	b.n	8005182 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d012      	beq.n	8005074 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a15      	ldr	r2, [pc, #84]	; (80050a8 <HAL_SD_ReadBlocks+0x2d4>)
 8005054:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505a:	f043 0202 	orr.w	r2, r3, #2
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e086      	b.n	8005182 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	d063      	beq.n	800514a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a08      	ldr	r2, [pc, #32]	; (80050a8 <HAL_SD_ReadBlocks+0x2d4>)
 8005088:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508e:	f043 0220 	orr.w	r2, r3, #32
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e06c      	b.n	8005182 <HAL_SD_ReadBlocks+0x3ae>
 80050a8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f001 fdad 	bl	8006c10 <SDIO_ReadFIFO>
 80050b6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80050b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050be:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80050c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c2:	3301      	adds	r3, #1
 80050c4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80050c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c8:	3b01      	subs	r3, #1
 80050ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80050cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ce:	0a1b      	lsrs	r3, r3, #8
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80050d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d8:	3301      	adds	r3, #1
 80050da:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80050dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050de:	3b01      	subs	r3, #1
 80050e0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80050e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e4:	0c1b      	lsrs	r3, r3, #16
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ea:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80050ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ee:	3301      	adds	r3, #1
 80050f0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80050f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f4:	3b01      	subs	r3, #1
 80050f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80050f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fa:	0e1b      	lsrs	r3, r3, #24
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005100:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005104:	3301      	adds	r3, #1
 8005106:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800510a:	3b01      	subs	r3, #1
 800510c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800510e:	f7fd fd53 	bl	8002bb8 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800511a:	429a      	cmp	r2, r3
 800511c:	d902      	bls.n	8005124 <HAL_SD_ReadBlocks+0x350>
 800511e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005120:	2b00      	cmp	r3, #0
 8005122:	d112      	bne.n	800514a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a18      	ldr	r2, [pc, #96]	; (800518c <HAL_SD_ReadBlocks+0x3b8>)
 800512a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e01b      	b.n	8005182 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <HAL_SD_ReadBlocks+0x38a>
 8005158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1a6      	bne.n	80050ac <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f240 523a 	movw	r2, #1338	; 0x53a
 8005166:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	e006      	b.n	8005182 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005178:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
  }
}
 8005182:	4618      	mov	r0, r3
 8005184:	3748      	adds	r7, #72	; 0x48
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	004005ff 	.word	0x004005ff

08005190 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b092      	sub	sp, #72	; 0x48
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800519e:	f7fd fd0b 	bl	8002bb8 <HAL_GetTick>
 80051a2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d107      	bne.n	80051c2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e166      	b.n	8005490 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	f040 8159 	bne.w	8005482 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80051d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	441a      	add	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d907      	bls.n	80051f4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e14d      	b.n	8005490 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2203      	movs	r2, #3
 80051f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2200      	movs	r2, #0
 8005202:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005208:	2b01      	cmp	r3, #1
 800520a:	d002      	beq.n	8005212 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800520c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520e:	025b      	lsls	r3, r3, #9
 8005210:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005212:	f04f 33ff 	mov.w	r3, #4294967295
 8005216:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	025b      	lsls	r3, r3, #9
 800521c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800521e:	2390      	movs	r3, #144	; 0x90
 8005220:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005222:	2300      	movs	r3, #0
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005226:	2300      	movs	r3, #0
 8005228:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800522a:	2301      	movs	r3, #1
 800522c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f107 0218 	add.w	r2, r7, #24
 8005236:	4611      	mov	r1, r2
 8005238:	4618      	mov	r0, r3
 800523a:	f001 fd68 	bl	8006d0e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d90a      	bls.n	800525a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2220      	movs	r2, #32
 8005248:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005250:	4618      	mov	r0, r3
 8005252:	f001 fe0f 	bl	8006e74 <SDMMC_CmdWriteMultiBlock>
 8005256:	6478      	str	r0, [r7, #68]	; 0x44
 8005258:	e009      	b.n	800526e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2210      	movs	r2, #16
 800525e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005266:	4618      	mov	r0, r3
 8005268:	f001 fde2 	bl	8006e30 <SDMMC_CmdWriteSingleBlock>
 800526c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800526e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005270:	2b00      	cmp	r3, #0
 8005272:	d012      	beq.n	800529a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a87      	ldr	r2, [pc, #540]	; (8005498 <HAL_SD_WriteBlocks+0x308>)
 800527a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005282:	431a      	orrs	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e0fa      	b.n	8005490 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800529e:	e065      	b.n	800536c <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d040      	beq.n	8005330 <HAL_SD_WriteBlocks+0x1a0>
 80052ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d03d      	beq.n	8005330 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80052b4:	2300      	movs	r3, #0
 80052b6:	643b      	str	r3, [r7, #64]	; 0x40
 80052b8:	e037      	b.n	800532a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80052ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80052c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c2:	3301      	adds	r3, #1
 80052c4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80052c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c8:	3b01      	subs	r3, #1
 80052ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80052cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	021a      	lsls	r2, r3, #8
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80052d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052da:	3301      	adds	r3, #1
 80052dc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80052de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e0:	3b01      	subs	r3, #1
 80052e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80052e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	041a      	lsls	r2, r3, #16
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80052f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f2:	3301      	adds	r3, #1
 80052f4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80052f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f8:	3b01      	subs	r3, #1
 80052fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80052fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	061a      	lsls	r2, r3, #24
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530a:	3301      	adds	r3, #1
 800530c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800530e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005310:	3b01      	subs	r3, #1
 8005312:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f107 0214 	add.w	r2, r7, #20
 800531c:	4611      	mov	r1, r2
 800531e:	4618      	mov	r0, r3
 8005320:	f001 fc82 	bl	8006c28 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005326:	3301      	adds	r3, #1
 8005328:	643b      	str	r3, [r7, #64]	; 0x40
 800532a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800532c:	2b07      	cmp	r3, #7
 800532e:	d9c4      	bls.n	80052ba <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005330:	f7fd fc42 	bl	8002bb8 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800533c:	429a      	cmp	r2, r3
 800533e:	d902      	bls.n	8005346 <HAL_SD_WriteBlocks+0x1b6>
 8005340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005342:	2b00      	cmp	r3, #0
 8005344:	d112      	bne.n	800536c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a53      	ldr	r2, [pc, #332]	; (8005498 <HAL_SD_WriteBlocks+0x308>)
 800534c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005354:	431a      	orrs	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e091      	b.n	8005490 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005372:	f240 331a 	movw	r3, #794	; 0x31a
 8005376:	4013      	ands	r3, r2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d091      	beq.n	80052a0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005386:	2b00      	cmp	r3, #0
 8005388:	d022      	beq.n	80053d0 <HAL_SD_WriteBlocks+0x240>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d91f      	bls.n	80053d0 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005394:	2b03      	cmp	r3, #3
 8005396:	d01b      	beq.n	80053d0 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4618      	mov	r0, r3
 800539e:	f001 fd8b 	bl	8006eb8 <SDMMC_CmdStopTransfer>
 80053a2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80053a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d012      	beq.n	80053d0 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a3a      	ldr	r2, [pc, #232]	; (8005498 <HAL_SD_WriteBlocks+0x308>)
 80053b0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b8:	431a      	orrs	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e05f      	b.n	8005490 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d012      	beq.n	8005404 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a2d      	ldr	r2, [pc, #180]	; (8005498 <HAL_SD_WriteBlocks+0x308>)
 80053e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	f043 0208 	orr.w	r2, r3, #8
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e045      	b.n	8005490 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d012      	beq.n	8005438 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a20      	ldr	r2, [pc, #128]	; (8005498 <HAL_SD_WriteBlocks+0x308>)
 8005418:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541e:	f043 0202 	orr.w	r2, r3, #2
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e02b      	b.n	8005490 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	2b00      	cmp	r3, #0
 8005444:	d012      	beq.n	800546c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a13      	ldr	r2, [pc, #76]	; (8005498 <HAL_SD_WriteBlocks+0x308>)
 800544c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005452:	f043 0210 	orr.w	r2, r3, #16
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e011      	b.n	8005490 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f240 523a 	movw	r2, #1338	; 0x53a
 8005474:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	e006      	b.n	8005490 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005486:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
  }
}
 8005490:	4618      	mov	r0, r3
 8005492:	3748      	adds	r7, #72	; 0x48
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	004005ff 	.word	0x004005ff

0800549c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054aa:	0f9b      	lsrs	r3, r3, #30
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054b6:	0e9b      	lsrs	r3, r3, #26
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054c8:	0e1b      	lsrs	r3, r3, #24
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054da:	0c1b      	lsrs	r3, r3, #16
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054e6:	0a1b      	lsrs	r3, r3, #8
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054fc:	0d1b      	lsrs	r3, r3, #20
 80054fe:	b29a      	uxth	r2, r3
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005508:	0c1b      	lsrs	r3, r3, #16
 800550a:	b2db      	uxtb	r3, r3
 800550c:	f003 030f 	and.w	r3, r3, #15
 8005510:	b2da      	uxtb	r2, r3
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800551a:	0bdb      	lsrs	r3, r3, #15
 800551c:	b2db      	uxtb	r3, r3
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	b2da      	uxtb	r2, r3
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800552c:	0b9b      	lsrs	r3, r3, #14
 800552e:	b2db      	uxtb	r3, r3
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	b2da      	uxtb	r2, r3
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800553e:	0b5b      	lsrs	r3, r3, #13
 8005540:	b2db      	uxtb	r3, r3
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	b2da      	uxtb	r2, r3
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005550:	0b1b      	lsrs	r3, r3, #12
 8005552:	b2db      	uxtb	r3, r3
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	b2da      	uxtb	r2, r3
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2200      	movs	r2, #0
 8005562:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005568:	2b00      	cmp	r3, #0
 800556a:	d163      	bne.n	8005634 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005570:	009a      	lsls	r2, r3, #2
 8005572:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005576:	4013      	ands	r3, r2
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800557c:	0f92      	lsrs	r2, r2, #30
 800557e:	431a      	orrs	r2, r3
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005588:	0edb      	lsrs	r3, r3, #27
 800558a:	b2db      	uxtb	r3, r3
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	b2da      	uxtb	r2, r3
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800559a:	0e1b      	lsrs	r3, r3, #24
 800559c:	b2db      	uxtb	r3, r3
 800559e:	f003 0307 	and.w	r3, r3, #7
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ac:	0d5b      	lsrs	r3, r3, #21
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055be:	0c9b      	lsrs	r3, r3, #18
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	f003 0307 	and.w	r3, r3, #7
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055d0:	0bdb      	lsrs	r3, r3, #15
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	7e1b      	ldrb	r3, [r3, #24]
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	3302      	adds	r3, #2
 80055f4:	2201      	movs	r2, #1
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80055fe:	fb03 f202 	mul.w	r2, r3, r2
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	7a1b      	ldrb	r3, [r3, #8]
 800560a:	b2db      	uxtb	r3, r3
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	2201      	movs	r2, #1
 8005612:	409a      	lsls	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005620:	0a52      	lsrs	r2, r2, #9
 8005622:	fb03 f202 	mul.w	r2, r3, r2
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005630:	661a      	str	r2, [r3, #96]	; 0x60
 8005632:	e031      	b.n	8005698 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005638:	2b01      	cmp	r3, #1
 800563a:	d11d      	bne.n	8005678 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005640:	041b      	lsls	r3, r3, #16
 8005642:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800564a:	0c1b      	lsrs	r3, r3, #16
 800564c:	431a      	orrs	r2, r3
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	3301      	adds	r3, #1
 8005658:	029a      	lsls	r2, r3, #10
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800566c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	661a      	str	r2, [r3, #96]	; 0x60
 8005676:	e00f      	b.n	8005698 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a58      	ldr	r2, [pc, #352]	; (80057e0 <HAL_SD_GetCardCSD+0x344>)
 800567e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005684:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e09d      	b.n	80057d4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800569c:	0b9b      	lsrs	r3, r3, #14
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ae:	09db      	lsrs	r3, r3, #7
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d0:	0fdb      	lsrs	r3, r3, #31
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056dc:	0f5b      	lsrs	r3, r3, #29
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	f003 0303 	and.w	r3, r3, #3
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ee:	0e9b      	lsrs	r3, r3, #26
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	f003 0307 	and.w	r3, r3, #7
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005700:	0d9b      	lsrs	r3, r3, #22
 8005702:	b2db      	uxtb	r3, r3
 8005704:	f003 030f 	and.w	r3, r3, #15
 8005708:	b2da      	uxtb	r2, r3
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005712:	0d5b      	lsrs	r3, r3, #21
 8005714:	b2db      	uxtb	r3, r3
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	b2da      	uxtb	r2, r3
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572e:	0c1b      	lsrs	r3, r3, #16
 8005730:	b2db      	uxtb	r3, r3
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	b2da      	uxtb	r2, r3
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005742:	0bdb      	lsrs	r3, r3, #15
 8005744:	b2db      	uxtb	r3, r3
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	b2da      	uxtb	r2, r3
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005756:	0b9b      	lsrs	r3, r3, #14
 8005758:	b2db      	uxtb	r3, r3
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	b2da      	uxtb	r2, r3
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576a:	0b5b      	lsrs	r3, r3, #13
 800576c:	b2db      	uxtb	r3, r3
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	b2da      	uxtb	r2, r3
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577e:	0b1b      	lsrs	r3, r3, #12
 8005780:	b2db      	uxtb	r3, r3
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	b2da      	uxtb	r2, r3
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005792:	0a9b      	lsrs	r3, r3, #10
 8005794:	b2db      	uxtb	r3, r3
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	b2da      	uxtb	r2, r3
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a6:	0a1b      	lsrs	r3, r3, #8
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ba:	085b      	lsrs	r3, r3, #1
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	bc80      	pop	{r7}
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	004005ff 	.word	0x004005ff

080057e4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	bc80      	pop	{r7}
 8005838:	4770      	bx	lr

0800583a <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b086      	sub	sp, #24
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005842:	2300      	movs	r3, #0
 8005844:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005846:	f107 030c 	add.w	r3, r7, #12
 800584a:	4619      	mov	r1, r3
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f971 	bl	8005b34 <SD_SendStatus>
 8005852:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d005      	beq.n	8005866 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	0a5b      	lsrs	r3, r3, #9
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005870:	693b      	ldr	r3, [r7, #16]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800587a:	b5b0      	push	{r4, r5, r7, lr}
 800587c:	b094      	sub	sp, #80	; 0x50
 800587e:	af04      	add	r7, sp, #16
 8005880:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005882:	2301      	movs	r3, #1
 8005884:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f001 f9eb 	bl	8006c66 <SDIO_GetPowerState>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d102      	bne.n	800589c <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005896:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800589a:	e0b8      	b.n	8005a0e <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a0:	2b03      	cmp	r3, #3
 80058a2:	d02f      	beq.n	8005904 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f001 fbcc 	bl	8007046 <SDMMC_CmdSendCID>
 80058ae:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80058b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <SD_InitCard+0x40>
    {
      return errorstate;
 80058b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b8:	e0a9      	b.n	8005a0e <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2100      	movs	r1, #0
 80058c0:	4618      	mov	r0, r3
 80058c2:	f001 fa12 	bl	8006cea <SDIO_GetResponse>
 80058c6:	4602      	mov	r2, r0
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2104      	movs	r1, #4
 80058d2:	4618      	mov	r0, r3
 80058d4:	f001 fa09 	bl	8006cea <SDIO_GetResponse>
 80058d8:	4602      	mov	r2, r0
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2108      	movs	r1, #8
 80058e4:	4618      	mov	r0, r3
 80058e6:	f001 fa00 	bl	8006cea <SDIO_GetResponse>
 80058ea:	4602      	mov	r2, r0
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	210c      	movs	r1, #12
 80058f6:	4618      	mov	r0, r3
 80058f8:	f001 f9f7 	bl	8006cea <SDIO_GetResponse>
 80058fc:	4602      	mov	r2, r0
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005908:	2b03      	cmp	r3, #3
 800590a:	d00d      	beq.n	8005928 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f107 020e 	add.w	r2, r7, #14
 8005914:	4611      	mov	r1, r2
 8005916:	4618      	mov	r0, r3
 8005918:	f001 fbd2 	bl	80070c0 <SDMMC_CmdSetRelAdd>
 800591c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800591e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <SD_InitCard+0xae>
    {
      return errorstate;
 8005924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005926:	e072      	b.n	8005a0e <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592c:	2b03      	cmp	r3, #3
 800592e:	d036      	beq.n	800599e <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005930:	89fb      	ldrh	r3, [r7, #14]
 8005932:	461a      	mov	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005940:	041b      	lsls	r3, r3, #16
 8005942:	4619      	mov	r1, r3
 8005944:	4610      	mov	r0, r2
 8005946:	f001 fb9c 	bl	8007082 <SDMMC_CmdSendCSD>
 800594a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800594c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005954:	e05b      	b.n	8005a0e <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2100      	movs	r1, #0
 800595c:	4618      	mov	r0, r3
 800595e:	f001 f9c4 	bl	8006cea <SDIO_GetResponse>
 8005962:	4602      	mov	r2, r0
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2104      	movs	r1, #4
 800596e:	4618      	mov	r0, r3
 8005970:	f001 f9bb 	bl	8006cea <SDIO_GetResponse>
 8005974:	4602      	mov	r2, r0
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2108      	movs	r1, #8
 8005980:	4618      	mov	r0, r3
 8005982:	f001 f9b2 	bl	8006cea <SDIO_GetResponse>
 8005986:	4602      	mov	r2, r0
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	210c      	movs	r1, #12
 8005992:	4618      	mov	r0, r3
 8005994:	f001 f9a9 	bl	8006cea <SDIO_GetResponse>
 8005998:	4602      	mov	r2, r0
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2104      	movs	r1, #4
 80059a4:	4618      	mov	r0, r3
 80059a6:	f001 f9a0 	bl	8006cea <SDIO_GetResponse>
 80059aa:	4603      	mov	r3, r0
 80059ac:	0d1a      	lsrs	r2, r3, #20
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80059b2:	f107 0310 	add.w	r3, r7, #16
 80059b6:	4619      	mov	r1, r3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7ff fd6f 	bl	800549c <HAL_SD_GetCardCSD>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80059c8:	e021      	b.n	8005a0e <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6819      	ldr	r1, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d2:	041b      	lsls	r3, r3, #16
 80059d4:	2200      	movs	r2, #0
 80059d6:	461c      	mov	r4, r3
 80059d8:	4615      	mov	r5, r2
 80059da:	4622      	mov	r2, r4
 80059dc:	462b      	mov	r3, r5
 80059de:	4608      	mov	r0, r1
 80059e0:	f001 fa8c 	bl	8006efc <SDMMC_CmdSelDesel>
 80059e4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80059e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <SD_InitCard+0x176>
  {
    return errorstate;
 80059ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ee:	e00e      	b.n	8005a0e <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681d      	ldr	r5, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	466c      	mov	r4, sp
 80059f8:	f103 0210 	add.w	r2, r3, #16
 80059fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80059fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a02:	3304      	adds	r3, #4
 8005a04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a06:	4628      	mov	r0, r5
 8005a08:	f001 f8d8 	bl	8006bbc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3740      	adds	r7, #64	; 0x40
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005a18 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	617b      	str	r3, [r7, #20]
 8005a28:	2300      	movs	r3, #0
 8005a2a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f001 fa86 	bl	8006f42 <SDMMC_CmdGoIdleState>
 8005a36:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	e072      	b.n	8005b28 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f001 fa99 	bl	8006f7e <SDMMC_CmdOperCond>
 8005a4c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00d      	beq.n	8005a70 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f001 fa6f 	bl	8006f42 <SDMMC_CmdGoIdleState>
 8005a64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d004      	beq.n	8005a76 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	e05b      	b.n	8005b28 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d137      	bne.n	8005aee <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2100      	movs	r1, #0
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 fa99 	bl	8006fbc <SDMMC_CmdAppCommand>
 8005a8a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d02d      	beq.n	8005aee <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a96:	e047      	b.n	8005b28 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f001 fa8c 	bl	8006fbc <SDMMC_CmdAppCommand>
 8005aa4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <SD_PowerON+0x98>
    {
      return errorstate;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	e03b      	b.n	8005b28 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	491e      	ldr	r1, [pc, #120]	; (8005b30 <SD_PowerON+0x118>)
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f001 faa2 	bl	8007000 <SDMMC_CmdAppOperCommand>
 8005abc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ac4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ac8:	e02e      	b.n	8005b28 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2100      	movs	r1, #0
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f001 f90a 	bl	8006cea <SDIO_GetResponse>
 8005ad6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	0fdb      	lsrs	r3, r3, #31
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <SD_PowerON+0xcc>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e000      	b.n	8005ae6 <SD_PowerON+0xce>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	613b      	str	r3, [r7, #16]

    count++;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	3301      	adds	r3, #1
 8005aec:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d802      	bhi.n	8005afe <SD_PowerON+0xe6>
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0cc      	beq.n	8005a98 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d902      	bls.n	8005b0e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005b08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b0c:	e00c      	b.n	8005b28 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	645a      	str	r2, [r3, #68]	; 0x44
 8005b1e:	e002      	b.n	8005b26 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	c1100000 	.word	0xc1100000

08005b34 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d102      	bne.n	8005b4a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005b44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b48:	e018      	b.n	8005b7c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b52:	041b      	lsls	r3, r3, #16
 8005b54:	4619      	mov	r1, r3
 8005b56:	4610      	mov	r0, r2
 8005b58:	f001 fad3 	bl	8007102 <SDMMC_CmdSendStatus>
 8005b5c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	e009      	b.n	8005b7c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f001 f8bb 	bl	8006cea <SDIO_GetResponse>
 8005b74:	4602      	mov	r2, r0
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e041      	b.n	8005c1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d106      	bne.n	8005bb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7fc fd7c 	bl	80026a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	f000 fb94 	bl	80062f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
	...

08005c24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d001      	beq.n	8005c3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e044      	b.n	8005cc6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0201 	orr.w	r2, r2, #1
 8005c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a1d      	ldr	r2, [pc, #116]	; (8005cd0 <HAL_TIM_Base_Start_IT+0xac>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d018      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0x6c>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a1c      	ldr	r2, [pc, #112]	; (8005cd4 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d013      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0x6c>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c70:	d00e      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0x6c>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a18      	ldr	r2, [pc, #96]	; (8005cd8 <HAL_TIM_Base_Start_IT+0xb4>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d009      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0x6c>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a16      	ldr	r2, [pc, #88]	; (8005cdc <HAL_TIM_Base_Start_IT+0xb8>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d004      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0x6c>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a15      	ldr	r2, [pc, #84]	; (8005ce0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d111      	bne.n	8005cb4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b06      	cmp	r3, #6
 8005ca0:	d010      	beq.n	8005cc4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f042 0201 	orr.w	r2, r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb2:	e007      	b.n	8005cc4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f042 0201 	orr.w	r2, r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bc80      	pop	{r7}
 8005cce:	4770      	bx	lr
 8005cd0:	40012c00 	.word	0x40012c00
 8005cd4:	40013400 	.word	0x40013400
 8005cd8:	40000400 	.word	0x40000400
 8005cdc:	40000800 	.word	0x40000800
 8005ce0:	40000c00 	.word	0x40000c00

08005ce4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e041      	b.n	8005d7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d106      	bne.n	8005d10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f839 	bl	8005d82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	4619      	mov	r1, r3
 8005d22:	4610      	mov	r0, r2
 8005d24:	f000 fae4 	bl	80062f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bc80      	pop	{r7}
 8005d92:	4770      	bx	lr

08005d94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d122      	bne.n	8005df0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d11b      	bne.n	8005df0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0202 	mvn.w	r2, #2
 8005dc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	f003 0303 	and.w	r3, r3, #3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fa6f 	bl	80062ba <HAL_TIM_IC_CaptureCallback>
 8005ddc:	e005      	b.n	8005dea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fa62 	bl	80062a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fa71 	bl	80062cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f003 0304 	and.w	r3, r3, #4
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d122      	bne.n	8005e44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d11b      	bne.n	8005e44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f06f 0204 	mvn.w	r2, #4
 8005e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fa45 	bl	80062ba <HAL_TIM_IC_CaptureCallback>
 8005e30:	e005      	b.n	8005e3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fa38 	bl	80062a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fa47 	bl	80062cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0308 	and.w	r3, r3, #8
 8005e4e:	2b08      	cmp	r3, #8
 8005e50:	d122      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0308 	and.w	r3, r3, #8
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d11b      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0208 	mvn.w	r2, #8
 8005e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fa1b 	bl	80062ba <HAL_TIM_IC_CaptureCallback>
 8005e84:	e005      	b.n	8005e92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fa0e 	bl	80062a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fa1d 	bl	80062cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f003 0310 	and.w	r3, r3, #16
 8005ea2:	2b10      	cmp	r3, #16
 8005ea4:	d122      	bne.n	8005eec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f003 0310 	and.w	r3, r3, #16
 8005eb0:	2b10      	cmp	r3, #16
 8005eb2:	d11b      	bne.n	8005eec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f06f 0210 	mvn.w	r2, #16
 8005ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2208      	movs	r2, #8
 8005ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f9f1 	bl	80062ba <HAL_TIM_IC_CaptureCallback>
 8005ed8:	e005      	b.n	8005ee6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f9e4 	bl	80062a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f9f3 	bl	80062cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d10e      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d107      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f06f 0201 	mvn.w	r2, #1
 8005f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fc fb10 	bl	8002538 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f22:	2b80      	cmp	r3, #128	; 0x80
 8005f24:	d10e      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f30:	2b80      	cmp	r3, #128	; 0x80
 8005f32:	d107      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fd58 	bl	80069f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4e:	2b40      	cmp	r3, #64	; 0x40
 8005f50:	d10e      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5c:	2b40      	cmp	r3, #64	; 0x40
 8005f5e:	d107      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f9b7 	bl	80062de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b20      	cmp	r3, #32
 8005f7c:	d10e      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	d107      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0220 	mvn.w	r2, #32
 8005f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fd23 	bl	80069e2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f9c:	bf00      	nop
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d101      	bne.n	8005fbe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	e0ac      	b.n	8006118 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b0c      	cmp	r3, #12
 8005fca:	f200 809f 	bhi.w	800610c <HAL_TIM_PWM_ConfigChannel+0x168>
 8005fce:	a201      	add	r2, pc, #4	; (adr r2, 8005fd4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd4:	08006009 	.word	0x08006009
 8005fd8:	0800610d 	.word	0x0800610d
 8005fdc:	0800610d 	.word	0x0800610d
 8005fe0:	0800610d 	.word	0x0800610d
 8005fe4:	08006049 	.word	0x08006049
 8005fe8:	0800610d 	.word	0x0800610d
 8005fec:	0800610d 	.word	0x0800610d
 8005ff0:	0800610d 	.word	0x0800610d
 8005ff4:	0800608b 	.word	0x0800608b
 8005ff8:	0800610d 	.word	0x0800610d
 8005ffc:	0800610d 	.word	0x0800610d
 8006000:	0800610d 	.word	0x0800610d
 8006004:	080060cb 	.word	0x080060cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	4618      	mov	r0, r3
 8006010:	f000 f9e8 	bl	80063e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699a      	ldr	r2, [r3, #24]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0208 	orr.w	r2, r2, #8
 8006022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	699a      	ldr	r2, [r3, #24]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0204 	bic.w	r2, r2, #4
 8006032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6999      	ldr	r1, [r3, #24]
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	691a      	ldr	r2, [r3, #16]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	430a      	orrs	r2, r1
 8006044:	619a      	str	r2, [r3, #24]
      break;
 8006046:	e062      	b.n	800610e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68b9      	ldr	r1, [r7, #8]
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fa38 	bl	80064c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699a      	ldr	r2, [r3, #24]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699a      	ldr	r2, [r3, #24]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6999      	ldr	r1, [r3, #24]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	021a      	lsls	r2, r3, #8
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	619a      	str	r2, [r3, #24]
      break;
 8006088:	e041      	b.n	800610e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68b9      	ldr	r1, [r7, #8]
 8006090:	4618      	mov	r0, r3
 8006092:	f000 fa8b 	bl	80065ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69da      	ldr	r2, [r3, #28]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f042 0208 	orr.w	r2, r2, #8
 80060a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69da      	ldr	r2, [r3, #28]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0204 	bic.w	r2, r2, #4
 80060b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69d9      	ldr	r1, [r3, #28]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	691a      	ldr	r2, [r3, #16]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	61da      	str	r2, [r3, #28]
      break;
 80060c8:	e021      	b.n	800610e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68b9      	ldr	r1, [r7, #8]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 fadf 	bl	8006694 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69da      	ldr	r2, [r3, #28]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	69da      	ldr	r2, [r3, #28]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	69d9      	ldr	r1, [r3, #28]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	021a      	lsls	r2, r3, #8
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	61da      	str	r2, [r3, #28]
      break;
 800610a:	e000      	b.n	800610e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800610c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006130:	2b01      	cmp	r3, #1
 8006132:	d101      	bne.n	8006138 <HAL_TIM_ConfigClockSource+0x18>
 8006134:	2302      	movs	r3, #2
 8006136:	e0b3      	b.n	80062a0 <HAL_TIM_ConfigClockSource+0x180>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006156:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800615e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006170:	d03e      	beq.n	80061f0 <HAL_TIM_ConfigClockSource+0xd0>
 8006172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006176:	f200 8087 	bhi.w	8006288 <HAL_TIM_ConfigClockSource+0x168>
 800617a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800617e:	f000 8085 	beq.w	800628c <HAL_TIM_ConfigClockSource+0x16c>
 8006182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006186:	d87f      	bhi.n	8006288 <HAL_TIM_ConfigClockSource+0x168>
 8006188:	2b70      	cmp	r3, #112	; 0x70
 800618a:	d01a      	beq.n	80061c2 <HAL_TIM_ConfigClockSource+0xa2>
 800618c:	2b70      	cmp	r3, #112	; 0x70
 800618e:	d87b      	bhi.n	8006288 <HAL_TIM_ConfigClockSource+0x168>
 8006190:	2b60      	cmp	r3, #96	; 0x60
 8006192:	d050      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0x116>
 8006194:	2b60      	cmp	r3, #96	; 0x60
 8006196:	d877      	bhi.n	8006288 <HAL_TIM_ConfigClockSource+0x168>
 8006198:	2b50      	cmp	r3, #80	; 0x50
 800619a:	d03c      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0xf6>
 800619c:	2b50      	cmp	r3, #80	; 0x50
 800619e:	d873      	bhi.n	8006288 <HAL_TIM_ConfigClockSource+0x168>
 80061a0:	2b40      	cmp	r3, #64	; 0x40
 80061a2:	d058      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x136>
 80061a4:	2b40      	cmp	r3, #64	; 0x40
 80061a6:	d86f      	bhi.n	8006288 <HAL_TIM_ConfigClockSource+0x168>
 80061a8:	2b30      	cmp	r3, #48	; 0x30
 80061aa:	d064      	beq.n	8006276 <HAL_TIM_ConfigClockSource+0x156>
 80061ac:	2b30      	cmp	r3, #48	; 0x30
 80061ae:	d86b      	bhi.n	8006288 <HAL_TIM_ConfigClockSource+0x168>
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	d060      	beq.n	8006276 <HAL_TIM_ConfigClockSource+0x156>
 80061b4:	2b20      	cmp	r3, #32
 80061b6:	d867      	bhi.n	8006288 <HAL_TIM_ConfigClockSource+0x168>
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d05c      	beq.n	8006276 <HAL_TIM_ConfigClockSource+0x156>
 80061bc:	2b10      	cmp	r3, #16
 80061be:	d05a      	beq.n	8006276 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80061c0:	e062      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6818      	ldr	r0, [r3, #0]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	6899      	ldr	r1, [r3, #8]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f000 fb2a 	bl	800682a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	609a      	str	r2, [r3, #8]
      break;
 80061ee:	e04e      	b.n	800628e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	6899      	ldr	r1, [r3, #8]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f000 fb13 	bl	800682a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006212:	609a      	str	r2, [r3, #8]
      break;
 8006214:	e03b      	b.n	800628e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	6859      	ldr	r1, [r3, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	461a      	mov	r2, r3
 8006224:	f000 fa8a 	bl	800673c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2150      	movs	r1, #80	; 0x50
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fae1 	bl	80067f6 <TIM_ITRx_SetConfig>
      break;
 8006234:	e02b      	b.n	800628e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6818      	ldr	r0, [r3, #0]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	6859      	ldr	r1, [r3, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	461a      	mov	r2, r3
 8006244:	f000 faa8 	bl	8006798 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2160      	movs	r1, #96	; 0x60
 800624e:	4618      	mov	r0, r3
 8006250:	f000 fad1 	bl	80067f6 <TIM_ITRx_SetConfig>
      break;
 8006254:	e01b      	b.n	800628e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6818      	ldr	r0, [r3, #0]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	6859      	ldr	r1, [r3, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	461a      	mov	r2, r3
 8006264:	f000 fa6a 	bl	800673c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2140      	movs	r1, #64	; 0x40
 800626e:	4618      	mov	r0, r3
 8006270:	f000 fac1 	bl	80067f6 <TIM_ITRx_SetConfig>
      break;
 8006274:	e00b      	b.n	800628e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4619      	mov	r1, r3
 8006280:	4610      	mov	r0, r2
 8006282:	f000 fab8 	bl	80067f6 <TIM_ITRx_SetConfig>
        break;
 8006286:	e002      	b.n	800628e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006288:	bf00      	nop
 800628a:	e000      	b.n	800628e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800628c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bc80      	pop	{r7}
 80062b8:	4770      	bx	lr

080062ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062c2:	bf00      	nop
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bc80      	pop	{r7}
 80062ca:	4770      	bx	lr

080062cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	bc80      	pop	{r7}
 80062dc:	4770      	bx	lr

080062de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062e6:	bf00      	nop
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bc80      	pop	{r7}
 80062ee:	4770      	bx	lr

080062f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a33      	ldr	r2, [pc, #204]	; (80063d0 <TIM_Base_SetConfig+0xe0>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d013      	beq.n	8006330 <TIM_Base_SetConfig+0x40>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a32      	ldr	r2, [pc, #200]	; (80063d4 <TIM_Base_SetConfig+0xe4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d00f      	beq.n	8006330 <TIM_Base_SetConfig+0x40>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006316:	d00b      	beq.n	8006330 <TIM_Base_SetConfig+0x40>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a2f      	ldr	r2, [pc, #188]	; (80063d8 <TIM_Base_SetConfig+0xe8>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d007      	beq.n	8006330 <TIM_Base_SetConfig+0x40>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a2e      	ldr	r2, [pc, #184]	; (80063dc <TIM_Base_SetConfig+0xec>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d003      	beq.n	8006330 <TIM_Base_SetConfig+0x40>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a2d      	ldr	r2, [pc, #180]	; (80063e0 <TIM_Base_SetConfig+0xf0>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d108      	bne.n	8006342 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a22      	ldr	r2, [pc, #136]	; (80063d0 <TIM_Base_SetConfig+0xe0>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d013      	beq.n	8006372 <TIM_Base_SetConfig+0x82>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a21      	ldr	r2, [pc, #132]	; (80063d4 <TIM_Base_SetConfig+0xe4>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d00f      	beq.n	8006372 <TIM_Base_SetConfig+0x82>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006358:	d00b      	beq.n	8006372 <TIM_Base_SetConfig+0x82>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a1e      	ldr	r2, [pc, #120]	; (80063d8 <TIM_Base_SetConfig+0xe8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d007      	beq.n	8006372 <TIM_Base_SetConfig+0x82>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a1d      	ldr	r2, [pc, #116]	; (80063dc <TIM_Base_SetConfig+0xec>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d003      	beq.n	8006372 <TIM_Base_SetConfig+0x82>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a1c      	ldr	r2, [pc, #112]	; (80063e0 <TIM_Base_SetConfig+0xf0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d108      	bne.n	8006384 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	4313      	orrs	r3, r2
 8006382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	4313      	orrs	r3, r2
 8006390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a09      	ldr	r2, [pc, #36]	; (80063d0 <TIM_Base_SetConfig+0xe0>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d003      	beq.n	80063b8 <TIM_Base_SetConfig+0xc8>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a08      	ldr	r2, [pc, #32]	; (80063d4 <TIM_Base_SetConfig+0xe4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d103      	bne.n	80063c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	691a      	ldr	r2, [r3, #16]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	615a      	str	r2, [r3, #20]
}
 80063c6:	bf00      	nop
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bc80      	pop	{r7}
 80063ce:	4770      	bx	lr
 80063d0:	40012c00 	.word	0x40012c00
 80063d4:	40013400 	.word	0x40013400
 80063d8:	40000400 	.word	0x40000400
 80063dc:	40000800 	.word	0x40000800
 80063e0:	40000c00 	.word	0x40000c00

080063e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b087      	sub	sp, #28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	f023 0201 	bic.w	r2, r3, #1
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f023 0303 	bic.w	r3, r3, #3
 800641a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f023 0302 	bic.w	r3, r3, #2
 800642c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	4313      	orrs	r3, r2
 8006436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a20      	ldr	r2, [pc, #128]	; (80064bc <TIM_OC1_SetConfig+0xd8>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d003      	beq.n	8006448 <TIM_OC1_SetConfig+0x64>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a1f      	ldr	r2, [pc, #124]	; (80064c0 <TIM_OC1_SetConfig+0xdc>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d10c      	bne.n	8006462 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f023 0308 	bic.w	r3, r3, #8
 800644e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	4313      	orrs	r3, r2
 8006458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f023 0304 	bic.w	r3, r3, #4
 8006460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a15      	ldr	r2, [pc, #84]	; (80064bc <TIM_OC1_SetConfig+0xd8>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d003      	beq.n	8006472 <TIM_OC1_SetConfig+0x8e>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a14      	ldr	r2, [pc, #80]	; (80064c0 <TIM_OC1_SetConfig+0xdc>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d111      	bne.n	8006496 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	4313      	orrs	r3, r2
 800648a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	4313      	orrs	r3, r2
 8006494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	621a      	str	r2, [r3, #32]
}
 80064b0:	bf00      	nop
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bc80      	pop	{r7}
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40012c00 	.word	0x40012c00
 80064c0:	40013400 	.word	0x40013400

080064c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	f023 0210 	bic.w	r2, r3, #16
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	021b      	lsls	r3, r3, #8
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4313      	orrs	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f023 0320 	bic.w	r3, r3, #32
 800650e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	011b      	lsls	r3, r3, #4
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	4313      	orrs	r3, r2
 800651a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a21      	ldr	r2, [pc, #132]	; (80065a4 <TIM_OC2_SetConfig+0xe0>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d003      	beq.n	800652c <TIM_OC2_SetConfig+0x68>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a20      	ldr	r2, [pc, #128]	; (80065a8 <TIM_OC2_SetConfig+0xe4>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d10d      	bne.n	8006548 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	011b      	lsls	r3, r3, #4
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	4313      	orrs	r3, r2
 800653e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006546:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a16      	ldr	r2, [pc, #88]	; (80065a4 <TIM_OC2_SetConfig+0xe0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d003      	beq.n	8006558 <TIM_OC2_SetConfig+0x94>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a15      	ldr	r2, [pc, #84]	; (80065a8 <TIM_OC2_SetConfig+0xe4>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d113      	bne.n	8006580 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800655e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006566:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	4313      	orrs	r3, r2
 8006572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	4313      	orrs	r3, r2
 800657e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	621a      	str	r2, [r3, #32]
}
 800659a:	bf00      	nop
 800659c:	371c      	adds	r7, #28
 800659e:	46bd      	mov	sp, r7
 80065a0:	bc80      	pop	{r7}
 80065a2:	4770      	bx	lr
 80065a4:	40012c00 	.word	0x40012c00
 80065a8:	40013400 	.word	0x40013400

080065ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f023 0303 	bic.w	r3, r3, #3
 80065e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	021b      	lsls	r3, r3, #8
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	4313      	orrs	r3, r2
 8006600:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a21      	ldr	r2, [pc, #132]	; (800668c <TIM_OC3_SetConfig+0xe0>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d003      	beq.n	8006612 <TIM_OC3_SetConfig+0x66>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a20      	ldr	r2, [pc, #128]	; (8006690 <TIM_OC3_SetConfig+0xe4>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d10d      	bne.n	800662e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	021b      	lsls	r3, r3, #8
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	4313      	orrs	r3, r2
 8006624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800662c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a16      	ldr	r2, [pc, #88]	; (800668c <TIM_OC3_SetConfig+0xe0>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d003      	beq.n	800663e <TIM_OC3_SetConfig+0x92>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a15      	ldr	r2, [pc, #84]	; (8006690 <TIM_OC3_SetConfig+0xe4>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d113      	bne.n	8006666 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800664c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	011b      	lsls	r3, r3, #4
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	011b      	lsls	r3, r3, #4
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	4313      	orrs	r3, r2
 8006664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	621a      	str	r2, [r3, #32]
}
 8006680:	bf00      	nop
 8006682:	371c      	adds	r7, #28
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	40012c00 	.word	0x40012c00
 8006690:	40013400 	.word	0x40013400

08006694 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	021b      	lsls	r3, r3, #8
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	031b      	lsls	r3, r3, #12
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a11      	ldr	r2, [pc, #68]	; (8006734 <TIM_OC4_SetConfig+0xa0>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d003      	beq.n	80066fc <TIM_OC4_SetConfig+0x68>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a10      	ldr	r2, [pc, #64]	; (8006738 <TIM_OC4_SetConfig+0xa4>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d109      	bne.n	8006710 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006702:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	019b      	lsls	r3, r3, #6
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	4313      	orrs	r3, r2
 800670e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	621a      	str	r2, [r3, #32]
}
 800672a:	bf00      	nop
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	bc80      	pop	{r7}
 8006732:	4770      	bx	lr
 8006734:	40012c00 	.word	0x40012c00
 8006738:	40013400 	.word	0x40013400

0800673c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800673c:	b480      	push	{r7}
 800673e:	b087      	sub	sp, #28
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	f023 0201 	bic.w	r2, r3, #1
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	4313      	orrs	r3, r2
 8006770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f023 030a 	bic.w	r3, r3, #10
 8006778:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	621a      	str	r2, [r3, #32]
}
 800678e:	bf00      	nop
 8006790:	371c      	adds	r7, #28
 8006792:	46bd      	mov	sp, r7
 8006794:	bc80      	pop	{r7}
 8006796:	4770      	bx	lr

08006798 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	f023 0210 	bic.w	r2, r3, #16
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	031b      	lsls	r3, r3, #12
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	4313      	orrs	r3, r2
 80067de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	621a      	str	r2, [r3, #32]
}
 80067ec:	bf00      	nop
 80067ee:	371c      	adds	r7, #28
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bc80      	pop	{r7}
 80067f4:	4770      	bx	lr

080067f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b085      	sub	sp, #20
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	f043 0307 	orr.w	r3, r3, #7
 8006818:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	609a      	str	r2, [r3, #8]
}
 8006820:	bf00      	nop
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	bc80      	pop	{r7}
 8006828:	4770      	bx	lr

0800682a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800682a:	b480      	push	{r7}
 800682c:	b087      	sub	sp, #28
 800682e:	af00      	add	r7, sp, #0
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	607a      	str	r2, [r7, #4]
 8006836:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006844:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	021a      	lsls	r2, r3, #8
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	431a      	orrs	r2, r3
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	4313      	orrs	r3, r2
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	4313      	orrs	r3, r2
 8006856:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	609a      	str	r2, [r3, #8]
}
 800685e:	bf00      	nop
 8006860:	371c      	adds	r7, #28
 8006862:	46bd      	mov	sp, r7
 8006864:	bc80      	pop	{r7}
 8006866:	4770      	bx	lr

08006868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800687c:	2302      	movs	r3, #2
 800687e:	e050      	b.n	8006922 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a1b      	ldr	r2, [pc, #108]	; (800692c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d018      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a19      	ldr	r2, [pc, #100]	; (8006930 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d013      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d6:	d00e      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a15      	ldr	r2, [pc, #84]	; (8006934 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d009      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a14      	ldr	r2, [pc, #80]	; (8006938 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d004      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a12      	ldr	r2, [pc, #72]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d10c      	bne.n	8006910 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	4313      	orrs	r3, r2
 8006906:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	bc80      	pop	{r7}
 800692a:	4770      	bx	lr
 800692c:	40012c00 	.word	0x40012c00
 8006930:	40013400 	.word	0x40013400
 8006934:	40000400 	.word	0x40000400
 8006938:	40000800 	.word	0x40000800
 800693c:	40000c00 	.word	0x40000c00

08006940 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800694a:	2300      	movs	r3, #0
 800694c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006954:	2b01      	cmp	r3, #1
 8006956:	d101      	bne.n	800695c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006958:	2302      	movs	r3, #2
 800695a:	e03d      	b.n	80069d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	4313      	orrs	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4313      	orrs	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	bc80      	pop	{r7}
 80069e0:	4770      	bx	lr

080069e2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069ea:	bf00      	nop
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bc80      	pop	{r7}
 80069f2:	4770      	bx	lr

080069f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bc80      	pop	{r7}
 8006a04:	4770      	bx	lr

08006a06 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b082      	sub	sp, #8
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e03f      	b.n	8006a98 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d106      	bne.n	8006a32 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7fb fea1 	bl	8002774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2224      	movs	r2, #36	; 0x24
 8006a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68da      	ldr	r2, [r3, #12]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a48:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f828 	bl	8006aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	691a      	ldr	r2, [r3, #16]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a5e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695a      	ldr	r2, [r3, #20]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a6e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68da      	ldr	r2, [r3, #12]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a7e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	689a      	ldr	r2, [r3, #8]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006ada:	f023 030c 	bic.w	r3, r3, #12
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	6812      	ldr	r2, [r2, #0]
 8006ae2:	68b9      	ldr	r1, [r7, #8]
 8006ae4:	430b      	orrs	r3, r1
 8006ae6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	699a      	ldr	r2, [r3, #24]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a2c      	ldr	r2, [pc, #176]	; (8006bb4 <UART_SetConfig+0x114>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d103      	bne.n	8006b10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006b08:	f7fd f908 	bl	8003d1c <HAL_RCC_GetPCLK2Freq>
 8006b0c:	60f8      	str	r0, [r7, #12]
 8006b0e:	e002      	b.n	8006b16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006b10:	f7fd f8f0 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 8006b14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	009a      	lsls	r2, r3, #2
 8006b20:	441a      	add	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b2c:	4a22      	ldr	r2, [pc, #136]	; (8006bb8 <UART_SetConfig+0x118>)
 8006b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b32:	095b      	lsrs	r3, r3, #5
 8006b34:	0119      	lsls	r1, r3, #4
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	009a      	lsls	r2, r3, #2
 8006b40:	441a      	add	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b4c:	4b1a      	ldr	r3, [pc, #104]	; (8006bb8 <UART_SetConfig+0x118>)
 8006b4e:	fba3 0302 	umull	r0, r3, r3, r2
 8006b52:	095b      	lsrs	r3, r3, #5
 8006b54:	2064      	movs	r0, #100	; 0x64
 8006b56:	fb00 f303 	mul.w	r3, r0, r3
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	011b      	lsls	r3, r3, #4
 8006b5e:	3332      	adds	r3, #50	; 0x32
 8006b60:	4a15      	ldr	r2, [pc, #84]	; (8006bb8 <UART_SetConfig+0x118>)
 8006b62:	fba2 2303 	umull	r2, r3, r2, r3
 8006b66:	095b      	lsrs	r3, r3, #5
 8006b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b6c:	4419      	add	r1, r3
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	4613      	mov	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	009a      	lsls	r2, r3, #2
 8006b78:	441a      	add	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b84:	4b0c      	ldr	r3, [pc, #48]	; (8006bb8 <UART_SetConfig+0x118>)
 8006b86:	fba3 0302 	umull	r0, r3, r3, r2
 8006b8a:	095b      	lsrs	r3, r3, #5
 8006b8c:	2064      	movs	r0, #100	; 0x64
 8006b8e:	fb00 f303 	mul.w	r3, r0, r3
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	011b      	lsls	r3, r3, #4
 8006b96:	3332      	adds	r3, #50	; 0x32
 8006b98:	4a07      	ldr	r2, [pc, #28]	; (8006bb8 <UART_SetConfig+0x118>)
 8006b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b9e:	095b      	lsrs	r3, r3, #5
 8006ba0:	f003 020f 	and.w	r2, r3, #15
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	440a      	add	r2, r1
 8006baa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006bac:	bf00      	nop
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	40013800 	.word	0x40013800
 8006bb8:	51eb851f 	.word	0x51eb851f

08006bbc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	b480      	push	{r7}
 8006bc0:	b085      	sub	sp, #20
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	f107 001c 	add.w	r0, r7, #28
 8006bca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006bd2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006bd4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006bd6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006bda:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006bde:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006be2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006be6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006bf6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bc80      	pop	{r7}
 8006c0c:	b004      	add	sp, #16
 8006c0e:	4770      	bx	lr

08006c10 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bc80      	pop	{r7}
 8006c26:	4770      	bx	lr

08006c28 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bc80      	pop	{r7}
 8006c46:	4770      	bx	lr

08006c48 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2203      	movs	r2, #3
 8006c54:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006c56:	2002      	movs	r0, #2
 8006c58:	f7fb ffb8 	bl	8002bcc <HAL_Delay>
  
  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006c66:	b480      	push	{r7}
 8006c68:	b083      	sub	sp, #12
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0303 	and.w	r3, r3, #3
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bc80      	pop	{r7}
 8006c7e:	4770      	bx	lr

08006c80 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006c9e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006ca4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006caa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006cba:	f023 030f 	bic.w	r3, r3, #15
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bc80      	pop	{r7}
 8006cd0:	4770      	bx	lr

08006cd2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b083      	sub	sp, #12
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	b2db      	uxtb	r3, r3
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bc80      	pop	{r7}
 8006ce8:	4770      	bx	lr

08006cea <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b085      	sub	sp, #20
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	3314      	adds	r3, #20
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
}  
 8006d04:	4618      	mov	r0, r3
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bc80      	pop	{r7}
 8006d0c:	4770      	bx	lr

08006d0e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b085      	sub	sp, #20
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d34:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006d3a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006d40:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0

}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bc80      	pop	{r7}
 8006d62:	4770      	bx	lr

08006d64 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006d72:	2310      	movs	r3, #16
 8006d74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d76:	2340      	movs	r3, #64	; 0x40
 8006d78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d84:	f107 0308 	add.w	r3, r7, #8
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7ff ff78 	bl	8006c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d94:	2110      	movs	r1, #16
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fa00 	bl	800719c <SDMMC_GetCmdResp1>
 8006d9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d9e:	69fb      	ldr	r3, [r7, #28]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3720      	adds	r7, #32
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b088      	sub	sp, #32
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006db6:	2311      	movs	r3, #17
 8006db8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006dba:	2340      	movs	r3, #64	; 0x40
 8006dbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dc6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006dc8:	f107 0308 	add.w	r3, r7, #8
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7ff ff56 	bl	8006c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd8:	2111      	movs	r1, #17
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f9de 	bl	800719c <SDMMC_GetCmdResp1>
 8006de0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006de2:	69fb      	ldr	r3, [r7, #28]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3720      	adds	r7, #32
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b088      	sub	sp, #32
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006dfa:	2312      	movs	r3, #18
 8006dfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006dfe:	2340      	movs	r3, #64	; 0x40
 8006e00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e02:	2300      	movs	r3, #0
 8006e04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e0c:	f107 0308 	add.w	r3, r7, #8
 8006e10:	4619      	mov	r1, r3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7ff ff34 	bl	8006c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e1c:	2112      	movs	r1, #18
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f9bc 	bl	800719c <SDMMC_GetCmdResp1>
 8006e24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e26:	69fb      	ldr	r3, [r7, #28]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3720      	adds	r7, #32
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b088      	sub	sp, #32
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006e3e:	2318      	movs	r3, #24
 8006e40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e42:	2340      	movs	r3, #64	; 0x40
 8006e44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e46:	2300      	movs	r3, #0
 8006e48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e50:	f107 0308 	add.w	r3, r7, #8
 8006e54:	4619      	mov	r1, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7ff ff12 	bl	8006c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e60:	2118      	movs	r1, #24
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f99a 	bl	800719c <SDMMC_GetCmdResp1>
 8006e68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e6a:	69fb      	ldr	r3, [r7, #28]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3720      	adds	r7, #32
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b088      	sub	sp, #32
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006e82:	2319      	movs	r3, #25
 8006e84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e86:	2340      	movs	r3, #64	; 0x40
 8006e88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e94:	f107 0308 	add.w	r3, r7, #8
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff fef0 	bl	8006c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ea4:	2119      	movs	r1, #25
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f978 	bl	800719c <SDMMC_GetCmdResp1>
 8006eac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006eae:	69fb      	ldr	r3, [r7, #28]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3720      	adds	r7, #32
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b088      	sub	sp, #32
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006ec4:	230c      	movs	r3, #12
 8006ec6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ec8:	2340      	movs	r3, #64	; 0x40
 8006eca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ed4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ed6:	f107 0308 	add.w	r3, r7, #8
 8006eda:	4619      	mov	r1, r3
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7ff fecf 	bl	8006c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006ee2:	4a05      	ldr	r2, [pc, #20]	; (8006ef8 <SDMMC_CmdStopTransfer+0x40>)
 8006ee4:	210c      	movs	r1, #12
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f958 	bl	800719c <SDMMC_GetCmdResp1>
 8006eec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006eee:	69fb      	ldr	r3, [r7, #28]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3720      	adds	r7, #32
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	05f5e100 	.word	0x05f5e100

08006efc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b08a      	sub	sp, #40	; 0x28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006f0c:	2307      	movs	r3, #7
 8006f0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f10:	2340      	movs	r3, #64	; 0x40
 8006f12:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f14:	2300      	movs	r3, #0
 8006f16:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f1c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f1e:	f107 0310 	add.w	r3, r7, #16
 8006f22:	4619      	mov	r1, r3
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f7ff feab 	bl	8006c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f2e:	2107      	movs	r1, #7
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 f933 	bl	800719c <SDMMC_GetCmdResp1>
 8006f36:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3728      	adds	r7, #40	; 0x28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b088      	sub	sp, #32
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006f52:	2300      	movs	r3, #0
 8006f54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f56:	2300      	movs	r3, #0
 8006f58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f60:	f107 0308 	add.w	r3, r7, #8
 8006f64:	4619      	mov	r1, r3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7ff fe8a 	bl	8006c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f8eb 	bl	8007148 <SDMMC_GetCmdError>
 8006f72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f74:	69fb      	ldr	r3, [r7, #28]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3720      	adds	r7, #32
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b088      	sub	sp, #32
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006f86:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006f8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006f8c:	2308      	movs	r3, #8
 8006f8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f90:	2340      	movs	r3, #64	; 0x40
 8006f92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f94:	2300      	movs	r3, #0
 8006f96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f9e:	f107 0308 	add.w	r3, r7, #8
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7ff fe6b 	bl	8006c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fade 	bl	800756c <SDMMC_GetCmdResp7>
 8006fb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fb2:	69fb      	ldr	r3, [r7, #28]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3720      	adds	r7, #32
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006fca:	2337      	movs	r3, #55	; 0x37
 8006fcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006fce:	2340      	movs	r3, #64	; 0x40
 8006fd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006fdc:	f107 0308 	add.w	r3, r7, #8
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7ff fe4c 	bl	8006c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fec:	2137      	movs	r1, #55	; 0x37
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f8d4 	bl	800719c <SDMMC_GetCmdResp1>
 8006ff4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ff6:	69fb      	ldr	r3, [r7, #28]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3720      	adds	r7, #32
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b088      	sub	sp, #32
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007010:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007014:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007016:	2329      	movs	r3, #41	; 0x29
 8007018:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800701a:	2340      	movs	r3, #64	; 0x40
 800701c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800701e:	2300      	movs	r3, #0
 8007020:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007026:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007028:	f107 0308 	add.w	r3, r7, #8
 800702c:	4619      	mov	r1, r3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7ff fe26 	bl	8006c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f9e7 	bl	8007408 <SDMMC_GetCmdResp3>
 800703a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800703c:	69fb      	ldr	r3, [r7, #28]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3720      	adds	r7, #32
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b088      	sub	sp, #32
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007052:	2302      	movs	r3, #2
 8007054:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007056:	23c0      	movs	r3, #192	; 0xc0
 8007058:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800705a:	2300      	movs	r3, #0
 800705c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800705e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007062:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007064:	f107 0308 	add.w	r3, r7, #8
 8007068:	4619      	mov	r1, r3
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7ff fe08 	bl	8006c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 f981 	bl	8007378 <SDMMC_GetCmdResp2>
 8007076:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007078:	69fb      	ldr	r3, [r7, #28]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3720      	adds	r7, #32
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b088      	sub	sp, #32
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007090:	2309      	movs	r3, #9
 8007092:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007094:	23c0      	movs	r3, #192	; 0xc0
 8007096:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007098:	2300      	movs	r3, #0
 800709a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800709c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070a2:	f107 0308 	add.w	r3, r7, #8
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff fde9 	bl	8006c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f962 	bl	8007378 <SDMMC_GetCmdResp2>
 80070b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070b6:	69fb      	ldr	r3, [r7, #28]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3720      	adds	r7, #32
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80070ca:	2300      	movs	r3, #0
 80070cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80070ce:	2303      	movs	r3, #3
 80070d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80070d2:	2340      	movs	r3, #64	; 0x40
 80070d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070d6:	2300      	movs	r3, #0
 80070d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070e0:	f107 0308 	add.w	r3, r7, #8
 80070e4:	4619      	mov	r1, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7ff fdca 	bl	8006c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	2103      	movs	r1, #3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f9c5 	bl	8007480 <SDMMC_GetCmdResp6>
 80070f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070f8:	69fb      	ldr	r3, [r7, #28]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3720      	adds	r7, #32
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b088      	sub	sp, #32
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007110:	230d      	movs	r3, #13
 8007112:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007114:	2340      	movs	r3, #64	; 0x40
 8007116:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007118:	2300      	movs	r3, #0
 800711a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800711c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007120:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007122:	f107 0308 	add.w	r3, r7, #8
 8007126:	4619      	mov	r1, r3
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7ff fda9 	bl	8006c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800712e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007132:	210d      	movs	r1, #13
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f831 	bl	800719c <SDMMC_GetCmdResp1>
 800713a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800713c:	69fb      	ldr	r3, [r7, #28]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3720      	adds	r7, #32
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
	...

08007148 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007150:	4b10      	ldr	r3, [pc, #64]	; (8007194 <SDMMC_GetCmdError+0x4c>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a10      	ldr	r2, [pc, #64]	; (8007198 <SDMMC_GetCmdError+0x50>)
 8007156:	fba2 2303 	umull	r2, r3, r2, r3
 800715a:	0a5b      	lsrs	r3, r3, #9
 800715c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007160:	fb02 f303 	mul.w	r3, r2, r3
 8007164:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	1e5a      	subs	r2, r3, #1
 800716a:	60fa      	str	r2, [r7, #12]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d102      	bne.n	8007176 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007170:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007174:	e009      	b.n	800718a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717e:	2b00      	cmp	r3, #0
 8007180:	d0f1      	beq.n	8007166 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	22c5      	movs	r2, #197	; 0xc5
 8007186:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	bc80      	pop	{r7}
 8007192:	4770      	bx	lr
 8007194:	20000000 	.word	0x20000000
 8007198:	10624dd3 	.word	0x10624dd3

0800719c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b088      	sub	sp, #32
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	460b      	mov	r3, r1
 80071a6:	607a      	str	r2, [r7, #4]
 80071a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80071aa:	4b70      	ldr	r3, [pc, #448]	; (800736c <SDMMC_GetCmdResp1+0x1d0>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a70      	ldr	r2, [pc, #448]	; (8007370 <SDMMC_GetCmdResp1+0x1d4>)
 80071b0:	fba2 2303 	umull	r2, r3, r2, r3
 80071b4:	0a5a      	lsrs	r2, r3, #9
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	fb02 f303 	mul.w	r3, r2, r3
 80071bc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	1e5a      	subs	r2, r3, #1
 80071c2:	61fa      	str	r2, [r7, #28]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d102      	bne.n	80071ce <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80071c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071cc:	e0c9      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0ef      	beq.n	80071be <SDMMC_GetCmdResp1+0x22>
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1ea      	bne.n	80071be <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ec:	f003 0304 	and.w	r3, r3, #4
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d004      	beq.n	80071fe <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2204      	movs	r2, #4
 80071f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80071fa:	2304      	movs	r3, #4
 80071fc:	e0b1      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d004      	beq.n	8007214 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007210:	2301      	movs	r3, #1
 8007212:	e0a6      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	22c5      	movs	r2, #197	; 0xc5
 8007218:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f7ff fd59 	bl	8006cd2 <SDIO_GetCommandResponse>
 8007220:	4603      	mov	r3, r0
 8007222:	461a      	mov	r2, r3
 8007224:	7afb      	ldrb	r3, [r7, #11]
 8007226:	4293      	cmp	r3, r2
 8007228:	d001      	beq.n	800722e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800722a:	2301      	movs	r3, #1
 800722c:	e099      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800722e:	2100      	movs	r1, #0
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f7ff fd5a 	bl	8006cea <SDIO_GetResponse>
 8007236:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	4b4e      	ldr	r3, [pc, #312]	; (8007374 <SDMMC_GetCmdResp1+0x1d8>)
 800723c:	4013      	ands	r3, r2
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007242:	2300      	movs	r3, #0
 8007244:	e08d      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2b00      	cmp	r3, #0
 800724a:	da02      	bge.n	8007252 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800724c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007250:	e087      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800725c:	2340      	movs	r3, #64	; 0x40
 800725e:	e080      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800726a:	2380      	movs	r3, #128	; 0x80
 800726c:	e079      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007278:	f44f 7380 	mov.w	r3, #256	; 0x100
 800727c:	e071      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007288:	f44f 7300 	mov.w	r3, #512	; 0x200
 800728c:	e069      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800729c:	e061      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80072a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072ac:	e059      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d002      	beq.n	80072be <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80072b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072bc:	e051      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d002      	beq.n	80072ce <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80072c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072cc:	e049      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80072d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80072dc:	e041      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80072e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ec:	e039      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d002      	beq.n	80072fe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80072f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80072fc:	e031      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d002      	beq.n	800730e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007308:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800730c:	e029      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d002      	beq.n	800731e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007318:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800731c:	e021      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007328:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800732c:	e019      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007338:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800733c:	e011      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007348:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800734c:	e009      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f003 0308 	and.w	r3, r3, #8
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007358:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800735c:	e001      	b.n	8007362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800735e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007362:	4618      	mov	r0, r3
 8007364:	3720      	adds	r7, #32
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	20000000 	.word	0x20000000
 8007370:	10624dd3 	.word	0x10624dd3
 8007374:	fdffe008 	.word	0xfdffe008

08007378 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007380:	4b1f      	ldr	r3, [pc, #124]	; (8007400 <SDMMC_GetCmdResp2+0x88>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a1f      	ldr	r2, [pc, #124]	; (8007404 <SDMMC_GetCmdResp2+0x8c>)
 8007386:	fba2 2303 	umull	r2, r3, r2, r3
 800738a:	0a5b      	lsrs	r3, r3, #9
 800738c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007390:	fb02 f303 	mul.w	r3, r2, r3
 8007394:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	1e5a      	subs	r2, r3, #1
 800739a:	60fa      	str	r2, [r7, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d102      	bne.n	80073a6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80073a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80073a4:	e026      	b.n	80073f4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0ef      	beq.n	8007396 <SDMMC_GetCmdResp2+0x1e>
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1ea      	bne.n	8007396 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c4:	f003 0304 	and.w	r3, r3, #4
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d004      	beq.n	80073d6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2204      	movs	r2, #4
 80073d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80073d2:	2304      	movs	r3, #4
 80073d4:	e00e      	b.n	80073f4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d004      	beq.n	80073ec <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e003      	b.n	80073f4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	22c5      	movs	r2, #197	; 0xc5
 80073f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bc80      	pop	{r7}
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	20000000 	.word	0x20000000
 8007404:	10624dd3 	.word	0x10624dd3

08007408 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007410:	4b19      	ldr	r3, [pc, #100]	; (8007478 <SDMMC_GetCmdResp3+0x70>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a19      	ldr	r2, [pc, #100]	; (800747c <SDMMC_GetCmdResp3+0x74>)
 8007416:	fba2 2303 	umull	r2, r3, r2, r3
 800741a:	0a5b      	lsrs	r3, r3, #9
 800741c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007420:	fb02 f303 	mul.w	r3, r2, r3
 8007424:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	1e5a      	subs	r2, r3, #1
 800742a:	60fa      	str	r2, [r7, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d102      	bne.n	8007436 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007430:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007434:	e01b      	b.n	800746e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800743a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007442:	2b00      	cmp	r3, #0
 8007444:	d0ef      	beq.n	8007426 <SDMMC_GetCmdResp3+0x1e>
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1ea      	bne.n	8007426 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007454:	f003 0304 	and.w	r3, r3, #4
 8007458:	2b00      	cmp	r3, #0
 800745a:	d004      	beq.n	8007466 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2204      	movs	r2, #4
 8007460:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007462:	2304      	movs	r3, #4
 8007464:	e003      	b.n	800746e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	22c5      	movs	r2, #197	; 0xc5
 800746a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	bc80      	pop	{r7}
 8007476:	4770      	bx	lr
 8007478:	20000000 	.word	0x20000000
 800747c:	10624dd3 	.word	0x10624dd3

08007480 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b088      	sub	sp, #32
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	460b      	mov	r3, r1
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800748e:	4b35      	ldr	r3, [pc, #212]	; (8007564 <SDMMC_GetCmdResp6+0xe4>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a35      	ldr	r2, [pc, #212]	; (8007568 <SDMMC_GetCmdResp6+0xe8>)
 8007494:	fba2 2303 	umull	r2, r3, r2, r3
 8007498:	0a5b      	lsrs	r3, r3, #9
 800749a:	f241 3288 	movw	r2, #5000	; 0x1388
 800749e:	fb02 f303 	mul.w	r3, r2, r3
 80074a2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	1e5a      	subs	r2, r3, #1
 80074a8:	61fa      	str	r2, [r7, #28]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d102      	bne.n	80074b4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80074ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074b2:	e052      	b.n	800755a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d0ef      	beq.n	80074a4 <SDMMC_GetCmdResp6+0x24>
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1ea      	bne.n	80074a4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d2:	f003 0304 	and.w	r3, r3, #4
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d004      	beq.n	80074e4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2204      	movs	r2, #4
 80074de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80074e0:	2304      	movs	r3, #4
 80074e2:	e03a      	b.n	800755a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d004      	beq.n	80074fa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2201      	movs	r2, #1
 80074f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e02f      	b.n	800755a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f7ff fbe9 	bl	8006cd2 <SDIO_GetCommandResponse>
 8007500:	4603      	mov	r3, r0
 8007502:	461a      	mov	r2, r3
 8007504:	7afb      	ldrb	r3, [r7, #11]
 8007506:	4293      	cmp	r3, r2
 8007508:	d001      	beq.n	800750e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800750a:	2301      	movs	r3, #1
 800750c:	e025      	b.n	800755a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	22c5      	movs	r2, #197	; 0xc5
 8007512:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007514:	2100      	movs	r1, #0
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f7ff fbe7 	bl	8006cea <SDIO_GetResponse>
 800751c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d106      	bne.n	8007536 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	0c1b      	lsrs	r3, r3, #16
 800752c:	b29a      	uxth	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007532:	2300      	movs	r3, #0
 8007534:	e011      	b.n	800755a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007544:	e009      	b.n	800755a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007554:	e001      	b.n	800755a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007556:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800755a:	4618      	mov	r0, r3
 800755c:	3720      	adds	r7, #32
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	20000000 	.word	0x20000000
 8007568:	10624dd3 	.word	0x10624dd3

0800756c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007574:	4b22      	ldr	r3, [pc, #136]	; (8007600 <SDMMC_GetCmdResp7+0x94>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a22      	ldr	r2, [pc, #136]	; (8007604 <SDMMC_GetCmdResp7+0x98>)
 800757a:	fba2 2303 	umull	r2, r3, r2, r3
 800757e:	0a5b      	lsrs	r3, r3, #9
 8007580:	f241 3288 	movw	r2, #5000	; 0x1388
 8007584:	fb02 f303 	mul.w	r3, r2, r3
 8007588:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	1e5a      	subs	r2, r3, #1
 800758e:	60fa      	str	r2, [r7, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d102      	bne.n	800759a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007594:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007598:	e02c      	b.n	80075f4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800759e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d0ef      	beq.n	800758a <SDMMC_GetCmdResp7+0x1e>
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1ea      	bne.n	800758a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b8:	f003 0304 	and.w	r3, r3, #4
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d004      	beq.n	80075ca <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2204      	movs	r2, #4
 80075c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80075c6:	2304      	movs	r3, #4
 80075c8:	e014      	b.n	80075f4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ce:	f003 0301 	and.w	r3, r3, #1
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d004      	beq.n	80075e0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80075dc:	2301      	movs	r3, #1
 80075de:	e009      	b.n	80075f4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2240      	movs	r2, #64	; 0x40
 80075f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80075f2:	2300      	movs	r3, #0
  
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3714      	adds	r7, #20
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bc80      	pop	{r7}
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	20000000 	.word	0x20000000
 8007604:	10624dd3 	.word	0x10624dd3

08007608 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800760c:	4904      	ldr	r1, [pc, #16]	; (8007620 <MX_FATFS_Init+0x18>)
 800760e:	4805      	ldr	r0, [pc, #20]	; (8007624 <MX_FATFS_Init+0x1c>)
 8007610:	f000 f8d4 	bl	80077bc <FATFS_LinkDriver>
 8007614:	4603      	mov	r3, r0
 8007616:	461a      	mov	r2, r3
 8007618:	4b03      	ldr	r3, [pc, #12]	; (8007628 <MX_FATFS_Init+0x20>)
 800761a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800761c:	bf00      	nop
 800761e:	bd80      	pop	{r7, pc}
 8007620:	200003ac 	.word	0x200003ac
 8007624:	0800c398 	.word	0x0800c398
 8007628:	200003a8 	.word	0x200003a8

0800762c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007636:	f000 f86b 	bl	8007710 <BSP_SD_IsDetected>
 800763a:	4603      	mov	r3, r0
 800763c:	2b01      	cmp	r3, #1
 800763e:	d001      	beq.n	8007644 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e005      	b.n	8007650 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007644:	4804      	ldr	r0, [pc, #16]	; (8007658 <BSP_SD_Init+0x2c>)
 8007646:	f7fd fb17 	bl	8004c78 <HAL_SD_Init>
 800764a:	4603      	mov	r3, r0
 800764c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800764e:	79fb      	ldrb	r3, [r7, #7]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	2000021c 	.word	0x2000021c

0800765c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b088      	sub	sp, #32
 8007660:	af02      	add	r7, sp, #8
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
 8007668:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	68f9      	ldr	r1, [r7, #12]
 8007678:	4806      	ldr	r0, [pc, #24]	; (8007694 <BSP_SD_ReadBlocks+0x38>)
 800767a:	f7fd fbab 	bl	8004dd4 <HAL_SD_ReadBlocks>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007688:	7dfb      	ldrb	r3, [r7, #23]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3718      	adds	r7, #24
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	2000021c 	.word	0x2000021c

08007698 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b088      	sub	sp, #32
 800769c:	af02      	add	r7, sp, #8
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
 80076a4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	68f9      	ldr	r1, [r7, #12]
 80076b4:	4806      	ldr	r0, [pc, #24]	; (80076d0 <BSP_SD_WriteBlocks+0x38>)
 80076b6:	f7fd fd6b 	bl	8005190 <HAL_SD_WriteBlocks>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80076c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	2000021c 	.word	0x2000021c

080076d4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80076d8:	4805      	ldr	r0, [pc, #20]	; (80076f0 <BSP_SD_GetCardState+0x1c>)
 80076da:	f7fe f8ae 	bl	800583a <HAL_SD_GetCardState>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b04      	cmp	r3, #4
 80076e2:	bf14      	ite	ne
 80076e4:	2301      	movne	r3, #1
 80076e6:	2300      	moveq	r3, #0
 80076e8:	b2db      	uxtb	r3, r3
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	2000021c 	.word	0x2000021c

080076f4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80076fc:	6879      	ldr	r1, [r7, #4]
 80076fe:	4803      	ldr	r0, [pc, #12]	; (800770c <BSP_SD_GetCardInfo+0x18>)
 8007700:	f7fe f870 	bl	80057e4 <HAL_SD_GetCardInfo>
}
 8007704:	bf00      	nop
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	2000021c 	.word	0x2000021c

08007710 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007716:	2301      	movs	r3, #1
 8007718:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800771a:	79fb      	ldrb	r3, [r7, #7]
 800771c:	b2db      	uxtb	r3, r3
}
 800771e:	4618      	mov	r0, r3
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	bc80      	pop	{r7}
 8007726:	4770      	bx	lr

08007728 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007728:	b480      	push	{r7}
 800772a:	b087      	sub	sp, #28
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	4613      	mov	r3, r2
 8007734:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007736:	2301      	movs	r3, #1
 8007738:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800773a:	2300      	movs	r3, #0
 800773c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800773e:	4b1e      	ldr	r3, [pc, #120]	; (80077b8 <FATFS_LinkDriverEx+0x90>)
 8007740:	7a5b      	ldrb	r3, [r3, #9]
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b01      	cmp	r3, #1
 8007746:	d831      	bhi.n	80077ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007748:	4b1b      	ldr	r3, [pc, #108]	; (80077b8 <FATFS_LinkDriverEx+0x90>)
 800774a:	7a5b      	ldrb	r3, [r3, #9]
 800774c:	b2db      	uxtb	r3, r3
 800774e:	461a      	mov	r2, r3
 8007750:	4b19      	ldr	r3, [pc, #100]	; (80077b8 <FATFS_LinkDriverEx+0x90>)
 8007752:	2100      	movs	r1, #0
 8007754:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007756:	4b18      	ldr	r3, [pc, #96]	; (80077b8 <FATFS_LinkDriverEx+0x90>)
 8007758:	7a5b      	ldrb	r3, [r3, #9]
 800775a:	b2db      	uxtb	r3, r3
 800775c:	4a16      	ldr	r2, [pc, #88]	; (80077b8 <FATFS_LinkDriverEx+0x90>)
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4413      	add	r3, r2
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007766:	4b14      	ldr	r3, [pc, #80]	; (80077b8 <FATFS_LinkDriverEx+0x90>)
 8007768:	7a5b      	ldrb	r3, [r3, #9]
 800776a:	b2db      	uxtb	r3, r3
 800776c:	461a      	mov	r2, r3
 800776e:	4b12      	ldr	r3, [pc, #72]	; (80077b8 <FATFS_LinkDriverEx+0x90>)
 8007770:	4413      	add	r3, r2
 8007772:	79fa      	ldrb	r2, [r7, #7]
 8007774:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007776:	4b10      	ldr	r3, [pc, #64]	; (80077b8 <FATFS_LinkDriverEx+0x90>)
 8007778:	7a5b      	ldrb	r3, [r3, #9]
 800777a:	b2db      	uxtb	r3, r3
 800777c:	1c5a      	adds	r2, r3, #1
 800777e:	b2d1      	uxtb	r1, r2
 8007780:	4a0d      	ldr	r2, [pc, #52]	; (80077b8 <FATFS_LinkDriverEx+0x90>)
 8007782:	7251      	strb	r1, [r2, #9]
 8007784:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007786:	7dbb      	ldrb	r3, [r7, #22]
 8007788:	3330      	adds	r3, #48	; 0x30
 800778a:	b2da      	uxtb	r2, r3
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	3301      	adds	r3, #1
 8007794:	223a      	movs	r2, #58	; 0x3a
 8007796:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	3302      	adds	r3, #2
 800779c:	222f      	movs	r2, #47	; 0x2f
 800779e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	3303      	adds	r3, #3
 80077a4:	2200      	movs	r2, #0
 80077a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80077a8:	2300      	movs	r3, #0
 80077aa:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80077ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	371c      	adds	r7, #28
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bc80      	pop	{r7}
 80077b6:	4770      	bx	lr
 80077b8:	200003b0 	.word	0x200003b0

080077bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80077c6:	2200      	movs	r2, #0
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7ff ffac 	bl	8007728 <FATFS_LinkDriverEx>
 80077d0:	4603      	mov	r3, r0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3708      	adds	r7, #8
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
	...

080077dc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	4603      	mov	r3, r0
 80077e4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80077e6:	4b0b      	ldr	r3, [pc, #44]	; (8007814 <SD_initialize+0x38>)
 80077e8:	2201      	movs	r2, #1
 80077ea:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 80077ec:	f7ff ff1e 	bl	800762c <BSP_SD_Init>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d107      	bne.n	8007806 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80077f6:	4b07      	ldr	r3, [pc, #28]	; (8007814 <SD_initialize+0x38>)
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	f023 0301 	bic.w	r3, r3, #1
 8007800:	b2da      	uxtb	r2, r3
 8007802:	4b04      	ldr	r3, [pc, #16]	; (8007814 <SD_initialize+0x38>)
 8007804:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007806:	4b03      	ldr	r3, [pc, #12]	; (8007814 <SD_initialize+0x38>)
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	b2db      	uxtb	r3, r3
}
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	20000009 	.word	0x20000009

08007818 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	4603      	mov	r3, r0
 8007820:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007822:	4b0b      	ldr	r3, [pc, #44]	; (8007850 <SD_status+0x38>)
 8007824:	2201      	movs	r2, #1
 8007826:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007828:	f7ff ff54 	bl	80076d4 <BSP_SD_GetCardState>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d107      	bne.n	8007842 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007832:	4b07      	ldr	r3, [pc, #28]	; (8007850 <SD_status+0x38>)
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	b2db      	uxtb	r3, r3
 8007838:	f023 0301 	bic.w	r3, r3, #1
 800783c:	b2da      	uxtb	r2, r3
 800783e:	4b04      	ldr	r3, [pc, #16]	; (8007850 <SD_status+0x38>)
 8007840:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8007842:	4b03      	ldr	r3, [pc, #12]	; (8007850 <SD_status+0x38>)
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	b2db      	uxtb	r3, r3
}
 8007848:	4618      	mov	r0, r3
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	20000009 	.word	0x20000009

08007854 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	60b9      	str	r1, [r7, #8]
 800785c:	607a      	str	r2, [r7, #4]
 800785e:	603b      	str	r3, [r7, #0]
 8007860:	4603      	mov	r3, r0
 8007862:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8007868:	4b0f      	ldr	r3, [pc, #60]	; (80078a8 <SD_read+0x54>)
 800786a:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 800786c:	4b0f      	ldr	r3, [pc, #60]	; (80078ac <SD_read+0x58>)
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	6879      	ldr	r1, [r7, #4]
 8007872:	68b8      	ldr	r0, [r7, #8]
 8007874:	f7ff fef2 	bl	800765c <BSP_SD_ReadBlocks>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10e      	bne.n	800789c <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800787e:	e006      	b.n	800788e <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	1e5a      	subs	r2, r3, #1
 8007884:	613a      	str	r2, [r7, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d101      	bne.n	800788e <SD_read+0x3a>
      {
        return RES_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e007      	b.n	800789e <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800788e:	f7ff ff21 	bl	80076d4 <BSP_SD_GetCardState>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1f3      	bne.n	8007880 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800789c:	7dfb      	ldrb	r3, [r7, #23]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3718      	adds	r7, #24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	000186a0 	.word	0x000186a0
 80078ac:	05f5e100 	.word	0x05f5e100

080078b0 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60b9      	str	r1, [r7, #8]
 80078b8:	607a      	str	r2, [r7, #4]
 80078ba:	603b      	str	r3, [r7, #0]
 80078bc:	4603      	mov	r3, r0
 80078be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 80078c4:	4b0f      	ldr	r3, [pc, #60]	; (8007904 <SD_write+0x54>)
 80078c6:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 80078c8:	4b0f      	ldr	r3, [pc, #60]	; (8007908 <SD_write+0x58>)
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	6879      	ldr	r1, [r7, #4]
 80078ce:	68b8      	ldr	r0, [r7, #8]
 80078d0:	f7ff fee2 	bl	8007698 <BSP_SD_WriteBlocks>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10e      	bne.n	80078f8 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 80078da:	e006      	b.n	80078ea <SD_write+0x3a>
    {
      if (timeout-- == 0)
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	1e5a      	subs	r2, r3, #1
 80078e0:	613a      	str	r2, [r7, #16]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <SD_write+0x3a>
      {
        return RES_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e007      	b.n	80078fa <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80078ea:	f7ff fef3 	bl	80076d4 <BSP_SD_GetCardState>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1f3      	bne.n	80078dc <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 80078f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3718      	adds	r7, #24
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	000186a0 	.word	0x000186a0
 8007908:	05f5e100 	.word	0x05f5e100

0800790c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b08c      	sub	sp, #48	; 0x30
 8007910:	af00      	add	r7, sp, #0
 8007912:	4603      	mov	r3, r0
 8007914:	603a      	str	r2, [r7, #0]
 8007916:	71fb      	strb	r3, [r7, #7]
 8007918:	460b      	mov	r3, r1
 800791a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007922:	4b24      	ldr	r3, [pc, #144]	; (80079b4 <SD_ioctl+0xa8>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	b2db      	uxtb	r3, r3
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <SD_ioctl+0x28>
 8007930:	2303      	movs	r3, #3
 8007932:	e03b      	b.n	80079ac <SD_ioctl+0xa0>
  
  switch (cmd)
 8007934:	79bb      	ldrb	r3, [r7, #6]
 8007936:	2b03      	cmp	r3, #3
 8007938:	d833      	bhi.n	80079a2 <SD_ioctl+0x96>
 800793a:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <SD_ioctl+0x34>)
 800793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007940:	08007951 	.word	0x08007951
 8007944:	08007959 	.word	0x08007959
 8007948:	08007971 	.word	0x08007971
 800794c:	0800798b 	.word	0x0800798b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007950:	2300      	movs	r3, #0
 8007952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007956:	e027      	b.n	80079a8 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007958:	f107 030c 	add.w	r3, r7, #12
 800795c:	4618      	mov	r0, r3
 800795e:	f7ff fec9 	bl	80076f4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800796e:	e01b      	b.n	80079a8 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007970:	f107 030c 	add.w	r3, r7, #12
 8007974:	4618      	mov	r0, r3
 8007976:	f7ff febd 	bl	80076f4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797c:	b29a      	uxth	r2, r3
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007988:	e00e      	b.n	80079a8 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800798a:	f107 030c 	add.w	r3, r7, #12
 800798e:	4618      	mov	r0, r3
 8007990:	f7ff feb0 	bl	80076f4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8007994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800799a:	2300      	movs	r3, #0
 800799c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80079a0:	e002      	b.n	80079a8 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 80079a2:	2304      	movs	r3, #4
 80079a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 80079a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3730      	adds	r7, #48	; 0x30
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	20000009 	.word	0x20000009

080079b8 <__errno>:
 80079b8:	4b01      	ldr	r3, [pc, #4]	; (80079c0 <__errno+0x8>)
 80079ba:	6818      	ldr	r0, [r3, #0]
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	2000000c 	.word	0x2000000c

080079c4 <__libc_init_array>:
 80079c4:	b570      	push	{r4, r5, r6, lr}
 80079c6:	2600      	movs	r6, #0
 80079c8:	4d0c      	ldr	r5, [pc, #48]	; (80079fc <__libc_init_array+0x38>)
 80079ca:	4c0d      	ldr	r4, [pc, #52]	; (8007a00 <__libc_init_array+0x3c>)
 80079cc:	1b64      	subs	r4, r4, r5
 80079ce:	10a4      	asrs	r4, r4, #2
 80079d0:	42a6      	cmp	r6, r4
 80079d2:	d109      	bne.n	80079e8 <__libc_init_array+0x24>
 80079d4:	f004 fc52 	bl	800c27c <_init>
 80079d8:	2600      	movs	r6, #0
 80079da:	4d0a      	ldr	r5, [pc, #40]	; (8007a04 <__libc_init_array+0x40>)
 80079dc:	4c0a      	ldr	r4, [pc, #40]	; (8007a08 <__libc_init_array+0x44>)
 80079de:	1b64      	subs	r4, r4, r5
 80079e0:	10a4      	asrs	r4, r4, #2
 80079e2:	42a6      	cmp	r6, r4
 80079e4:	d105      	bne.n	80079f2 <__libc_init_array+0x2e>
 80079e6:	bd70      	pop	{r4, r5, r6, pc}
 80079e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ec:	4798      	blx	r3
 80079ee:	3601      	adds	r6, #1
 80079f0:	e7ee      	b.n	80079d0 <__libc_init_array+0xc>
 80079f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079f6:	4798      	blx	r3
 80079f8:	3601      	adds	r6, #1
 80079fa:	e7f2      	b.n	80079e2 <__libc_init_array+0x1e>
 80079fc:	0800c854 	.word	0x0800c854
 8007a00:	0800c854 	.word	0x0800c854
 8007a04:	0800c854 	.word	0x0800c854
 8007a08:	0800c858 	.word	0x0800c858

08007a0c <memset>:
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	4402      	add	r2, r0
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d100      	bne.n	8007a16 <memset+0xa>
 8007a14:	4770      	bx	lr
 8007a16:	f803 1b01 	strb.w	r1, [r3], #1
 8007a1a:	e7f9      	b.n	8007a10 <memset+0x4>

08007a1c <__cvt>:
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a22:	461f      	mov	r7, r3
 8007a24:	bfbb      	ittet	lt
 8007a26:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007a2a:	461f      	movlt	r7, r3
 8007a2c:	2300      	movge	r3, #0
 8007a2e:	232d      	movlt	r3, #45	; 0x2d
 8007a30:	b088      	sub	sp, #32
 8007a32:	4614      	mov	r4, r2
 8007a34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a36:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007a38:	7013      	strb	r3, [r2, #0]
 8007a3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a3c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007a40:	f023 0820 	bic.w	r8, r3, #32
 8007a44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a48:	d005      	beq.n	8007a56 <__cvt+0x3a>
 8007a4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007a4e:	d100      	bne.n	8007a52 <__cvt+0x36>
 8007a50:	3501      	adds	r5, #1
 8007a52:	2302      	movs	r3, #2
 8007a54:	e000      	b.n	8007a58 <__cvt+0x3c>
 8007a56:	2303      	movs	r3, #3
 8007a58:	aa07      	add	r2, sp, #28
 8007a5a:	9204      	str	r2, [sp, #16]
 8007a5c:	aa06      	add	r2, sp, #24
 8007a5e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007a62:	e9cd 3500 	strd	r3, r5, [sp]
 8007a66:	4622      	mov	r2, r4
 8007a68:	463b      	mov	r3, r7
 8007a6a:	f001 fd85 	bl	8009578 <_dtoa_r>
 8007a6e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007a72:	4606      	mov	r6, r0
 8007a74:	d102      	bne.n	8007a7c <__cvt+0x60>
 8007a76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a78:	07db      	lsls	r3, r3, #31
 8007a7a:	d522      	bpl.n	8007ac2 <__cvt+0xa6>
 8007a7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a80:	eb06 0905 	add.w	r9, r6, r5
 8007a84:	d110      	bne.n	8007aa8 <__cvt+0x8c>
 8007a86:	7833      	ldrb	r3, [r6, #0]
 8007a88:	2b30      	cmp	r3, #48	; 0x30
 8007a8a:	d10a      	bne.n	8007aa2 <__cvt+0x86>
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	2300      	movs	r3, #0
 8007a90:	4620      	mov	r0, r4
 8007a92:	4639      	mov	r1, r7
 8007a94:	f7f9 f8a8 	bl	8000be8 <__aeabi_dcmpeq>
 8007a98:	b918      	cbnz	r0, 8007aa2 <__cvt+0x86>
 8007a9a:	f1c5 0501 	rsb	r5, r5, #1
 8007a9e:	f8ca 5000 	str.w	r5, [sl]
 8007aa2:	f8da 3000 	ldr.w	r3, [sl]
 8007aa6:	4499      	add	r9, r3
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2300      	movs	r3, #0
 8007aac:	4620      	mov	r0, r4
 8007aae:	4639      	mov	r1, r7
 8007ab0:	f7f9 f89a 	bl	8000be8 <__aeabi_dcmpeq>
 8007ab4:	b108      	cbz	r0, 8007aba <__cvt+0x9e>
 8007ab6:	f8cd 901c 	str.w	r9, [sp, #28]
 8007aba:	2230      	movs	r2, #48	; 0x30
 8007abc:	9b07      	ldr	r3, [sp, #28]
 8007abe:	454b      	cmp	r3, r9
 8007ac0:	d307      	bcc.n	8007ad2 <__cvt+0xb6>
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	9b07      	ldr	r3, [sp, #28]
 8007ac6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007ac8:	1b9b      	subs	r3, r3, r6
 8007aca:	6013      	str	r3, [r2, #0]
 8007acc:	b008      	add	sp, #32
 8007ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad2:	1c59      	adds	r1, r3, #1
 8007ad4:	9107      	str	r1, [sp, #28]
 8007ad6:	701a      	strb	r2, [r3, #0]
 8007ad8:	e7f0      	b.n	8007abc <__cvt+0xa0>

08007ada <__exponent>:
 8007ada:	4603      	mov	r3, r0
 8007adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ade:	2900      	cmp	r1, #0
 8007ae0:	f803 2b02 	strb.w	r2, [r3], #2
 8007ae4:	bfb6      	itet	lt
 8007ae6:	222d      	movlt	r2, #45	; 0x2d
 8007ae8:	222b      	movge	r2, #43	; 0x2b
 8007aea:	4249      	neglt	r1, r1
 8007aec:	2909      	cmp	r1, #9
 8007aee:	7042      	strb	r2, [r0, #1]
 8007af0:	dd2b      	ble.n	8007b4a <__exponent+0x70>
 8007af2:	f10d 0407 	add.w	r4, sp, #7
 8007af6:	46a4      	mov	ip, r4
 8007af8:	270a      	movs	r7, #10
 8007afa:	fb91 f6f7 	sdiv	r6, r1, r7
 8007afe:	460a      	mov	r2, r1
 8007b00:	46a6      	mov	lr, r4
 8007b02:	fb07 1516 	mls	r5, r7, r6, r1
 8007b06:	2a63      	cmp	r2, #99	; 0x63
 8007b08:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007b0c:	4631      	mov	r1, r6
 8007b0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007b12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007b16:	dcf0      	bgt.n	8007afa <__exponent+0x20>
 8007b18:	3130      	adds	r1, #48	; 0x30
 8007b1a:	f1ae 0502 	sub.w	r5, lr, #2
 8007b1e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007b22:	4629      	mov	r1, r5
 8007b24:	1c44      	adds	r4, r0, #1
 8007b26:	4561      	cmp	r1, ip
 8007b28:	d30a      	bcc.n	8007b40 <__exponent+0x66>
 8007b2a:	f10d 0209 	add.w	r2, sp, #9
 8007b2e:	eba2 020e 	sub.w	r2, r2, lr
 8007b32:	4565      	cmp	r5, ip
 8007b34:	bf88      	it	hi
 8007b36:	2200      	movhi	r2, #0
 8007b38:	4413      	add	r3, r2
 8007b3a:	1a18      	subs	r0, r3, r0
 8007b3c:	b003      	add	sp, #12
 8007b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b44:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007b48:	e7ed      	b.n	8007b26 <__exponent+0x4c>
 8007b4a:	2330      	movs	r3, #48	; 0x30
 8007b4c:	3130      	adds	r1, #48	; 0x30
 8007b4e:	7083      	strb	r3, [r0, #2]
 8007b50:	70c1      	strb	r1, [r0, #3]
 8007b52:	1d03      	adds	r3, r0, #4
 8007b54:	e7f1      	b.n	8007b3a <__exponent+0x60>
	...

08007b58 <_printf_float>:
 8007b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5c:	b091      	sub	sp, #68	; 0x44
 8007b5e:	460c      	mov	r4, r1
 8007b60:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007b64:	4616      	mov	r6, r2
 8007b66:	461f      	mov	r7, r3
 8007b68:	4605      	mov	r5, r0
 8007b6a:	f002 fe59 	bl	800a820 <_localeconv_r>
 8007b6e:	6803      	ldr	r3, [r0, #0]
 8007b70:	4618      	mov	r0, r3
 8007b72:	9309      	str	r3, [sp, #36]	; 0x24
 8007b74:	f7f8 fb58 	bl	8000228 <strlen>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	930e      	str	r3, [sp, #56]	; 0x38
 8007b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8007b80:	900a      	str	r0, [sp, #40]	; 0x28
 8007b82:	3307      	adds	r3, #7
 8007b84:	f023 0307 	bic.w	r3, r3, #7
 8007b88:	f103 0208 	add.w	r2, r3, #8
 8007b8c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007b90:	f8d4 b000 	ldr.w	fp, [r4]
 8007b94:	f8c8 2000 	str.w	r2, [r8]
 8007b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007ba0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007ba4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007ba8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007baa:	f04f 32ff 	mov.w	r2, #4294967295
 8007bae:	4640      	mov	r0, r8
 8007bb0:	4b9c      	ldr	r3, [pc, #624]	; (8007e24 <_printf_float+0x2cc>)
 8007bb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007bb4:	f7f9 f84a 	bl	8000c4c <__aeabi_dcmpun>
 8007bb8:	bb70      	cbnz	r0, 8007c18 <_printf_float+0xc0>
 8007bba:	f04f 32ff 	mov.w	r2, #4294967295
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	4b98      	ldr	r3, [pc, #608]	; (8007e24 <_printf_float+0x2cc>)
 8007bc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007bc4:	f7f9 f824 	bl	8000c10 <__aeabi_dcmple>
 8007bc8:	bb30      	cbnz	r0, 8007c18 <_printf_float+0xc0>
 8007bca:	2200      	movs	r2, #0
 8007bcc:	2300      	movs	r3, #0
 8007bce:	4640      	mov	r0, r8
 8007bd0:	4651      	mov	r1, sl
 8007bd2:	f7f9 f813 	bl	8000bfc <__aeabi_dcmplt>
 8007bd6:	b110      	cbz	r0, 8007bde <_printf_float+0x86>
 8007bd8:	232d      	movs	r3, #45	; 0x2d
 8007bda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bde:	4b92      	ldr	r3, [pc, #584]	; (8007e28 <_printf_float+0x2d0>)
 8007be0:	4892      	ldr	r0, [pc, #584]	; (8007e2c <_printf_float+0x2d4>)
 8007be2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007be6:	bf94      	ite	ls
 8007be8:	4698      	movls	r8, r3
 8007bea:	4680      	movhi	r8, r0
 8007bec:	2303      	movs	r3, #3
 8007bee:	f04f 0a00 	mov.w	sl, #0
 8007bf2:	6123      	str	r3, [r4, #16]
 8007bf4:	f02b 0304 	bic.w	r3, fp, #4
 8007bf8:	6023      	str	r3, [r4, #0]
 8007bfa:	4633      	mov	r3, r6
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	4628      	mov	r0, r5
 8007c00:	9700      	str	r7, [sp, #0]
 8007c02:	aa0f      	add	r2, sp, #60	; 0x3c
 8007c04:	f000 f9d4 	bl	8007fb0 <_printf_common>
 8007c08:	3001      	adds	r0, #1
 8007c0a:	f040 8090 	bne.w	8007d2e <_printf_float+0x1d6>
 8007c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c12:	b011      	add	sp, #68	; 0x44
 8007c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c18:	4642      	mov	r2, r8
 8007c1a:	4653      	mov	r3, sl
 8007c1c:	4640      	mov	r0, r8
 8007c1e:	4651      	mov	r1, sl
 8007c20:	f7f9 f814 	bl	8000c4c <__aeabi_dcmpun>
 8007c24:	b148      	cbz	r0, 8007c3a <_printf_float+0xe2>
 8007c26:	f1ba 0f00 	cmp.w	sl, #0
 8007c2a:	bfb8      	it	lt
 8007c2c:	232d      	movlt	r3, #45	; 0x2d
 8007c2e:	4880      	ldr	r0, [pc, #512]	; (8007e30 <_printf_float+0x2d8>)
 8007c30:	bfb8      	it	lt
 8007c32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007c36:	4b7f      	ldr	r3, [pc, #508]	; (8007e34 <_printf_float+0x2dc>)
 8007c38:	e7d3      	b.n	8007be2 <_printf_float+0x8a>
 8007c3a:	6863      	ldr	r3, [r4, #4]
 8007c3c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007c40:	1c5a      	adds	r2, r3, #1
 8007c42:	d142      	bne.n	8007cca <_printf_float+0x172>
 8007c44:	2306      	movs	r3, #6
 8007c46:	6063      	str	r3, [r4, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	9206      	str	r2, [sp, #24]
 8007c4c:	aa0e      	add	r2, sp, #56	; 0x38
 8007c4e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007c52:	aa0d      	add	r2, sp, #52	; 0x34
 8007c54:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007c58:	9203      	str	r2, [sp, #12]
 8007c5a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007c5e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007c62:	6023      	str	r3, [r4, #0]
 8007c64:	6863      	ldr	r3, [r4, #4]
 8007c66:	4642      	mov	r2, r8
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	4653      	mov	r3, sl
 8007c6e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007c70:	f7ff fed4 	bl	8007a1c <__cvt>
 8007c74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c76:	4680      	mov	r8, r0
 8007c78:	2947      	cmp	r1, #71	; 0x47
 8007c7a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007c7c:	d108      	bne.n	8007c90 <_printf_float+0x138>
 8007c7e:	1cc8      	adds	r0, r1, #3
 8007c80:	db02      	blt.n	8007c88 <_printf_float+0x130>
 8007c82:	6863      	ldr	r3, [r4, #4]
 8007c84:	4299      	cmp	r1, r3
 8007c86:	dd40      	ble.n	8007d0a <_printf_float+0x1b2>
 8007c88:	f1a9 0902 	sub.w	r9, r9, #2
 8007c8c:	fa5f f989 	uxtb.w	r9, r9
 8007c90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007c94:	d81f      	bhi.n	8007cd6 <_printf_float+0x17e>
 8007c96:	464a      	mov	r2, r9
 8007c98:	3901      	subs	r1, #1
 8007c9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007c9e:	910d      	str	r1, [sp, #52]	; 0x34
 8007ca0:	f7ff ff1b 	bl	8007ada <__exponent>
 8007ca4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ca6:	4682      	mov	sl, r0
 8007ca8:	1813      	adds	r3, r2, r0
 8007caa:	2a01      	cmp	r2, #1
 8007cac:	6123      	str	r3, [r4, #16]
 8007cae:	dc02      	bgt.n	8007cb6 <_printf_float+0x15e>
 8007cb0:	6822      	ldr	r2, [r4, #0]
 8007cb2:	07d2      	lsls	r2, r2, #31
 8007cb4:	d501      	bpl.n	8007cba <_printf_float+0x162>
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	6123      	str	r3, [r4, #16]
 8007cba:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d09b      	beq.n	8007bfa <_printf_float+0xa2>
 8007cc2:	232d      	movs	r3, #45	; 0x2d
 8007cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cc8:	e797      	b.n	8007bfa <_printf_float+0xa2>
 8007cca:	2947      	cmp	r1, #71	; 0x47
 8007ccc:	d1bc      	bne.n	8007c48 <_printf_float+0xf0>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1ba      	bne.n	8007c48 <_printf_float+0xf0>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e7b7      	b.n	8007c46 <_printf_float+0xee>
 8007cd6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007cda:	d118      	bne.n	8007d0e <_printf_float+0x1b6>
 8007cdc:	2900      	cmp	r1, #0
 8007cde:	6863      	ldr	r3, [r4, #4]
 8007ce0:	dd0b      	ble.n	8007cfa <_printf_float+0x1a2>
 8007ce2:	6121      	str	r1, [r4, #16]
 8007ce4:	b913      	cbnz	r3, 8007cec <_printf_float+0x194>
 8007ce6:	6822      	ldr	r2, [r4, #0]
 8007ce8:	07d0      	lsls	r0, r2, #31
 8007cea:	d502      	bpl.n	8007cf2 <_printf_float+0x19a>
 8007cec:	3301      	adds	r3, #1
 8007cee:	440b      	add	r3, r1
 8007cf0:	6123      	str	r3, [r4, #16]
 8007cf2:	f04f 0a00 	mov.w	sl, #0
 8007cf6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007cf8:	e7df      	b.n	8007cba <_printf_float+0x162>
 8007cfa:	b913      	cbnz	r3, 8007d02 <_printf_float+0x1aa>
 8007cfc:	6822      	ldr	r2, [r4, #0]
 8007cfe:	07d2      	lsls	r2, r2, #31
 8007d00:	d501      	bpl.n	8007d06 <_printf_float+0x1ae>
 8007d02:	3302      	adds	r3, #2
 8007d04:	e7f4      	b.n	8007cf0 <_printf_float+0x198>
 8007d06:	2301      	movs	r3, #1
 8007d08:	e7f2      	b.n	8007cf0 <_printf_float+0x198>
 8007d0a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007d0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d10:	4299      	cmp	r1, r3
 8007d12:	db05      	blt.n	8007d20 <_printf_float+0x1c8>
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	6121      	str	r1, [r4, #16]
 8007d18:	07d8      	lsls	r0, r3, #31
 8007d1a:	d5ea      	bpl.n	8007cf2 <_printf_float+0x19a>
 8007d1c:	1c4b      	adds	r3, r1, #1
 8007d1e:	e7e7      	b.n	8007cf0 <_printf_float+0x198>
 8007d20:	2900      	cmp	r1, #0
 8007d22:	bfcc      	ite	gt
 8007d24:	2201      	movgt	r2, #1
 8007d26:	f1c1 0202 	rsble	r2, r1, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	e7e0      	b.n	8007cf0 <_printf_float+0x198>
 8007d2e:	6823      	ldr	r3, [r4, #0]
 8007d30:	055a      	lsls	r2, r3, #21
 8007d32:	d407      	bmi.n	8007d44 <_printf_float+0x1ec>
 8007d34:	6923      	ldr	r3, [r4, #16]
 8007d36:	4642      	mov	r2, r8
 8007d38:	4631      	mov	r1, r6
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	47b8      	blx	r7
 8007d3e:	3001      	adds	r0, #1
 8007d40:	d12b      	bne.n	8007d9a <_printf_float+0x242>
 8007d42:	e764      	b.n	8007c0e <_printf_float+0xb6>
 8007d44:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007d48:	f240 80dd 	bls.w	8007f06 <_printf_float+0x3ae>
 8007d4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d50:	2200      	movs	r2, #0
 8007d52:	2300      	movs	r3, #0
 8007d54:	f7f8 ff48 	bl	8000be8 <__aeabi_dcmpeq>
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d033      	beq.n	8007dc4 <_printf_float+0x26c>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	4631      	mov	r1, r6
 8007d60:	4628      	mov	r0, r5
 8007d62:	4a35      	ldr	r2, [pc, #212]	; (8007e38 <_printf_float+0x2e0>)
 8007d64:	47b8      	blx	r7
 8007d66:	3001      	adds	r0, #1
 8007d68:	f43f af51 	beq.w	8007c0e <_printf_float+0xb6>
 8007d6c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007d70:	429a      	cmp	r2, r3
 8007d72:	db02      	blt.n	8007d7a <_printf_float+0x222>
 8007d74:	6823      	ldr	r3, [r4, #0]
 8007d76:	07d8      	lsls	r0, r3, #31
 8007d78:	d50f      	bpl.n	8007d9a <_printf_float+0x242>
 8007d7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d7e:	4631      	mov	r1, r6
 8007d80:	4628      	mov	r0, r5
 8007d82:	47b8      	blx	r7
 8007d84:	3001      	adds	r0, #1
 8007d86:	f43f af42 	beq.w	8007c0e <_printf_float+0xb6>
 8007d8a:	f04f 0800 	mov.w	r8, #0
 8007d8e:	f104 091a 	add.w	r9, r4, #26
 8007d92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d94:	3b01      	subs	r3, #1
 8007d96:	4543      	cmp	r3, r8
 8007d98:	dc09      	bgt.n	8007dae <_printf_float+0x256>
 8007d9a:	6823      	ldr	r3, [r4, #0]
 8007d9c:	079b      	lsls	r3, r3, #30
 8007d9e:	f100 8102 	bmi.w	8007fa6 <_printf_float+0x44e>
 8007da2:	68e0      	ldr	r0, [r4, #12]
 8007da4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007da6:	4298      	cmp	r0, r3
 8007da8:	bfb8      	it	lt
 8007daa:	4618      	movlt	r0, r3
 8007dac:	e731      	b.n	8007c12 <_printf_float+0xba>
 8007dae:	2301      	movs	r3, #1
 8007db0:	464a      	mov	r2, r9
 8007db2:	4631      	mov	r1, r6
 8007db4:	4628      	mov	r0, r5
 8007db6:	47b8      	blx	r7
 8007db8:	3001      	adds	r0, #1
 8007dba:	f43f af28 	beq.w	8007c0e <_printf_float+0xb6>
 8007dbe:	f108 0801 	add.w	r8, r8, #1
 8007dc2:	e7e6      	b.n	8007d92 <_printf_float+0x23a>
 8007dc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	dc38      	bgt.n	8007e3c <_printf_float+0x2e4>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	4631      	mov	r1, r6
 8007dce:	4628      	mov	r0, r5
 8007dd0:	4a19      	ldr	r2, [pc, #100]	; (8007e38 <_printf_float+0x2e0>)
 8007dd2:	47b8      	blx	r7
 8007dd4:	3001      	adds	r0, #1
 8007dd6:	f43f af1a 	beq.w	8007c0e <_printf_float+0xb6>
 8007dda:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007dde:	4313      	orrs	r3, r2
 8007de0:	d102      	bne.n	8007de8 <_printf_float+0x290>
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	07d9      	lsls	r1, r3, #31
 8007de6:	d5d8      	bpl.n	8007d9a <_printf_float+0x242>
 8007de8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dec:	4631      	mov	r1, r6
 8007dee:	4628      	mov	r0, r5
 8007df0:	47b8      	blx	r7
 8007df2:	3001      	adds	r0, #1
 8007df4:	f43f af0b 	beq.w	8007c0e <_printf_float+0xb6>
 8007df8:	f04f 0900 	mov.w	r9, #0
 8007dfc:	f104 0a1a 	add.w	sl, r4, #26
 8007e00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e02:	425b      	negs	r3, r3
 8007e04:	454b      	cmp	r3, r9
 8007e06:	dc01      	bgt.n	8007e0c <_printf_float+0x2b4>
 8007e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e0a:	e794      	b.n	8007d36 <_printf_float+0x1de>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	4652      	mov	r2, sl
 8007e10:	4631      	mov	r1, r6
 8007e12:	4628      	mov	r0, r5
 8007e14:	47b8      	blx	r7
 8007e16:	3001      	adds	r0, #1
 8007e18:	f43f aef9 	beq.w	8007c0e <_printf_float+0xb6>
 8007e1c:	f109 0901 	add.w	r9, r9, #1
 8007e20:	e7ee      	b.n	8007e00 <_printf_float+0x2a8>
 8007e22:	bf00      	nop
 8007e24:	7fefffff 	.word	0x7fefffff
 8007e28:	0800c3b0 	.word	0x0800c3b0
 8007e2c:	0800c3b4 	.word	0x0800c3b4
 8007e30:	0800c3bc 	.word	0x0800c3bc
 8007e34:	0800c3b8 	.word	0x0800c3b8
 8007e38:	0800c3c0 	.word	0x0800c3c0
 8007e3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e40:	429a      	cmp	r2, r3
 8007e42:	bfa8      	it	ge
 8007e44:	461a      	movge	r2, r3
 8007e46:	2a00      	cmp	r2, #0
 8007e48:	4691      	mov	r9, r2
 8007e4a:	dc37      	bgt.n	8007ebc <_printf_float+0x364>
 8007e4c:	f04f 0b00 	mov.w	fp, #0
 8007e50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e54:	f104 021a 	add.w	r2, r4, #26
 8007e58:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007e5c:	ebaa 0309 	sub.w	r3, sl, r9
 8007e60:	455b      	cmp	r3, fp
 8007e62:	dc33      	bgt.n	8007ecc <_printf_float+0x374>
 8007e64:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	db3b      	blt.n	8007ee4 <_printf_float+0x38c>
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	07da      	lsls	r2, r3, #31
 8007e70:	d438      	bmi.n	8007ee4 <_printf_float+0x38c>
 8007e72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e74:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007e76:	eba3 020a 	sub.w	r2, r3, sl
 8007e7a:	eba3 0901 	sub.w	r9, r3, r1
 8007e7e:	4591      	cmp	r9, r2
 8007e80:	bfa8      	it	ge
 8007e82:	4691      	movge	r9, r2
 8007e84:	f1b9 0f00 	cmp.w	r9, #0
 8007e88:	dc34      	bgt.n	8007ef4 <_printf_float+0x39c>
 8007e8a:	f04f 0800 	mov.w	r8, #0
 8007e8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e92:	f104 0a1a 	add.w	sl, r4, #26
 8007e96:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007e9a:	1a9b      	subs	r3, r3, r2
 8007e9c:	eba3 0309 	sub.w	r3, r3, r9
 8007ea0:	4543      	cmp	r3, r8
 8007ea2:	f77f af7a 	ble.w	8007d9a <_printf_float+0x242>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	4652      	mov	r2, sl
 8007eaa:	4631      	mov	r1, r6
 8007eac:	4628      	mov	r0, r5
 8007eae:	47b8      	blx	r7
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	f43f aeac 	beq.w	8007c0e <_printf_float+0xb6>
 8007eb6:	f108 0801 	add.w	r8, r8, #1
 8007eba:	e7ec      	b.n	8007e96 <_printf_float+0x33e>
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	4631      	mov	r1, r6
 8007ec0:	4642      	mov	r2, r8
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	47b8      	blx	r7
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	d1c0      	bne.n	8007e4c <_printf_float+0x2f4>
 8007eca:	e6a0      	b.n	8007c0e <_printf_float+0xb6>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	4631      	mov	r1, r6
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	920b      	str	r2, [sp, #44]	; 0x2c
 8007ed4:	47b8      	blx	r7
 8007ed6:	3001      	adds	r0, #1
 8007ed8:	f43f ae99 	beq.w	8007c0e <_printf_float+0xb6>
 8007edc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ede:	f10b 0b01 	add.w	fp, fp, #1
 8007ee2:	e7b9      	b.n	8007e58 <_printf_float+0x300>
 8007ee4:	4631      	mov	r1, r6
 8007ee6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007eea:	4628      	mov	r0, r5
 8007eec:	47b8      	blx	r7
 8007eee:	3001      	adds	r0, #1
 8007ef0:	d1bf      	bne.n	8007e72 <_printf_float+0x31a>
 8007ef2:	e68c      	b.n	8007c0e <_printf_float+0xb6>
 8007ef4:	464b      	mov	r3, r9
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	4628      	mov	r0, r5
 8007efa:	eb08 020a 	add.w	r2, r8, sl
 8007efe:	47b8      	blx	r7
 8007f00:	3001      	adds	r0, #1
 8007f02:	d1c2      	bne.n	8007e8a <_printf_float+0x332>
 8007f04:	e683      	b.n	8007c0e <_printf_float+0xb6>
 8007f06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f08:	2a01      	cmp	r2, #1
 8007f0a:	dc01      	bgt.n	8007f10 <_printf_float+0x3b8>
 8007f0c:	07db      	lsls	r3, r3, #31
 8007f0e:	d537      	bpl.n	8007f80 <_printf_float+0x428>
 8007f10:	2301      	movs	r3, #1
 8007f12:	4642      	mov	r2, r8
 8007f14:	4631      	mov	r1, r6
 8007f16:	4628      	mov	r0, r5
 8007f18:	47b8      	blx	r7
 8007f1a:	3001      	adds	r0, #1
 8007f1c:	f43f ae77 	beq.w	8007c0e <_printf_float+0xb6>
 8007f20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f24:	4631      	mov	r1, r6
 8007f26:	4628      	mov	r0, r5
 8007f28:	47b8      	blx	r7
 8007f2a:	3001      	adds	r0, #1
 8007f2c:	f43f ae6f 	beq.w	8007c0e <_printf_float+0xb6>
 8007f30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f34:	2200      	movs	r2, #0
 8007f36:	2300      	movs	r3, #0
 8007f38:	f7f8 fe56 	bl	8000be8 <__aeabi_dcmpeq>
 8007f3c:	b9d8      	cbnz	r0, 8007f76 <_printf_float+0x41e>
 8007f3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f40:	f108 0201 	add.w	r2, r8, #1
 8007f44:	3b01      	subs	r3, #1
 8007f46:	4631      	mov	r1, r6
 8007f48:	4628      	mov	r0, r5
 8007f4a:	47b8      	blx	r7
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	d10e      	bne.n	8007f6e <_printf_float+0x416>
 8007f50:	e65d      	b.n	8007c0e <_printf_float+0xb6>
 8007f52:	2301      	movs	r3, #1
 8007f54:	464a      	mov	r2, r9
 8007f56:	4631      	mov	r1, r6
 8007f58:	4628      	mov	r0, r5
 8007f5a:	47b8      	blx	r7
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	f43f ae56 	beq.w	8007c0e <_printf_float+0xb6>
 8007f62:	f108 0801 	add.w	r8, r8, #1
 8007f66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	4543      	cmp	r3, r8
 8007f6c:	dcf1      	bgt.n	8007f52 <_printf_float+0x3fa>
 8007f6e:	4653      	mov	r3, sl
 8007f70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f74:	e6e0      	b.n	8007d38 <_printf_float+0x1e0>
 8007f76:	f04f 0800 	mov.w	r8, #0
 8007f7a:	f104 091a 	add.w	r9, r4, #26
 8007f7e:	e7f2      	b.n	8007f66 <_printf_float+0x40e>
 8007f80:	2301      	movs	r3, #1
 8007f82:	4642      	mov	r2, r8
 8007f84:	e7df      	b.n	8007f46 <_printf_float+0x3ee>
 8007f86:	2301      	movs	r3, #1
 8007f88:	464a      	mov	r2, r9
 8007f8a:	4631      	mov	r1, r6
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	47b8      	blx	r7
 8007f90:	3001      	adds	r0, #1
 8007f92:	f43f ae3c 	beq.w	8007c0e <_printf_float+0xb6>
 8007f96:	f108 0801 	add.w	r8, r8, #1
 8007f9a:	68e3      	ldr	r3, [r4, #12]
 8007f9c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007f9e:	1a5b      	subs	r3, r3, r1
 8007fa0:	4543      	cmp	r3, r8
 8007fa2:	dcf0      	bgt.n	8007f86 <_printf_float+0x42e>
 8007fa4:	e6fd      	b.n	8007da2 <_printf_float+0x24a>
 8007fa6:	f04f 0800 	mov.w	r8, #0
 8007faa:	f104 0919 	add.w	r9, r4, #25
 8007fae:	e7f4      	b.n	8007f9a <_printf_float+0x442>

08007fb0 <_printf_common>:
 8007fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb4:	4616      	mov	r6, r2
 8007fb6:	4699      	mov	r9, r3
 8007fb8:	688a      	ldr	r2, [r1, #8]
 8007fba:	690b      	ldr	r3, [r1, #16]
 8007fbc:	4607      	mov	r7, r0
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	bfb8      	it	lt
 8007fc2:	4613      	movlt	r3, r2
 8007fc4:	6033      	str	r3, [r6, #0]
 8007fc6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fca:	460c      	mov	r4, r1
 8007fcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fd0:	b10a      	cbz	r2, 8007fd6 <_printf_common+0x26>
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	6033      	str	r3, [r6, #0]
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	0699      	lsls	r1, r3, #26
 8007fda:	bf42      	ittt	mi
 8007fdc:	6833      	ldrmi	r3, [r6, #0]
 8007fde:	3302      	addmi	r3, #2
 8007fe0:	6033      	strmi	r3, [r6, #0]
 8007fe2:	6825      	ldr	r5, [r4, #0]
 8007fe4:	f015 0506 	ands.w	r5, r5, #6
 8007fe8:	d106      	bne.n	8007ff8 <_printf_common+0x48>
 8007fea:	f104 0a19 	add.w	sl, r4, #25
 8007fee:	68e3      	ldr	r3, [r4, #12]
 8007ff0:	6832      	ldr	r2, [r6, #0]
 8007ff2:	1a9b      	subs	r3, r3, r2
 8007ff4:	42ab      	cmp	r3, r5
 8007ff6:	dc28      	bgt.n	800804a <_printf_common+0x9a>
 8007ff8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ffc:	1e13      	subs	r3, r2, #0
 8007ffe:	6822      	ldr	r2, [r4, #0]
 8008000:	bf18      	it	ne
 8008002:	2301      	movne	r3, #1
 8008004:	0692      	lsls	r2, r2, #26
 8008006:	d42d      	bmi.n	8008064 <_printf_common+0xb4>
 8008008:	4649      	mov	r1, r9
 800800a:	4638      	mov	r0, r7
 800800c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008010:	47c0      	blx	r8
 8008012:	3001      	adds	r0, #1
 8008014:	d020      	beq.n	8008058 <_printf_common+0xa8>
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	68e5      	ldr	r5, [r4, #12]
 800801a:	f003 0306 	and.w	r3, r3, #6
 800801e:	2b04      	cmp	r3, #4
 8008020:	bf18      	it	ne
 8008022:	2500      	movne	r5, #0
 8008024:	6832      	ldr	r2, [r6, #0]
 8008026:	f04f 0600 	mov.w	r6, #0
 800802a:	68a3      	ldr	r3, [r4, #8]
 800802c:	bf08      	it	eq
 800802e:	1aad      	subeq	r5, r5, r2
 8008030:	6922      	ldr	r2, [r4, #16]
 8008032:	bf08      	it	eq
 8008034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008038:	4293      	cmp	r3, r2
 800803a:	bfc4      	itt	gt
 800803c:	1a9b      	subgt	r3, r3, r2
 800803e:	18ed      	addgt	r5, r5, r3
 8008040:	341a      	adds	r4, #26
 8008042:	42b5      	cmp	r5, r6
 8008044:	d11a      	bne.n	800807c <_printf_common+0xcc>
 8008046:	2000      	movs	r0, #0
 8008048:	e008      	b.n	800805c <_printf_common+0xac>
 800804a:	2301      	movs	r3, #1
 800804c:	4652      	mov	r2, sl
 800804e:	4649      	mov	r1, r9
 8008050:	4638      	mov	r0, r7
 8008052:	47c0      	blx	r8
 8008054:	3001      	adds	r0, #1
 8008056:	d103      	bne.n	8008060 <_printf_common+0xb0>
 8008058:	f04f 30ff 	mov.w	r0, #4294967295
 800805c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008060:	3501      	adds	r5, #1
 8008062:	e7c4      	b.n	8007fee <_printf_common+0x3e>
 8008064:	2030      	movs	r0, #48	; 0x30
 8008066:	18e1      	adds	r1, r4, r3
 8008068:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800806c:	1c5a      	adds	r2, r3, #1
 800806e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008072:	4422      	add	r2, r4
 8008074:	3302      	adds	r3, #2
 8008076:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800807a:	e7c5      	b.n	8008008 <_printf_common+0x58>
 800807c:	2301      	movs	r3, #1
 800807e:	4622      	mov	r2, r4
 8008080:	4649      	mov	r1, r9
 8008082:	4638      	mov	r0, r7
 8008084:	47c0      	blx	r8
 8008086:	3001      	adds	r0, #1
 8008088:	d0e6      	beq.n	8008058 <_printf_common+0xa8>
 800808a:	3601      	adds	r6, #1
 800808c:	e7d9      	b.n	8008042 <_printf_common+0x92>
	...

08008090 <_printf_i>:
 8008090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008094:	7e0f      	ldrb	r7, [r1, #24]
 8008096:	4691      	mov	r9, r2
 8008098:	2f78      	cmp	r7, #120	; 0x78
 800809a:	4680      	mov	r8, r0
 800809c:	460c      	mov	r4, r1
 800809e:	469a      	mov	sl, r3
 80080a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80080a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80080a6:	d807      	bhi.n	80080b8 <_printf_i+0x28>
 80080a8:	2f62      	cmp	r7, #98	; 0x62
 80080aa:	d80a      	bhi.n	80080c2 <_printf_i+0x32>
 80080ac:	2f00      	cmp	r7, #0
 80080ae:	f000 80d9 	beq.w	8008264 <_printf_i+0x1d4>
 80080b2:	2f58      	cmp	r7, #88	; 0x58
 80080b4:	f000 80a4 	beq.w	8008200 <_printf_i+0x170>
 80080b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080c0:	e03a      	b.n	8008138 <_printf_i+0xa8>
 80080c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080c6:	2b15      	cmp	r3, #21
 80080c8:	d8f6      	bhi.n	80080b8 <_printf_i+0x28>
 80080ca:	a101      	add	r1, pc, #4	; (adr r1, 80080d0 <_printf_i+0x40>)
 80080cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080d0:	08008129 	.word	0x08008129
 80080d4:	0800813d 	.word	0x0800813d
 80080d8:	080080b9 	.word	0x080080b9
 80080dc:	080080b9 	.word	0x080080b9
 80080e0:	080080b9 	.word	0x080080b9
 80080e4:	080080b9 	.word	0x080080b9
 80080e8:	0800813d 	.word	0x0800813d
 80080ec:	080080b9 	.word	0x080080b9
 80080f0:	080080b9 	.word	0x080080b9
 80080f4:	080080b9 	.word	0x080080b9
 80080f8:	080080b9 	.word	0x080080b9
 80080fc:	0800824b 	.word	0x0800824b
 8008100:	0800816d 	.word	0x0800816d
 8008104:	0800822d 	.word	0x0800822d
 8008108:	080080b9 	.word	0x080080b9
 800810c:	080080b9 	.word	0x080080b9
 8008110:	0800826d 	.word	0x0800826d
 8008114:	080080b9 	.word	0x080080b9
 8008118:	0800816d 	.word	0x0800816d
 800811c:	080080b9 	.word	0x080080b9
 8008120:	080080b9 	.word	0x080080b9
 8008124:	08008235 	.word	0x08008235
 8008128:	682b      	ldr	r3, [r5, #0]
 800812a:	1d1a      	adds	r2, r3, #4
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	602a      	str	r2, [r5, #0]
 8008130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008138:	2301      	movs	r3, #1
 800813a:	e0a4      	b.n	8008286 <_printf_i+0x1f6>
 800813c:	6820      	ldr	r0, [r4, #0]
 800813e:	6829      	ldr	r1, [r5, #0]
 8008140:	0606      	lsls	r6, r0, #24
 8008142:	f101 0304 	add.w	r3, r1, #4
 8008146:	d50a      	bpl.n	800815e <_printf_i+0xce>
 8008148:	680e      	ldr	r6, [r1, #0]
 800814a:	602b      	str	r3, [r5, #0]
 800814c:	2e00      	cmp	r6, #0
 800814e:	da03      	bge.n	8008158 <_printf_i+0xc8>
 8008150:	232d      	movs	r3, #45	; 0x2d
 8008152:	4276      	negs	r6, r6
 8008154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008158:	230a      	movs	r3, #10
 800815a:	485e      	ldr	r0, [pc, #376]	; (80082d4 <_printf_i+0x244>)
 800815c:	e019      	b.n	8008192 <_printf_i+0x102>
 800815e:	680e      	ldr	r6, [r1, #0]
 8008160:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008164:	602b      	str	r3, [r5, #0]
 8008166:	bf18      	it	ne
 8008168:	b236      	sxthne	r6, r6
 800816a:	e7ef      	b.n	800814c <_printf_i+0xbc>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	6820      	ldr	r0, [r4, #0]
 8008170:	1d19      	adds	r1, r3, #4
 8008172:	6029      	str	r1, [r5, #0]
 8008174:	0601      	lsls	r1, r0, #24
 8008176:	d501      	bpl.n	800817c <_printf_i+0xec>
 8008178:	681e      	ldr	r6, [r3, #0]
 800817a:	e002      	b.n	8008182 <_printf_i+0xf2>
 800817c:	0646      	lsls	r6, r0, #25
 800817e:	d5fb      	bpl.n	8008178 <_printf_i+0xe8>
 8008180:	881e      	ldrh	r6, [r3, #0]
 8008182:	2f6f      	cmp	r7, #111	; 0x6f
 8008184:	bf0c      	ite	eq
 8008186:	2308      	moveq	r3, #8
 8008188:	230a      	movne	r3, #10
 800818a:	4852      	ldr	r0, [pc, #328]	; (80082d4 <_printf_i+0x244>)
 800818c:	2100      	movs	r1, #0
 800818e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008192:	6865      	ldr	r5, [r4, #4]
 8008194:	2d00      	cmp	r5, #0
 8008196:	bfa8      	it	ge
 8008198:	6821      	ldrge	r1, [r4, #0]
 800819a:	60a5      	str	r5, [r4, #8]
 800819c:	bfa4      	itt	ge
 800819e:	f021 0104 	bicge.w	r1, r1, #4
 80081a2:	6021      	strge	r1, [r4, #0]
 80081a4:	b90e      	cbnz	r6, 80081aa <_printf_i+0x11a>
 80081a6:	2d00      	cmp	r5, #0
 80081a8:	d04d      	beq.n	8008246 <_printf_i+0x1b6>
 80081aa:	4615      	mov	r5, r2
 80081ac:	fbb6 f1f3 	udiv	r1, r6, r3
 80081b0:	fb03 6711 	mls	r7, r3, r1, r6
 80081b4:	5dc7      	ldrb	r7, [r0, r7]
 80081b6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80081ba:	4637      	mov	r7, r6
 80081bc:	42bb      	cmp	r3, r7
 80081be:	460e      	mov	r6, r1
 80081c0:	d9f4      	bls.n	80081ac <_printf_i+0x11c>
 80081c2:	2b08      	cmp	r3, #8
 80081c4:	d10b      	bne.n	80081de <_printf_i+0x14e>
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	07de      	lsls	r6, r3, #31
 80081ca:	d508      	bpl.n	80081de <_printf_i+0x14e>
 80081cc:	6923      	ldr	r3, [r4, #16]
 80081ce:	6861      	ldr	r1, [r4, #4]
 80081d0:	4299      	cmp	r1, r3
 80081d2:	bfde      	ittt	le
 80081d4:	2330      	movle	r3, #48	; 0x30
 80081d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081de:	1b52      	subs	r2, r2, r5
 80081e0:	6122      	str	r2, [r4, #16]
 80081e2:	464b      	mov	r3, r9
 80081e4:	4621      	mov	r1, r4
 80081e6:	4640      	mov	r0, r8
 80081e8:	f8cd a000 	str.w	sl, [sp]
 80081ec:	aa03      	add	r2, sp, #12
 80081ee:	f7ff fedf 	bl	8007fb0 <_printf_common>
 80081f2:	3001      	adds	r0, #1
 80081f4:	d14c      	bne.n	8008290 <_printf_i+0x200>
 80081f6:	f04f 30ff 	mov.w	r0, #4294967295
 80081fa:	b004      	add	sp, #16
 80081fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008200:	4834      	ldr	r0, [pc, #208]	; (80082d4 <_printf_i+0x244>)
 8008202:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008206:	6829      	ldr	r1, [r5, #0]
 8008208:	6823      	ldr	r3, [r4, #0]
 800820a:	f851 6b04 	ldr.w	r6, [r1], #4
 800820e:	6029      	str	r1, [r5, #0]
 8008210:	061d      	lsls	r5, r3, #24
 8008212:	d514      	bpl.n	800823e <_printf_i+0x1ae>
 8008214:	07df      	lsls	r7, r3, #31
 8008216:	bf44      	itt	mi
 8008218:	f043 0320 	orrmi.w	r3, r3, #32
 800821c:	6023      	strmi	r3, [r4, #0]
 800821e:	b91e      	cbnz	r6, 8008228 <_printf_i+0x198>
 8008220:	6823      	ldr	r3, [r4, #0]
 8008222:	f023 0320 	bic.w	r3, r3, #32
 8008226:	6023      	str	r3, [r4, #0]
 8008228:	2310      	movs	r3, #16
 800822a:	e7af      	b.n	800818c <_printf_i+0xfc>
 800822c:	6823      	ldr	r3, [r4, #0]
 800822e:	f043 0320 	orr.w	r3, r3, #32
 8008232:	6023      	str	r3, [r4, #0]
 8008234:	2378      	movs	r3, #120	; 0x78
 8008236:	4828      	ldr	r0, [pc, #160]	; (80082d8 <_printf_i+0x248>)
 8008238:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800823c:	e7e3      	b.n	8008206 <_printf_i+0x176>
 800823e:	0659      	lsls	r1, r3, #25
 8008240:	bf48      	it	mi
 8008242:	b2b6      	uxthmi	r6, r6
 8008244:	e7e6      	b.n	8008214 <_printf_i+0x184>
 8008246:	4615      	mov	r5, r2
 8008248:	e7bb      	b.n	80081c2 <_printf_i+0x132>
 800824a:	682b      	ldr	r3, [r5, #0]
 800824c:	6826      	ldr	r6, [r4, #0]
 800824e:	1d18      	adds	r0, r3, #4
 8008250:	6961      	ldr	r1, [r4, #20]
 8008252:	6028      	str	r0, [r5, #0]
 8008254:	0635      	lsls	r5, r6, #24
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	d501      	bpl.n	800825e <_printf_i+0x1ce>
 800825a:	6019      	str	r1, [r3, #0]
 800825c:	e002      	b.n	8008264 <_printf_i+0x1d4>
 800825e:	0670      	lsls	r0, r6, #25
 8008260:	d5fb      	bpl.n	800825a <_printf_i+0x1ca>
 8008262:	8019      	strh	r1, [r3, #0]
 8008264:	2300      	movs	r3, #0
 8008266:	4615      	mov	r5, r2
 8008268:	6123      	str	r3, [r4, #16]
 800826a:	e7ba      	b.n	80081e2 <_printf_i+0x152>
 800826c:	682b      	ldr	r3, [r5, #0]
 800826e:	2100      	movs	r1, #0
 8008270:	1d1a      	adds	r2, r3, #4
 8008272:	602a      	str	r2, [r5, #0]
 8008274:	681d      	ldr	r5, [r3, #0]
 8008276:	6862      	ldr	r2, [r4, #4]
 8008278:	4628      	mov	r0, r5
 800827a:	f002 faef 	bl	800a85c <memchr>
 800827e:	b108      	cbz	r0, 8008284 <_printf_i+0x1f4>
 8008280:	1b40      	subs	r0, r0, r5
 8008282:	6060      	str	r0, [r4, #4]
 8008284:	6863      	ldr	r3, [r4, #4]
 8008286:	6123      	str	r3, [r4, #16]
 8008288:	2300      	movs	r3, #0
 800828a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800828e:	e7a8      	b.n	80081e2 <_printf_i+0x152>
 8008290:	462a      	mov	r2, r5
 8008292:	4649      	mov	r1, r9
 8008294:	4640      	mov	r0, r8
 8008296:	6923      	ldr	r3, [r4, #16]
 8008298:	47d0      	blx	sl
 800829a:	3001      	adds	r0, #1
 800829c:	d0ab      	beq.n	80081f6 <_printf_i+0x166>
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	079b      	lsls	r3, r3, #30
 80082a2:	d413      	bmi.n	80082cc <_printf_i+0x23c>
 80082a4:	68e0      	ldr	r0, [r4, #12]
 80082a6:	9b03      	ldr	r3, [sp, #12]
 80082a8:	4298      	cmp	r0, r3
 80082aa:	bfb8      	it	lt
 80082ac:	4618      	movlt	r0, r3
 80082ae:	e7a4      	b.n	80081fa <_printf_i+0x16a>
 80082b0:	2301      	movs	r3, #1
 80082b2:	4632      	mov	r2, r6
 80082b4:	4649      	mov	r1, r9
 80082b6:	4640      	mov	r0, r8
 80082b8:	47d0      	blx	sl
 80082ba:	3001      	adds	r0, #1
 80082bc:	d09b      	beq.n	80081f6 <_printf_i+0x166>
 80082be:	3501      	adds	r5, #1
 80082c0:	68e3      	ldr	r3, [r4, #12]
 80082c2:	9903      	ldr	r1, [sp, #12]
 80082c4:	1a5b      	subs	r3, r3, r1
 80082c6:	42ab      	cmp	r3, r5
 80082c8:	dcf2      	bgt.n	80082b0 <_printf_i+0x220>
 80082ca:	e7eb      	b.n	80082a4 <_printf_i+0x214>
 80082cc:	2500      	movs	r5, #0
 80082ce:	f104 0619 	add.w	r6, r4, #25
 80082d2:	e7f5      	b.n	80082c0 <_printf_i+0x230>
 80082d4:	0800c3c2 	.word	0x0800c3c2
 80082d8:	0800c3d3 	.word	0x0800c3d3

080082dc <_scanf_float>:
 80082dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e0:	b087      	sub	sp, #28
 80082e2:	9303      	str	r3, [sp, #12]
 80082e4:	688b      	ldr	r3, [r1, #8]
 80082e6:	4617      	mov	r7, r2
 80082e8:	1e5a      	subs	r2, r3, #1
 80082ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80082ee:	bf85      	ittet	hi
 80082f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80082f4:	195b      	addhi	r3, r3, r5
 80082f6:	2300      	movls	r3, #0
 80082f8:	9302      	strhi	r3, [sp, #8]
 80082fa:	bf88      	it	hi
 80082fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008300:	468b      	mov	fp, r1
 8008302:	f04f 0500 	mov.w	r5, #0
 8008306:	bf8c      	ite	hi
 8008308:	608b      	strhi	r3, [r1, #8]
 800830a:	9302      	strls	r3, [sp, #8]
 800830c:	680b      	ldr	r3, [r1, #0]
 800830e:	4680      	mov	r8, r0
 8008310:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008314:	f84b 3b1c 	str.w	r3, [fp], #28
 8008318:	460c      	mov	r4, r1
 800831a:	465e      	mov	r6, fp
 800831c:	46aa      	mov	sl, r5
 800831e:	46a9      	mov	r9, r5
 8008320:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008324:	9501      	str	r5, [sp, #4]
 8008326:	68a2      	ldr	r2, [r4, #8]
 8008328:	b152      	cbz	r2, 8008340 <_scanf_float+0x64>
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	2b4e      	cmp	r3, #78	; 0x4e
 8008330:	d864      	bhi.n	80083fc <_scanf_float+0x120>
 8008332:	2b40      	cmp	r3, #64	; 0x40
 8008334:	d83c      	bhi.n	80083b0 <_scanf_float+0xd4>
 8008336:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800833a:	b2c8      	uxtb	r0, r1
 800833c:	280e      	cmp	r0, #14
 800833e:	d93a      	bls.n	80083b6 <_scanf_float+0xda>
 8008340:	f1b9 0f00 	cmp.w	r9, #0
 8008344:	d003      	beq.n	800834e <_scanf_float+0x72>
 8008346:	6823      	ldr	r3, [r4, #0]
 8008348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008352:	f1ba 0f01 	cmp.w	sl, #1
 8008356:	f200 8113 	bhi.w	8008580 <_scanf_float+0x2a4>
 800835a:	455e      	cmp	r6, fp
 800835c:	f200 8105 	bhi.w	800856a <_scanf_float+0x28e>
 8008360:	2501      	movs	r5, #1
 8008362:	4628      	mov	r0, r5
 8008364:	b007      	add	sp, #28
 8008366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800836e:	2a0d      	cmp	r2, #13
 8008370:	d8e6      	bhi.n	8008340 <_scanf_float+0x64>
 8008372:	a101      	add	r1, pc, #4	; (adr r1, 8008378 <_scanf_float+0x9c>)
 8008374:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008378:	080084b7 	.word	0x080084b7
 800837c:	08008341 	.word	0x08008341
 8008380:	08008341 	.word	0x08008341
 8008384:	08008341 	.word	0x08008341
 8008388:	08008517 	.word	0x08008517
 800838c:	080084ef 	.word	0x080084ef
 8008390:	08008341 	.word	0x08008341
 8008394:	08008341 	.word	0x08008341
 8008398:	080084c5 	.word	0x080084c5
 800839c:	08008341 	.word	0x08008341
 80083a0:	08008341 	.word	0x08008341
 80083a4:	08008341 	.word	0x08008341
 80083a8:	08008341 	.word	0x08008341
 80083ac:	0800847d 	.word	0x0800847d
 80083b0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80083b4:	e7db      	b.n	800836e <_scanf_float+0x92>
 80083b6:	290e      	cmp	r1, #14
 80083b8:	d8c2      	bhi.n	8008340 <_scanf_float+0x64>
 80083ba:	a001      	add	r0, pc, #4	; (adr r0, 80083c0 <_scanf_float+0xe4>)
 80083bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80083c0:	0800846f 	.word	0x0800846f
 80083c4:	08008341 	.word	0x08008341
 80083c8:	0800846f 	.word	0x0800846f
 80083cc:	08008503 	.word	0x08008503
 80083d0:	08008341 	.word	0x08008341
 80083d4:	0800841d 	.word	0x0800841d
 80083d8:	08008459 	.word	0x08008459
 80083dc:	08008459 	.word	0x08008459
 80083e0:	08008459 	.word	0x08008459
 80083e4:	08008459 	.word	0x08008459
 80083e8:	08008459 	.word	0x08008459
 80083ec:	08008459 	.word	0x08008459
 80083f0:	08008459 	.word	0x08008459
 80083f4:	08008459 	.word	0x08008459
 80083f8:	08008459 	.word	0x08008459
 80083fc:	2b6e      	cmp	r3, #110	; 0x6e
 80083fe:	d809      	bhi.n	8008414 <_scanf_float+0x138>
 8008400:	2b60      	cmp	r3, #96	; 0x60
 8008402:	d8b2      	bhi.n	800836a <_scanf_float+0x8e>
 8008404:	2b54      	cmp	r3, #84	; 0x54
 8008406:	d077      	beq.n	80084f8 <_scanf_float+0x21c>
 8008408:	2b59      	cmp	r3, #89	; 0x59
 800840a:	d199      	bne.n	8008340 <_scanf_float+0x64>
 800840c:	2d07      	cmp	r5, #7
 800840e:	d197      	bne.n	8008340 <_scanf_float+0x64>
 8008410:	2508      	movs	r5, #8
 8008412:	e029      	b.n	8008468 <_scanf_float+0x18c>
 8008414:	2b74      	cmp	r3, #116	; 0x74
 8008416:	d06f      	beq.n	80084f8 <_scanf_float+0x21c>
 8008418:	2b79      	cmp	r3, #121	; 0x79
 800841a:	e7f6      	b.n	800840a <_scanf_float+0x12e>
 800841c:	6821      	ldr	r1, [r4, #0]
 800841e:	05c8      	lsls	r0, r1, #23
 8008420:	d51a      	bpl.n	8008458 <_scanf_float+0x17c>
 8008422:	9b02      	ldr	r3, [sp, #8]
 8008424:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008428:	6021      	str	r1, [r4, #0]
 800842a:	f109 0901 	add.w	r9, r9, #1
 800842e:	b11b      	cbz	r3, 8008438 <_scanf_float+0x15c>
 8008430:	3b01      	subs	r3, #1
 8008432:	3201      	adds	r2, #1
 8008434:	9302      	str	r3, [sp, #8]
 8008436:	60a2      	str	r2, [r4, #8]
 8008438:	68a3      	ldr	r3, [r4, #8]
 800843a:	3b01      	subs	r3, #1
 800843c:	60a3      	str	r3, [r4, #8]
 800843e:	6923      	ldr	r3, [r4, #16]
 8008440:	3301      	adds	r3, #1
 8008442:	6123      	str	r3, [r4, #16]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	3b01      	subs	r3, #1
 8008448:	2b00      	cmp	r3, #0
 800844a:	607b      	str	r3, [r7, #4]
 800844c:	f340 8084 	ble.w	8008558 <_scanf_float+0x27c>
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	3301      	adds	r3, #1
 8008454:	603b      	str	r3, [r7, #0]
 8008456:	e766      	b.n	8008326 <_scanf_float+0x4a>
 8008458:	eb1a 0f05 	cmn.w	sl, r5
 800845c:	f47f af70 	bne.w	8008340 <_scanf_float+0x64>
 8008460:	6822      	ldr	r2, [r4, #0]
 8008462:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008466:	6022      	str	r2, [r4, #0]
 8008468:	f806 3b01 	strb.w	r3, [r6], #1
 800846c:	e7e4      	b.n	8008438 <_scanf_float+0x15c>
 800846e:	6822      	ldr	r2, [r4, #0]
 8008470:	0610      	lsls	r0, r2, #24
 8008472:	f57f af65 	bpl.w	8008340 <_scanf_float+0x64>
 8008476:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800847a:	e7f4      	b.n	8008466 <_scanf_float+0x18a>
 800847c:	f1ba 0f00 	cmp.w	sl, #0
 8008480:	d10e      	bne.n	80084a0 <_scanf_float+0x1c4>
 8008482:	f1b9 0f00 	cmp.w	r9, #0
 8008486:	d10e      	bne.n	80084a6 <_scanf_float+0x1ca>
 8008488:	6822      	ldr	r2, [r4, #0]
 800848a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800848e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008492:	d108      	bne.n	80084a6 <_scanf_float+0x1ca>
 8008494:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008498:	f04f 0a01 	mov.w	sl, #1
 800849c:	6022      	str	r2, [r4, #0]
 800849e:	e7e3      	b.n	8008468 <_scanf_float+0x18c>
 80084a0:	f1ba 0f02 	cmp.w	sl, #2
 80084a4:	d055      	beq.n	8008552 <_scanf_float+0x276>
 80084a6:	2d01      	cmp	r5, #1
 80084a8:	d002      	beq.n	80084b0 <_scanf_float+0x1d4>
 80084aa:	2d04      	cmp	r5, #4
 80084ac:	f47f af48 	bne.w	8008340 <_scanf_float+0x64>
 80084b0:	3501      	adds	r5, #1
 80084b2:	b2ed      	uxtb	r5, r5
 80084b4:	e7d8      	b.n	8008468 <_scanf_float+0x18c>
 80084b6:	f1ba 0f01 	cmp.w	sl, #1
 80084ba:	f47f af41 	bne.w	8008340 <_scanf_float+0x64>
 80084be:	f04f 0a02 	mov.w	sl, #2
 80084c2:	e7d1      	b.n	8008468 <_scanf_float+0x18c>
 80084c4:	b97d      	cbnz	r5, 80084e6 <_scanf_float+0x20a>
 80084c6:	f1b9 0f00 	cmp.w	r9, #0
 80084ca:	f47f af3c 	bne.w	8008346 <_scanf_float+0x6a>
 80084ce:	6822      	ldr	r2, [r4, #0]
 80084d0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80084d4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80084d8:	f47f af39 	bne.w	800834e <_scanf_float+0x72>
 80084dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80084e0:	2501      	movs	r5, #1
 80084e2:	6022      	str	r2, [r4, #0]
 80084e4:	e7c0      	b.n	8008468 <_scanf_float+0x18c>
 80084e6:	2d03      	cmp	r5, #3
 80084e8:	d0e2      	beq.n	80084b0 <_scanf_float+0x1d4>
 80084ea:	2d05      	cmp	r5, #5
 80084ec:	e7de      	b.n	80084ac <_scanf_float+0x1d0>
 80084ee:	2d02      	cmp	r5, #2
 80084f0:	f47f af26 	bne.w	8008340 <_scanf_float+0x64>
 80084f4:	2503      	movs	r5, #3
 80084f6:	e7b7      	b.n	8008468 <_scanf_float+0x18c>
 80084f8:	2d06      	cmp	r5, #6
 80084fa:	f47f af21 	bne.w	8008340 <_scanf_float+0x64>
 80084fe:	2507      	movs	r5, #7
 8008500:	e7b2      	b.n	8008468 <_scanf_float+0x18c>
 8008502:	6822      	ldr	r2, [r4, #0]
 8008504:	0591      	lsls	r1, r2, #22
 8008506:	f57f af1b 	bpl.w	8008340 <_scanf_float+0x64>
 800850a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800850e:	6022      	str	r2, [r4, #0]
 8008510:	f8cd 9004 	str.w	r9, [sp, #4]
 8008514:	e7a8      	b.n	8008468 <_scanf_float+0x18c>
 8008516:	6822      	ldr	r2, [r4, #0]
 8008518:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800851c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008520:	d006      	beq.n	8008530 <_scanf_float+0x254>
 8008522:	0550      	lsls	r0, r2, #21
 8008524:	f57f af0c 	bpl.w	8008340 <_scanf_float+0x64>
 8008528:	f1b9 0f00 	cmp.w	r9, #0
 800852c:	f43f af0f 	beq.w	800834e <_scanf_float+0x72>
 8008530:	0591      	lsls	r1, r2, #22
 8008532:	bf58      	it	pl
 8008534:	9901      	ldrpl	r1, [sp, #4]
 8008536:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800853a:	bf58      	it	pl
 800853c:	eba9 0101 	subpl.w	r1, r9, r1
 8008540:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008544:	f04f 0900 	mov.w	r9, #0
 8008548:	bf58      	it	pl
 800854a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800854e:	6022      	str	r2, [r4, #0]
 8008550:	e78a      	b.n	8008468 <_scanf_float+0x18c>
 8008552:	f04f 0a03 	mov.w	sl, #3
 8008556:	e787      	b.n	8008468 <_scanf_float+0x18c>
 8008558:	4639      	mov	r1, r7
 800855a:	4640      	mov	r0, r8
 800855c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008560:	4798      	blx	r3
 8008562:	2800      	cmp	r0, #0
 8008564:	f43f aedf 	beq.w	8008326 <_scanf_float+0x4a>
 8008568:	e6ea      	b.n	8008340 <_scanf_float+0x64>
 800856a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800856e:	463a      	mov	r2, r7
 8008570:	4640      	mov	r0, r8
 8008572:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008576:	4798      	blx	r3
 8008578:	6923      	ldr	r3, [r4, #16]
 800857a:	3b01      	subs	r3, #1
 800857c:	6123      	str	r3, [r4, #16]
 800857e:	e6ec      	b.n	800835a <_scanf_float+0x7e>
 8008580:	1e6b      	subs	r3, r5, #1
 8008582:	2b06      	cmp	r3, #6
 8008584:	d825      	bhi.n	80085d2 <_scanf_float+0x2f6>
 8008586:	2d02      	cmp	r5, #2
 8008588:	d836      	bhi.n	80085f8 <_scanf_float+0x31c>
 800858a:	455e      	cmp	r6, fp
 800858c:	f67f aee8 	bls.w	8008360 <_scanf_float+0x84>
 8008590:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008594:	463a      	mov	r2, r7
 8008596:	4640      	mov	r0, r8
 8008598:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800859c:	4798      	blx	r3
 800859e:	6923      	ldr	r3, [r4, #16]
 80085a0:	3b01      	subs	r3, #1
 80085a2:	6123      	str	r3, [r4, #16]
 80085a4:	e7f1      	b.n	800858a <_scanf_float+0x2ae>
 80085a6:	9802      	ldr	r0, [sp, #8]
 80085a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085ac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80085b0:	463a      	mov	r2, r7
 80085b2:	9002      	str	r0, [sp, #8]
 80085b4:	4640      	mov	r0, r8
 80085b6:	4798      	blx	r3
 80085b8:	6923      	ldr	r3, [r4, #16]
 80085ba:	3b01      	subs	r3, #1
 80085bc:	6123      	str	r3, [r4, #16]
 80085be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085c2:	fa5f fa8a 	uxtb.w	sl, sl
 80085c6:	f1ba 0f02 	cmp.w	sl, #2
 80085ca:	d1ec      	bne.n	80085a6 <_scanf_float+0x2ca>
 80085cc:	3d03      	subs	r5, #3
 80085ce:	b2ed      	uxtb	r5, r5
 80085d0:	1b76      	subs	r6, r6, r5
 80085d2:	6823      	ldr	r3, [r4, #0]
 80085d4:	05da      	lsls	r2, r3, #23
 80085d6:	d52f      	bpl.n	8008638 <_scanf_float+0x35c>
 80085d8:	055b      	lsls	r3, r3, #21
 80085da:	d510      	bpl.n	80085fe <_scanf_float+0x322>
 80085dc:	455e      	cmp	r6, fp
 80085de:	f67f aebf 	bls.w	8008360 <_scanf_float+0x84>
 80085e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085e6:	463a      	mov	r2, r7
 80085e8:	4640      	mov	r0, r8
 80085ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80085ee:	4798      	blx	r3
 80085f0:	6923      	ldr	r3, [r4, #16]
 80085f2:	3b01      	subs	r3, #1
 80085f4:	6123      	str	r3, [r4, #16]
 80085f6:	e7f1      	b.n	80085dc <_scanf_float+0x300>
 80085f8:	46aa      	mov	sl, r5
 80085fa:	9602      	str	r6, [sp, #8]
 80085fc:	e7df      	b.n	80085be <_scanf_float+0x2e2>
 80085fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008602:	6923      	ldr	r3, [r4, #16]
 8008604:	2965      	cmp	r1, #101	; 0x65
 8008606:	f103 33ff 	add.w	r3, r3, #4294967295
 800860a:	f106 35ff 	add.w	r5, r6, #4294967295
 800860e:	6123      	str	r3, [r4, #16]
 8008610:	d00c      	beq.n	800862c <_scanf_float+0x350>
 8008612:	2945      	cmp	r1, #69	; 0x45
 8008614:	d00a      	beq.n	800862c <_scanf_float+0x350>
 8008616:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800861a:	463a      	mov	r2, r7
 800861c:	4640      	mov	r0, r8
 800861e:	4798      	blx	r3
 8008620:	6923      	ldr	r3, [r4, #16]
 8008622:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008626:	3b01      	subs	r3, #1
 8008628:	1eb5      	subs	r5, r6, #2
 800862a:	6123      	str	r3, [r4, #16]
 800862c:	463a      	mov	r2, r7
 800862e:	4640      	mov	r0, r8
 8008630:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008634:	4798      	blx	r3
 8008636:	462e      	mov	r6, r5
 8008638:	6825      	ldr	r5, [r4, #0]
 800863a:	f015 0510 	ands.w	r5, r5, #16
 800863e:	d155      	bne.n	80086ec <_scanf_float+0x410>
 8008640:	7035      	strb	r5, [r6, #0]
 8008642:	6823      	ldr	r3, [r4, #0]
 8008644:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800864c:	d11b      	bne.n	8008686 <_scanf_float+0x3aa>
 800864e:	9b01      	ldr	r3, [sp, #4]
 8008650:	454b      	cmp	r3, r9
 8008652:	eba3 0209 	sub.w	r2, r3, r9
 8008656:	d123      	bne.n	80086a0 <_scanf_float+0x3c4>
 8008658:	2200      	movs	r2, #0
 800865a:	4659      	mov	r1, fp
 800865c:	4640      	mov	r0, r8
 800865e:	f000 fe7b 	bl	8009358 <_strtod_r>
 8008662:	6822      	ldr	r2, [r4, #0]
 8008664:	9b03      	ldr	r3, [sp, #12]
 8008666:	f012 0f02 	tst.w	r2, #2
 800866a:	4606      	mov	r6, r0
 800866c:	460f      	mov	r7, r1
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	d021      	beq.n	80086b6 <_scanf_float+0x3da>
 8008672:	1d1a      	adds	r2, r3, #4
 8008674:	9903      	ldr	r1, [sp, #12]
 8008676:	600a      	str	r2, [r1, #0]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	e9c3 6700 	strd	r6, r7, [r3]
 800867e:	68e3      	ldr	r3, [r4, #12]
 8008680:	3301      	adds	r3, #1
 8008682:	60e3      	str	r3, [r4, #12]
 8008684:	e66d      	b.n	8008362 <_scanf_float+0x86>
 8008686:	9b04      	ldr	r3, [sp, #16]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d0e5      	beq.n	8008658 <_scanf_float+0x37c>
 800868c:	9905      	ldr	r1, [sp, #20]
 800868e:	230a      	movs	r3, #10
 8008690:	462a      	mov	r2, r5
 8008692:	4640      	mov	r0, r8
 8008694:	3101      	adds	r1, #1
 8008696:	f000 fee1 	bl	800945c <_strtol_r>
 800869a:	9b04      	ldr	r3, [sp, #16]
 800869c:	9e05      	ldr	r6, [sp, #20]
 800869e:	1ac2      	subs	r2, r0, r3
 80086a0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80086a4:	429e      	cmp	r6, r3
 80086a6:	bf28      	it	cs
 80086a8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80086ac:	4630      	mov	r0, r6
 80086ae:	4910      	ldr	r1, [pc, #64]	; (80086f0 <_scanf_float+0x414>)
 80086b0:	f000 f826 	bl	8008700 <siprintf>
 80086b4:	e7d0      	b.n	8008658 <_scanf_float+0x37c>
 80086b6:	f012 0f04 	tst.w	r2, #4
 80086ba:	f103 0204 	add.w	r2, r3, #4
 80086be:	d1d9      	bne.n	8008674 <_scanf_float+0x398>
 80086c0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80086c4:	f8cc 2000 	str.w	r2, [ip]
 80086c8:	f8d3 8000 	ldr.w	r8, [r3]
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	f7f8 fabc 	bl	8000c4c <__aeabi_dcmpun>
 80086d4:	b128      	cbz	r0, 80086e2 <_scanf_float+0x406>
 80086d6:	4807      	ldr	r0, [pc, #28]	; (80086f4 <_scanf_float+0x418>)
 80086d8:	f000 f80e 	bl	80086f8 <nanf>
 80086dc:	f8c8 0000 	str.w	r0, [r8]
 80086e0:	e7cd      	b.n	800867e <_scanf_float+0x3a2>
 80086e2:	4630      	mov	r0, r6
 80086e4:	4639      	mov	r1, r7
 80086e6:	f7f8 fb0f 	bl	8000d08 <__aeabi_d2f>
 80086ea:	e7f7      	b.n	80086dc <_scanf_float+0x400>
 80086ec:	2500      	movs	r5, #0
 80086ee:	e638      	b.n	8008362 <_scanf_float+0x86>
 80086f0:	0800c3e4 	.word	0x0800c3e4
 80086f4:	0800c7f0 	.word	0x0800c7f0

080086f8 <nanf>:
 80086f8:	4800      	ldr	r0, [pc, #0]	; (80086fc <nanf+0x4>)
 80086fa:	4770      	bx	lr
 80086fc:	7fc00000 	.word	0x7fc00000

08008700 <siprintf>:
 8008700:	b40e      	push	{r1, r2, r3}
 8008702:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008706:	b500      	push	{lr}
 8008708:	b09c      	sub	sp, #112	; 0x70
 800870a:	ab1d      	add	r3, sp, #116	; 0x74
 800870c:	9002      	str	r0, [sp, #8]
 800870e:	9006      	str	r0, [sp, #24]
 8008710:	9107      	str	r1, [sp, #28]
 8008712:	9104      	str	r1, [sp, #16]
 8008714:	4808      	ldr	r0, [pc, #32]	; (8008738 <siprintf+0x38>)
 8008716:	4909      	ldr	r1, [pc, #36]	; (800873c <siprintf+0x3c>)
 8008718:	f853 2b04 	ldr.w	r2, [r3], #4
 800871c:	9105      	str	r1, [sp, #20]
 800871e:	6800      	ldr	r0, [r0, #0]
 8008720:	a902      	add	r1, sp, #8
 8008722:	9301      	str	r3, [sp, #4]
 8008724:	f002 feba 	bl	800b49c <_svfiprintf_r>
 8008728:	2200      	movs	r2, #0
 800872a:	9b02      	ldr	r3, [sp, #8]
 800872c:	701a      	strb	r2, [r3, #0]
 800872e:	b01c      	add	sp, #112	; 0x70
 8008730:	f85d eb04 	ldr.w	lr, [sp], #4
 8008734:	b003      	add	sp, #12
 8008736:	4770      	bx	lr
 8008738:	2000000c 	.word	0x2000000c
 800873c:	ffff0208 	.word	0xffff0208

08008740 <sulp>:
 8008740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008744:	460f      	mov	r7, r1
 8008746:	4690      	mov	r8, r2
 8008748:	f002 fc14 	bl	800af74 <__ulp>
 800874c:	4604      	mov	r4, r0
 800874e:	460d      	mov	r5, r1
 8008750:	f1b8 0f00 	cmp.w	r8, #0
 8008754:	d011      	beq.n	800877a <sulp+0x3a>
 8008756:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800875a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800875e:	2b00      	cmp	r3, #0
 8008760:	dd0b      	ble.n	800877a <sulp+0x3a>
 8008762:	2400      	movs	r4, #0
 8008764:	051b      	lsls	r3, r3, #20
 8008766:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800876a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800876e:	4622      	mov	r2, r4
 8008770:	462b      	mov	r3, r5
 8008772:	f7f7 ffd1 	bl	8000718 <__aeabi_dmul>
 8008776:	4604      	mov	r4, r0
 8008778:	460d      	mov	r5, r1
 800877a:	4620      	mov	r0, r4
 800877c:	4629      	mov	r1, r5
 800877e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008782:	0000      	movs	r0, r0
 8008784:	0000      	movs	r0, r0
	...

08008788 <_strtod_l>:
 8008788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878c:	469b      	mov	fp, r3
 800878e:	2300      	movs	r3, #0
 8008790:	b09f      	sub	sp, #124	; 0x7c
 8008792:	931a      	str	r3, [sp, #104]	; 0x68
 8008794:	4b9e      	ldr	r3, [pc, #632]	; (8008a10 <_strtod_l+0x288>)
 8008796:	4682      	mov	sl, r0
 8008798:	681f      	ldr	r7, [r3, #0]
 800879a:	460e      	mov	r6, r1
 800879c:	4638      	mov	r0, r7
 800879e:	9215      	str	r2, [sp, #84]	; 0x54
 80087a0:	f7f7 fd42 	bl	8000228 <strlen>
 80087a4:	f04f 0800 	mov.w	r8, #0
 80087a8:	4604      	mov	r4, r0
 80087aa:	f04f 0900 	mov.w	r9, #0
 80087ae:	9619      	str	r6, [sp, #100]	; 0x64
 80087b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80087b2:	781a      	ldrb	r2, [r3, #0]
 80087b4:	2a2b      	cmp	r2, #43	; 0x2b
 80087b6:	d04c      	beq.n	8008852 <_strtod_l+0xca>
 80087b8:	d83a      	bhi.n	8008830 <_strtod_l+0xa8>
 80087ba:	2a0d      	cmp	r2, #13
 80087bc:	d833      	bhi.n	8008826 <_strtod_l+0x9e>
 80087be:	2a08      	cmp	r2, #8
 80087c0:	d833      	bhi.n	800882a <_strtod_l+0xa2>
 80087c2:	2a00      	cmp	r2, #0
 80087c4:	d03d      	beq.n	8008842 <_strtod_l+0xba>
 80087c6:	2300      	movs	r3, #0
 80087c8:	930a      	str	r3, [sp, #40]	; 0x28
 80087ca:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80087cc:	782b      	ldrb	r3, [r5, #0]
 80087ce:	2b30      	cmp	r3, #48	; 0x30
 80087d0:	f040 80aa 	bne.w	8008928 <_strtod_l+0x1a0>
 80087d4:	786b      	ldrb	r3, [r5, #1]
 80087d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80087da:	2b58      	cmp	r3, #88	; 0x58
 80087dc:	d166      	bne.n	80088ac <_strtod_l+0x124>
 80087de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e0:	4650      	mov	r0, sl
 80087e2:	9301      	str	r3, [sp, #4]
 80087e4:	ab1a      	add	r3, sp, #104	; 0x68
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	4a8a      	ldr	r2, [pc, #552]	; (8008a14 <_strtod_l+0x28c>)
 80087ea:	f8cd b008 	str.w	fp, [sp, #8]
 80087ee:	ab1b      	add	r3, sp, #108	; 0x6c
 80087f0:	a919      	add	r1, sp, #100	; 0x64
 80087f2:	f001 fd17 	bl	800a224 <__gethex>
 80087f6:	f010 0607 	ands.w	r6, r0, #7
 80087fa:	4604      	mov	r4, r0
 80087fc:	d005      	beq.n	800880a <_strtod_l+0x82>
 80087fe:	2e06      	cmp	r6, #6
 8008800:	d129      	bne.n	8008856 <_strtod_l+0xce>
 8008802:	2300      	movs	r3, #0
 8008804:	3501      	adds	r5, #1
 8008806:	9519      	str	r5, [sp, #100]	; 0x64
 8008808:	930a      	str	r3, [sp, #40]	; 0x28
 800880a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800880c:	2b00      	cmp	r3, #0
 800880e:	f040 858a 	bne.w	8009326 <_strtod_l+0xb9e>
 8008812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008814:	b1d3      	cbz	r3, 800884c <_strtod_l+0xc4>
 8008816:	4642      	mov	r2, r8
 8008818:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800881c:	4610      	mov	r0, r2
 800881e:	4619      	mov	r1, r3
 8008820:	b01f      	add	sp, #124	; 0x7c
 8008822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008826:	2a20      	cmp	r2, #32
 8008828:	d1cd      	bne.n	80087c6 <_strtod_l+0x3e>
 800882a:	3301      	adds	r3, #1
 800882c:	9319      	str	r3, [sp, #100]	; 0x64
 800882e:	e7bf      	b.n	80087b0 <_strtod_l+0x28>
 8008830:	2a2d      	cmp	r2, #45	; 0x2d
 8008832:	d1c8      	bne.n	80087c6 <_strtod_l+0x3e>
 8008834:	2201      	movs	r2, #1
 8008836:	920a      	str	r2, [sp, #40]	; 0x28
 8008838:	1c5a      	adds	r2, r3, #1
 800883a:	9219      	str	r2, [sp, #100]	; 0x64
 800883c:	785b      	ldrb	r3, [r3, #1]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1c3      	bne.n	80087ca <_strtod_l+0x42>
 8008842:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008844:	9619      	str	r6, [sp, #100]	; 0x64
 8008846:	2b00      	cmp	r3, #0
 8008848:	f040 856b 	bne.w	8009322 <_strtod_l+0xb9a>
 800884c:	4642      	mov	r2, r8
 800884e:	464b      	mov	r3, r9
 8008850:	e7e4      	b.n	800881c <_strtod_l+0x94>
 8008852:	2200      	movs	r2, #0
 8008854:	e7ef      	b.n	8008836 <_strtod_l+0xae>
 8008856:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008858:	b13a      	cbz	r2, 800886a <_strtod_l+0xe2>
 800885a:	2135      	movs	r1, #53	; 0x35
 800885c:	a81c      	add	r0, sp, #112	; 0x70
 800885e:	f002 fc8d 	bl	800b17c <__copybits>
 8008862:	4650      	mov	r0, sl
 8008864:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008866:	f002 f855 	bl	800a914 <_Bfree>
 800886a:	3e01      	subs	r6, #1
 800886c:	2e04      	cmp	r6, #4
 800886e:	d806      	bhi.n	800887e <_strtod_l+0xf6>
 8008870:	e8df f006 	tbb	[pc, r6]
 8008874:	1714030a 	.word	0x1714030a
 8008878:	0a          	.byte	0x0a
 8008879:	00          	.byte	0x00
 800887a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800887e:	0721      	lsls	r1, r4, #28
 8008880:	d5c3      	bpl.n	800880a <_strtod_l+0x82>
 8008882:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008886:	e7c0      	b.n	800880a <_strtod_l+0x82>
 8008888:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800888a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800888e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008892:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008896:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800889a:	e7f0      	b.n	800887e <_strtod_l+0xf6>
 800889c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008a18 <_strtod_l+0x290>
 80088a0:	e7ed      	b.n	800887e <_strtod_l+0xf6>
 80088a2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80088a6:	f04f 38ff 	mov.w	r8, #4294967295
 80088aa:	e7e8      	b.n	800887e <_strtod_l+0xf6>
 80088ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80088ae:	1c5a      	adds	r2, r3, #1
 80088b0:	9219      	str	r2, [sp, #100]	; 0x64
 80088b2:	785b      	ldrb	r3, [r3, #1]
 80088b4:	2b30      	cmp	r3, #48	; 0x30
 80088b6:	d0f9      	beq.n	80088ac <_strtod_l+0x124>
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d0a6      	beq.n	800880a <_strtod_l+0x82>
 80088bc:	2301      	movs	r3, #1
 80088be:	9307      	str	r3, [sp, #28]
 80088c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80088c2:	220a      	movs	r2, #10
 80088c4:	9308      	str	r3, [sp, #32]
 80088c6:	2300      	movs	r3, #0
 80088c8:	469b      	mov	fp, r3
 80088ca:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80088ce:	9819      	ldr	r0, [sp, #100]	; 0x64
 80088d0:	7805      	ldrb	r5, [r0, #0]
 80088d2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80088d6:	b2d9      	uxtb	r1, r3
 80088d8:	2909      	cmp	r1, #9
 80088da:	d927      	bls.n	800892c <_strtod_l+0x1a4>
 80088dc:	4622      	mov	r2, r4
 80088de:	4639      	mov	r1, r7
 80088e0:	f002 fef2 	bl	800b6c8 <strncmp>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	d033      	beq.n	8008950 <_strtod_l+0x1c8>
 80088e8:	2000      	movs	r0, #0
 80088ea:	462a      	mov	r2, r5
 80088ec:	465c      	mov	r4, fp
 80088ee:	4603      	mov	r3, r0
 80088f0:	9004      	str	r0, [sp, #16]
 80088f2:	2a65      	cmp	r2, #101	; 0x65
 80088f4:	d001      	beq.n	80088fa <_strtod_l+0x172>
 80088f6:	2a45      	cmp	r2, #69	; 0x45
 80088f8:	d114      	bne.n	8008924 <_strtod_l+0x19c>
 80088fa:	b91c      	cbnz	r4, 8008904 <_strtod_l+0x17c>
 80088fc:	9a07      	ldr	r2, [sp, #28]
 80088fe:	4302      	orrs	r2, r0
 8008900:	d09f      	beq.n	8008842 <_strtod_l+0xba>
 8008902:	2400      	movs	r4, #0
 8008904:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008906:	1c72      	adds	r2, r6, #1
 8008908:	9219      	str	r2, [sp, #100]	; 0x64
 800890a:	7872      	ldrb	r2, [r6, #1]
 800890c:	2a2b      	cmp	r2, #43	; 0x2b
 800890e:	d079      	beq.n	8008a04 <_strtod_l+0x27c>
 8008910:	2a2d      	cmp	r2, #45	; 0x2d
 8008912:	f000 8083 	beq.w	8008a1c <_strtod_l+0x294>
 8008916:	2700      	movs	r7, #0
 8008918:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800891c:	2909      	cmp	r1, #9
 800891e:	f240 8083 	bls.w	8008a28 <_strtod_l+0x2a0>
 8008922:	9619      	str	r6, [sp, #100]	; 0x64
 8008924:	2500      	movs	r5, #0
 8008926:	e09f      	b.n	8008a68 <_strtod_l+0x2e0>
 8008928:	2300      	movs	r3, #0
 800892a:	e7c8      	b.n	80088be <_strtod_l+0x136>
 800892c:	f1bb 0f08 	cmp.w	fp, #8
 8008930:	bfd5      	itete	le
 8008932:	9906      	ldrle	r1, [sp, #24]
 8008934:	9905      	ldrgt	r1, [sp, #20]
 8008936:	fb02 3301 	mlale	r3, r2, r1, r3
 800893a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800893e:	f100 0001 	add.w	r0, r0, #1
 8008942:	bfd4      	ite	le
 8008944:	9306      	strle	r3, [sp, #24]
 8008946:	9305      	strgt	r3, [sp, #20]
 8008948:	f10b 0b01 	add.w	fp, fp, #1
 800894c:	9019      	str	r0, [sp, #100]	; 0x64
 800894e:	e7be      	b.n	80088ce <_strtod_l+0x146>
 8008950:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008952:	191a      	adds	r2, r3, r4
 8008954:	9219      	str	r2, [sp, #100]	; 0x64
 8008956:	5d1a      	ldrb	r2, [r3, r4]
 8008958:	f1bb 0f00 	cmp.w	fp, #0
 800895c:	d036      	beq.n	80089cc <_strtod_l+0x244>
 800895e:	465c      	mov	r4, fp
 8008960:	9004      	str	r0, [sp, #16]
 8008962:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008966:	2b09      	cmp	r3, #9
 8008968:	d912      	bls.n	8008990 <_strtod_l+0x208>
 800896a:	2301      	movs	r3, #1
 800896c:	e7c1      	b.n	80088f2 <_strtod_l+0x16a>
 800896e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008970:	3001      	adds	r0, #1
 8008972:	1c5a      	adds	r2, r3, #1
 8008974:	9219      	str	r2, [sp, #100]	; 0x64
 8008976:	785a      	ldrb	r2, [r3, #1]
 8008978:	2a30      	cmp	r2, #48	; 0x30
 800897a:	d0f8      	beq.n	800896e <_strtod_l+0x1e6>
 800897c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008980:	2b08      	cmp	r3, #8
 8008982:	f200 84d5 	bhi.w	8009330 <_strtod_l+0xba8>
 8008986:	9004      	str	r0, [sp, #16]
 8008988:	2000      	movs	r0, #0
 800898a:	4604      	mov	r4, r0
 800898c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800898e:	9308      	str	r3, [sp, #32]
 8008990:	3a30      	subs	r2, #48	; 0x30
 8008992:	f100 0301 	add.w	r3, r0, #1
 8008996:	d013      	beq.n	80089c0 <_strtod_l+0x238>
 8008998:	9904      	ldr	r1, [sp, #16]
 800899a:	1905      	adds	r5, r0, r4
 800899c:	4419      	add	r1, r3
 800899e:	9104      	str	r1, [sp, #16]
 80089a0:	4623      	mov	r3, r4
 80089a2:	210a      	movs	r1, #10
 80089a4:	42ab      	cmp	r3, r5
 80089a6:	d113      	bne.n	80089d0 <_strtod_l+0x248>
 80089a8:	1823      	adds	r3, r4, r0
 80089aa:	2b08      	cmp	r3, #8
 80089ac:	f104 0401 	add.w	r4, r4, #1
 80089b0:	4404      	add	r4, r0
 80089b2:	dc1b      	bgt.n	80089ec <_strtod_l+0x264>
 80089b4:	230a      	movs	r3, #10
 80089b6:	9906      	ldr	r1, [sp, #24]
 80089b8:	fb03 2301 	mla	r3, r3, r1, r2
 80089bc:	9306      	str	r3, [sp, #24]
 80089be:	2300      	movs	r3, #0
 80089c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80089c2:	4618      	mov	r0, r3
 80089c4:	1c51      	adds	r1, r2, #1
 80089c6:	9119      	str	r1, [sp, #100]	; 0x64
 80089c8:	7852      	ldrb	r2, [r2, #1]
 80089ca:	e7ca      	b.n	8008962 <_strtod_l+0x1da>
 80089cc:	4658      	mov	r0, fp
 80089ce:	e7d3      	b.n	8008978 <_strtod_l+0x1f0>
 80089d0:	2b08      	cmp	r3, #8
 80089d2:	dc04      	bgt.n	80089de <_strtod_l+0x256>
 80089d4:	9f06      	ldr	r7, [sp, #24]
 80089d6:	434f      	muls	r7, r1
 80089d8:	9706      	str	r7, [sp, #24]
 80089da:	3301      	adds	r3, #1
 80089dc:	e7e2      	b.n	80089a4 <_strtod_l+0x21c>
 80089de:	1c5f      	adds	r7, r3, #1
 80089e0:	2f10      	cmp	r7, #16
 80089e2:	bfde      	ittt	le
 80089e4:	9f05      	ldrle	r7, [sp, #20]
 80089e6:	434f      	mulle	r7, r1
 80089e8:	9705      	strle	r7, [sp, #20]
 80089ea:	e7f6      	b.n	80089da <_strtod_l+0x252>
 80089ec:	2c10      	cmp	r4, #16
 80089ee:	bfdf      	itttt	le
 80089f0:	230a      	movle	r3, #10
 80089f2:	9905      	ldrle	r1, [sp, #20]
 80089f4:	fb03 2301 	mlale	r3, r3, r1, r2
 80089f8:	9305      	strle	r3, [sp, #20]
 80089fa:	e7e0      	b.n	80089be <_strtod_l+0x236>
 80089fc:	2300      	movs	r3, #0
 80089fe:	9304      	str	r3, [sp, #16]
 8008a00:	2301      	movs	r3, #1
 8008a02:	e77b      	b.n	80088fc <_strtod_l+0x174>
 8008a04:	2700      	movs	r7, #0
 8008a06:	1cb2      	adds	r2, r6, #2
 8008a08:	9219      	str	r2, [sp, #100]	; 0x64
 8008a0a:	78b2      	ldrb	r2, [r6, #2]
 8008a0c:	e784      	b.n	8008918 <_strtod_l+0x190>
 8008a0e:	bf00      	nop
 8008a10:	0800c638 	.word	0x0800c638
 8008a14:	0800c3ec 	.word	0x0800c3ec
 8008a18:	7ff00000 	.word	0x7ff00000
 8008a1c:	2701      	movs	r7, #1
 8008a1e:	e7f2      	b.n	8008a06 <_strtod_l+0x27e>
 8008a20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008a22:	1c51      	adds	r1, r2, #1
 8008a24:	9119      	str	r1, [sp, #100]	; 0x64
 8008a26:	7852      	ldrb	r2, [r2, #1]
 8008a28:	2a30      	cmp	r2, #48	; 0x30
 8008a2a:	d0f9      	beq.n	8008a20 <_strtod_l+0x298>
 8008a2c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008a30:	2908      	cmp	r1, #8
 8008a32:	f63f af77 	bhi.w	8008924 <_strtod_l+0x19c>
 8008a36:	f04f 0e0a 	mov.w	lr, #10
 8008a3a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008a3e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008a40:	9209      	str	r2, [sp, #36]	; 0x24
 8008a42:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008a44:	1c51      	adds	r1, r2, #1
 8008a46:	9119      	str	r1, [sp, #100]	; 0x64
 8008a48:	7852      	ldrb	r2, [r2, #1]
 8008a4a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008a4e:	2d09      	cmp	r5, #9
 8008a50:	d935      	bls.n	8008abe <_strtod_l+0x336>
 8008a52:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008a54:	1b49      	subs	r1, r1, r5
 8008a56:	2908      	cmp	r1, #8
 8008a58:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008a5c:	dc02      	bgt.n	8008a64 <_strtod_l+0x2dc>
 8008a5e:	4565      	cmp	r5, ip
 8008a60:	bfa8      	it	ge
 8008a62:	4665      	movge	r5, ip
 8008a64:	b107      	cbz	r7, 8008a68 <_strtod_l+0x2e0>
 8008a66:	426d      	negs	r5, r5
 8008a68:	2c00      	cmp	r4, #0
 8008a6a:	d14c      	bne.n	8008b06 <_strtod_l+0x37e>
 8008a6c:	9907      	ldr	r1, [sp, #28]
 8008a6e:	4301      	orrs	r1, r0
 8008a70:	f47f aecb 	bne.w	800880a <_strtod_l+0x82>
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f47f aee4 	bne.w	8008842 <_strtod_l+0xba>
 8008a7a:	2a69      	cmp	r2, #105	; 0x69
 8008a7c:	d026      	beq.n	8008acc <_strtod_l+0x344>
 8008a7e:	dc23      	bgt.n	8008ac8 <_strtod_l+0x340>
 8008a80:	2a49      	cmp	r2, #73	; 0x49
 8008a82:	d023      	beq.n	8008acc <_strtod_l+0x344>
 8008a84:	2a4e      	cmp	r2, #78	; 0x4e
 8008a86:	f47f aedc 	bne.w	8008842 <_strtod_l+0xba>
 8008a8a:	499d      	ldr	r1, [pc, #628]	; (8008d00 <_strtod_l+0x578>)
 8008a8c:	a819      	add	r0, sp, #100	; 0x64
 8008a8e:	f001 fe17 	bl	800a6c0 <__match>
 8008a92:	2800      	cmp	r0, #0
 8008a94:	f43f aed5 	beq.w	8008842 <_strtod_l+0xba>
 8008a98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	2b28      	cmp	r3, #40	; 0x28
 8008a9e:	d12c      	bne.n	8008afa <_strtod_l+0x372>
 8008aa0:	4998      	ldr	r1, [pc, #608]	; (8008d04 <_strtod_l+0x57c>)
 8008aa2:	aa1c      	add	r2, sp, #112	; 0x70
 8008aa4:	a819      	add	r0, sp, #100	; 0x64
 8008aa6:	f001 fe1f 	bl	800a6e8 <__hexnan>
 8008aaa:	2805      	cmp	r0, #5
 8008aac:	d125      	bne.n	8008afa <_strtod_l+0x372>
 8008aae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ab0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008ab4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008ab8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008abc:	e6a5      	b.n	800880a <_strtod_l+0x82>
 8008abe:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8008ac2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8008ac6:	e7bc      	b.n	8008a42 <_strtod_l+0x2ba>
 8008ac8:	2a6e      	cmp	r2, #110	; 0x6e
 8008aca:	e7dc      	b.n	8008a86 <_strtod_l+0x2fe>
 8008acc:	498e      	ldr	r1, [pc, #568]	; (8008d08 <_strtod_l+0x580>)
 8008ace:	a819      	add	r0, sp, #100	; 0x64
 8008ad0:	f001 fdf6 	bl	800a6c0 <__match>
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	f43f aeb4 	beq.w	8008842 <_strtod_l+0xba>
 8008ada:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008adc:	498b      	ldr	r1, [pc, #556]	; (8008d0c <_strtod_l+0x584>)
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	a819      	add	r0, sp, #100	; 0x64
 8008ae2:	9319      	str	r3, [sp, #100]	; 0x64
 8008ae4:	f001 fdec 	bl	800a6c0 <__match>
 8008ae8:	b910      	cbnz	r0, 8008af0 <_strtod_l+0x368>
 8008aea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008aec:	3301      	adds	r3, #1
 8008aee:	9319      	str	r3, [sp, #100]	; 0x64
 8008af0:	f04f 0800 	mov.w	r8, #0
 8008af4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8008d10 <_strtod_l+0x588>
 8008af8:	e687      	b.n	800880a <_strtod_l+0x82>
 8008afa:	4886      	ldr	r0, [pc, #536]	; (8008d14 <_strtod_l+0x58c>)
 8008afc:	f002 fdce 	bl	800b69c <nan>
 8008b00:	4680      	mov	r8, r0
 8008b02:	4689      	mov	r9, r1
 8008b04:	e681      	b.n	800880a <_strtod_l+0x82>
 8008b06:	9b04      	ldr	r3, [sp, #16]
 8008b08:	f1bb 0f00 	cmp.w	fp, #0
 8008b0c:	bf08      	it	eq
 8008b0e:	46a3      	moveq	fp, r4
 8008b10:	1aeb      	subs	r3, r5, r3
 8008b12:	2c10      	cmp	r4, #16
 8008b14:	9806      	ldr	r0, [sp, #24]
 8008b16:	4626      	mov	r6, r4
 8008b18:	9307      	str	r3, [sp, #28]
 8008b1a:	bfa8      	it	ge
 8008b1c:	2610      	movge	r6, #16
 8008b1e:	f7f7 fd81 	bl	8000624 <__aeabi_ui2d>
 8008b22:	2c09      	cmp	r4, #9
 8008b24:	4680      	mov	r8, r0
 8008b26:	4689      	mov	r9, r1
 8008b28:	dd13      	ble.n	8008b52 <_strtod_l+0x3ca>
 8008b2a:	4b7b      	ldr	r3, [pc, #492]	; (8008d18 <_strtod_l+0x590>)
 8008b2c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008b30:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008b34:	f7f7 fdf0 	bl	8000718 <__aeabi_dmul>
 8008b38:	4680      	mov	r8, r0
 8008b3a:	9805      	ldr	r0, [sp, #20]
 8008b3c:	4689      	mov	r9, r1
 8008b3e:	f7f7 fd71 	bl	8000624 <__aeabi_ui2d>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	4640      	mov	r0, r8
 8008b48:	4649      	mov	r1, r9
 8008b4a:	f7f7 fc2f 	bl	80003ac <__adddf3>
 8008b4e:	4680      	mov	r8, r0
 8008b50:	4689      	mov	r9, r1
 8008b52:	2c0f      	cmp	r4, #15
 8008b54:	dc36      	bgt.n	8008bc4 <_strtod_l+0x43c>
 8008b56:	9b07      	ldr	r3, [sp, #28]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f43f ae56 	beq.w	800880a <_strtod_l+0x82>
 8008b5e:	dd22      	ble.n	8008ba6 <_strtod_l+0x41e>
 8008b60:	2b16      	cmp	r3, #22
 8008b62:	dc09      	bgt.n	8008b78 <_strtod_l+0x3f0>
 8008b64:	496c      	ldr	r1, [pc, #432]	; (8008d18 <_strtod_l+0x590>)
 8008b66:	4642      	mov	r2, r8
 8008b68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008b6c:	464b      	mov	r3, r9
 8008b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b72:	f7f7 fdd1 	bl	8000718 <__aeabi_dmul>
 8008b76:	e7c3      	b.n	8008b00 <_strtod_l+0x378>
 8008b78:	9a07      	ldr	r2, [sp, #28]
 8008b7a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	db20      	blt.n	8008bc4 <_strtod_l+0x43c>
 8008b82:	4d65      	ldr	r5, [pc, #404]	; (8008d18 <_strtod_l+0x590>)
 8008b84:	f1c4 040f 	rsb	r4, r4, #15
 8008b88:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008b8c:	4642      	mov	r2, r8
 8008b8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b92:	464b      	mov	r3, r9
 8008b94:	f7f7 fdc0 	bl	8000718 <__aeabi_dmul>
 8008b98:	9b07      	ldr	r3, [sp, #28]
 8008b9a:	1b1c      	subs	r4, r3, r4
 8008b9c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008ba0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ba4:	e7e5      	b.n	8008b72 <_strtod_l+0x3ea>
 8008ba6:	9b07      	ldr	r3, [sp, #28]
 8008ba8:	3316      	adds	r3, #22
 8008baa:	db0b      	blt.n	8008bc4 <_strtod_l+0x43c>
 8008bac:	9b04      	ldr	r3, [sp, #16]
 8008bae:	4640      	mov	r0, r8
 8008bb0:	1b5d      	subs	r5, r3, r5
 8008bb2:	4b59      	ldr	r3, [pc, #356]	; (8008d18 <_strtod_l+0x590>)
 8008bb4:	4649      	mov	r1, r9
 8008bb6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008bba:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008bbe:	f7f7 fed5 	bl	800096c <__aeabi_ddiv>
 8008bc2:	e79d      	b.n	8008b00 <_strtod_l+0x378>
 8008bc4:	9b07      	ldr	r3, [sp, #28]
 8008bc6:	1ba6      	subs	r6, r4, r6
 8008bc8:	441e      	add	r6, r3
 8008bca:	2e00      	cmp	r6, #0
 8008bcc:	dd74      	ble.n	8008cb8 <_strtod_l+0x530>
 8008bce:	f016 030f 	ands.w	r3, r6, #15
 8008bd2:	d00a      	beq.n	8008bea <_strtod_l+0x462>
 8008bd4:	4950      	ldr	r1, [pc, #320]	; (8008d18 <_strtod_l+0x590>)
 8008bd6:	4642      	mov	r2, r8
 8008bd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008bdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008be0:	464b      	mov	r3, r9
 8008be2:	f7f7 fd99 	bl	8000718 <__aeabi_dmul>
 8008be6:	4680      	mov	r8, r0
 8008be8:	4689      	mov	r9, r1
 8008bea:	f036 060f 	bics.w	r6, r6, #15
 8008bee:	d052      	beq.n	8008c96 <_strtod_l+0x50e>
 8008bf0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8008bf4:	dd27      	ble.n	8008c46 <_strtod_l+0x4be>
 8008bf6:	f04f 0b00 	mov.w	fp, #0
 8008bfa:	f8cd b010 	str.w	fp, [sp, #16]
 8008bfe:	f8cd b020 	str.w	fp, [sp, #32]
 8008c02:	f8cd b018 	str.w	fp, [sp, #24]
 8008c06:	2322      	movs	r3, #34	; 0x22
 8008c08:	f04f 0800 	mov.w	r8, #0
 8008c0c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8008d10 <_strtod_l+0x588>
 8008c10:	f8ca 3000 	str.w	r3, [sl]
 8008c14:	9b08      	ldr	r3, [sp, #32]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f43f adf7 	beq.w	800880a <_strtod_l+0x82>
 8008c1c:	4650      	mov	r0, sl
 8008c1e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008c20:	f001 fe78 	bl	800a914 <_Bfree>
 8008c24:	4650      	mov	r0, sl
 8008c26:	9906      	ldr	r1, [sp, #24]
 8008c28:	f001 fe74 	bl	800a914 <_Bfree>
 8008c2c:	4650      	mov	r0, sl
 8008c2e:	9904      	ldr	r1, [sp, #16]
 8008c30:	f001 fe70 	bl	800a914 <_Bfree>
 8008c34:	4650      	mov	r0, sl
 8008c36:	9908      	ldr	r1, [sp, #32]
 8008c38:	f001 fe6c 	bl	800a914 <_Bfree>
 8008c3c:	4659      	mov	r1, fp
 8008c3e:	4650      	mov	r0, sl
 8008c40:	f001 fe68 	bl	800a914 <_Bfree>
 8008c44:	e5e1      	b.n	800880a <_strtod_l+0x82>
 8008c46:	4b35      	ldr	r3, [pc, #212]	; (8008d1c <_strtod_l+0x594>)
 8008c48:	4640      	mov	r0, r8
 8008c4a:	9305      	str	r3, [sp, #20]
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	4649      	mov	r1, r9
 8008c50:	461f      	mov	r7, r3
 8008c52:	1136      	asrs	r6, r6, #4
 8008c54:	2e01      	cmp	r6, #1
 8008c56:	dc21      	bgt.n	8008c9c <_strtod_l+0x514>
 8008c58:	b10b      	cbz	r3, 8008c5e <_strtod_l+0x4d6>
 8008c5a:	4680      	mov	r8, r0
 8008c5c:	4689      	mov	r9, r1
 8008c5e:	4b2f      	ldr	r3, [pc, #188]	; (8008d1c <_strtod_l+0x594>)
 8008c60:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008c64:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008c68:	4642      	mov	r2, r8
 8008c6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c6e:	464b      	mov	r3, r9
 8008c70:	f7f7 fd52 	bl	8000718 <__aeabi_dmul>
 8008c74:	4b26      	ldr	r3, [pc, #152]	; (8008d10 <_strtod_l+0x588>)
 8008c76:	460a      	mov	r2, r1
 8008c78:	400b      	ands	r3, r1
 8008c7a:	4929      	ldr	r1, [pc, #164]	; (8008d20 <_strtod_l+0x598>)
 8008c7c:	4680      	mov	r8, r0
 8008c7e:	428b      	cmp	r3, r1
 8008c80:	d8b9      	bhi.n	8008bf6 <_strtod_l+0x46e>
 8008c82:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008c86:	428b      	cmp	r3, r1
 8008c88:	bf86      	itte	hi
 8008c8a:	f04f 38ff 	movhi.w	r8, #4294967295
 8008c8e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8008d24 <_strtod_l+0x59c>
 8008c92:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008c96:	2300      	movs	r3, #0
 8008c98:	9305      	str	r3, [sp, #20]
 8008c9a:	e07f      	b.n	8008d9c <_strtod_l+0x614>
 8008c9c:	07f2      	lsls	r2, r6, #31
 8008c9e:	d505      	bpl.n	8008cac <_strtod_l+0x524>
 8008ca0:	9b05      	ldr	r3, [sp, #20]
 8008ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca6:	f7f7 fd37 	bl	8000718 <__aeabi_dmul>
 8008caa:	2301      	movs	r3, #1
 8008cac:	9a05      	ldr	r2, [sp, #20]
 8008cae:	3701      	adds	r7, #1
 8008cb0:	3208      	adds	r2, #8
 8008cb2:	1076      	asrs	r6, r6, #1
 8008cb4:	9205      	str	r2, [sp, #20]
 8008cb6:	e7cd      	b.n	8008c54 <_strtod_l+0x4cc>
 8008cb8:	d0ed      	beq.n	8008c96 <_strtod_l+0x50e>
 8008cba:	4276      	negs	r6, r6
 8008cbc:	f016 020f 	ands.w	r2, r6, #15
 8008cc0:	d00a      	beq.n	8008cd8 <_strtod_l+0x550>
 8008cc2:	4b15      	ldr	r3, [pc, #84]	; (8008d18 <_strtod_l+0x590>)
 8008cc4:	4640      	mov	r0, r8
 8008cc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cca:	4649      	mov	r1, r9
 8008ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd0:	f7f7 fe4c 	bl	800096c <__aeabi_ddiv>
 8008cd4:	4680      	mov	r8, r0
 8008cd6:	4689      	mov	r9, r1
 8008cd8:	1136      	asrs	r6, r6, #4
 8008cda:	d0dc      	beq.n	8008c96 <_strtod_l+0x50e>
 8008cdc:	2e1f      	cmp	r6, #31
 8008cde:	dd23      	ble.n	8008d28 <_strtod_l+0x5a0>
 8008ce0:	f04f 0b00 	mov.w	fp, #0
 8008ce4:	f8cd b010 	str.w	fp, [sp, #16]
 8008ce8:	f8cd b020 	str.w	fp, [sp, #32]
 8008cec:	f8cd b018 	str.w	fp, [sp, #24]
 8008cf0:	2322      	movs	r3, #34	; 0x22
 8008cf2:	f04f 0800 	mov.w	r8, #0
 8008cf6:	f04f 0900 	mov.w	r9, #0
 8008cfa:	f8ca 3000 	str.w	r3, [sl]
 8008cfe:	e789      	b.n	8008c14 <_strtod_l+0x48c>
 8008d00:	0800c3bd 	.word	0x0800c3bd
 8008d04:	0800c400 	.word	0x0800c400
 8008d08:	0800c3b5 	.word	0x0800c3b5
 8008d0c:	0800c544 	.word	0x0800c544
 8008d10:	7ff00000 	.word	0x7ff00000
 8008d14:	0800c7f0 	.word	0x0800c7f0
 8008d18:	0800c6d0 	.word	0x0800c6d0
 8008d1c:	0800c6a8 	.word	0x0800c6a8
 8008d20:	7ca00000 	.word	0x7ca00000
 8008d24:	7fefffff 	.word	0x7fefffff
 8008d28:	f016 0310 	ands.w	r3, r6, #16
 8008d2c:	bf18      	it	ne
 8008d2e:	236a      	movne	r3, #106	; 0x6a
 8008d30:	4640      	mov	r0, r8
 8008d32:	9305      	str	r3, [sp, #20]
 8008d34:	4649      	mov	r1, r9
 8008d36:	2300      	movs	r3, #0
 8008d38:	4fb0      	ldr	r7, [pc, #704]	; (8008ffc <_strtod_l+0x874>)
 8008d3a:	07f2      	lsls	r2, r6, #31
 8008d3c:	d504      	bpl.n	8008d48 <_strtod_l+0x5c0>
 8008d3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d42:	f7f7 fce9 	bl	8000718 <__aeabi_dmul>
 8008d46:	2301      	movs	r3, #1
 8008d48:	1076      	asrs	r6, r6, #1
 8008d4a:	f107 0708 	add.w	r7, r7, #8
 8008d4e:	d1f4      	bne.n	8008d3a <_strtod_l+0x5b2>
 8008d50:	b10b      	cbz	r3, 8008d56 <_strtod_l+0x5ce>
 8008d52:	4680      	mov	r8, r0
 8008d54:	4689      	mov	r9, r1
 8008d56:	9b05      	ldr	r3, [sp, #20]
 8008d58:	b1c3      	cbz	r3, 8008d8c <_strtod_l+0x604>
 8008d5a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008d5e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	4649      	mov	r1, r9
 8008d66:	dd11      	ble.n	8008d8c <_strtod_l+0x604>
 8008d68:	2b1f      	cmp	r3, #31
 8008d6a:	f340 8127 	ble.w	8008fbc <_strtod_l+0x834>
 8008d6e:	2b34      	cmp	r3, #52	; 0x34
 8008d70:	bfd8      	it	le
 8008d72:	f04f 33ff 	movle.w	r3, #4294967295
 8008d76:	f04f 0800 	mov.w	r8, #0
 8008d7a:	bfcf      	iteee	gt
 8008d7c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008d80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008d84:	fa03 f202 	lslle.w	r2, r3, r2
 8008d88:	ea02 0901 	andle.w	r9, r2, r1
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	2300      	movs	r3, #0
 8008d90:	4640      	mov	r0, r8
 8008d92:	4649      	mov	r1, r9
 8008d94:	f7f7 ff28 	bl	8000be8 <__aeabi_dcmpeq>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d1a1      	bne.n	8008ce0 <_strtod_l+0x558>
 8008d9c:	9b06      	ldr	r3, [sp, #24]
 8008d9e:	465a      	mov	r2, fp
 8008da0:	9300      	str	r3, [sp, #0]
 8008da2:	4650      	mov	r0, sl
 8008da4:	4623      	mov	r3, r4
 8008da6:	9908      	ldr	r1, [sp, #32]
 8008da8:	f001 fe1c 	bl	800a9e4 <__s2b>
 8008dac:	9008      	str	r0, [sp, #32]
 8008dae:	2800      	cmp	r0, #0
 8008db0:	f43f af21 	beq.w	8008bf6 <_strtod_l+0x46e>
 8008db4:	9b04      	ldr	r3, [sp, #16]
 8008db6:	f04f 0b00 	mov.w	fp, #0
 8008dba:	1b5d      	subs	r5, r3, r5
 8008dbc:	9b07      	ldr	r3, [sp, #28]
 8008dbe:	f8cd b010 	str.w	fp, [sp, #16]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	bfb4      	ite	lt
 8008dc6:	462b      	movlt	r3, r5
 8008dc8:	2300      	movge	r3, #0
 8008dca:	930e      	str	r3, [sp, #56]	; 0x38
 8008dcc:	9b07      	ldr	r3, [sp, #28]
 8008dce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008dd2:	9314      	str	r3, [sp, #80]	; 0x50
 8008dd4:	9b08      	ldr	r3, [sp, #32]
 8008dd6:	4650      	mov	r0, sl
 8008dd8:	6859      	ldr	r1, [r3, #4]
 8008dda:	f001 fd5b 	bl	800a894 <_Balloc>
 8008dde:	9006      	str	r0, [sp, #24]
 8008de0:	2800      	cmp	r0, #0
 8008de2:	f43f af10 	beq.w	8008c06 <_strtod_l+0x47e>
 8008de6:	9b08      	ldr	r3, [sp, #32]
 8008de8:	300c      	adds	r0, #12
 8008dea:	691a      	ldr	r2, [r3, #16]
 8008dec:	f103 010c 	add.w	r1, r3, #12
 8008df0:	3202      	adds	r2, #2
 8008df2:	0092      	lsls	r2, r2, #2
 8008df4:	f001 fd40 	bl	800a878 <memcpy>
 8008df8:	ab1c      	add	r3, sp, #112	; 0x70
 8008dfa:	9301      	str	r3, [sp, #4]
 8008dfc:	ab1b      	add	r3, sp, #108	; 0x6c
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	4642      	mov	r2, r8
 8008e02:	464b      	mov	r3, r9
 8008e04:	4650      	mov	r0, sl
 8008e06:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8008e0a:	f002 f92d 	bl	800b068 <__d2b>
 8008e0e:	901a      	str	r0, [sp, #104]	; 0x68
 8008e10:	2800      	cmp	r0, #0
 8008e12:	f43f aef8 	beq.w	8008c06 <_strtod_l+0x47e>
 8008e16:	2101      	movs	r1, #1
 8008e18:	4650      	mov	r0, sl
 8008e1a:	f001 fe7b 	bl	800ab14 <__i2b>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	9004      	str	r0, [sp, #16]
 8008e22:	2800      	cmp	r0, #0
 8008e24:	f43f aeef 	beq.w	8008c06 <_strtod_l+0x47e>
 8008e28:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008e2a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008e2c:	2d00      	cmp	r5, #0
 8008e2e:	bfab      	itete	ge
 8008e30:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008e32:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8008e34:	18ee      	addge	r6, r5, r3
 8008e36:	1b5c      	sublt	r4, r3, r5
 8008e38:	9b05      	ldr	r3, [sp, #20]
 8008e3a:	bfa8      	it	ge
 8008e3c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8008e3e:	eba5 0503 	sub.w	r5, r5, r3
 8008e42:	4415      	add	r5, r2
 8008e44:	4b6e      	ldr	r3, [pc, #440]	; (8009000 <_strtod_l+0x878>)
 8008e46:	f105 35ff 	add.w	r5, r5, #4294967295
 8008e4a:	bfb8      	it	lt
 8008e4c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008e4e:	429d      	cmp	r5, r3
 8008e50:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008e54:	f280 80c4 	bge.w	8008fe0 <_strtod_l+0x858>
 8008e58:	1b5b      	subs	r3, r3, r5
 8008e5a:	2b1f      	cmp	r3, #31
 8008e5c:	f04f 0701 	mov.w	r7, #1
 8008e60:	eba2 0203 	sub.w	r2, r2, r3
 8008e64:	f300 80b1 	bgt.w	8008fca <_strtod_l+0x842>
 8008e68:	2500      	movs	r5, #0
 8008e6a:	fa07 f303 	lsl.w	r3, r7, r3
 8008e6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e70:	18b7      	adds	r7, r6, r2
 8008e72:	9b05      	ldr	r3, [sp, #20]
 8008e74:	42be      	cmp	r6, r7
 8008e76:	4414      	add	r4, r2
 8008e78:	441c      	add	r4, r3
 8008e7a:	4633      	mov	r3, r6
 8008e7c:	bfa8      	it	ge
 8008e7e:	463b      	movge	r3, r7
 8008e80:	42a3      	cmp	r3, r4
 8008e82:	bfa8      	it	ge
 8008e84:	4623      	movge	r3, r4
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	bfc2      	ittt	gt
 8008e8a:	1aff      	subgt	r7, r7, r3
 8008e8c:	1ae4      	subgt	r4, r4, r3
 8008e8e:	1af6      	subgt	r6, r6, r3
 8008e90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	dd17      	ble.n	8008ec6 <_strtod_l+0x73e>
 8008e96:	461a      	mov	r2, r3
 8008e98:	4650      	mov	r0, sl
 8008e9a:	9904      	ldr	r1, [sp, #16]
 8008e9c:	f001 fef8 	bl	800ac90 <__pow5mult>
 8008ea0:	9004      	str	r0, [sp, #16]
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	f43f aeaf 	beq.w	8008c06 <_strtod_l+0x47e>
 8008ea8:	4601      	mov	r1, r0
 8008eaa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008eac:	4650      	mov	r0, sl
 8008eae:	f001 fe47 	bl	800ab40 <__multiply>
 8008eb2:	9009      	str	r0, [sp, #36]	; 0x24
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	f43f aea6 	beq.w	8008c06 <_strtod_l+0x47e>
 8008eba:	4650      	mov	r0, sl
 8008ebc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008ebe:	f001 fd29 	bl	800a914 <_Bfree>
 8008ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec4:	931a      	str	r3, [sp, #104]	; 0x68
 8008ec6:	2f00      	cmp	r7, #0
 8008ec8:	f300 808e 	bgt.w	8008fe8 <_strtod_l+0x860>
 8008ecc:	9b07      	ldr	r3, [sp, #28]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	dd08      	ble.n	8008ee4 <_strtod_l+0x75c>
 8008ed2:	4650      	mov	r0, sl
 8008ed4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ed6:	9906      	ldr	r1, [sp, #24]
 8008ed8:	f001 feda 	bl	800ac90 <__pow5mult>
 8008edc:	9006      	str	r0, [sp, #24]
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	f43f ae91 	beq.w	8008c06 <_strtod_l+0x47e>
 8008ee4:	2c00      	cmp	r4, #0
 8008ee6:	dd08      	ble.n	8008efa <_strtod_l+0x772>
 8008ee8:	4622      	mov	r2, r4
 8008eea:	4650      	mov	r0, sl
 8008eec:	9906      	ldr	r1, [sp, #24]
 8008eee:	f001 ff29 	bl	800ad44 <__lshift>
 8008ef2:	9006      	str	r0, [sp, #24]
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	f43f ae86 	beq.w	8008c06 <_strtod_l+0x47e>
 8008efa:	2e00      	cmp	r6, #0
 8008efc:	dd08      	ble.n	8008f10 <_strtod_l+0x788>
 8008efe:	4632      	mov	r2, r6
 8008f00:	4650      	mov	r0, sl
 8008f02:	9904      	ldr	r1, [sp, #16]
 8008f04:	f001 ff1e 	bl	800ad44 <__lshift>
 8008f08:	9004      	str	r0, [sp, #16]
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	f43f ae7b 	beq.w	8008c06 <_strtod_l+0x47e>
 8008f10:	4650      	mov	r0, sl
 8008f12:	9a06      	ldr	r2, [sp, #24]
 8008f14:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008f16:	f001 ffa1 	bl	800ae5c <__mdiff>
 8008f1a:	4683      	mov	fp, r0
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	f43f ae72 	beq.w	8008c06 <_strtod_l+0x47e>
 8008f22:	2400      	movs	r4, #0
 8008f24:	68c3      	ldr	r3, [r0, #12]
 8008f26:	9904      	ldr	r1, [sp, #16]
 8008f28:	60c4      	str	r4, [r0, #12]
 8008f2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f2c:	f001 ff7a 	bl	800ae24 <__mcmp>
 8008f30:	42a0      	cmp	r0, r4
 8008f32:	da6b      	bge.n	800900c <_strtod_l+0x884>
 8008f34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f36:	ea53 0308 	orrs.w	r3, r3, r8
 8008f3a:	f040 8091 	bne.w	8009060 <_strtod_l+0x8d8>
 8008f3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f040 808c 	bne.w	8009060 <_strtod_l+0x8d8>
 8008f48:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f4c:	0d1b      	lsrs	r3, r3, #20
 8008f4e:	051b      	lsls	r3, r3, #20
 8008f50:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008f54:	f240 8084 	bls.w	8009060 <_strtod_l+0x8d8>
 8008f58:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008f5c:	b91b      	cbnz	r3, 8008f66 <_strtod_l+0x7de>
 8008f5e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	dd7c      	ble.n	8009060 <_strtod_l+0x8d8>
 8008f66:	4659      	mov	r1, fp
 8008f68:	2201      	movs	r2, #1
 8008f6a:	4650      	mov	r0, sl
 8008f6c:	f001 feea 	bl	800ad44 <__lshift>
 8008f70:	9904      	ldr	r1, [sp, #16]
 8008f72:	4683      	mov	fp, r0
 8008f74:	f001 ff56 	bl	800ae24 <__mcmp>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	dd71      	ble.n	8009060 <_strtod_l+0x8d8>
 8008f7c:	9905      	ldr	r1, [sp, #20]
 8008f7e:	464b      	mov	r3, r9
 8008f80:	4a20      	ldr	r2, [pc, #128]	; (8009004 <_strtod_l+0x87c>)
 8008f82:	2900      	cmp	r1, #0
 8008f84:	f000 808c 	beq.w	80090a0 <_strtod_l+0x918>
 8008f88:	ea02 0109 	and.w	r1, r2, r9
 8008f8c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008f90:	f300 8086 	bgt.w	80090a0 <_strtod_l+0x918>
 8008f94:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008f98:	f77f aeaa 	ble.w	8008cf0 <_strtod_l+0x568>
 8008f9c:	4640      	mov	r0, r8
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	4b19      	ldr	r3, [pc, #100]	; (8009008 <_strtod_l+0x880>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f7f7 fbb8 	bl	8000718 <__aeabi_dmul>
 8008fa8:	460b      	mov	r3, r1
 8008faa:	4303      	orrs	r3, r0
 8008fac:	bf08      	it	eq
 8008fae:	2322      	moveq	r3, #34	; 0x22
 8008fb0:	4680      	mov	r8, r0
 8008fb2:	4689      	mov	r9, r1
 8008fb4:	bf08      	it	eq
 8008fb6:	f8ca 3000 	streq.w	r3, [sl]
 8008fba:	e62f      	b.n	8008c1c <_strtod_l+0x494>
 8008fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8008fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc4:	ea03 0808 	and.w	r8, r3, r8
 8008fc8:	e6e0      	b.n	8008d8c <_strtod_l+0x604>
 8008fca:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008fce:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8008fd2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008fd6:	35e2      	adds	r5, #226	; 0xe2
 8008fd8:	fa07 f505 	lsl.w	r5, r7, r5
 8008fdc:	970f      	str	r7, [sp, #60]	; 0x3c
 8008fde:	e747      	b.n	8008e70 <_strtod_l+0x6e8>
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	2500      	movs	r5, #0
 8008fe4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fe6:	e743      	b.n	8008e70 <_strtod_l+0x6e8>
 8008fe8:	463a      	mov	r2, r7
 8008fea:	4650      	mov	r0, sl
 8008fec:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008fee:	f001 fea9 	bl	800ad44 <__lshift>
 8008ff2:	901a      	str	r0, [sp, #104]	; 0x68
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	f47f af69 	bne.w	8008ecc <_strtod_l+0x744>
 8008ffa:	e604      	b.n	8008c06 <_strtod_l+0x47e>
 8008ffc:	0800c418 	.word	0x0800c418
 8009000:	fffffc02 	.word	0xfffffc02
 8009004:	7ff00000 	.word	0x7ff00000
 8009008:	39500000 	.word	0x39500000
 800900c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009010:	d165      	bne.n	80090de <_strtod_l+0x956>
 8009012:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009014:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009018:	b35a      	cbz	r2, 8009072 <_strtod_l+0x8ea>
 800901a:	4a99      	ldr	r2, [pc, #612]	; (8009280 <_strtod_l+0xaf8>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d12b      	bne.n	8009078 <_strtod_l+0x8f0>
 8009020:	9b05      	ldr	r3, [sp, #20]
 8009022:	4641      	mov	r1, r8
 8009024:	b303      	cbz	r3, 8009068 <_strtod_l+0x8e0>
 8009026:	464a      	mov	r2, r9
 8009028:	4b96      	ldr	r3, [pc, #600]	; (8009284 <_strtod_l+0xafc>)
 800902a:	4013      	ands	r3, r2
 800902c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009030:	f04f 32ff 	mov.w	r2, #4294967295
 8009034:	d81b      	bhi.n	800906e <_strtod_l+0x8e6>
 8009036:	0d1b      	lsrs	r3, r3, #20
 8009038:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800903c:	fa02 f303 	lsl.w	r3, r2, r3
 8009040:	4299      	cmp	r1, r3
 8009042:	d119      	bne.n	8009078 <_strtod_l+0x8f0>
 8009044:	4b90      	ldr	r3, [pc, #576]	; (8009288 <_strtod_l+0xb00>)
 8009046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009048:	429a      	cmp	r2, r3
 800904a:	d102      	bne.n	8009052 <_strtod_l+0x8ca>
 800904c:	3101      	adds	r1, #1
 800904e:	f43f adda 	beq.w	8008c06 <_strtod_l+0x47e>
 8009052:	f04f 0800 	mov.w	r8, #0
 8009056:	4b8b      	ldr	r3, [pc, #556]	; (8009284 <_strtod_l+0xafc>)
 8009058:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800905a:	401a      	ands	r2, r3
 800905c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009060:	9b05      	ldr	r3, [sp, #20]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d19a      	bne.n	8008f9c <_strtod_l+0x814>
 8009066:	e5d9      	b.n	8008c1c <_strtod_l+0x494>
 8009068:	f04f 33ff 	mov.w	r3, #4294967295
 800906c:	e7e8      	b.n	8009040 <_strtod_l+0x8b8>
 800906e:	4613      	mov	r3, r2
 8009070:	e7e6      	b.n	8009040 <_strtod_l+0x8b8>
 8009072:	ea53 0308 	orrs.w	r3, r3, r8
 8009076:	d081      	beq.n	8008f7c <_strtod_l+0x7f4>
 8009078:	b1e5      	cbz	r5, 80090b4 <_strtod_l+0x92c>
 800907a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800907c:	421d      	tst	r5, r3
 800907e:	d0ef      	beq.n	8009060 <_strtod_l+0x8d8>
 8009080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009082:	4640      	mov	r0, r8
 8009084:	4649      	mov	r1, r9
 8009086:	9a05      	ldr	r2, [sp, #20]
 8009088:	b1c3      	cbz	r3, 80090bc <_strtod_l+0x934>
 800908a:	f7ff fb59 	bl	8008740 <sulp>
 800908e:	4602      	mov	r2, r0
 8009090:	460b      	mov	r3, r1
 8009092:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009096:	f7f7 f989 	bl	80003ac <__adddf3>
 800909a:	4680      	mov	r8, r0
 800909c:	4689      	mov	r9, r1
 800909e:	e7df      	b.n	8009060 <_strtod_l+0x8d8>
 80090a0:	4013      	ands	r3, r2
 80090a2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80090a6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80090aa:	f04f 38ff 	mov.w	r8, #4294967295
 80090ae:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80090b2:	e7d5      	b.n	8009060 <_strtod_l+0x8d8>
 80090b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090b6:	ea13 0f08 	tst.w	r3, r8
 80090ba:	e7e0      	b.n	800907e <_strtod_l+0x8f6>
 80090bc:	f7ff fb40 	bl	8008740 <sulp>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80090c8:	f7f7 f96e 	bl	80003a8 <__aeabi_dsub>
 80090cc:	2200      	movs	r2, #0
 80090ce:	2300      	movs	r3, #0
 80090d0:	4680      	mov	r8, r0
 80090d2:	4689      	mov	r9, r1
 80090d4:	f7f7 fd88 	bl	8000be8 <__aeabi_dcmpeq>
 80090d8:	2800      	cmp	r0, #0
 80090da:	d0c1      	beq.n	8009060 <_strtod_l+0x8d8>
 80090dc:	e608      	b.n	8008cf0 <_strtod_l+0x568>
 80090de:	4658      	mov	r0, fp
 80090e0:	9904      	ldr	r1, [sp, #16]
 80090e2:	f002 f81d 	bl	800b120 <__ratio>
 80090e6:	2200      	movs	r2, #0
 80090e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80090ec:	4606      	mov	r6, r0
 80090ee:	460f      	mov	r7, r1
 80090f0:	f7f7 fd8e 	bl	8000c10 <__aeabi_dcmple>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	d070      	beq.n	80091da <_strtod_l+0xa52>
 80090f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d042      	beq.n	8009184 <_strtod_l+0x9fc>
 80090fe:	2600      	movs	r6, #0
 8009100:	4f62      	ldr	r7, [pc, #392]	; (800928c <_strtod_l+0xb04>)
 8009102:	4d62      	ldr	r5, [pc, #392]	; (800928c <_strtod_l+0xb04>)
 8009104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009106:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800910a:	0d1b      	lsrs	r3, r3, #20
 800910c:	051b      	lsls	r3, r3, #20
 800910e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009110:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009112:	4b5f      	ldr	r3, [pc, #380]	; (8009290 <_strtod_l+0xb08>)
 8009114:	429a      	cmp	r2, r3
 8009116:	f040 80c3 	bne.w	80092a0 <_strtod_l+0xb18>
 800911a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800911c:	4640      	mov	r0, r8
 800911e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009122:	4649      	mov	r1, r9
 8009124:	f001 ff26 	bl	800af74 <__ulp>
 8009128:	4602      	mov	r2, r0
 800912a:	460b      	mov	r3, r1
 800912c:	4630      	mov	r0, r6
 800912e:	4639      	mov	r1, r7
 8009130:	f7f7 faf2 	bl	8000718 <__aeabi_dmul>
 8009134:	4642      	mov	r2, r8
 8009136:	464b      	mov	r3, r9
 8009138:	f7f7 f938 	bl	80003ac <__adddf3>
 800913c:	460b      	mov	r3, r1
 800913e:	4951      	ldr	r1, [pc, #324]	; (8009284 <_strtod_l+0xafc>)
 8009140:	4a54      	ldr	r2, [pc, #336]	; (8009294 <_strtod_l+0xb0c>)
 8009142:	4019      	ands	r1, r3
 8009144:	4291      	cmp	r1, r2
 8009146:	4680      	mov	r8, r0
 8009148:	d95d      	bls.n	8009206 <_strtod_l+0xa7e>
 800914a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800914c:	4b4e      	ldr	r3, [pc, #312]	; (8009288 <_strtod_l+0xb00>)
 800914e:	429a      	cmp	r2, r3
 8009150:	d103      	bne.n	800915a <_strtod_l+0x9d2>
 8009152:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009154:	3301      	adds	r3, #1
 8009156:	f43f ad56 	beq.w	8008c06 <_strtod_l+0x47e>
 800915a:	f04f 38ff 	mov.w	r8, #4294967295
 800915e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009288 <_strtod_l+0xb00>
 8009162:	4650      	mov	r0, sl
 8009164:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009166:	f001 fbd5 	bl	800a914 <_Bfree>
 800916a:	4650      	mov	r0, sl
 800916c:	9906      	ldr	r1, [sp, #24]
 800916e:	f001 fbd1 	bl	800a914 <_Bfree>
 8009172:	4650      	mov	r0, sl
 8009174:	9904      	ldr	r1, [sp, #16]
 8009176:	f001 fbcd 	bl	800a914 <_Bfree>
 800917a:	4659      	mov	r1, fp
 800917c:	4650      	mov	r0, sl
 800917e:	f001 fbc9 	bl	800a914 <_Bfree>
 8009182:	e627      	b.n	8008dd4 <_strtod_l+0x64c>
 8009184:	f1b8 0f00 	cmp.w	r8, #0
 8009188:	d119      	bne.n	80091be <_strtod_l+0xa36>
 800918a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800918c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009190:	b9e3      	cbnz	r3, 80091cc <_strtod_l+0xa44>
 8009192:	2200      	movs	r2, #0
 8009194:	4630      	mov	r0, r6
 8009196:	4639      	mov	r1, r7
 8009198:	4b3c      	ldr	r3, [pc, #240]	; (800928c <_strtod_l+0xb04>)
 800919a:	f7f7 fd2f 	bl	8000bfc <__aeabi_dcmplt>
 800919e:	b9c8      	cbnz	r0, 80091d4 <_strtod_l+0xa4c>
 80091a0:	2200      	movs	r2, #0
 80091a2:	4630      	mov	r0, r6
 80091a4:	4639      	mov	r1, r7
 80091a6:	4b3c      	ldr	r3, [pc, #240]	; (8009298 <_strtod_l+0xb10>)
 80091a8:	f7f7 fab6 	bl	8000718 <__aeabi_dmul>
 80091ac:	4604      	mov	r4, r0
 80091ae:	460d      	mov	r5, r1
 80091b0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80091b4:	9416      	str	r4, [sp, #88]	; 0x58
 80091b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80091b8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80091bc:	e7a2      	b.n	8009104 <_strtod_l+0x97c>
 80091be:	f1b8 0f01 	cmp.w	r8, #1
 80091c2:	d103      	bne.n	80091cc <_strtod_l+0xa44>
 80091c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f43f ad92 	beq.w	8008cf0 <_strtod_l+0x568>
 80091cc:	2600      	movs	r6, #0
 80091ce:	2400      	movs	r4, #0
 80091d0:	4f32      	ldr	r7, [pc, #200]	; (800929c <_strtod_l+0xb14>)
 80091d2:	e796      	b.n	8009102 <_strtod_l+0x97a>
 80091d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80091d6:	4d30      	ldr	r5, [pc, #192]	; (8009298 <_strtod_l+0xb10>)
 80091d8:	e7ea      	b.n	80091b0 <_strtod_l+0xa28>
 80091da:	4b2f      	ldr	r3, [pc, #188]	; (8009298 <_strtod_l+0xb10>)
 80091dc:	2200      	movs	r2, #0
 80091de:	4630      	mov	r0, r6
 80091e0:	4639      	mov	r1, r7
 80091e2:	f7f7 fa99 	bl	8000718 <__aeabi_dmul>
 80091e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091e8:	4604      	mov	r4, r0
 80091ea:	460d      	mov	r5, r1
 80091ec:	b933      	cbnz	r3, 80091fc <_strtod_l+0xa74>
 80091ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091f2:	9010      	str	r0, [sp, #64]	; 0x40
 80091f4:	9311      	str	r3, [sp, #68]	; 0x44
 80091f6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80091fa:	e783      	b.n	8009104 <_strtod_l+0x97c>
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009204:	e7f7      	b.n	80091f6 <_strtod_l+0xa6e>
 8009206:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800920a:	9b05      	ldr	r3, [sp, #20]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1a8      	bne.n	8009162 <_strtod_l+0x9da>
 8009210:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009214:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009216:	0d1b      	lsrs	r3, r3, #20
 8009218:	051b      	lsls	r3, r3, #20
 800921a:	429a      	cmp	r2, r3
 800921c:	d1a1      	bne.n	8009162 <_strtod_l+0x9da>
 800921e:	4620      	mov	r0, r4
 8009220:	4629      	mov	r1, r5
 8009222:	f7f7 fecf 	bl	8000fc4 <__aeabi_d2lz>
 8009226:	f7f7 fa49 	bl	80006bc <__aeabi_l2d>
 800922a:	4602      	mov	r2, r0
 800922c:	460b      	mov	r3, r1
 800922e:	4620      	mov	r0, r4
 8009230:	4629      	mov	r1, r5
 8009232:	f7f7 f8b9 	bl	80003a8 <__aeabi_dsub>
 8009236:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009238:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800923c:	ea43 0308 	orr.w	r3, r3, r8
 8009240:	4313      	orrs	r3, r2
 8009242:	4604      	mov	r4, r0
 8009244:	460d      	mov	r5, r1
 8009246:	d066      	beq.n	8009316 <_strtod_l+0xb8e>
 8009248:	a309      	add	r3, pc, #36	; (adr r3, 8009270 <_strtod_l+0xae8>)
 800924a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924e:	f7f7 fcd5 	bl	8000bfc <__aeabi_dcmplt>
 8009252:	2800      	cmp	r0, #0
 8009254:	f47f ace2 	bne.w	8008c1c <_strtod_l+0x494>
 8009258:	a307      	add	r3, pc, #28	; (adr r3, 8009278 <_strtod_l+0xaf0>)
 800925a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925e:	4620      	mov	r0, r4
 8009260:	4629      	mov	r1, r5
 8009262:	f7f7 fce9 	bl	8000c38 <__aeabi_dcmpgt>
 8009266:	2800      	cmp	r0, #0
 8009268:	f43f af7b 	beq.w	8009162 <_strtod_l+0x9da>
 800926c:	e4d6      	b.n	8008c1c <_strtod_l+0x494>
 800926e:	bf00      	nop
 8009270:	94a03595 	.word	0x94a03595
 8009274:	3fdfffff 	.word	0x3fdfffff
 8009278:	35afe535 	.word	0x35afe535
 800927c:	3fe00000 	.word	0x3fe00000
 8009280:	000fffff 	.word	0x000fffff
 8009284:	7ff00000 	.word	0x7ff00000
 8009288:	7fefffff 	.word	0x7fefffff
 800928c:	3ff00000 	.word	0x3ff00000
 8009290:	7fe00000 	.word	0x7fe00000
 8009294:	7c9fffff 	.word	0x7c9fffff
 8009298:	3fe00000 	.word	0x3fe00000
 800929c:	bff00000 	.word	0xbff00000
 80092a0:	9b05      	ldr	r3, [sp, #20]
 80092a2:	b313      	cbz	r3, 80092ea <_strtod_l+0xb62>
 80092a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80092aa:	d81e      	bhi.n	80092ea <_strtod_l+0xb62>
 80092ac:	a326      	add	r3, pc, #152	; (adr r3, 8009348 <_strtod_l+0xbc0>)
 80092ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b2:	4620      	mov	r0, r4
 80092b4:	4629      	mov	r1, r5
 80092b6:	f7f7 fcab 	bl	8000c10 <__aeabi_dcmple>
 80092ba:	b190      	cbz	r0, 80092e2 <_strtod_l+0xb5a>
 80092bc:	4629      	mov	r1, r5
 80092be:	4620      	mov	r0, r4
 80092c0:	f7f7 fd02 	bl	8000cc8 <__aeabi_d2uiz>
 80092c4:	2801      	cmp	r0, #1
 80092c6:	bf38      	it	cc
 80092c8:	2001      	movcc	r0, #1
 80092ca:	f7f7 f9ab 	bl	8000624 <__aeabi_ui2d>
 80092ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092d0:	4604      	mov	r4, r0
 80092d2:	460d      	mov	r5, r1
 80092d4:	b9d3      	cbnz	r3, 800930c <_strtod_l+0xb84>
 80092d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092da:	9012      	str	r0, [sp, #72]	; 0x48
 80092dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80092de:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80092e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80092e4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80092e8:	1a9f      	subs	r7, r3, r2
 80092ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80092ee:	f001 fe41 	bl	800af74 <__ulp>
 80092f2:	4602      	mov	r2, r0
 80092f4:	460b      	mov	r3, r1
 80092f6:	4630      	mov	r0, r6
 80092f8:	4639      	mov	r1, r7
 80092fa:	f7f7 fa0d 	bl	8000718 <__aeabi_dmul>
 80092fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009302:	f7f7 f853 	bl	80003ac <__adddf3>
 8009306:	4680      	mov	r8, r0
 8009308:	4689      	mov	r9, r1
 800930a:	e77e      	b.n	800920a <_strtod_l+0xa82>
 800930c:	4602      	mov	r2, r0
 800930e:	460b      	mov	r3, r1
 8009310:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009314:	e7e3      	b.n	80092de <_strtod_l+0xb56>
 8009316:	a30e      	add	r3, pc, #56	; (adr r3, 8009350 <_strtod_l+0xbc8>)
 8009318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931c:	f7f7 fc6e 	bl	8000bfc <__aeabi_dcmplt>
 8009320:	e7a1      	b.n	8009266 <_strtod_l+0xade>
 8009322:	2300      	movs	r3, #0
 8009324:	930a      	str	r3, [sp, #40]	; 0x28
 8009326:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009328:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800932a:	6013      	str	r3, [r2, #0]
 800932c:	f7ff ba71 	b.w	8008812 <_strtod_l+0x8a>
 8009330:	2a65      	cmp	r2, #101	; 0x65
 8009332:	f43f ab63 	beq.w	80089fc <_strtod_l+0x274>
 8009336:	2a45      	cmp	r2, #69	; 0x45
 8009338:	f43f ab60 	beq.w	80089fc <_strtod_l+0x274>
 800933c:	2301      	movs	r3, #1
 800933e:	f7ff bb95 	b.w	8008a6c <_strtod_l+0x2e4>
 8009342:	bf00      	nop
 8009344:	f3af 8000 	nop.w
 8009348:	ffc00000 	.word	0xffc00000
 800934c:	41dfffff 	.word	0x41dfffff
 8009350:	94a03595 	.word	0x94a03595
 8009354:	3fcfffff 	.word	0x3fcfffff

08009358 <_strtod_r>:
 8009358:	4b01      	ldr	r3, [pc, #4]	; (8009360 <_strtod_r+0x8>)
 800935a:	f7ff ba15 	b.w	8008788 <_strtod_l>
 800935e:	bf00      	nop
 8009360:	20000074 	.word	0x20000074

08009364 <_strtol_l.constprop.0>:
 8009364:	2b01      	cmp	r3, #1
 8009366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800936a:	4680      	mov	r8, r0
 800936c:	d001      	beq.n	8009372 <_strtol_l.constprop.0+0xe>
 800936e:	2b24      	cmp	r3, #36	; 0x24
 8009370:	d906      	bls.n	8009380 <_strtol_l.constprop.0+0x1c>
 8009372:	f7fe fb21 	bl	80079b8 <__errno>
 8009376:	2316      	movs	r3, #22
 8009378:	6003      	str	r3, [r0, #0]
 800937a:	2000      	movs	r0, #0
 800937c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009380:	460d      	mov	r5, r1
 8009382:	4f35      	ldr	r7, [pc, #212]	; (8009458 <_strtol_l.constprop.0+0xf4>)
 8009384:	4628      	mov	r0, r5
 8009386:	f815 4b01 	ldrb.w	r4, [r5], #1
 800938a:	5de6      	ldrb	r6, [r4, r7]
 800938c:	f016 0608 	ands.w	r6, r6, #8
 8009390:	d1f8      	bne.n	8009384 <_strtol_l.constprop.0+0x20>
 8009392:	2c2d      	cmp	r4, #45	; 0x2d
 8009394:	d12f      	bne.n	80093f6 <_strtol_l.constprop.0+0x92>
 8009396:	2601      	movs	r6, #1
 8009398:	782c      	ldrb	r4, [r5, #0]
 800939a:	1c85      	adds	r5, r0, #2
 800939c:	2b00      	cmp	r3, #0
 800939e:	d057      	beq.n	8009450 <_strtol_l.constprop.0+0xec>
 80093a0:	2b10      	cmp	r3, #16
 80093a2:	d109      	bne.n	80093b8 <_strtol_l.constprop.0+0x54>
 80093a4:	2c30      	cmp	r4, #48	; 0x30
 80093a6:	d107      	bne.n	80093b8 <_strtol_l.constprop.0+0x54>
 80093a8:	7828      	ldrb	r0, [r5, #0]
 80093aa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80093ae:	2858      	cmp	r0, #88	; 0x58
 80093b0:	d149      	bne.n	8009446 <_strtol_l.constprop.0+0xe2>
 80093b2:	2310      	movs	r3, #16
 80093b4:	786c      	ldrb	r4, [r5, #1]
 80093b6:	3502      	adds	r5, #2
 80093b8:	2700      	movs	r7, #0
 80093ba:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80093be:	f10e 3eff 	add.w	lr, lr, #4294967295
 80093c2:	fbbe f9f3 	udiv	r9, lr, r3
 80093c6:	4638      	mov	r0, r7
 80093c8:	fb03 ea19 	mls	sl, r3, r9, lr
 80093cc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80093d0:	f1bc 0f09 	cmp.w	ip, #9
 80093d4:	d814      	bhi.n	8009400 <_strtol_l.constprop.0+0x9c>
 80093d6:	4664      	mov	r4, ip
 80093d8:	42a3      	cmp	r3, r4
 80093da:	dd22      	ble.n	8009422 <_strtol_l.constprop.0+0xbe>
 80093dc:	2f00      	cmp	r7, #0
 80093de:	db1d      	blt.n	800941c <_strtol_l.constprop.0+0xb8>
 80093e0:	4581      	cmp	r9, r0
 80093e2:	d31b      	bcc.n	800941c <_strtol_l.constprop.0+0xb8>
 80093e4:	d101      	bne.n	80093ea <_strtol_l.constprop.0+0x86>
 80093e6:	45a2      	cmp	sl, r4
 80093e8:	db18      	blt.n	800941c <_strtol_l.constprop.0+0xb8>
 80093ea:	2701      	movs	r7, #1
 80093ec:	fb00 4003 	mla	r0, r0, r3, r4
 80093f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093f4:	e7ea      	b.n	80093cc <_strtol_l.constprop.0+0x68>
 80093f6:	2c2b      	cmp	r4, #43	; 0x2b
 80093f8:	bf04      	itt	eq
 80093fa:	782c      	ldrbeq	r4, [r5, #0]
 80093fc:	1c85      	addeq	r5, r0, #2
 80093fe:	e7cd      	b.n	800939c <_strtol_l.constprop.0+0x38>
 8009400:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009404:	f1bc 0f19 	cmp.w	ip, #25
 8009408:	d801      	bhi.n	800940e <_strtol_l.constprop.0+0xaa>
 800940a:	3c37      	subs	r4, #55	; 0x37
 800940c:	e7e4      	b.n	80093d8 <_strtol_l.constprop.0+0x74>
 800940e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009412:	f1bc 0f19 	cmp.w	ip, #25
 8009416:	d804      	bhi.n	8009422 <_strtol_l.constprop.0+0xbe>
 8009418:	3c57      	subs	r4, #87	; 0x57
 800941a:	e7dd      	b.n	80093d8 <_strtol_l.constprop.0+0x74>
 800941c:	f04f 37ff 	mov.w	r7, #4294967295
 8009420:	e7e6      	b.n	80093f0 <_strtol_l.constprop.0+0x8c>
 8009422:	2f00      	cmp	r7, #0
 8009424:	da07      	bge.n	8009436 <_strtol_l.constprop.0+0xd2>
 8009426:	2322      	movs	r3, #34	; 0x22
 8009428:	4670      	mov	r0, lr
 800942a:	f8c8 3000 	str.w	r3, [r8]
 800942e:	2a00      	cmp	r2, #0
 8009430:	d0a4      	beq.n	800937c <_strtol_l.constprop.0+0x18>
 8009432:	1e69      	subs	r1, r5, #1
 8009434:	e005      	b.n	8009442 <_strtol_l.constprop.0+0xde>
 8009436:	b106      	cbz	r6, 800943a <_strtol_l.constprop.0+0xd6>
 8009438:	4240      	negs	r0, r0
 800943a:	2a00      	cmp	r2, #0
 800943c:	d09e      	beq.n	800937c <_strtol_l.constprop.0+0x18>
 800943e:	2f00      	cmp	r7, #0
 8009440:	d1f7      	bne.n	8009432 <_strtol_l.constprop.0+0xce>
 8009442:	6011      	str	r1, [r2, #0]
 8009444:	e79a      	b.n	800937c <_strtol_l.constprop.0+0x18>
 8009446:	2430      	movs	r4, #48	; 0x30
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1b5      	bne.n	80093b8 <_strtol_l.constprop.0+0x54>
 800944c:	2308      	movs	r3, #8
 800944e:	e7b3      	b.n	80093b8 <_strtol_l.constprop.0+0x54>
 8009450:	2c30      	cmp	r4, #48	; 0x30
 8009452:	d0a9      	beq.n	80093a8 <_strtol_l.constprop.0+0x44>
 8009454:	230a      	movs	r3, #10
 8009456:	e7af      	b.n	80093b8 <_strtol_l.constprop.0+0x54>
 8009458:	0800c441 	.word	0x0800c441

0800945c <_strtol_r>:
 800945c:	f7ff bf82 	b.w	8009364 <_strtol_l.constprop.0>

08009460 <quorem>:
 8009460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009464:	6903      	ldr	r3, [r0, #16]
 8009466:	690c      	ldr	r4, [r1, #16]
 8009468:	4607      	mov	r7, r0
 800946a:	42a3      	cmp	r3, r4
 800946c:	f2c0 8082 	blt.w	8009574 <quorem+0x114>
 8009470:	3c01      	subs	r4, #1
 8009472:	f100 0514 	add.w	r5, r0, #20
 8009476:	f101 0814 	add.w	r8, r1, #20
 800947a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800947e:	9301      	str	r3, [sp, #4]
 8009480:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009484:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009488:	3301      	adds	r3, #1
 800948a:	429a      	cmp	r2, r3
 800948c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009490:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009494:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009498:	d331      	bcc.n	80094fe <quorem+0x9e>
 800949a:	f04f 0e00 	mov.w	lr, #0
 800949e:	4640      	mov	r0, r8
 80094a0:	46ac      	mov	ip, r5
 80094a2:	46f2      	mov	sl, lr
 80094a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80094a8:	b293      	uxth	r3, r2
 80094aa:	fb06 e303 	mla	r3, r6, r3, lr
 80094ae:	0c12      	lsrs	r2, r2, #16
 80094b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	fb06 e202 	mla	r2, r6, r2, lr
 80094ba:	ebaa 0303 	sub.w	r3, sl, r3
 80094be:	f8dc a000 	ldr.w	sl, [ip]
 80094c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80094c6:	fa1f fa8a 	uxth.w	sl, sl
 80094ca:	4453      	add	r3, sl
 80094cc:	f8dc a000 	ldr.w	sl, [ip]
 80094d0:	b292      	uxth	r2, r2
 80094d2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80094d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094da:	b29b      	uxth	r3, r3
 80094dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094e0:	4581      	cmp	r9, r0
 80094e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80094e6:	f84c 3b04 	str.w	r3, [ip], #4
 80094ea:	d2db      	bcs.n	80094a4 <quorem+0x44>
 80094ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80094f0:	b92b      	cbnz	r3, 80094fe <quorem+0x9e>
 80094f2:	9b01      	ldr	r3, [sp, #4]
 80094f4:	3b04      	subs	r3, #4
 80094f6:	429d      	cmp	r5, r3
 80094f8:	461a      	mov	r2, r3
 80094fa:	d32f      	bcc.n	800955c <quorem+0xfc>
 80094fc:	613c      	str	r4, [r7, #16]
 80094fe:	4638      	mov	r0, r7
 8009500:	f001 fc90 	bl	800ae24 <__mcmp>
 8009504:	2800      	cmp	r0, #0
 8009506:	db25      	blt.n	8009554 <quorem+0xf4>
 8009508:	4628      	mov	r0, r5
 800950a:	f04f 0c00 	mov.w	ip, #0
 800950e:	3601      	adds	r6, #1
 8009510:	f858 1b04 	ldr.w	r1, [r8], #4
 8009514:	f8d0 e000 	ldr.w	lr, [r0]
 8009518:	b28b      	uxth	r3, r1
 800951a:	ebac 0303 	sub.w	r3, ip, r3
 800951e:	fa1f f28e 	uxth.w	r2, lr
 8009522:	4413      	add	r3, r2
 8009524:	0c0a      	lsrs	r2, r1, #16
 8009526:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800952a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800952e:	b29b      	uxth	r3, r3
 8009530:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009534:	45c1      	cmp	r9, r8
 8009536:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800953a:	f840 3b04 	str.w	r3, [r0], #4
 800953e:	d2e7      	bcs.n	8009510 <quorem+0xb0>
 8009540:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009544:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009548:	b922      	cbnz	r2, 8009554 <quorem+0xf4>
 800954a:	3b04      	subs	r3, #4
 800954c:	429d      	cmp	r5, r3
 800954e:	461a      	mov	r2, r3
 8009550:	d30a      	bcc.n	8009568 <quorem+0x108>
 8009552:	613c      	str	r4, [r7, #16]
 8009554:	4630      	mov	r0, r6
 8009556:	b003      	add	sp, #12
 8009558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800955c:	6812      	ldr	r2, [r2, #0]
 800955e:	3b04      	subs	r3, #4
 8009560:	2a00      	cmp	r2, #0
 8009562:	d1cb      	bne.n	80094fc <quorem+0x9c>
 8009564:	3c01      	subs	r4, #1
 8009566:	e7c6      	b.n	80094f6 <quorem+0x96>
 8009568:	6812      	ldr	r2, [r2, #0]
 800956a:	3b04      	subs	r3, #4
 800956c:	2a00      	cmp	r2, #0
 800956e:	d1f0      	bne.n	8009552 <quorem+0xf2>
 8009570:	3c01      	subs	r4, #1
 8009572:	e7eb      	b.n	800954c <quorem+0xec>
 8009574:	2000      	movs	r0, #0
 8009576:	e7ee      	b.n	8009556 <quorem+0xf6>

08009578 <_dtoa_r>:
 8009578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800957c:	4616      	mov	r6, r2
 800957e:	461f      	mov	r7, r3
 8009580:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009582:	b099      	sub	sp, #100	; 0x64
 8009584:	4605      	mov	r5, r0
 8009586:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800958a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800958e:	b974      	cbnz	r4, 80095ae <_dtoa_r+0x36>
 8009590:	2010      	movs	r0, #16
 8009592:	f001 f949 	bl	800a828 <malloc>
 8009596:	4602      	mov	r2, r0
 8009598:	6268      	str	r0, [r5, #36]	; 0x24
 800959a:	b920      	cbnz	r0, 80095a6 <_dtoa_r+0x2e>
 800959c:	21ea      	movs	r1, #234	; 0xea
 800959e:	4ba8      	ldr	r3, [pc, #672]	; (8009840 <_dtoa_r+0x2c8>)
 80095a0:	48a8      	ldr	r0, [pc, #672]	; (8009844 <_dtoa_r+0x2cc>)
 80095a2:	f002 f8b3 	bl	800b70c <__assert_func>
 80095a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095aa:	6004      	str	r4, [r0, #0]
 80095ac:	60c4      	str	r4, [r0, #12]
 80095ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80095b0:	6819      	ldr	r1, [r3, #0]
 80095b2:	b151      	cbz	r1, 80095ca <_dtoa_r+0x52>
 80095b4:	685a      	ldr	r2, [r3, #4]
 80095b6:	2301      	movs	r3, #1
 80095b8:	4093      	lsls	r3, r2
 80095ba:	604a      	str	r2, [r1, #4]
 80095bc:	608b      	str	r3, [r1, #8]
 80095be:	4628      	mov	r0, r5
 80095c0:	f001 f9a8 	bl	800a914 <_Bfree>
 80095c4:	2200      	movs	r2, #0
 80095c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80095c8:	601a      	str	r2, [r3, #0]
 80095ca:	1e3b      	subs	r3, r7, #0
 80095cc:	bfaf      	iteee	ge
 80095ce:	2300      	movge	r3, #0
 80095d0:	2201      	movlt	r2, #1
 80095d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80095d6:	9305      	strlt	r3, [sp, #20]
 80095d8:	bfa8      	it	ge
 80095da:	f8c8 3000 	strge.w	r3, [r8]
 80095de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80095e2:	4b99      	ldr	r3, [pc, #612]	; (8009848 <_dtoa_r+0x2d0>)
 80095e4:	bfb8      	it	lt
 80095e6:	f8c8 2000 	strlt.w	r2, [r8]
 80095ea:	ea33 0309 	bics.w	r3, r3, r9
 80095ee:	d119      	bne.n	8009624 <_dtoa_r+0xac>
 80095f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80095f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80095f6:	6013      	str	r3, [r2, #0]
 80095f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095fc:	4333      	orrs	r3, r6
 80095fe:	f000 857f 	beq.w	800a100 <_dtoa_r+0xb88>
 8009602:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009604:	b953      	cbnz	r3, 800961c <_dtoa_r+0xa4>
 8009606:	4b91      	ldr	r3, [pc, #580]	; (800984c <_dtoa_r+0x2d4>)
 8009608:	e022      	b.n	8009650 <_dtoa_r+0xd8>
 800960a:	4b91      	ldr	r3, [pc, #580]	; (8009850 <_dtoa_r+0x2d8>)
 800960c:	9303      	str	r3, [sp, #12]
 800960e:	3308      	adds	r3, #8
 8009610:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009612:	6013      	str	r3, [r2, #0]
 8009614:	9803      	ldr	r0, [sp, #12]
 8009616:	b019      	add	sp, #100	; 0x64
 8009618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961c:	4b8b      	ldr	r3, [pc, #556]	; (800984c <_dtoa_r+0x2d4>)
 800961e:	9303      	str	r3, [sp, #12]
 8009620:	3303      	adds	r3, #3
 8009622:	e7f5      	b.n	8009610 <_dtoa_r+0x98>
 8009624:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009628:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800962c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009630:	2200      	movs	r2, #0
 8009632:	2300      	movs	r3, #0
 8009634:	f7f7 fad8 	bl	8000be8 <__aeabi_dcmpeq>
 8009638:	4680      	mov	r8, r0
 800963a:	b158      	cbz	r0, 8009654 <_dtoa_r+0xdc>
 800963c:	2301      	movs	r3, #1
 800963e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009640:	6013      	str	r3, [r2, #0]
 8009642:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009644:	2b00      	cmp	r3, #0
 8009646:	f000 8558 	beq.w	800a0fa <_dtoa_r+0xb82>
 800964a:	4882      	ldr	r0, [pc, #520]	; (8009854 <_dtoa_r+0x2dc>)
 800964c:	6018      	str	r0, [r3, #0]
 800964e:	1e43      	subs	r3, r0, #1
 8009650:	9303      	str	r3, [sp, #12]
 8009652:	e7df      	b.n	8009614 <_dtoa_r+0x9c>
 8009654:	ab16      	add	r3, sp, #88	; 0x58
 8009656:	9301      	str	r3, [sp, #4]
 8009658:	ab17      	add	r3, sp, #92	; 0x5c
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	4628      	mov	r0, r5
 800965e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009662:	f001 fd01 	bl	800b068 <__d2b>
 8009666:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800966a:	4683      	mov	fp, r0
 800966c:	2c00      	cmp	r4, #0
 800966e:	d07f      	beq.n	8009770 <_dtoa_r+0x1f8>
 8009670:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009674:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009676:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800967a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800967e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009682:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009686:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800968a:	2200      	movs	r2, #0
 800968c:	4b72      	ldr	r3, [pc, #456]	; (8009858 <_dtoa_r+0x2e0>)
 800968e:	f7f6 fe8b 	bl	80003a8 <__aeabi_dsub>
 8009692:	a365      	add	r3, pc, #404	; (adr r3, 8009828 <_dtoa_r+0x2b0>)
 8009694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009698:	f7f7 f83e 	bl	8000718 <__aeabi_dmul>
 800969c:	a364      	add	r3, pc, #400	; (adr r3, 8009830 <_dtoa_r+0x2b8>)
 800969e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a2:	f7f6 fe83 	bl	80003ac <__adddf3>
 80096a6:	4606      	mov	r6, r0
 80096a8:	4620      	mov	r0, r4
 80096aa:	460f      	mov	r7, r1
 80096ac:	f7f6 ffca 	bl	8000644 <__aeabi_i2d>
 80096b0:	a361      	add	r3, pc, #388	; (adr r3, 8009838 <_dtoa_r+0x2c0>)
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	f7f7 f82f 	bl	8000718 <__aeabi_dmul>
 80096ba:	4602      	mov	r2, r0
 80096bc:	460b      	mov	r3, r1
 80096be:	4630      	mov	r0, r6
 80096c0:	4639      	mov	r1, r7
 80096c2:	f7f6 fe73 	bl	80003ac <__adddf3>
 80096c6:	4606      	mov	r6, r0
 80096c8:	460f      	mov	r7, r1
 80096ca:	f7f7 fad5 	bl	8000c78 <__aeabi_d2iz>
 80096ce:	2200      	movs	r2, #0
 80096d0:	4682      	mov	sl, r0
 80096d2:	2300      	movs	r3, #0
 80096d4:	4630      	mov	r0, r6
 80096d6:	4639      	mov	r1, r7
 80096d8:	f7f7 fa90 	bl	8000bfc <__aeabi_dcmplt>
 80096dc:	b148      	cbz	r0, 80096f2 <_dtoa_r+0x17a>
 80096de:	4650      	mov	r0, sl
 80096e0:	f7f6 ffb0 	bl	8000644 <__aeabi_i2d>
 80096e4:	4632      	mov	r2, r6
 80096e6:	463b      	mov	r3, r7
 80096e8:	f7f7 fa7e 	bl	8000be8 <__aeabi_dcmpeq>
 80096ec:	b908      	cbnz	r0, 80096f2 <_dtoa_r+0x17a>
 80096ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096f2:	f1ba 0f16 	cmp.w	sl, #22
 80096f6:	d858      	bhi.n	80097aa <_dtoa_r+0x232>
 80096f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80096fc:	4b57      	ldr	r3, [pc, #348]	; (800985c <_dtoa_r+0x2e4>)
 80096fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009706:	f7f7 fa79 	bl	8000bfc <__aeabi_dcmplt>
 800970a:	2800      	cmp	r0, #0
 800970c:	d04f      	beq.n	80097ae <_dtoa_r+0x236>
 800970e:	2300      	movs	r3, #0
 8009710:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009714:	930f      	str	r3, [sp, #60]	; 0x3c
 8009716:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009718:	1b1c      	subs	r4, r3, r4
 800971a:	1e63      	subs	r3, r4, #1
 800971c:	9309      	str	r3, [sp, #36]	; 0x24
 800971e:	bf49      	itett	mi
 8009720:	f1c4 0301 	rsbmi	r3, r4, #1
 8009724:	2300      	movpl	r3, #0
 8009726:	9306      	strmi	r3, [sp, #24]
 8009728:	2300      	movmi	r3, #0
 800972a:	bf54      	ite	pl
 800972c:	9306      	strpl	r3, [sp, #24]
 800972e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009730:	f1ba 0f00 	cmp.w	sl, #0
 8009734:	db3d      	blt.n	80097b2 <_dtoa_r+0x23a>
 8009736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009738:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800973c:	4453      	add	r3, sl
 800973e:	9309      	str	r3, [sp, #36]	; 0x24
 8009740:	2300      	movs	r3, #0
 8009742:	930a      	str	r3, [sp, #40]	; 0x28
 8009744:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009746:	2b09      	cmp	r3, #9
 8009748:	f200 808c 	bhi.w	8009864 <_dtoa_r+0x2ec>
 800974c:	2b05      	cmp	r3, #5
 800974e:	bfc4      	itt	gt
 8009750:	3b04      	subgt	r3, #4
 8009752:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009754:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009756:	bfc8      	it	gt
 8009758:	2400      	movgt	r4, #0
 800975a:	f1a3 0302 	sub.w	r3, r3, #2
 800975e:	bfd8      	it	le
 8009760:	2401      	movle	r4, #1
 8009762:	2b03      	cmp	r3, #3
 8009764:	f200 808a 	bhi.w	800987c <_dtoa_r+0x304>
 8009768:	e8df f003 	tbb	[pc, r3]
 800976c:	5b4d4f2d 	.word	0x5b4d4f2d
 8009770:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009774:	441c      	add	r4, r3
 8009776:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800977a:	2b20      	cmp	r3, #32
 800977c:	bfc3      	ittte	gt
 800977e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009782:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009786:	fa09 f303 	lslgt.w	r3, r9, r3
 800978a:	f1c3 0320 	rsble	r3, r3, #32
 800978e:	bfc6      	itte	gt
 8009790:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009794:	4318      	orrgt	r0, r3
 8009796:	fa06 f003 	lslle.w	r0, r6, r3
 800979a:	f7f6 ff43 	bl	8000624 <__aeabi_ui2d>
 800979e:	2301      	movs	r3, #1
 80097a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80097a4:	3c01      	subs	r4, #1
 80097a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80097a8:	e76f      	b.n	800968a <_dtoa_r+0x112>
 80097aa:	2301      	movs	r3, #1
 80097ac:	e7b2      	b.n	8009714 <_dtoa_r+0x19c>
 80097ae:	900f      	str	r0, [sp, #60]	; 0x3c
 80097b0:	e7b1      	b.n	8009716 <_dtoa_r+0x19e>
 80097b2:	9b06      	ldr	r3, [sp, #24]
 80097b4:	eba3 030a 	sub.w	r3, r3, sl
 80097b8:	9306      	str	r3, [sp, #24]
 80097ba:	f1ca 0300 	rsb	r3, sl, #0
 80097be:	930a      	str	r3, [sp, #40]	; 0x28
 80097c0:	2300      	movs	r3, #0
 80097c2:	930e      	str	r3, [sp, #56]	; 0x38
 80097c4:	e7be      	b.n	8009744 <_dtoa_r+0x1cc>
 80097c6:	2300      	movs	r3, #0
 80097c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80097ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	dc58      	bgt.n	8009882 <_dtoa_r+0x30a>
 80097d0:	f04f 0901 	mov.w	r9, #1
 80097d4:	464b      	mov	r3, r9
 80097d6:	f8cd 9020 	str.w	r9, [sp, #32]
 80097da:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80097de:	2200      	movs	r2, #0
 80097e0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80097e2:	6042      	str	r2, [r0, #4]
 80097e4:	2204      	movs	r2, #4
 80097e6:	f102 0614 	add.w	r6, r2, #20
 80097ea:	429e      	cmp	r6, r3
 80097ec:	6841      	ldr	r1, [r0, #4]
 80097ee:	d94e      	bls.n	800988e <_dtoa_r+0x316>
 80097f0:	4628      	mov	r0, r5
 80097f2:	f001 f84f 	bl	800a894 <_Balloc>
 80097f6:	9003      	str	r0, [sp, #12]
 80097f8:	2800      	cmp	r0, #0
 80097fa:	d14c      	bne.n	8009896 <_dtoa_r+0x31e>
 80097fc:	4602      	mov	r2, r0
 80097fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009802:	4b17      	ldr	r3, [pc, #92]	; (8009860 <_dtoa_r+0x2e8>)
 8009804:	e6cc      	b.n	80095a0 <_dtoa_r+0x28>
 8009806:	2301      	movs	r3, #1
 8009808:	e7de      	b.n	80097c8 <_dtoa_r+0x250>
 800980a:	2300      	movs	r3, #0
 800980c:	930b      	str	r3, [sp, #44]	; 0x2c
 800980e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009810:	eb0a 0903 	add.w	r9, sl, r3
 8009814:	f109 0301 	add.w	r3, r9, #1
 8009818:	2b01      	cmp	r3, #1
 800981a:	9308      	str	r3, [sp, #32]
 800981c:	bfb8      	it	lt
 800981e:	2301      	movlt	r3, #1
 8009820:	e7dd      	b.n	80097de <_dtoa_r+0x266>
 8009822:	2301      	movs	r3, #1
 8009824:	e7f2      	b.n	800980c <_dtoa_r+0x294>
 8009826:	bf00      	nop
 8009828:	636f4361 	.word	0x636f4361
 800982c:	3fd287a7 	.word	0x3fd287a7
 8009830:	8b60c8b3 	.word	0x8b60c8b3
 8009834:	3fc68a28 	.word	0x3fc68a28
 8009838:	509f79fb 	.word	0x509f79fb
 800983c:	3fd34413 	.word	0x3fd34413
 8009840:	0800c54e 	.word	0x0800c54e
 8009844:	0800c565 	.word	0x0800c565
 8009848:	7ff00000 	.word	0x7ff00000
 800984c:	0800c54a 	.word	0x0800c54a
 8009850:	0800c541 	.word	0x0800c541
 8009854:	0800c3c1 	.word	0x0800c3c1
 8009858:	3ff80000 	.word	0x3ff80000
 800985c:	0800c6d0 	.word	0x0800c6d0
 8009860:	0800c5c0 	.word	0x0800c5c0
 8009864:	2401      	movs	r4, #1
 8009866:	2300      	movs	r3, #0
 8009868:	940b      	str	r4, [sp, #44]	; 0x2c
 800986a:	9322      	str	r3, [sp, #136]	; 0x88
 800986c:	f04f 39ff 	mov.w	r9, #4294967295
 8009870:	2200      	movs	r2, #0
 8009872:	2312      	movs	r3, #18
 8009874:	f8cd 9020 	str.w	r9, [sp, #32]
 8009878:	9223      	str	r2, [sp, #140]	; 0x8c
 800987a:	e7b0      	b.n	80097de <_dtoa_r+0x266>
 800987c:	2301      	movs	r3, #1
 800987e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009880:	e7f4      	b.n	800986c <_dtoa_r+0x2f4>
 8009882:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8009886:	464b      	mov	r3, r9
 8009888:	f8cd 9020 	str.w	r9, [sp, #32]
 800988c:	e7a7      	b.n	80097de <_dtoa_r+0x266>
 800988e:	3101      	adds	r1, #1
 8009890:	6041      	str	r1, [r0, #4]
 8009892:	0052      	lsls	r2, r2, #1
 8009894:	e7a7      	b.n	80097e6 <_dtoa_r+0x26e>
 8009896:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009898:	9a03      	ldr	r2, [sp, #12]
 800989a:	601a      	str	r2, [r3, #0]
 800989c:	9b08      	ldr	r3, [sp, #32]
 800989e:	2b0e      	cmp	r3, #14
 80098a0:	f200 80a8 	bhi.w	80099f4 <_dtoa_r+0x47c>
 80098a4:	2c00      	cmp	r4, #0
 80098a6:	f000 80a5 	beq.w	80099f4 <_dtoa_r+0x47c>
 80098aa:	f1ba 0f00 	cmp.w	sl, #0
 80098ae:	dd34      	ble.n	800991a <_dtoa_r+0x3a2>
 80098b0:	4a9a      	ldr	r2, [pc, #616]	; (8009b1c <_dtoa_r+0x5a4>)
 80098b2:	f00a 030f 	and.w	r3, sl, #15
 80098b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80098ba:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80098be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80098c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80098c6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80098ca:	d016      	beq.n	80098fa <_dtoa_r+0x382>
 80098cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098d0:	4b93      	ldr	r3, [pc, #588]	; (8009b20 <_dtoa_r+0x5a8>)
 80098d2:	2703      	movs	r7, #3
 80098d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80098d8:	f7f7 f848 	bl	800096c <__aeabi_ddiv>
 80098dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098e0:	f004 040f 	and.w	r4, r4, #15
 80098e4:	4e8e      	ldr	r6, [pc, #568]	; (8009b20 <_dtoa_r+0x5a8>)
 80098e6:	b954      	cbnz	r4, 80098fe <_dtoa_r+0x386>
 80098e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80098ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098f0:	f7f7 f83c 	bl	800096c <__aeabi_ddiv>
 80098f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098f8:	e029      	b.n	800994e <_dtoa_r+0x3d6>
 80098fa:	2702      	movs	r7, #2
 80098fc:	e7f2      	b.n	80098e4 <_dtoa_r+0x36c>
 80098fe:	07e1      	lsls	r1, r4, #31
 8009900:	d508      	bpl.n	8009914 <_dtoa_r+0x39c>
 8009902:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009906:	e9d6 2300 	ldrd	r2, r3, [r6]
 800990a:	f7f6 ff05 	bl	8000718 <__aeabi_dmul>
 800990e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009912:	3701      	adds	r7, #1
 8009914:	1064      	asrs	r4, r4, #1
 8009916:	3608      	adds	r6, #8
 8009918:	e7e5      	b.n	80098e6 <_dtoa_r+0x36e>
 800991a:	f000 80a5 	beq.w	8009a68 <_dtoa_r+0x4f0>
 800991e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009922:	f1ca 0400 	rsb	r4, sl, #0
 8009926:	4b7d      	ldr	r3, [pc, #500]	; (8009b1c <_dtoa_r+0x5a4>)
 8009928:	f004 020f 	and.w	r2, r4, #15
 800992c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009934:	f7f6 fef0 	bl	8000718 <__aeabi_dmul>
 8009938:	2702      	movs	r7, #2
 800993a:	2300      	movs	r3, #0
 800993c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009940:	4e77      	ldr	r6, [pc, #476]	; (8009b20 <_dtoa_r+0x5a8>)
 8009942:	1124      	asrs	r4, r4, #4
 8009944:	2c00      	cmp	r4, #0
 8009946:	f040 8084 	bne.w	8009a52 <_dtoa_r+0x4da>
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1d2      	bne.n	80098f4 <_dtoa_r+0x37c>
 800994e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 808b 	beq.w	8009a6c <_dtoa_r+0x4f4>
 8009956:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800995a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800995e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009962:	2200      	movs	r2, #0
 8009964:	4b6f      	ldr	r3, [pc, #444]	; (8009b24 <_dtoa_r+0x5ac>)
 8009966:	f7f7 f949 	bl	8000bfc <__aeabi_dcmplt>
 800996a:	2800      	cmp	r0, #0
 800996c:	d07e      	beq.n	8009a6c <_dtoa_r+0x4f4>
 800996e:	9b08      	ldr	r3, [sp, #32]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d07b      	beq.n	8009a6c <_dtoa_r+0x4f4>
 8009974:	f1b9 0f00 	cmp.w	r9, #0
 8009978:	dd38      	ble.n	80099ec <_dtoa_r+0x474>
 800997a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800997e:	2200      	movs	r2, #0
 8009980:	4b69      	ldr	r3, [pc, #420]	; (8009b28 <_dtoa_r+0x5b0>)
 8009982:	f7f6 fec9 	bl	8000718 <__aeabi_dmul>
 8009986:	464c      	mov	r4, r9
 8009988:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800998c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009990:	3701      	adds	r7, #1
 8009992:	4638      	mov	r0, r7
 8009994:	f7f6 fe56 	bl	8000644 <__aeabi_i2d>
 8009998:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800999c:	f7f6 febc 	bl	8000718 <__aeabi_dmul>
 80099a0:	2200      	movs	r2, #0
 80099a2:	4b62      	ldr	r3, [pc, #392]	; (8009b2c <_dtoa_r+0x5b4>)
 80099a4:	f7f6 fd02 	bl	80003ac <__adddf3>
 80099a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80099ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80099b0:	9611      	str	r6, [sp, #68]	; 0x44
 80099b2:	2c00      	cmp	r4, #0
 80099b4:	d15d      	bne.n	8009a72 <_dtoa_r+0x4fa>
 80099b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099ba:	2200      	movs	r2, #0
 80099bc:	4b5c      	ldr	r3, [pc, #368]	; (8009b30 <_dtoa_r+0x5b8>)
 80099be:	f7f6 fcf3 	bl	80003a8 <__aeabi_dsub>
 80099c2:	4602      	mov	r2, r0
 80099c4:	460b      	mov	r3, r1
 80099c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80099ca:	4633      	mov	r3, r6
 80099cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80099ce:	f7f7 f933 	bl	8000c38 <__aeabi_dcmpgt>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	f040 829c 	bne.w	8009f10 <_dtoa_r+0x998>
 80099d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80099de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80099e2:	f7f7 f90b 	bl	8000bfc <__aeabi_dcmplt>
 80099e6:	2800      	cmp	r0, #0
 80099e8:	f040 8290 	bne.w	8009f0c <_dtoa_r+0x994>
 80099ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80099f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80099f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	f2c0 8152 	blt.w	8009ca0 <_dtoa_r+0x728>
 80099fc:	f1ba 0f0e 	cmp.w	sl, #14
 8009a00:	f300 814e 	bgt.w	8009ca0 <_dtoa_r+0x728>
 8009a04:	4b45      	ldr	r3, [pc, #276]	; (8009b1c <_dtoa_r+0x5a4>)
 8009a06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009a0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009a0e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009a12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f280 80db 	bge.w	8009bd0 <_dtoa_r+0x658>
 8009a1a:	9b08      	ldr	r3, [sp, #32]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f300 80d7 	bgt.w	8009bd0 <_dtoa_r+0x658>
 8009a22:	f040 8272 	bne.w	8009f0a <_dtoa_r+0x992>
 8009a26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	4b40      	ldr	r3, [pc, #256]	; (8009b30 <_dtoa_r+0x5b8>)
 8009a2e:	f7f6 fe73 	bl	8000718 <__aeabi_dmul>
 8009a32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a36:	f7f7 f8f5 	bl	8000c24 <__aeabi_dcmpge>
 8009a3a:	9c08      	ldr	r4, [sp, #32]
 8009a3c:	4626      	mov	r6, r4
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	f040 8248 	bne.w	8009ed4 <_dtoa_r+0x95c>
 8009a44:	2331      	movs	r3, #49	; 0x31
 8009a46:	9f03      	ldr	r7, [sp, #12]
 8009a48:	f10a 0a01 	add.w	sl, sl, #1
 8009a4c:	f807 3b01 	strb.w	r3, [r7], #1
 8009a50:	e244      	b.n	8009edc <_dtoa_r+0x964>
 8009a52:	07e2      	lsls	r2, r4, #31
 8009a54:	d505      	bpl.n	8009a62 <_dtoa_r+0x4ea>
 8009a56:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a5a:	f7f6 fe5d 	bl	8000718 <__aeabi_dmul>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	3701      	adds	r7, #1
 8009a62:	1064      	asrs	r4, r4, #1
 8009a64:	3608      	adds	r6, #8
 8009a66:	e76d      	b.n	8009944 <_dtoa_r+0x3cc>
 8009a68:	2702      	movs	r7, #2
 8009a6a:	e770      	b.n	800994e <_dtoa_r+0x3d6>
 8009a6c:	46d0      	mov	r8, sl
 8009a6e:	9c08      	ldr	r4, [sp, #32]
 8009a70:	e78f      	b.n	8009992 <_dtoa_r+0x41a>
 8009a72:	9903      	ldr	r1, [sp, #12]
 8009a74:	4b29      	ldr	r3, [pc, #164]	; (8009b1c <_dtoa_r+0x5a4>)
 8009a76:	4421      	add	r1, r4
 8009a78:	9112      	str	r1, [sp, #72]	; 0x48
 8009a7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a80:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009a84:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a88:	2900      	cmp	r1, #0
 8009a8a:	d055      	beq.n	8009b38 <_dtoa_r+0x5c0>
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	4929      	ldr	r1, [pc, #164]	; (8009b34 <_dtoa_r+0x5bc>)
 8009a90:	f7f6 ff6c 	bl	800096c <__aeabi_ddiv>
 8009a94:	463b      	mov	r3, r7
 8009a96:	4632      	mov	r2, r6
 8009a98:	f7f6 fc86 	bl	80003a8 <__aeabi_dsub>
 8009a9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009aa0:	9f03      	ldr	r7, [sp, #12]
 8009aa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009aa6:	f7f7 f8e7 	bl	8000c78 <__aeabi_d2iz>
 8009aaa:	4604      	mov	r4, r0
 8009aac:	f7f6 fdca 	bl	8000644 <__aeabi_i2d>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ab8:	f7f6 fc76 	bl	80003a8 <__aeabi_dsub>
 8009abc:	4602      	mov	r2, r0
 8009abe:	460b      	mov	r3, r1
 8009ac0:	3430      	adds	r4, #48	; 0x30
 8009ac2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ac6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009aca:	f807 4b01 	strb.w	r4, [r7], #1
 8009ace:	f7f7 f895 	bl	8000bfc <__aeabi_dcmplt>
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	d174      	bne.n	8009bc0 <_dtoa_r+0x648>
 8009ad6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ada:	2000      	movs	r0, #0
 8009adc:	4911      	ldr	r1, [pc, #68]	; (8009b24 <_dtoa_r+0x5ac>)
 8009ade:	f7f6 fc63 	bl	80003a8 <__aeabi_dsub>
 8009ae2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009ae6:	f7f7 f889 	bl	8000bfc <__aeabi_dcmplt>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	f040 80b7 	bne.w	8009c5e <_dtoa_r+0x6e6>
 8009af0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009af2:	429f      	cmp	r7, r3
 8009af4:	f43f af7a 	beq.w	80099ec <_dtoa_r+0x474>
 8009af8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009afc:	2200      	movs	r2, #0
 8009afe:	4b0a      	ldr	r3, [pc, #40]	; (8009b28 <_dtoa_r+0x5b0>)
 8009b00:	f7f6 fe0a 	bl	8000718 <__aeabi_dmul>
 8009b04:	2200      	movs	r2, #0
 8009b06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b0e:	4b06      	ldr	r3, [pc, #24]	; (8009b28 <_dtoa_r+0x5b0>)
 8009b10:	f7f6 fe02 	bl	8000718 <__aeabi_dmul>
 8009b14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b18:	e7c3      	b.n	8009aa2 <_dtoa_r+0x52a>
 8009b1a:	bf00      	nop
 8009b1c:	0800c6d0 	.word	0x0800c6d0
 8009b20:	0800c6a8 	.word	0x0800c6a8
 8009b24:	3ff00000 	.word	0x3ff00000
 8009b28:	40240000 	.word	0x40240000
 8009b2c:	401c0000 	.word	0x401c0000
 8009b30:	40140000 	.word	0x40140000
 8009b34:	3fe00000 	.word	0x3fe00000
 8009b38:	4630      	mov	r0, r6
 8009b3a:	4639      	mov	r1, r7
 8009b3c:	f7f6 fdec 	bl	8000718 <__aeabi_dmul>
 8009b40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b42:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b46:	9c03      	ldr	r4, [sp, #12]
 8009b48:	9314      	str	r3, [sp, #80]	; 0x50
 8009b4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b4e:	f7f7 f893 	bl	8000c78 <__aeabi_d2iz>
 8009b52:	9015      	str	r0, [sp, #84]	; 0x54
 8009b54:	f7f6 fd76 	bl	8000644 <__aeabi_i2d>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b60:	f7f6 fc22 	bl	80003a8 <__aeabi_dsub>
 8009b64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b66:	4606      	mov	r6, r0
 8009b68:	3330      	adds	r3, #48	; 0x30
 8009b6a:	f804 3b01 	strb.w	r3, [r4], #1
 8009b6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b70:	460f      	mov	r7, r1
 8009b72:	429c      	cmp	r4, r3
 8009b74:	f04f 0200 	mov.w	r2, #0
 8009b78:	d124      	bne.n	8009bc4 <_dtoa_r+0x64c>
 8009b7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b7e:	4bb0      	ldr	r3, [pc, #704]	; (8009e40 <_dtoa_r+0x8c8>)
 8009b80:	f7f6 fc14 	bl	80003ac <__adddf3>
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	4630      	mov	r0, r6
 8009b8a:	4639      	mov	r1, r7
 8009b8c:	f7f7 f854 	bl	8000c38 <__aeabi_dcmpgt>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	d163      	bne.n	8009c5c <_dtoa_r+0x6e4>
 8009b94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b98:	2000      	movs	r0, #0
 8009b9a:	49a9      	ldr	r1, [pc, #676]	; (8009e40 <_dtoa_r+0x8c8>)
 8009b9c:	f7f6 fc04 	bl	80003a8 <__aeabi_dsub>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	4639      	mov	r1, r7
 8009ba8:	f7f7 f828 	bl	8000bfc <__aeabi_dcmplt>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	f43f af1d 	beq.w	80099ec <_dtoa_r+0x474>
 8009bb2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009bb4:	1e7b      	subs	r3, r7, #1
 8009bb6:	9314      	str	r3, [sp, #80]	; 0x50
 8009bb8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009bbc:	2b30      	cmp	r3, #48	; 0x30
 8009bbe:	d0f8      	beq.n	8009bb2 <_dtoa_r+0x63a>
 8009bc0:	46c2      	mov	sl, r8
 8009bc2:	e03b      	b.n	8009c3c <_dtoa_r+0x6c4>
 8009bc4:	4b9f      	ldr	r3, [pc, #636]	; (8009e44 <_dtoa_r+0x8cc>)
 8009bc6:	f7f6 fda7 	bl	8000718 <__aeabi_dmul>
 8009bca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bce:	e7bc      	b.n	8009b4a <_dtoa_r+0x5d2>
 8009bd0:	9f03      	ldr	r7, [sp, #12]
 8009bd2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009bd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bda:	4640      	mov	r0, r8
 8009bdc:	4649      	mov	r1, r9
 8009bde:	f7f6 fec5 	bl	800096c <__aeabi_ddiv>
 8009be2:	f7f7 f849 	bl	8000c78 <__aeabi_d2iz>
 8009be6:	4604      	mov	r4, r0
 8009be8:	f7f6 fd2c 	bl	8000644 <__aeabi_i2d>
 8009bec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bf0:	f7f6 fd92 	bl	8000718 <__aeabi_dmul>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	4640      	mov	r0, r8
 8009bfa:	4649      	mov	r1, r9
 8009bfc:	f7f6 fbd4 	bl	80003a8 <__aeabi_dsub>
 8009c00:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009c04:	f807 6b01 	strb.w	r6, [r7], #1
 8009c08:	9e03      	ldr	r6, [sp, #12]
 8009c0a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009c0e:	1bbe      	subs	r6, r7, r6
 8009c10:	45b4      	cmp	ip, r6
 8009c12:	4602      	mov	r2, r0
 8009c14:	460b      	mov	r3, r1
 8009c16:	d136      	bne.n	8009c86 <_dtoa_r+0x70e>
 8009c18:	f7f6 fbc8 	bl	80003ac <__adddf3>
 8009c1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c20:	4680      	mov	r8, r0
 8009c22:	4689      	mov	r9, r1
 8009c24:	f7f7 f808 	bl	8000c38 <__aeabi_dcmpgt>
 8009c28:	bb58      	cbnz	r0, 8009c82 <_dtoa_r+0x70a>
 8009c2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c2e:	4640      	mov	r0, r8
 8009c30:	4649      	mov	r1, r9
 8009c32:	f7f6 ffd9 	bl	8000be8 <__aeabi_dcmpeq>
 8009c36:	b108      	cbz	r0, 8009c3c <_dtoa_r+0x6c4>
 8009c38:	07e1      	lsls	r1, r4, #31
 8009c3a:	d422      	bmi.n	8009c82 <_dtoa_r+0x70a>
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	4659      	mov	r1, fp
 8009c40:	f000 fe68 	bl	800a914 <_Bfree>
 8009c44:	2300      	movs	r3, #0
 8009c46:	703b      	strb	r3, [r7, #0]
 8009c48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009c4a:	f10a 0001 	add.w	r0, sl, #1
 8009c4e:	6018      	str	r0, [r3, #0]
 8009c50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f43f acde 	beq.w	8009614 <_dtoa_r+0x9c>
 8009c58:	601f      	str	r7, [r3, #0]
 8009c5a:	e4db      	b.n	8009614 <_dtoa_r+0x9c>
 8009c5c:	4627      	mov	r7, r4
 8009c5e:	463b      	mov	r3, r7
 8009c60:	461f      	mov	r7, r3
 8009c62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c66:	2a39      	cmp	r2, #57	; 0x39
 8009c68:	d107      	bne.n	8009c7a <_dtoa_r+0x702>
 8009c6a:	9a03      	ldr	r2, [sp, #12]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d1f7      	bne.n	8009c60 <_dtoa_r+0x6e8>
 8009c70:	2230      	movs	r2, #48	; 0x30
 8009c72:	9903      	ldr	r1, [sp, #12]
 8009c74:	f108 0801 	add.w	r8, r8, #1
 8009c78:	700a      	strb	r2, [r1, #0]
 8009c7a:	781a      	ldrb	r2, [r3, #0]
 8009c7c:	3201      	adds	r2, #1
 8009c7e:	701a      	strb	r2, [r3, #0]
 8009c80:	e79e      	b.n	8009bc0 <_dtoa_r+0x648>
 8009c82:	46d0      	mov	r8, sl
 8009c84:	e7eb      	b.n	8009c5e <_dtoa_r+0x6e6>
 8009c86:	2200      	movs	r2, #0
 8009c88:	4b6e      	ldr	r3, [pc, #440]	; (8009e44 <_dtoa_r+0x8cc>)
 8009c8a:	f7f6 fd45 	bl	8000718 <__aeabi_dmul>
 8009c8e:	2200      	movs	r2, #0
 8009c90:	2300      	movs	r3, #0
 8009c92:	4680      	mov	r8, r0
 8009c94:	4689      	mov	r9, r1
 8009c96:	f7f6 ffa7 	bl	8000be8 <__aeabi_dcmpeq>
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	d09b      	beq.n	8009bd6 <_dtoa_r+0x65e>
 8009c9e:	e7cd      	b.n	8009c3c <_dtoa_r+0x6c4>
 8009ca0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ca2:	2a00      	cmp	r2, #0
 8009ca4:	f000 80d0 	beq.w	8009e48 <_dtoa_r+0x8d0>
 8009ca8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009caa:	2a01      	cmp	r2, #1
 8009cac:	f300 80ae 	bgt.w	8009e0c <_dtoa_r+0x894>
 8009cb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009cb2:	2a00      	cmp	r2, #0
 8009cb4:	f000 80a6 	beq.w	8009e04 <_dtoa_r+0x88c>
 8009cb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009cbc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009cbe:	9f06      	ldr	r7, [sp, #24]
 8009cc0:	9a06      	ldr	r2, [sp, #24]
 8009cc2:	2101      	movs	r1, #1
 8009cc4:	441a      	add	r2, r3
 8009cc6:	9206      	str	r2, [sp, #24]
 8009cc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cca:	4628      	mov	r0, r5
 8009ccc:	441a      	add	r2, r3
 8009cce:	9209      	str	r2, [sp, #36]	; 0x24
 8009cd0:	f000 ff20 	bl	800ab14 <__i2b>
 8009cd4:	4606      	mov	r6, r0
 8009cd6:	2f00      	cmp	r7, #0
 8009cd8:	dd0c      	ble.n	8009cf4 <_dtoa_r+0x77c>
 8009cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	dd09      	ble.n	8009cf4 <_dtoa_r+0x77c>
 8009ce0:	42bb      	cmp	r3, r7
 8009ce2:	bfa8      	it	ge
 8009ce4:	463b      	movge	r3, r7
 8009ce6:	9a06      	ldr	r2, [sp, #24]
 8009ce8:	1aff      	subs	r7, r7, r3
 8009cea:	1ad2      	subs	r2, r2, r3
 8009cec:	9206      	str	r2, [sp, #24]
 8009cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8009cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cf6:	b1f3      	cbz	r3, 8009d36 <_dtoa_r+0x7be>
 8009cf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f000 80a8 	beq.w	8009e50 <_dtoa_r+0x8d8>
 8009d00:	2c00      	cmp	r4, #0
 8009d02:	dd10      	ble.n	8009d26 <_dtoa_r+0x7ae>
 8009d04:	4631      	mov	r1, r6
 8009d06:	4622      	mov	r2, r4
 8009d08:	4628      	mov	r0, r5
 8009d0a:	f000 ffc1 	bl	800ac90 <__pow5mult>
 8009d0e:	465a      	mov	r2, fp
 8009d10:	4601      	mov	r1, r0
 8009d12:	4606      	mov	r6, r0
 8009d14:	4628      	mov	r0, r5
 8009d16:	f000 ff13 	bl	800ab40 <__multiply>
 8009d1a:	4680      	mov	r8, r0
 8009d1c:	4659      	mov	r1, fp
 8009d1e:	4628      	mov	r0, r5
 8009d20:	f000 fdf8 	bl	800a914 <_Bfree>
 8009d24:	46c3      	mov	fp, r8
 8009d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d28:	1b1a      	subs	r2, r3, r4
 8009d2a:	d004      	beq.n	8009d36 <_dtoa_r+0x7be>
 8009d2c:	4659      	mov	r1, fp
 8009d2e:	4628      	mov	r0, r5
 8009d30:	f000 ffae 	bl	800ac90 <__pow5mult>
 8009d34:	4683      	mov	fp, r0
 8009d36:	2101      	movs	r1, #1
 8009d38:	4628      	mov	r0, r5
 8009d3a:	f000 feeb 	bl	800ab14 <__i2b>
 8009d3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d40:	4604      	mov	r4, r0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	f340 8086 	ble.w	8009e54 <_dtoa_r+0x8dc>
 8009d48:	461a      	mov	r2, r3
 8009d4a:	4601      	mov	r1, r0
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	f000 ff9f 	bl	800ac90 <__pow5mult>
 8009d52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d54:	4604      	mov	r4, r0
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	dd7f      	ble.n	8009e5a <_dtoa_r+0x8e2>
 8009d5a:	f04f 0800 	mov.w	r8, #0
 8009d5e:	6923      	ldr	r3, [r4, #16]
 8009d60:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d64:	6918      	ldr	r0, [r3, #16]
 8009d66:	f000 fe87 	bl	800aa78 <__hi0bits>
 8009d6a:	f1c0 0020 	rsb	r0, r0, #32
 8009d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d70:	4418      	add	r0, r3
 8009d72:	f010 001f 	ands.w	r0, r0, #31
 8009d76:	f000 8092 	beq.w	8009e9e <_dtoa_r+0x926>
 8009d7a:	f1c0 0320 	rsb	r3, r0, #32
 8009d7e:	2b04      	cmp	r3, #4
 8009d80:	f340 808a 	ble.w	8009e98 <_dtoa_r+0x920>
 8009d84:	f1c0 001c 	rsb	r0, r0, #28
 8009d88:	9b06      	ldr	r3, [sp, #24]
 8009d8a:	4407      	add	r7, r0
 8009d8c:	4403      	add	r3, r0
 8009d8e:	9306      	str	r3, [sp, #24]
 8009d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d92:	4403      	add	r3, r0
 8009d94:	9309      	str	r3, [sp, #36]	; 0x24
 8009d96:	9b06      	ldr	r3, [sp, #24]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	dd05      	ble.n	8009da8 <_dtoa_r+0x830>
 8009d9c:	4659      	mov	r1, fp
 8009d9e:	461a      	mov	r2, r3
 8009da0:	4628      	mov	r0, r5
 8009da2:	f000 ffcf 	bl	800ad44 <__lshift>
 8009da6:	4683      	mov	fp, r0
 8009da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	dd05      	ble.n	8009dba <_dtoa_r+0x842>
 8009dae:	4621      	mov	r1, r4
 8009db0:	461a      	mov	r2, r3
 8009db2:	4628      	mov	r0, r5
 8009db4:	f000 ffc6 	bl	800ad44 <__lshift>
 8009db8:	4604      	mov	r4, r0
 8009dba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d070      	beq.n	8009ea2 <_dtoa_r+0x92a>
 8009dc0:	4621      	mov	r1, r4
 8009dc2:	4658      	mov	r0, fp
 8009dc4:	f001 f82e 	bl	800ae24 <__mcmp>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	da6a      	bge.n	8009ea2 <_dtoa_r+0x92a>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	4659      	mov	r1, fp
 8009dd0:	220a      	movs	r2, #10
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	f000 fdc0 	bl	800a958 <__multadd>
 8009dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dda:	4683      	mov	fp, r0
 8009ddc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f000 8194 	beq.w	800a10e <_dtoa_r+0xb96>
 8009de6:	4631      	mov	r1, r6
 8009de8:	2300      	movs	r3, #0
 8009dea:	220a      	movs	r2, #10
 8009dec:	4628      	mov	r0, r5
 8009dee:	f000 fdb3 	bl	800a958 <__multadd>
 8009df2:	f1b9 0f00 	cmp.w	r9, #0
 8009df6:	4606      	mov	r6, r0
 8009df8:	f300 8093 	bgt.w	8009f22 <_dtoa_r+0x9aa>
 8009dfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	dc57      	bgt.n	8009eb2 <_dtoa_r+0x93a>
 8009e02:	e08e      	b.n	8009f22 <_dtoa_r+0x9aa>
 8009e04:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009e06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e0a:	e757      	b.n	8009cbc <_dtoa_r+0x744>
 8009e0c:	9b08      	ldr	r3, [sp, #32]
 8009e0e:	1e5c      	subs	r4, r3, #1
 8009e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e12:	42a3      	cmp	r3, r4
 8009e14:	bfb7      	itett	lt
 8009e16:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009e18:	1b1c      	subge	r4, r3, r4
 8009e1a:	1ae2      	sublt	r2, r4, r3
 8009e1c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009e1e:	bfbe      	ittt	lt
 8009e20:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009e22:	189b      	addlt	r3, r3, r2
 8009e24:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009e26:	9b08      	ldr	r3, [sp, #32]
 8009e28:	bfb8      	it	lt
 8009e2a:	2400      	movlt	r4, #0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	bfbb      	ittet	lt
 8009e30:	9b06      	ldrlt	r3, [sp, #24]
 8009e32:	9a08      	ldrlt	r2, [sp, #32]
 8009e34:	9f06      	ldrge	r7, [sp, #24]
 8009e36:	1a9f      	sublt	r7, r3, r2
 8009e38:	bfac      	ite	ge
 8009e3a:	9b08      	ldrge	r3, [sp, #32]
 8009e3c:	2300      	movlt	r3, #0
 8009e3e:	e73f      	b.n	8009cc0 <_dtoa_r+0x748>
 8009e40:	3fe00000 	.word	0x3fe00000
 8009e44:	40240000 	.word	0x40240000
 8009e48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009e4a:	9f06      	ldr	r7, [sp, #24]
 8009e4c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009e4e:	e742      	b.n	8009cd6 <_dtoa_r+0x75e>
 8009e50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e52:	e76b      	b.n	8009d2c <_dtoa_r+0x7b4>
 8009e54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	dc19      	bgt.n	8009e8e <_dtoa_r+0x916>
 8009e5a:	9b04      	ldr	r3, [sp, #16]
 8009e5c:	b9bb      	cbnz	r3, 8009e8e <_dtoa_r+0x916>
 8009e5e:	9b05      	ldr	r3, [sp, #20]
 8009e60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e64:	b99b      	cbnz	r3, 8009e8e <_dtoa_r+0x916>
 8009e66:	9b05      	ldr	r3, [sp, #20]
 8009e68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e6c:	0d1b      	lsrs	r3, r3, #20
 8009e6e:	051b      	lsls	r3, r3, #20
 8009e70:	b183      	cbz	r3, 8009e94 <_dtoa_r+0x91c>
 8009e72:	f04f 0801 	mov.w	r8, #1
 8009e76:	9b06      	ldr	r3, [sp, #24]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	9306      	str	r3, [sp, #24]
 8009e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e7e:	3301      	adds	r3, #1
 8009e80:	9309      	str	r3, [sp, #36]	; 0x24
 8009e82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f47f af6a 	bne.w	8009d5e <_dtoa_r+0x7e6>
 8009e8a:	2001      	movs	r0, #1
 8009e8c:	e76f      	b.n	8009d6e <_dtoa_r+0x7f6>
 8009e8e:	f04f 0800 	mov.w	r8, #0
 8009e92:	e7f6      	b.n	8009e82 <_dtoa_r+0x90a>
 8009e94:	4698      	mov	r8, r3
 8009e96:	e7f4      	b.n	8009e82 <_dtoa_r+0x90a>
 8009e98:	f43f af7d 	beq.w	8009d96 <_dtoa_r+0x81e>
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	301c      	adds	r0, #28
 8009ea0:	e772      	b.n	8009d88 <_dtoa_r+0x810>
 8009ea2:	9b08      	ldr	r3, [sp, #32]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	dc36      	bgt.n	8009f16 <_dtoa_r+0x99e>
 8009ea8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009eaa:	2b02      	cmp	r3, #2
 8009eac:	dd33      	ble.n	8009f16 <_dtoa_r+0x99e>
 8009eae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009eb2:	f1b9 0f00 	cmp.w	r9, #0
 8009eb6:	d10d      	bne.n	8009ed4 <_dtoa_r+0x95c>
 8009eb8:	4621      	mov	r1, r4
 8009eba:	464b      	mov	r3, r9
 8009ebc:	2205      	movs	r2, #5
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	f000 fd4a 	bl	800a958 <__multadd>
 8009ec4:	4601      	mov	r1, r0
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	4658      	mov	r0, fp
 8009eca:	f000 ffab 	bl	800ae24 <__mcmp>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	f73f adb8 	bgt.w	8009a44 <_dtoa_r+0x4cc>
 8009ed4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ed6:	9f03      	ldr	r7, [sp, #12]
 8009ed8:	ea6f 0a03 	mvn.w	sl, r3
 8009edc:	f04f 0800 	mov.w	r8, #0
 8009ee0:	4621      	mov	r1, r4
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	f000 fd16 	bl	800a914 <_Bfree>
 8009ee8:	2e00      	cmp	r6, #0
 8009eea:	f43f aea7 	beq.w	8009c3c <_dtoa_r+0x6c4>
 8009eee:	f1b8 0f00 	cmp.w	r8, #0
 8009ef2:	d005      	beq.n	8009f00 <_dtoa_r+0x988>
 8009ef4:	45b0      	cmp	r8, r6
 8009ef6:	d003      	beq.n	8009f00 <_dtoa_r+0x988>
 8009ef8:	4641      	mov	r1, r8
 8009efa:	4628      	mov	r0, r5
 8009efc:	f000 fd0a 	bl	800a914 <_Bfree>
 8009f00:	4631      	mov	r1, r6
 8009f02:	4628      	mov	r0, r5
 8009f04:	f000 fd06 	bl	800a914 <_Bfree>
 8009f08:	e698      	b.n	8009c3c <_dtoa_r+0x6c4>
 8009f0a:	2400      	movs	r4, #0
 8009f0c:	4626      	mov	r6, r4
 8009f0e:	e7e1      	b.n	8009ed4 <_dtoa_r+0x95c>
 8009f10:	46c2      	mov	sl, r8
 8009f12:	4626      	mov	r6, r4
 8009f14:	e596      	b.n	8009a44 <_dtoa_r+0x4cc>
 8009f16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f000 80fd 	beq.w	800a11c <_dtoa_r+0xba4>
 8009f22:	2f00      	cmp	r7, #0
 8009f24:	dd05      	ble.n	8009f32 <_dtoa_r+0x9ba>
 8009f26:	4631      	mov	r1, r6
 8009f28:	463a      	mov	r2, r7
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	f000 ff0a 	bl	800ad44 <__lshift>
 8009f30:	4606      	mov	r6, r0
 8009f32:	f1b8 0f00 	cmp.w	r8, #0
 8009f36:	d05c      	beq.n	8009ff2 <_dtoa_r+0xa7a>
 8009f38:	4628      	mov	r0, r5
 8009f3a:	6871      	ldr	r1, [r6, #4]
 8009f3c:	f000 fcaa 	bl	800a894 <_Balloc>
 8009f40:	4607      	mov	r7, r0
 8009f42:	b928      	cbnz	r0, 8009f50 <_dtoa_r+0x9d8>
 8009f44:	4602      	mov	r2, r0
 8009f46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009f4a:	4b7f      	ldr	r3, [pc, #508]	; (800a148 <_dtoa_r+0xbd0>)
 8009f4c:	f7ff bb28 	b.w	80095a0 <_dtoa_r+0x28>
 8009f50:	6932      	ldr	r2, [r6, #16]
 8009f52:	f106 010c 	add.w	r1, r6, #12
 8009f56:	3202      	adds	r2, #2
 8009f58:	0092      	lsls	r2, r2, #2
 8009f5a:	300c      	adds	r0, #12
 8009f5c:	f000 fc8c 	bl	800a878 <memcpy>
 8009f60:	2201      	movs	r2, #1
 8009f62:	4639      	mov	r1, r7
 8009f64:	4628      	mov	r0, r5
 8009f66:	f000 feed 	bl	800ad44 <__lshift>
 8009f6a:	46b0      	mov	r8, r6
 8009f6c:	4606      	mov	r6, r0
 8009f6e:	9b03      	ldr	r3, [sp, #12]
 8009f70:	3301      	adds	r3, #1
 8009f72:	9308      	str	r3, [sp, #32]
 8009f74:	9b03      	ldr	r3, [sp, #12]
 8009f76:	444b      	add	r3, r9
 8009f78:	930a      	str	r3, [sp, #40]	; 0x28
 8009f7a:	9b04      	ldr	r3, [sp, #16]
 8009f7c:	f003 0301 	and.w	r3, r3, #1
 8009f80:	9309      	str	r3, [sp, #36]	; 0x24
 8009f82:	9b08      	ldr	r3, [sp, #32]
 8009f84:	4621      	mov	r1, r4
 8009f86:	3b01      	subs	r3, #1
 8009f88:	4658      	mov	r0, fp
 8009f8a:	9304      	str	r3, [sp, #16]
 8009f8c:	f7ff fa68 	bl	8009460 <quorem>
 8009f90:	4603      	mov	r3, r0
 8009f92:	4641      	mov	r1, r8
 8009f94:	3330      	adds	r3, #48	; 0x30
 8009f96:	9006      	str	r0, [sp, #24]
 8009f98:	4658      	mov	r0, fp
 8009f9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f9c:	f000 ff42 	bl	800ae24 <__mcmp>
 8009fa0:	4632      	mov	r2, r6
 8009fa2:	4681      	mov	r9, r0
 8009fa4:	4621      	mov	r1, r4
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	f000 ff58 	bl	800ae5c <__mdiff>
 8009fac:	68c2      	ldr	r2, [r0, #12]
 8009fae:	4607      	mov	r7, r0
 8009fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fb2:	bb02      	cbnz	r2, 8009ff6 <_dtoa_r+0xa7e>
 8009fb4:	4601      	mov	r1, r0
 8009fb6:	4658      	mov	r0, fp
 8009fb8:	f000 ff34 	bl	800ae24 <__mcmp>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fc0:	4639      	mov	r1, r7
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009fc8:	f000 fca4 	bl	800a914 <_Bfree>
 8009fcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009fce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fd0:	9f08      	ldr	r7, [sp, #32]
 8009fd2:	ea43 0102 	orr.w	r1, r3, r2
 8009fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fd8:	430b      	orrs	r3, r1
 8009fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fdc:	d10d      	bne.n	8009ffa <_dtoa_r+0xa82>
 8009fde:	2b39      	cmp	r3, #57	; 0x39
 8009fe0:	d029      	beq.n	800a036 <_dtoa_r+0xabe>
 8009fe2:	f1b9 0f00 	cmp.w	r9, #0
 8009fe6:	dd01      	ble.n	8009fec <_dtoa_r+0xa74>
 8009fe8:	9b06      	ldr	r3, [sp, #24]
 8009fea:	3331      	adds	r3, #49	; 0x31
 8009fec:	9a04      	ldr	r2, [sp, #16]
 8009fee:	7013      	strb	r3, [r2, #0]
 8009ff0:	e776      	b.n	8009ee0 <_dtoa_r+0x968>
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	e7b9      	b.n	8009f6a <_dtoa_r+0x9f2>
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	e7e2      	b.n	8009fc0 <_dtoa_r+0xa48>
 8009ffa:	f1b9 0f00 	cmp.w	r9, #0
 8009ffe:	db06      	blt.n	800a00e <_dtoa_r+0xa96>
 800a000:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a002:	ea41 0909 	orr.w	r9, r1, r9
 800a006:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a008:	ea59 0101 	orrs.w	r1, r9, r1
 800a00c:	d120      	bne.n	800a050 <_dtoa_r+0xad8>
 800a00e:	2a00      	cmp	r2, #0
 800a010:	ddec      	ble.n	8009fec <_dtoa_r+0xa74>
 800a012:	4659      	mov	r1, fp
 800a014:	2201      	movs	r2, #1
 800a016:	4628      	mov	r0, r5
 800a018:	9308      	str	r3, [sp, #32]
 800a01a:	f000 fe93 	bl	800ad44 <__lshift>
 800a01e:	4621      	mov	r1, r4
 800a020:	4683      	mov	fp, r0
 800a022:	f000 feff 	bl	800ae24 <__mcmp>
 800a026:	2800      	cmp	r0, #0
 800a028:	9b08      	ldr	r3, [sp, #32]
 800a02a:	dc02      	bgt.n	800a032 <_dtoa_r+0xaba>
 800a02c:	d1de      	bne.n	8009fec <_dtoa_r+0xa74>
 800a02e:	07da      	lsls	r2, r3, #31
 800a030:	d5dc      	bpl.n	8009fec <_dtoa_r+0xa74>
 800a032:	2b39      	cmp	r3, #57	; 0x39
 800a034:	d1d8      	bne.n	8009fe8 <_dtoa_r+0xa70>
 800a036:	2339      	movs	r3, #57	; 0x39
 800a038:	9a04      	ldr	r2, [sp, #16]
 800a03a:	7013      	strb	r3, [r2, #0]
 800a03c:	463b      	mov	r3, r7
 800a03e:	461f      	mov	r7, r3
 800a040:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a044:	3b01      	subs	r3, #1
 800a046:	2a39      	cmp	r2, #57	; 0x39
 800a048:	d050      	beq.n	800a0ec <_dtoa_r+0xb74>
 800a04a:	3201      	adds	r2, #1
 800a04c:	701a      	strb	r2, [r3, #0]
 800a04e:	e747      	b.n	8009ee0 <_dtoa_r+0x968>
 800a050:	2a00      	cmp	r2, #0
 800a052:	dd03      	ble.n	800a05c <_dtoa_r+0xae4>
 800a054:	2b39      	cmp	r3, #57	; 0x39
 800a056:	d0ee      	beq.n	800a036 <_dtoa_r+0xabe>
 800a058:	3301      	adds	r3, #1
 800a05a:	e7c7      	b.n	8009fec <_dtoa_r+0xa74>
 800a05c:	9a08      	ldr	r2, [sp, #32]
 800a05e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a060:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a064:	428a      	cmp	r2, r1
 800a066:	d02a      	beq.n	800a0be <_dtoa_r+0xb46>
 800a068:	4659      	mov	r1, fp
 800a06a:	2300      	movs	r3, #0
 800a06c:	220a      	movs	r2, #10
 800a06e:	4628      	mov	r0, r5
 800a070:	f000 fc72 	bl	800a958 <__multadd>
 800a074:	45b0      	cmp	r8, r6
 800a076:	4683      	mov	fp, r0
 800a078:	f04f 0300 	mov.w	r3, #0
 800a07c:	f04f 020a 	mov.w	r2, #10
 800a080:	4641      	mov	r1, r8
 800a082:	4628      	mov	r0, r5
 800a084:	d107      	bne.n	800a096 <_dtoa_r+0xb1e>
 800a086:	f000 fc67 	bl	800a958 <__multadd>
 800a08a:	4680      	mov	r8, r0
 800a08c:	4606      	mov	r6, r0
 800a08e:	9b08      	ldr	r3, [sp, #32]
 800a090:	3301      	adds	r3, #1
 800a092:	9308      	str	r3, [sp, #32]
 800a094:	e775      	b.n	8009f82 <_dtoa_r+0xa0a>
 800a096:	f000 fc5f 	bl	800a958 <__multadd>
 800a09a:	4631      	mov	r1, r6
 800a09c:	4680      	mov	r8, r0
 800a09e:	2300      	movs	r3, #0
 800a0a0:	220a      	movs	r2, #10
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	f000 fc58 	bl	800a958 <__multadd>
 800a0a8:	4606      	mov	r6, r0
 800a0aa:	e7f0      	b.n	800a08e <_dtoa_r+0xb16>
 800a0ac:	f1b9 0f00 	cmp.w	r9, #0
 800a0b0:	bfcc      	ite	gt
 800a0b2:	464f      	movgt	r7, r9
 800a0b4:	2701      	movle	r7, #1
 800a0b6:	f04f 0800 	mov.w	r8, #0
 800a0ba:	9a03      	ldr	r2, [sp, #12]
 800a0bc:	4417      	add	r7, r2
 800a0be:	4659      	mov	r1, fp
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	9308      	str	r3, [sp, #32]
 800a0c6:	f000 fe3d 	bl	800ad44 <__lshift>
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	4683      	mov	fp, r0
 800a0ce:	f000 fea9 	bl	800ae24 <__mcmp>
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	dcb2      	bgt.n	800a03c <_dtoa_r+0xac4>
 800a0d6:	d102      	bne.n	800a0de <_dtoa_r+0xb66>
 800a0d8:	9b08      	ldr	r3, [sp, #32]
 800a0da:	07db      	lsls	r3, r3, #31
 800a0dc:	d4ae      	bmi.n	800a03c <_dtoa_r+0xac4>
 800a0de:	463b      	mov	r3, r7
 800a0e0:	461f      	mov	r7, r3
 800a0e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0e6:	2a30      	cmp	r2, #48	; 0x30
 800a0e8:	d0fa      	beq.n	800a0e0 <_dtoa_r+0xb68>
 800a0ea:	e6f9      	b.n	8009ee0 <_dtoa_r+0x968>
 800a0ec:	9a03      	ldr	r2, [sp, #12]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d1a5      	bne.n	800a03e <_dtoa_r+0xac6>
 800a0f2:	2331      	movs	r3, #49	; 0x31
 800a0f4:	f10a 0a01 	add.w	sl, sl, #1
 800a0f8:	e779      	b.n	8009fee <_dtoa_r+0xa76>
 800a0fa:	4b14      	ldr	r3, [pc, #80]	; (800a14c <_dtoa_r+0xbd4>)
 800a0fc:	f7ff baa8 	b.w	8009650 <_dtoa_r+0xd8>
 800a100:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a102:	2b00      	cmp	r3, #0
 800a104:	f47f aa81 	bne.w	800960a <_dtoa_r+0x92>
 800a108:	4b11      	ldr	r3, [pc, #68]	; (800a150 <_dtoa_r+0xbd8>)
 800a10a:	f7ff baa1 	b.w	8009650 <_dtoa_r+0xd8>
 800a10e:	f1b9 0f00 	cmp.w	r9, #0
 800a112:	dc03      	bgt.n	800a11c <_dtoa_r+0xba4>
 800a114:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a116:	2b02      	cmp	r3, #2
 800a118:	f73f aecb 	bgt.w	8009eb2 <_dtoa_r+0x93a>
 800a11c:	9f03      	ldr	r7, [sp, #12]
 800a11e:	4621      	mov	r1, r4
 800a120:	4658      	mov	r0, fp
 800a122:	f7ff f99d 	bl	8009460 <quorem>
 800a126:	9a03      	ldr	r2, [sp, #12]
 800a128:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a12c:	f807 3b01 	strb.w	r3, [r7], #1
 800a130:	1aba      	subs	r2, r7, r2
 800a132:	4591      	cmp	r9, r2
 800a134:	ddba      	ble.n	800a0ac <_dtoa_r+0xb34>
 800a136:	4659      	mov	r1, fp
 800a138:	2300      	movs	r3, #0
 800a13a:	220a      	movs	r2, #10
 800a13c:	4628      	mov	r0, r5
 800a13e:	f000 fc0b 	bl	800a958 <__multadd>
 800a142:	4683      	mov	fp, r0
 800a144:	e7eb      	b.n	800a11e <_dtoa_r+0xba6>
 800a146:	bf00      	nop
 800a148:	0800c5c0 	.word	0x0800c5c0
 800a14c:	0800c3c0 	.word	0x0800c3c0
 800a150:	0800c541 	.word	0x0800c541

0800a154 <rshift>:
 800a154:	6903      	ldr	r3, [r0, #16]
 800a156:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a15a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a15e:	f100 0414 	add.w	r4, r0, #20
 800a162:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a166:	dd46      	ble.n	800a1f6 <rshift+0xa2>
 800a168:	f011 011f 	ands.w	r1, r1, #31
 800a16c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a170:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a174:	d10c      	bne.n	800a190 <rshift+0x3c>
 800a176:	4629      	mov	r1, r5
 800a178:	f100 0710 	add.w	r7, r0, #16
 800a17c:	42b1      	cmp	r1, r6
 800a17e:	d335      	bcc.n	800a1ec <rshift+0x98>
 800a180:	1a9b      	subs	r3, r3, r2
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	1eea      	subs	r2, r5, #3
 800a186:	4296      	cmp	r6, r2
 800a188:	bf38      	it	cc
 800a18a:	2300      	movcc	r3, #0
 800a18c:	4423      	add	r3, r4
 800a18e:	e015      	b.n	800a1bc <rshift+0x68>
 800a190:	46a1      	mov	r9, r4
 800a192:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a196:	f1c1 0820 	rsb	r8, r1, #32
 800a19a:	40cf      	lsrs	r7, r1
 800a19c:	f105 0e04 	add.w	lr, r5, #4
 800a1a0:	4576      	cmp	r6, lr
 800a1a2:	46f4      	mov	ip, lr
 800a1a4:	d816      	bhi.n	800a1d4 <rshift+0x80>
 800a1a6:	1a9a      	subs	r2, r3, r2
 800a1a8:	0092      	lsls	r2, r2, #2
 800a1aa:	3a04      	subs	r2, #4
 800a1ac:	3501      	adds	r5, #1
 800a1ae:	42ae      	cmp	r6, r5
 800a1b0:	bf38      	it	cc
 800a1b2:	2200      	movcc	r2, #0
 800a1b4:	18a3      	adds	r3, r4, r2
 800a1b6:	50a7      	str	r7, [r4, r2]
 800a1b8:	b107      	cbz	r7, 800a1bc <rshift+0x68>
 800a1ba:	3304      	adds	r3, #4
 800a1bc:	42a3      	cmp	r3, r4
 800a1be:	eba3 0204 	sub.w	r2, r3, r4
 800a1c2:	bf08      	it	eq
 800a1c4:	2300      	moveq	r3, #0
 800a1c6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a1ca:	6102      	str	r2, [r0, #16]
 800a1cc:	bf08      	it	eq
 800a1ce:	6143      	streq	r3, [r0, #20]
 800a1d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1d4:	f8dc c000 	ldr.w	ip, [ip]
 800a1d8:	fa0c fc08 	lsl.w	ip, ip, r8
 800a1dc:	ea4c 0707 	orr.w	r7, ip, r7
 800a1e0:	f849 7b04 	str.w	r7, [r9], #4
 800a1e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a1e8:	40cf      	lsrs	r7, r1
 800a1ea:	e7d9      	b.n	800a1a0 <rshift+0x4c>
 800a1ec:	f851 cb04 	ldr.w	ip, [r1], #4
 800a1f0:	f847 cf04 	str.w	ip, [r7, #4]!
 800a1f4:	e7c2      	b.n	800a17c <rshift+0x28>
 800a1f6:	4623      	mov	r3, r4
 800a1f8:	e7e0      	b.n	800a1bc <rshift+0x68>

0800a1fa <__hexdig_fun>:
 800a1fa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a1fe:	2b09      	cmp	r3, #9
 800a200:	d802      	bhi.n	800a208 <__hexdig_fun+0xe>
 800a202:	3820      	subs	r0, #32
 800a204:	b2c0      	uxtb	r0, r0
 800a206:	4770      	bx	lr
 800a208:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a20c:	2b05      	cmp	r3, #5
 800a20e:	d801      	bhi.n	800a214 <__hexdig_fun+0x1a>
 800a210:	3847      	subs	r0, #71	; 0x47
 800a212:	e7f7      	b.n	800a204 <__hexdig_fun+0xa>
 800a214:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a218:	2b05      	cmp	r3, #5
 800a21a:	d801      	bhi.n	800a220 <__hexdig_fun+0x26>
 800a21c:	3827      	subs	r0, #39	; 0x27
 800a21e:	e7f1      	b.n	800a204 <__hexdig_fun+0xa>
 800a220:	2000      	movs	r0, #0
 800a222:	4770      	bx	lr

0800a224 <__gethex>:
 800a224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a228:	b08b      	sub	sp, #44	; 0x2c
 800a22a:	9305      	str	r3, [sp, #20]
 800a22c:	4bb2      	ldr	r3, [pc, #712]	; (800a4f8 <__gethex+0x2d4>)
 800a22e:	9002      	str	r0, [sp, #8]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	468b      	mov	fp, r1
 800a234:	4618      	mov	r0, r3
 800a236:	4690      	mov	r8, r2
 800a238:	9303      	str	r3, [sp, #12]
 800a23a:	f7f5 fff5 	bl	8000228 <strlen>
 800a23e:	4682      	mov	sl, r0
 800a240:	9b03      	ldr	r3, [sp, #12]
 800a242:	f8db 2000 	ldr.w	r2, [fp]
 800a246:	4403      	add	r3, r0
 800a248:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a24c:	9306      	str	r3, [sp, #24]
 800a24e:	1c93      	adds	r3, r2, #2
 800a250:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a254:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a258:	32fe      	adds	r2, #254	; 0xfe
 800a25a:	18d1      	adds	r1, r2, r3
 800a25c:	461f      	mov	r7, r3
 800a25e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a262:	9101      	str	r1, [sp, #4]
 800a264:	2830      	cmp	r0, #48	; 0x30
 800a266:	d0f8      	beq.n	800a25a <__gethex+0x36>
 800a268:	f7ff ffc7 	bl	800a1fa <__hexdig_fun>
 800a26c:	4604      	mov	r4, r0
 800a26e:	2800      	cmp	r0, #0
 800a270:	d13a      	bne.n	800a2e8 <__gethex+0xc4>
 800a272:	4652      	mov	r2, sl
 800a274:	4638      	mov	r0, r7
 800a276:	9903      	ldr	r1, [sp, #12]
 800a278:	f001 fa26 	bl	800b6c8 <strncmp>
 800a27c:	4605      	mov	r5, r0
 800a27e:	2800      	cmp	r0, #0
 800a280:	d166      	bne.n	800a350 <__gethex+0x12c>
 800a282:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a286:	eb07 060a 	add.w	r6, r7, sl
 800a28a:	f7ff ffb6 	bl	800a1fa <__hexdig_fun>
 800a28e:	2800      	cmp	r0, #0
 800a290:	d060      	beq.n	800a354 <__gethex+0x130>
 800a292:	4633      	mov	r3, r6
 800a294:	7818      	ldrb	r0, [r3, #0]
 800a296:	461f      	mov	r7, r3
 800a298:	2830      	cmp	r0, #48	; 0x30
 800a29a:	f103 0301 	add.w	r3, r3, #1
 800a29e:	d0f9      	beq.n	800a294 <__gethex+0x70>
 800a2a0:	f7ff ffab 	bl	800a1fa <__hexdig_fun>
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	fab0 f480 	clz	r4, r0
 800a2aa:	4635      	mov	r5, r6
 800a2ac:	0964      	lsrs	r4, r4, #5
 800a2ae:	9301      	str	r3, [sp, #4]
 800a2b0:	463a      	mov	r2, r7
 800a2b2:	4616      	mov	r6, r2
 800a2b4:	7830      	ldrb	r0, [r6, #0]
 800a2b6:	3201      	adds	r2, #1
 800a2b8:	f7ff ff9f 	bl	800a1fa <__hexdig_fun>
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	d1f8      	bne.n	800a2b2 <__gethex+0x8e>
 800a2c0:	4652      	mov	r2, sl
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	9903      	ldr	r1, [sp, #12]
 800a2c6:	f001 f9ff 	bl	800b6c8 <strncmp>
 800a2ca:	b980      	cbnz	r0, 800a2ee <__gethex+0xca>
 800a2cc:	b94d      	cbnz	r5, 800a2e2 <__gethex+0xbe>
 800a2ce:	eb06 050a 	add.w	r5, r6, sl
 800a2d2:	462a      	mov	r2, r5
 800a2d4:	4616      	mov	r6, r2
 800a2d6:	7830      	ldrb	r0, [r6, #0]
 800a2d8:	3201      	adds	r2, #1
 800a2da:	f7ff ff8e 	bl	800a1fa <__hexdig_fun>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	d1f8      	bne.n	800a2d4 <__gethex+0xb0>
 800a2e2:	1bad      	subs	r5, r5, r6
 800a2e4:	00ad      	lsls	r5, r5, #2
 800a2e6:	e004      	b.n	800a2f2 <__gethex+0xce>
 800a2e8:	2400      	movs	r4, #0
 800a2ea:	4625      	mov	r5, r4
 800a2ec:	e7e0      	b.n	800a2b0 <__gethex+0x8c>
 800a2ee:	2d00      	cmp	r5, #0
 800a2f0:	d1f7      	bne.n	800a2e2 <__gethex+0xbe>
 800a2f2:	7833      	ldrb	r3, [r6, #0]
 800a2f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a2f8:	2b50      	cmp	r3, #80	; 0x50
 800a2fa:	d139      	bne.n	800a370 <__gethex+0x14c>
 800a2fc:	7873      	ldrb	r3, [r6, #1]
 800a2fe:	2b2b      	cmp	r3, #43	; 0x2b
 800a300:	d02a      	beq.n	800a358 <__gethex+0x134>
 800a302:	2b2d      	cmp	r3, #45	; 0x2d
 800a304:	d02c      	beq.n	800a360 <__gethex+0x13c>
 800a306:	f04f 0900 	mov.w	r9, #0
 800a30a:	1c71      	adds	r1, r6, #1
 800a30c:	7808      	ldrb	r0, [r1, #0]
 800a30e:	f7ff ff74 	bl	800a1fa <__hexdig_fun>
 800a312:	1e43      	subs	r3, r0, #1
 800a314:	b2db      	uxtb	r3, r3
 800a316:	2b18      	cmp	r3, #24
 800a318:	d82a      	bhi.n	800a370 <__gethex+0x14c>
 800a31a:	f1a0 0210 	sub.w	r2, r0, #16
 800a31e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a322:	f7ff ff6a 	bl	800a1fa <__hexdig_fun>
 800a326:	1e43      	subs	r3, r0, #1
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	2b18      	cmp	r3, #24
 800a32c:	d91b      	bls.n	800a366 <__gethex+0x142>
 800a32e:	f1b9 0f00 	cmp.w	r9, #0
 800a332:	d000      	beq.n	800a336 <__gethex+0x112>
 800a334:	4252      	negs	r2, r2
 800a336:	4415      	add	r5, r2
 800a338:	f8cb 1000 	str.w	r1, [fp]
 800a33c:	b1d4      	cbz	r4, 800a374 <__gethex+0x150>
 800a33e:	9b01      	ldr	r3, [sp, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	bf14      	ite	ne
 800a344:	2700      	movne	r7, #0
 800a346:	2706      	moveq	r7, #6
 800a348:	4638      	mov	r0, r7
 800a34a:	b00b      	add	sp, #44	; 0x2c
 800a34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a350:	463e      	mov	r6, r7
 800a352:	4625      	mov	r5, r4
 800a354:	2401      	movs	r4, #1
 800a356:	e7cc      	b.n	800a2f2 <__gethex+0xce>
 800a358:	f04f 0900 	mov.w	r9, #0
 800a35c:	1cb1      	adds	r1, r6, #2
 800a35e:	e7d5      	b.n	800a30c <__gethex+0xe8>
 800a360:	f04f 0901 	mov.w	r9, #1
 800a364:	e7fa      	b.n	800a35c <__gethex+0x138>
 800a366:	230a      	movs	r3, #10
 800a368:	fb03 0202 	mla	r2, r3, r2, r0
 800a36c:	3a10      	subs	r2, #16
 800a36e:	e7d6      	b.n	800a31e <__gethex+0xfa>
 800a370:	4631      	mov	r1, r6
 800a372:	e7e1      	b.n	800a338 <__gethex+0x114>
 800a374:	4621      	mov	r1, r4
 800a376:	1bf3      	subs	r3, r6, r7
 800a378:	3b01      	subs	r3, #1
 800a37a:	2b07      	cmp	r3, #7
 800a37c:	dc0a      	bgt.n	800a394 <__gethex+0x170>
 800a37e:	9802      	ldr	r0, [sp, #8]
 800a380:	f000 fa88 	bl	800a894 <_Balloc>
 800a384:	4604      	mov	r4, r0
 800a386:	b940      	cbnz	r0, 800a39a <__gethex+0x176>
 800a388:	4602      	mov	r2, r0
 800a38a:	21de      	movs	r1, #222	; 0xde
 800a38c:	4b5b      	ldr	r3, [pc, #364]	; (800a4fc <__gethex+0x2d8>)
 800a38e:	485c      	ldr	r0, [pc, #368]	; (800a500 <__gethex+0x2dc>)
 800a390:	f001 f9bc 	bl	800b70c <__assert_func>
 800a394:	3101      	adds	r1, #1
 800a396:	105b      	asrs	r3, r3, #1
 800a398:	e7ef      	b.n	800a37a <__gethex+0x156>
 800a39a:	f04f 0b00 	mov.w	fp, #0
 800a39e:	f100 0914 	add.w	r9, r0, #20
 800a3a2:	f1ca 0301 	rsb	r3, sl, #1
 800a3a6:	f8cd 9010 	str.w	r9, [sp, #16]
 800a3aa:	f8cd b004 	str.w	fp, [sp, #4]
 800a3ae:	9308      	str	r3, [sp, #32]
 800a3b0:	42b7      	cmp	r7, r6
 800a3b2:	d33f      	bcc.n	800a434 <__gethex+0x210>
 800a3b4:	9f04      	ldr	r7, [sp, #16]
 800a3b6:	9b01      	ldr	r3, [sp, #4]
 800a3b8:	f847 3b04 	str.w	r3, [r7], #4
 800a3bc:	eba7 0709 	sub.w	r7, r7, r9
 800a3c0:	10bf      	asrs	r7, r7, #2
 800a3c2:	6127      	str	r7, [r4, #16]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f000 fb57 	bl	800aa78 <__hi0bits>
 800a3ca:	017f      	lsls	r7, r7, #5
 800a3cc:	f8d8 6000 	ldr.w	r6, [r8]
 800a3d0:	1a3f      	subs	r7, r7, r0
 800a3d2:	42b7      	cmp	r7, r6
 800a3d4:	dd62      	ble.n	800a49c <__gethex+0x278>
 800a3d6:	1bbf      	subs	r7, r7, r6
 800a3d8:	4639      	mov	r1, r7
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f000 fef1 	bl	800b1c2 <__any_on>
 800a3e0:	4682      	mov	sl, r0
 800a3e2:	b1a8      	cbz	r0, 800a410 <__gethex+0x1ec>
 800a3e4:	f04f 0a01 	mov.w	sl, #1
 800a3e8:	1e7b      	subs	r3, r7, #1
 800a3ea:	1159      	asrs	r1, r3, #5
 800a3ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a3f0:	f003 021f 	and.w	r2, r3, #31
 800a3f4:	fa0a f202 	lsl.w	r2, sl, r2
 800a3f8:	420a      	tst	r2, r1
 800a3fa:	d009      	beq.n	800a410 <__gethex+0x1ec>
 800a3fc:	4553      	cmp	r3, sl
 800a3fe:	dd05      	ble.n	800a40c <__gethex+0x1e8>
 800a400:	4620      	mov	r0, r4
 800a402:	1eb9      	subs	r1, r7, #2
 800a404:	f000 fedd 	bl	800b1c2 <__any_on>
 800a408:	2800      	cmp	r0, #0
 800a40a:	d144      	bne.n	800a496 <__gethex+0x272>
 800a40c:	f04f 0a02 	mov.w	sl, #2
 800a410:	4639      	mov	r1, r7
 800a412:	4620      	mov	r0, r4
 800a414:	f7ff fe9e 	bl	800a154 <rshift>
 800a418:	443d      	add	r5, r7
 800a41a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a41e:	42ab      	cmp	r3, r5
 800a420:	da4a      	bge.n	800a4b8 <__gethex+0x294>
 800a422:	4621      	mov	r1, r4
 800a424:	9802      	ldr	r0, [sp, #8]
 800a426:	f000 fa75 	bl	800a914 <_Bfree>
 800a42a:	2300      	movs	r3, #0
 800a42c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a42e:	27a3      	movs	r7, #163	; 0xa3
 800a430:	6013      	str	r3, [r2, #0]
 800a432:	e789      	b.n	800a348 <__gethex+0x124>
 800a434:	1e73      	subs	r3, r6, #1
 800a436:	9a06      	ldr	r2, [sp, #24]
 800a438:	9307      	str	r3, [sp, #28]
 800a43a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a43e:	4293      	cmp	r3, r2
 800a440:	d019      	beq.n	800a476 <__gethex+0x252>
 800a442:	f1bb 0f20 	cmp.w	fp, #32
 800a446:	d107      	bne.n	800a458 <__gethex+0x234>
 800a448:	9b04      	ldr	r3, [sp, #16]
 800a44a:	9a01      	ldr	r2, [sp, #4]
 800a44c:	f843 2b04 	str.w	r2, [r3], #4
 800a450:	9304      	str	r3, [sp, #16]
 800a452:	2300      	movs	r3, #0
 800a454:	469b      	mov	fp, r3
 800a456:	9301      	str	r3, [sp, #4]
 800a458:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a45c:	f7ff fecd 	bl	800a1fa <__hexdig_fun>
 800a460:	9b01      	ldr	r3, [sp, #4]
 800a462:	f000 000f 	and.w	r0, r0, #15
 800a466:	fa00 f00b 	lsl.w	r0, r0, fp
 800a46a:	4303      	orrs	r3, r0
 800a46c:	9301      	str	r3, [sp, #4]
 800a46e:	f10b 0b04 	add.w	fp, fp, #4
 800a472:	9b07      	ldr	r3, [sp, #28]
 800a474:	e00d      	b.n	800a492 <__gethex+0x26e>
 800a476:	9a08      	ldr	r2, [sp, #32]
 800a478:	1e73      	subs	r3, r6, #1
 800a47a:	4413      	add	r3, r2
 800a47c:	42bb      	cmp	r3, r7
 800a47e:	d3e0      	bcc.n	800a442 <__gethex+0x21e>
 800a480:	4618      	mov	r0, r3
 800a482:	4652      	mov	r2, sl
 800a484:	9903      	ldr	r1, [sp, #12]
 800a486:	9309      	str	r3, [sp, #36]	; 0x24
 800a488:	f001 f91e 	bl	800b6c8 <strncmp>
 800a48c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a48e:	2800      	cmp	r0, #0
 800a490:	d1d7      	bne.n	800a442 <__gethex+0x21e>
 800a492:	461e      	mov	r6, r3
 800a494:	e78c      	b.n	800a3b0 <__gethex+0x18c>
 800a496:	f04f 0a03 	mov.w	sl, #3
 800a49a:	e7b9      	b.n	800a410 <__gethex+0x1ec>
 800a49c:	da09      	bge.n	800a4b2 <__gethex+0x28e>
 800a49e:	1bf7      	subs	r7, r6, r7
 800a4a0:	4621      	mov	r1, r4
 800a4a2:	463a      	mov	r2, r7
 800a4a4:	9802      	ldr	r0, [sp, #8]
 800a4a6:	f000 fc4d 	bl	800ad44 <__lshift>
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	1bed      	subs	r5, r5, r7
 800a4ae:	f100 0914 	add.w	r9, r0, #20
 800a4b2:	f04f 0a00 	mov.w	sl, #0
 800a4b6:	e7b0      	b.n	800a41a <__gethex+0x1f6>
 800a4b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a4bc:	42a8      	cmp	r0, r5
 800a4be:	dd72      	ble.n	800a5a6 <__gethex+0x382>
 800a4c0:	1b45      	subs	r5, r0, r5
 800a4c2:	42ae      	cmp	r6, r5
 800a4c4:	dc35      	bgt.n	800a532 <__gethex+0x30e>
 800a4c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a4ca:	2b02      	cmp	r3, #2
 800a4cc:	d029      	beq.n	800a522 <__gethex+0x2fe>
 800a4ce:	2b03      	cmp	r3, #3
 800a4d0:	d02b      	beq.n	800a52a <__gethex+0x306>
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d11c      	bne.n	800a510 <__gethex+0x2ec>
 800a4d6:	42ae      	cmp	r6, r5
 800a4d8:	d11a      	bne.n	800a510 <__gethex+0x2ec>
 800a4da:	2e01      	cmp	r6, #1
 800a4dc:	d112      	bne.n	800a504 <__gethex+0x2e0>
 800a4de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a4e2:	9a05      	ldr	r2, [sp, #20]
 800a4e4:	2762      	movs	r7, #98	; 0x62
 800a4e6:	6013      	str	r3, [r2, #0]
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	6123      	str	r3, [r4, #16]
 800a4ec:	f8c9 3000 	str.w	r3, [r9]
 800a4f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a4f2:	601c      	str	r4, [r3, #0]
 800a4f4:	e728      	b.n	800a348 <__gethex+0x124>
 800a4f6:	bf00      	nop
 800a4f8:	0800c638 	.word	0x0800c638
 800a4fc:	0800c5c0 	.word	0x0800c5c0
 800a500:	0800c5d1 	.word	0x0800c5d1
 800a504:	4620      	mov	r0, r4
 800a506:	1e71      	subs	r1, r6, #1
 800a508:	f000 fe5b 	bl	800b1c2 <__any_on>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d1e6      	bne.n	800a4de <__gethex+0x2ba>
 800a510:	4621      	mov	r1, r4
 800a512:	9802      	ldr	r0, [sp, #8]
 800a514:	f000 f9fe 	bl	800a914 <_Bfree>
 800a518:	2300      	movs	r3, #0
 800a51a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a51c:	2750      	movs	r7, #80	; 0x50
 800a51e:	6013      	str	r3, [r2, #0]
 800a520:	e712      	b.n	800a348 <__gethex+0x124>
 800a522:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a524:	2b00      	cmp	r3, #0
 800a526:	d1f3      	bne.n	800a510 <__gethex+0x2ec>
 800a528:	e7d9      	b.n	800a4de <__gethex+0x2ba>
 800a52a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d1d6      	bne.n	800a4de <__gethex+0x2ba>
 800a530:	e7ee      	b.n	800a510 <__gethex+0x2ec>
 800a532:	1e6f      	subs	r7, r5, #1
 800a534:	f1ba 0f00 	cmp.w	sl, #0
 800a538:	d132      	bne.n	800a5a0 <__gethex+0x37c>
 800a53a:	b127      	cbz	r7, 800a546 <__gethex+0x322>
 800a53c:	4639      	mov	r1, r7
 800a53e:	4620      	mov	r0, r4
 800a540:	f000 fe3f 	bl	800b1c2 <__any_on>
 800a544:	4682      	mov	sl, r0
 800a546:	2101      	movs	r1, #1
 800a548:	117b      	asrs	r3, r7, #5
 800a54a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a54e:	f007 071f 	and.w	r7, r7, #31
 800a552:	fa01 f707 	lsl.w	r7, r1, r7
 800a556:	421f      	tst	r7, r3
 800a558:	f04f 0702 	mov.w	r7, #2
 800a55c:	4629      	mov	r1, r5
 800a55e:	4620      	mov	r0, r4
 800a560:	bf18      	it	ne
 800a562:	f04a 0a02 	orrne.w	sl, sl, #2
 800a566:	1b76      	subs	r6, r6, r5
 800a568:	f7ff fdf4 	bl	800a154 <rshift>
 800a56c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a570:	f1ba 0f00 	cmp.w	sl, #0
 800a574:	d048      	beq.n	800a608 <__gethex+0x3e4>
 800a576:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d015      	beq.n	800a5aa <__gethex+0x386>
 800a57e:	2b03      	cmp	r3, #3
 800a580:	d017      	beq.n	800a5b2 <__gethex+0x38e>
 800a582:	2b01      	cmp	r3, #1
 800a584:	d109      	bne.n	800a59a <__gethex+0x376>
 800a586:	f01a 0f02 	tst.w	sl, #2
 800a58a:	d006      	beq.n	800a59a <__gethex+0x376>
 800a58c:	f8d9 0000 	ldr.w	r0, [r9]
 800a590:	ea4a 0a00 	orr.w	sl, sl, r0
 800a594:	f01a 0f01 	tst.w	sl, #1
 800a598:	d10e      	bne.n	800a5b8 <__gethex+0x394>
 800a59a:	f047 0710 	orr.w	r7, r7, #16
 800a59e:	e033      	b.n	800a608 <__gethex+0x3e4>
 800a5a0:	f04f 0a01 	mov.w	sl, #1
 800a5a4:	e7cf      	b.n	800a546 <__gethex+0x322>
 800a5a6:	2701      	movs	r7, #1
 800a5a8:	e7e2      	b.n	800a570 <__gethex+0x34c>
 800a5aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5ac:	f1c3 0301 	rsb	r3, r3, #1
 800a5b0:	9315      	str	r3, [sp, #84]	; 0x54
 800a5b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d0f0      	beq.n	800a59a <__gethex+0x376>
 800a5b8:	f04f 0c00 	mov.w	ip, #0
 800a5bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a5c0:	f104 0314 	add.w	r3, r4, #20
 800a5c4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a5c8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5d2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a5d6:	d01c      	beq.n	800a612 <__gethex+0x3ee>
 800a5d8:	3201      	adds	r2, #1
 800a5da:	6002      	str	r2, [r0, #0]
 800a5dc:	2f02      	cmp	r7, #2
 800a5de:	f104 0314 	add.w	r3, r4, #20
 800a5e2:	d13d      	bne.n	800a660 <__gethex+0x43c>
 800a5e4:	f8d8 2000 	ldr.w	r2, [r8]
 800a5e8:	3a01      	subs	r2, #1
 800a5ea:	42b2      	cmp	r2, r6
 800a5ec:	d10a      	bne.n	800a604 <__gethex+0x3e0>
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	1171      	asrs	r1, r6, #5
 800a5f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a5f6:	f006 061f 	and.w	r6, r6, #31
 800a5fa:	fa02 f606 	lsl.w	r6, r2, r6
 800a5fe:	421e      	tst	r6, r3
 800a600:	bf18      	it	ne
 800a602:	4617      	movne	r7, r2
 800a604:	f047 0720 	orr.w	r7, r7, #32
 800a608:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a60a:	601c      	str	r4, [r3, #0]
 800a60c:	9b05      	ldr	r3, [sp, #20]
 800a60e:	601d      	str	r5, [r3, #0]
 800a610:	e69a      	b.n	800a348 <__gethex+0x124>
 800a612:	4299      	cmp	r1, r3
 800a614:	f843 cc04 	str.w	ip, [r3, #-4]
 800a618:	d8d8      	bhi.n	800a5cc <__gethex+0x3a8>
 800a61a:	68a3      	ldr	r3, [r4, #8]
 800a61c:	459b      	cmp	fp, r3
 800a61e:	db17      	blt.n	800a650 <__gethex+0x42c>
 800a620:	6861      	ldr	r1, [r4, #4]
 800a622:	9802      	ldr	r0, [sp, #8]
 800a624:	3101      	adds	r1, #1
 800a626:	f000 f935 	bl	800a894 <_Balloc>
 800a62a:	4681      	mov	r9, r0
 800a62c:	b918      	cbnz	r0, 800a636 <__gethex+0x412>
 800a62e:	4602      	mov	r2, r0
 800a630:	2184      	movs	r1, #132	; 0x84
 800a632:	4b19      	ldr	r3, [pc, #100]	; (800a698 <__gethex+0x474>)
 800a634:	e6ab      	b.n	800a38e <__gethex+0x16a>
 800a636:	6922      	ldr	r2, [r4, #16]
 800a638:	f104 010c 	add.w	r1, r4, #12
 800a63c:	3202      	adds	r2, #2
 800a63e:	0092      	lsls	r2, r2, #2
 800a640:	300c      	adds	r0, #12
 800a642:	f000 f919 	bl	800a878 <memcpy>
 800a646:	4621      	mov	r1, r4
 800a648:	9802      	ldr	r0, [sp, #8]
 800a64a:	f000 f963 	bl	800a914 <_Bfree>
 800a64e:	464c      	mov	r4, r9
 800a650:	6923      	ldr	r3, [r4, #16]
 800a652:	1c5a      	adds	r2, r3, #1
 800a654:	6122      	str	r2, [r4, #16]
 800a656:	2201      	movs	r2, #1
 800a658:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a65c:	615a      	str	r2, [r3, #20]
 800a65e:	e7bd      	b.n	800a5dc <__gethex+0x3b8>
 800a660:	6922      	ldr	r2, [r4, #16]
 800a662:	455a      	cmp	r2, fp
 800a664:	dd0b      	ble.n	800a67e <__gethex+0x45a>
 800a666:	2101      	movs	r1, #1
 800a668:	4620      	mov	r0, r4
 800a66a:	f7ff fd73 	bl	800a154 <rshift>
 800a66e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a672:	3501      	adds	r5, #1
 800a674:	42ab      	cmp	r3, r5
 800a676:	f6ff aed4 	blt.w	800a422 <__gethex+0x1fe>
 800a67a:	2701      	movs	r7, #1
 800a67c:	e7c2      	b.n	800a604 <__gethex+0x3e0>
 800a67e:	f016 061f 	ands.w	r6, r6, #31
 800a682:	d0fa      	beq.n	800a67a <__gethex+0x456>
 800a684:	4453      	add	r3, sl
 800a686:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a68a:	f000 f9f5 	bl	800aa78 <__hi0bits>
 800a68e:	f1c6 0620 	rsb	r6, r6, #32
 800a692:	42b0      	cmp	r0, r6
 800a694:	dbe7      	blt.n	800a666 <__gethex+0x442>
 800a696:	e7f0      	b.n	800a67a <__gethex+0x456>
 800a698:	0800c5c0 	.word	0x0800c5c0

0800a69c <L_shift>:
 800a69c:	f1c2 0208 	rsb	r2, r2, #8
 800a6a0:	0092      	lsls	r2, r2, #2
 800a6a2:	b570      	push	{r4, r5, r6, lr}
 800a6a4:	f1c2 0620 	rsb	r6, r2, #32
 800a6a8:	6843      	ldr	r3, [r0, #4]
 800a6aa:	6804      	ldr	r4, [r0, #0]
 800a6ac:	fa03 f506 	lsl.w	r5, r3, r6
 800a6b0:	432c      	orrs	r4, r5
 800a6b2:	40d3      	lsrs	r3, r2
 800a6b4:	6004      	str	r4, [r0, #0]
 800a6b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a6ba:	4288      	cmp	r0, r1
 800a6bc:	d3f4      	bcc.n	800a6a8 <L_shift+0xc>
 800a6be:	bd70      	pop	{r4, r5, r6, pc}

0800a6c0 <__match>:
 800a6c0:	b530      	push	{r4, r5, lr}
 800a6c2:	6803      	ldr	r3, [r0, #0]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6ca:	b914      	cbnz	r4, 800a6d2 <__match+0x12>
 800a6cc:	6003      	str	r3, [r0, #0]
 800a6ce:	2001      	movs	r0, #1
 800a6d0:	bd30      	pop	{r4, r5, pc}
 800a6d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a6da:	2d19      	cmp	r5, #25
 800a6dc:	bf98      	it	ls
 800a6de:	3220      	addls	r2, #32
 800a6e0:	42a2      	cmp	r2, r4
 800a6e2:	d0f0      	beq.n	800a6c6 <__match+0x6>
 800a6e4:	2000      	movs	r0, #0
 800a6e6:	e7f3      	b.n	800a6d0 <__match+0x10>

0800a6e8 <__hexnan>:
 800a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	2500      	movs	r5, #0
 800a6ee:	680b      	ldr	r3, [r1, #0]
 800a6f0:	4682      	mov	sl, r0
 800a6f2:	115e      	asrs	r6, r3, #5
 800a6f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a6f8:	f013 031f 	ands.w	r3, r3, #31
 800a6fc:	bf18      	it	ne
 800a6fe:	3604      	addne	r6, #4
 800a700:	1f37      	subs	r7, r6, #4
 800a702:	46b9      	mov	r9, r7
 800a704:	463c      	mov	r4, r7
 800a706:	46ab      	mov	fp, r5
 800a708:	b087      	sub	sp, #28
 800a70a:	4690      	mov	r8, r2
 800a70c:	6802      	ldr	r2, [r0, #0]
 800a70e:	9301      	str	r3, [sp, #4]
 800a710:	f846 5c04 	str.w	r5, [r6, #-4]
 800a714:	9502      	str	r5, [sp, #8]
 800a716:	7851      	ldrb	r1, [r2, #1]
 800a718:	1c53      	adds	r3, r2, #1
 800a71a:	9303      	str	r3, [sp, #12]
 800a71c:	b341      	cbz	r1, 800a770 <__hexnan+0x88>
 800a71e:	4608      	mov	r0, r1
 800a720:	9205      	str	r2, [sp, #20]
 800a722:	9104      	str	r1, [sp, #16]
 800a724:	f7ff fd69 	bl	800a1fa <__hexdig_fun>
 800a728:	2800      	cmp	r0, #0
 800a72a:	d14f      	bne.n	800a7cc <__hexnan+0xe4>
 800a72c:	9904      	ldr	r1, [sp, #16]
 800a72e:	9a05      	ldr	r2, [sp, #20]
 800a730:	2920      	cmp	r1, #32
 800a732:	d818      	bhi.n	800a766 <__hexnan+0x7e>
 800a734:	9b02      	ldr	r3, [sp, #8]
 800a736:	459b      	cmp	fp, r3
 800a738:	dd13      	ble.n	800a762 <__hexnan+0x7a>
 800a73a:	454c      	cmp	r4, r9
 800a73c:	d206      	bcs.n	800a74c <__hexnan+0x64>
 800a73e:	2d07      	cmp	r5, #7
 800a740:	dc04      	bgt.n	800a74c <__hexnan+0x64>
 800a742:	462a      	mov	r2, r5
 800a744:	4649      	mov	r1, r9
 800a746:	4620      	mov	r0, r4
 800a748:	f7ff ffa8 	bl	800a69c <L_shift>
 800a74c:	4544      	cmp	r4, r8
 800a74e:	d950      	bls.n	800a7f2 <__hexnan+0x10a>
 800a750:	2300      	movs	r3, #0
 800a752:	f1a4 0904 	sub.w	r9, r4, #4
 800a756:	f844 3c04 	str.w	r3, [r4, #-4]
 800a75a:	461d      	mov	r5, r3
 800a75c:	464c      	mov	r4, r9
 800a75e:	f8cd b008 	str.w	fp, [sp, #8]
 800a762:	9a03      	ldr	r2, [sp, #12]
 800a764:	e7d7      	b.n	800a716 <__hexnan+0x2e>
 800a766:	2929      	cmp	r1, #41	; 0x29
 800a768:	d156      	bne.n	800a818 <__hexnan+0x130>
 800a76a:	3202      	adds	r2, #2
 800a76c:	f8ca 2000 	str.w	r2, [sl]
 800a770:	f1bb 0f00 	cmp.w	fp, #0
 800a774:	d050      	beq.n	800a818 <__hexnan+0x130>
 800a776:	454c      	cmp	r4, r9
 800a778:	d206      	bcs.n	800a788 <__hexnan+0xa0>
 800a77a:	2d07      	cmp	r5, #7
 800a77c:	dc04      	bgt.n	800a788 <__hexnan+0xa0>
 800a77e:	462a      	mov	r2, r5
 800a780:	4649      	mov	r1, r9
 800a782:	4620      	mov	r0, r4
 800a784:	f7ff ff8a 	bl	800a69c <L_shift>
 800a788:	4544      	cmp	r4, r8
 800a78a:	d934      	bls.n	800a7f6 <__hexnan+0x10e>
 800a78c:	4623      	mov	r3, r4
 800a78e:	f1a8 0204 	sub.w	r2, r8, #4
 800a792:	f853 1b04 	ldr.w	r1, [r3], #4
 800a796:	429f      	cmp	r7, r3
 800a798:	f842 1f04 	str.w	r1, [r2, #4]!
 800a79c:	d2f9      	bcs.n	800a792 <__hexnan+0xaa>
 800a79e:	1b3b      	subs	r3, r7, r4
 800a7a0:	f023 0303 	bic.w	r3, r3, #3
 800a7a4:	3304      	adds	r3, #4
 800a7a6:	3401      	adds	r4, #1
 800a7a8:	3e03      	subs	r6, #3
 800a7aa:	42b4      	cmp	r4, r6
 800a7ac:	bf88      	it	hi
 800a7ae:	2304      	movhi	r3, #4
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	4443      	add	r3, r8
 800a7b4:	f843 2b04 	str.w	r2, [r3], #4
 800a7b8:	429f      	cmp	r7, r3
 800a7ba:	d2fb      	bcs.n	800a7b4 <__hexnan+0xcc>
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	b91b      	cbnz	r3, 800a7c8 <__hexnan+0xe0>
 800a7c0:	4547      	cmp	r7, r8
 800a7c2:	d127      	bne.n	800a814 <__hexnan+0x12c>
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	603b      	str	r3, [r7, #0]
 800a7c8:	2005      	movs	r0, #5
 800a7ca:	e026      	b.n	800a81a <__hexnan+0x132>
 800a7cc:	3501      	adds	r5, #1
 800a7ce:	2d08      	cmp	r5, #8
 800a7d0:	f10b 0b01 	add.w	fp, fp, #1
 800a7d4:	dd06      	ble.n	800a7e4 <__hexnan+0xfc>
 800a7d6:	4544      	cmp	r4, r8
 800a7d8:	d9c3      	bls.n	800a762 <__hexnan+0x7a>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	2501      	movs	r5, #1
 800a7de:	f844 3c04 	str.w	r3, [r4, #-4]
 800a7e2:	3c04      	subs	r4, #4
 800a7e4:	6822      	ldr	r2, [r4, #0]
 800a7e6:	f000 000f 	and.w	r0, r0, #15
 800a7ea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a7ee:	6022      	str	r2, [r4, #0]
 800a7f0:	e7b7      	b.n	800a762 <__hexnan+0x7a>
 800a7f2:	2508      	movs	r5, #8
 800a7f4:	e7b5      	b.n	800a762 <__hexnan+0x7a>
 800a7f6:	9b01      	ldr	r3, [sp, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d0df      	beq.n	800a7bc <__hexnan+0xd4>
 800a7fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a800:	f1c3 0320 	rsb	r3, r3, #32
 800a804:	fa22 f303 	lsr.w	r3, r2, r3
 800a808:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a80c:	401a      	ands	r2, r3
 800a80e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a812:	e7d3      	b.n	800a7bc <__hexnan+0xd4>
 800a814:	3f04      	subs	r7, #4
 800a816:	e7d1      	b.n	800a7bc <__hexnan+0xd4>
 800a818:	2004      	movs	r0, #4
 800a81a:	b007      	add	sp, #28
 800a81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a820 <_localeconv_r>:
 800a820:	4800      	ldr	r0, [pc, #0]	; (800a824 <_localeconv_r+0x4>)
 800a822:	4770      	bx	lr
 800a824:	20000164 	.word	0x20000164

0800a828 <malloc>:
 800a828:	4b02      	ldr	r3, [pc, #8]	; (800a834 <malloc+0xc>)
 800a82a:	4601      	mov	r1, r0
 800a82c:	6818      	ldr	r0, [r3, #0]
 800a82e:	f000 bd65 	b.w	800b2fc <_malloc_r>
 800a832:	bf00      	nop
 800a834:	2000000c 	.word	0x2000000c

0800a838 <__ascii_mbtowc>:
 800a838:	b082      	sub	sp, #8
 800a83a:	b901      	cbnz	r1, 800a83e <__ascii_mbtowc+0x6>
 800a83c:	a901      	add	r1, sp, #4
 800a83e:	b142      	cbz	r2, 800a852 <__ascii_mbtowc+0x1a>
 800a840:	b14b      	cbz	r3, 800a856 <__ascii_mbtowc+0x1e>
 800a842:	7813      	ldrb	r3, [r2, #0]
 800a844:	600b      	str	r3, [r1, #0]
 800a846:	7812      	ldrb	r2, [r2, #0]
 800a848:	1e10      	subs	r0, r2, #0
 800a84a:	bf18      	it	ne
 800a84c:	2001      	movne	r0, #1
 800a84e:	b002      	add	sp, #8
 800a850:	4770      	bx	lr
 800a852:	4610      	mov	r0, r2
 800a854:	e7fb      	b.n	800a84e <__ascii_mbtowc+0x16>
 800a856:	f06f 0001 	mvn.w	r0, #1
 800a85a:	e7f8      	b.n	800a84e <__ascii_mbtowc+0x16>

0800a85c <memchr>:
 800a85c:	4603      	mov	r3, r0
 800a85e:	b510      	push	{r4, lr}
 800a860:	b2c9      	uxtb	r1, r1
 800a862:	4402      	add	r2, r0
 800a864:	4293      	cmp	r3, r2
 800a866:	4618      	mov	r0, r3
 800a868:	d101      	bne.n	800a86e <memchr+0x12>
 800a86a:	2000      	movs	r0, #0
 800a86c:	e003      	b.n	800a876 <memchr+0x1a>
 800a86e:	7804      	ldrb	r4, [r0, #0]
 800a870:	3301      	adds	r3, #1
 800a872:	428c      	cmp	r4, r1
 800a874:	d1f6      	bne.n	800a864 <memchr+0x8>
 800a876:	bd10      	pop	{r4, pc}

0800a878 <memcpy>:
 800a878:	440a      	add	r2, r1
 800a87a:	4291      	cmp	r1, r2
 800a87c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a880:	d100      	bne.n	800a884 <memcpy+0xc>
 800a882:	4770      	bx	lr
 800a884:	b510      	push	{r4, lr}
 800a886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a88a:	4291      	cmp	r1, r2
 800a88c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a890:	d1f9      	bne.n	800a886 <memcpy+0xe>
 800a892:	bd10      	pop	{r4, pc}

0800a894 <_Balloc>:
 800a894:	b570      	push	{r4, r5, r6, lr}
 800a896:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a898:	4604      	mov	r4, r0
 800a89a:	460d      	mov	r5, r1
 800a89c:	b976      	cbnz	r6, 800a8bc <_Balloc+0x28>
 800a89e:	2010      	movs	r0, #16
 800a8a0:	f7ff ffc2 	bl	800a828 <malloc>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	6260      	str	r0, [r4, #36]	; 0x24
 800a8a8:	b920      	cbnz	r0, 800a8b4 <_Balloc+0x20>
 800a8aa:	2166      	movs	r1, #102	; 0x66
 800a8ac:	4b17      	ldr	r3, [pc, #92]	; (800a90c <_Balloc+0x78>)
 800a8ae:	4818      	ldr	r0, [pc, #96]	; (800a910 <_Balloc+0x7c>)
 800a8b0:	f000 ff2c 	bl	800b70c <__assert_func>
 800a8b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8b8:	6006      	str	r6, [r0, #0]
 800a8ba:	60c6      	str	r6, [r0, #12]
 800a8bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a8be:	68f3      	ldr	r3, [r6, #12]
 800a8c0:	b183      	cbz	r3, 800a8e4 <_Balloc+0x50>
 800a8c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a8ca:	b9b8      	cbnz	r0, 800a8fc <_Balloc+0x68>
 800a8cc:	2101      	movs	r1, #1
 800a8ce:	fa01 f605 	lsl.w	r6, r1, r5
 800a8d2:	1d72      	adds	r2, r6, #5
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	0092      	lsls	r2, r2, #2
 800a8d8:	f000 fc94 	bl	800b204 <_calloc_r>
 800a8dc:	b160      	cbz	r0, 800a8f8 <_Balloc+0x64>
 800a8de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a8e2:	e00e      	b.n	800a902 <_Balloc+0x6e>
 800a8e4:	2221      	movs	r2, #33	; 0x21
 800a8e6:	2104      	movs	r1, #4
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f000 fc8b 	bl	800b204 <_calloc_r>
 800a8ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8f0:	60f0      	str	r0, [r6, #12]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1e4      	bne.n	800a8c2 <_Balloc+0x2e>
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	bd70      	pop	{r4, r5, r6, pc}
 800a8fc:	6802      	ldr	r2, [r0, #0]
 800a8fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a902:	2300      	movs	r3, #0
 800a904:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a908:	e7f7      	b.n	800a8fa <_Balloc+0x66>
 800a90a:	bf00      	nop
 800a90c:	0800c54e 	.word	0x0800c54e
 800a910:	0800c64c 	.word	0x0800c64c

0800a914 <_Bfree>:
 800a914:	b570      	push	{r4, r5, r6, lr}
 800a916:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a918:	4605      	mov	r5, r0
 800a91a:	460c      	mov	r4, r1
 800a91c:	b976      	cbnz	r6, 800a93c <_Bfree+0x28>
 800a91e:	2010      	movs	r0, #16
 800a920:	f7ff ff82 	bl	800a828 <malloc>
 800a924:	4602      	mov	r2, r0
 800a926:	6268      	str	r0, [r5, #36]	; 0x24
 800a928:	b920      	cbnz	r0, 800a934 <_Bfree+0x20>
 800a92a:	218a      	movs	r1, #138	; 0x8a
 800a92c:	4b08      	ldr	r3, [pc, #32]	; (800a950 <_Bfree+0x3c>)
 800a92e:	4809      	ldr	r0, [pc, #36]	; (800a954 <_Bfree+0x40>)
 800a930:	f000 feec 	bl	800b70c <__assert_func>
 800a934:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a938:	6006      	str	r6, [r0, #0]
 800a93a:	60c6      	str	r6, [r0, #12]
 800a93c:	b13c      	cbz	r4, 800a94e <_Bfree+0x3a>
 800a93e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a940:	6862      	ldr	r2, [r4, #4]
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a948:	6021      	str	r1, [r4, #0]
 800a94a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a94e:	bd70      	pop	{r4, r5, r6, pc}
 800a950:	0800c54e 	.word	0x0800c54e
 800a954:	0800c64c 	.word	0x0800c64c

0800a958 <__multadd>:
 800a958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a95c:	4607      	mov	r7, r0
 800a95e:	460c      	mov	r4, r1
 800a960:	461e      	mov	r6, r3
 800a962:	2000      	movs	r0, #0
 800a964:	690d      	ldr	r5, [r1, #16]
 800a966:	f101 0c14 	add.w	ip, r1, #20
 800a96a:	f8dc 3000 	ldr.w	r3, [ip]
 800a96e:	3001      	adds	r0, #1
 800a970:	b299      	uxth	r1, r3
 800a972:	fb02 6101 	mla	r1, r2, r1, r6
 800a976:	0c1e      	lsrs	r6, r3, #16
 800a978:	0c0b      	lsrs	r3, r1, #16
 800a97a:	fb02 3306 	mla	r3, r2, r6, r3
 800a97e:	b289      	uxth	r1, r1
 800a980:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a984:	4285      	cmp	r5, r0
 800a986:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a98a:	f84c 1b04 	str.w	r1, [ip], #4
 800a98e:	dcec      	bgt.n	800a96a <__multadd+0x12>
 800a990:	b30e      	cbz	r6, 800a9d6 <__multadd+0x7e>
 800a992:	68a3      	ldr	r3, [r4, #8]
 800a994:	42ab      	cmp	r3, r5
 800a996:	dc19      	bgt.n	800a9cc <__multadd+0x74>
 800a998:	6861      	ldr	r1, [r4, #4]
 800a99a:	4638      	mov	r0, r7
 800a99c:	3101      	adds	r1, #1
 800a99e:	f7ff ff79 	bl	800a894 <_Balloc>
 800a9a2:	4680      	mov	r8, r0
 800a9a4:	b928      	cbnz	r0, 800a9b2 <__multadd+0x5a>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	21b5      	movs	r1, #181	; 0xb5
 800a9aa:	4b0c      	ldr	r3, [pc, #48]	; (800a9dc <__multadd+0x84>)
 800a9ac:	480c      	ldr	r0, [pc, #48]	; (800a9e0 <__multadd+0x88>)
 800a9ae:	f000 fead 	bl	800b70c <__assert_func>
 800a9b2:	6922      	ldr	r2, [r4, #16]
 800a9b4:	f104 010c 	add.w	r1, r4, #12
 800a9b8:	3202      	adds	r2, #2
 800a9ba:	0092      	lsls	r2, r2, #2
 800a9bc:	300c      	adds	r0, #12
 800a9be:	f7ff ff5b 	bl	800a878 <memcpy>
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	4638      	mov	r0, r7
 800a9c6:	f7ff ffa5 	bl	800a914 <_Bfree>
 800a9ca:	4644      	mov	r4, r8
 800a9cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a9d0:	3501      	adds	r5, #1
 800a9d2:	615e      	str	r6, [r3, #20]
 800a9d4:	6125      	str	r5, [r4, #16]
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9dc:	0800c5c0 	.word	0x0800c5c0
 800a9e0:	0800c64c 	.word	0x0800c64c

0800a9e4 <__s2b>:
 800a9e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9e8:	4615      	mov	r5, r2
 800a9ea:	2209      	movs	r2, #9
 800a9ec:	461f      	mov	r7, r3
 800a9ee:	3308      	adds	r3, #8
 800a9f0:	460c      	mov	r4, r1
 800a9f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9f6:	4606      	mov	r6, r0
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	db09      	blt.n	800aa14 <__s2b+0x30>
 800aa00:	4630      	mov	r0, r6
 800aa02:	f7ff ff47 	bl	800a894 <_Balloc>
 800aa06:	b940      	cbnz	r0, 800aa1a <__s2b+0x36>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	21ce      	movs	r1, #206	; 0xce
 800aa0c:	4b18      	ldr	r3, [pc, #96]	; (800aa70 <__s2b+0x8c>)
 800aa0e:	4819      	ldr	r0, [pc, #100]	; (800aa74 <__s2b+0x90>)
 800aa10:	f000 fe7c 	bl	800b70c <__assert_func>
 800aa14:	0052      	lsls	r2, r2, #1
 800aa16:	3101      	adds	r1, #1
 800aa18:	e7f0      	b.n	800a9fc <__s2b+0x18>
 800aa1a:	9b08      	ldr	r3, [sp, #32]
 800aa1c:	2d09      	cmp	r5, #9
 800aa1e:	6143      	str	r3, [r0, #20]
 800aa20:	f04f 0301 	mov.w	r3, #1
 800aa24:	6103      	str	r3, [r0, #16]
 800aa26:	dd16      	ble.n	800aa56 <__s2b+0x72>
 800aa28:	f104 0909 	add.w	r9, r4, #9
 800aa2c:	46c8      	mov	r8, r9
 800aa2e:	442c      	add	r4, r5
 800aa30:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aa34:	4601      	mov	r1, r0
 800aa36:	220a      	movs	r2, #10
 800aa38:	4630      	mov	r0, r6
 800aa3a:	3b30      	subs	r3, #48	; 0x30
 800aa3c:	f7ff ff8c 	bl	800a958 <__multadd>
 800aa40:	45a0      	cmp	r8, r4
 800aa42:	d1f5      	bne.n	800aa30 <__s2b+0x4c>
 800aa44:	f1a5 0408 	sub.w	r4, r5, #8
 800aa48:	444c      	add	r4, r9
 800aa4a:	1b2d      	subs	r5, r5, r4
 800aa4c:	1963      	adds	r3, r4, r5
 800aa4e:	42bb      	cmp	r3, r7
 800aa50:	db04      	blt.n	800aa5c <__s2b+0x78>
 800aa52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa56:	2509      	movs	r5, #9
 800aa58:	340a      	adds	r4, #10
 800aa5a:	e7f6      	b.n	800aa4a <__s2b+0x66>
 800aa5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa60:	4601      	mov	r1, r0
 800aa62:	220a      	movs	r2, #10
 800aa64:	4630      	mov	r0, r6
 800aa66:	3b30      	subs	r3, #48	; 0x30
 800aa68:	f7ff ff76 	bl	800a958 <__multadd>
 800aa6c:	e7ee      	b.n	800aa4c <__s2b+0x68>
 800aa6e:	bf00      	nop
 800aa70:	0800c5c0 	.word	0x0800c5c0
 800aa74:	0800c64c 	.word	0x0800c64c

0800aa78 <__hi0bits>:
 800aa78:	0c02      	lsrs	r2, r0, #16
 800aa7a:	0412      	lsls	r2, r2, #16
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	b9ca      	cbnz	r2, 800aab4 <__hi0bits+0x3c>
 800aa80:	0403      	lsls	r3, r0, #16
 800aa82:	2010      	movs	r0, #16
 800aa84:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800aa88:	bf04      	itt	eq
 800aa8a:	021b      	lsleq	r3, r3, #8
 800aa8c:	3008      	addeq	r0, #8
 800aa8e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800aa92:	bf04      	itt	eq
 800aa94:	011b      	lsleq	r3, r3, #4
 800aa96:	3004      	addeq	r0, #4
 800aa98:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800aa9c:	bf04      	itt	eq
 800aa9e:	009b      	lsleq	r3, r3, #2
 800aaa0:	3002      	addeq	r0, #2
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	db05      	blt.n	800aab2 <__hi0bits+0x3a>
 800aaa6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800aaaa:	f100 0001 	add.w	r0, r0, #1
 800aaae:	bf08      	it	eq
 800aab0:	2020      	moveq	r0, #32
 800aab2:	4770      	bx	lr
 800aab4:	2000      	movs	r0, #0
 800aab6:	e7e5      	b.n	800aa84 <__hi0bits+0xc>

0800aab8 <__lo0bits>:
 800aab8:	6803      	ldr	r3, [r0, #0]
 800aaba:	4602      	mov	r2, r0
 800aabc:	f013 0007 	ands.w	r0, r3, #7
 800aac0:	d00b      	beq.n	800aada <__lo0bits+0x22>
 800aac2:	07d9      	lsls	r1, r3, #31
 800aac4:	d421      	bmi.n	800ab0a <__lo0bits+0x52>
 800aac6:	0798      	lsls	r0, r3, #30
 800aac8:	bf49      	itett	mi
 800aaca:	085b      	lsrmi	r3, r3, #1
 800aacc:	089b      	lsrpl	r3, r3, #2
 800aace:	2001      	movmi	r0, #1
 800aad0:	6013      	strmi	r3, [r2, #0]
 800aad2:	bf5c      	itt	pl
 800aad4:	2002      	movpl	r0, #2
 800aad6:	6013      	strpl	r3, [r2, #0]
 800aad8:	4770      	bx	lr
 800aada:	b299      	uxth	r1, r3
 800aadc:	b909      	cbnz	r1, 800aae2 <__lo0bits+0x2a>
 800aade:	2010      	movs	r0, #16
 800aae0:	0c1b      	lsrs	r3, r3, #16
 800aae2:	b2d9      	uxtb	r1, r3
 800aae4:	b909      	cbnz	r1, 800aaea <__lo0bits+0x32>
 800aae6:	3008      	adds	r0, #8
 800aae8:	0a1b      	lsrs	r3, r3, #8
 800aaea:	0719      	lsls	r1, r3, #28
 800aaec:	bf04      	itt	eq
 800aaee:	091b      	lsreq	r3, r3, #4
 800aaf0:	3004      	addeq	r0, #4
 800aaf2:	0799      	lsls	r1, r3, #30
 800aaf4:	bf04      	itt	eq
 800aaf6:	089b      	lsreq	r3, r3, #2
 800aaf8:	3002      	addeq	r0, #2
 800aafa:	07d9      	lsls	r1, r3, #31
 800aafc:	d403      	bmi.n	800ab06 <__lo0bits+0x4e>
 800aafe:	085b      	lsrs	r3, r3, #1
 800ab00:	f100 0001 	add.w	r0, r0, #1
 800ab04:	d003      	beq.n	800ab0e <__lo0bits+0x56>
 800ab06:	6013      	str	r3, [r2, #0]
 800ab08:	4770      	bx	lr
 800ab0a:	2000      	movs	r0, #0
 800ab0c:	4770      	bx	lr
 800ab0e:	2020      	movs	r0, #32
 800ab10:	4770      	bx	lr
	...

0800ab14 <__i2b>:
 800ab14:	b510      	push	{r4, lr}
 800ab16:	460c      	mov	r4, r1
 800ab18:	2101      	movs	r1, #1
 800ab1a:	f7ff febb 	bl	800a894 <_Balloc>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	b928      	cbnz	r0, 800ab2e <__i2b+0x1a>
 800ab22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ab26:	4b04      	ldr	r3, [pc, #16]	; (800ab38 <__i2b+0x24>)
 800ab28:	4804      	ldr	r0, [pc, #16]	; (800ab3c <__i2b+0x28>)
 800ab2a:	f000 fdef 	bl	800b70c <__assert_func>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	6144      	str	r4, [r0, #20]
 800ab32:	6103      	str	r3, [r0, #16]
 800ab34:	bd10      	pop	{r4, pc}
 800ab36:	bf00      	nop
 800ab38:	0800c5c0 	.word	0x0800c5c0
 800ab3c:	0800c64c 	.word	0x0800c64c

0800ab40 <__multiply>:
 800ab40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab44:	4691      	mov	r9, r2
 800ab46:	690a      	ldr	r2, [r1, #16]
 800ab48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab4c:	460c      	mov	r4, r1
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	bfbe      	ittt	lt
 800ab52:	460b      	movlt	r3, r1
 800ab54:	464c      	movlt	r4, r9
 800ab56:	4699      	movlt	r9, r3
 800ab58:	6927      	ldr	r7, [r4, #16]
 800ab5a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ab5e:	68a3      	ldr	r3, [r4, #8]
 800ab60:	6861      	ldr	r1, [r4, #4]
 800ab62:	eb07 060a 	add.w	r6, r7, sl
 800ab66:	42b3      	cmp	r3, r6
 800ab68:	b085      	sub	sp, #20
 800ab6a:	bfb8      	it	lt
 800ab6c:	3101      	addlt	r1, #1
 800ab6e:	f7ff fe91 	bl	800a894 <_Balloc>
 800ab72:	b930      	cbnz	r0, 800ab82 <__multiply+0x42>
 800ab74:	4602      	mov	r2, r0
 800ab76:	f240 115d 	movw	r1, #349	; 0x15d
 800ab7a:	4b43      	ldr	r3, [pc, #268]	; (800ac88 <__multiply+0x148>)
 800ab7c:	4843      	ldr	r0, [pc, #268]	; (800ac8c <__multiply+0x14c>)
 800ab7e:	f000 fdc5 	bl	800b70c <__assert_func>
 800ab82:	f100 0514 	add.w	r5, r0, #20
 800ab86:	462b      	mov	r3, r5
 800ab88:	2200      	movs	r2, #0
 800ab8a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ab8e:	4543      	cmp	r3, r8
 800ab90:	d321      	bcc.n	800abd6 <__multiply+0x96>
 800ab92:	f104 0314 	add.w	r3, r4, #20
 800ab96:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ab9a:	f109 0314 	add.w	r3, r9, #20
 800ab9e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aba2:	9202      	str	r2, [sp, #8]
 800aba4:	1b3a      	subs	r2, r7, r4
 800aba6:	3a15      	subs	r2, #21
 800aba8:	f022 0203 	bic.w	r2, r2, #3
 800abac:	3204      	adds	r2, #4
 800abae:	f104 0115 	add.w	r1, r4, #21
 800abb2:	428f      	cmp	r7, r1
 800abb4:	bf38      	it	cc
 800abb6:	2204      	movcc	r2, #4
 800abb8:	9201      	str	r2, [sp, #4]
 800abba:	9a02      	ldr	r2, [sp, #8]
 800abbc:	9303      	str	r3, [sp, #12]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d80c      	bhi.n	800abdc <__multiply+0x9c>
 800abc2:	2e00      	cmp	r6, #0
 800abc4:	dd03      	ble.n	800abce <__multiply+0x8e>
 800abc6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d059      	beq.n	800ac82 <__multiply+0x142>
 800abce:	6106      	str	r6, [r0, #16]
 800abd0:	b005      	add	sp, #20
 800abd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd6:	f843 2b04 	str.w	r2, [r3], #4
 800abda:	e7d8      	b.n	800ab8e <__multiply+0x4e>
 800abdc:	f8b3 a000 	ldrh.w	sl, [r3]
 800abe0:	f1ba 0f00 	cmp.w	sl, #0
 800abe4:	d023      	beq.n	800ac2e <__multiply+0xee>
 800abe6:	46a9      	mov	r9, r5
 800abe8:	f04f 0c00 	mov.w	ip, #0
 800abec:	f104 0e14 	add.w	lr, r4, #20
 800abf0:	f85e 2b04 	ldr.w	r2, [lr], #4
 800abf4:	f8d9 1000 	ldr.w	r1, [r9]
 800abf8:	fa1f fb82 	uxth.w	fp, r2
 800abfc:	b289      	uxth	r1, r1
 800abfe:	fb0a 110b 	mla	r1, sl, fp, r1
 800ac02:	4461      	add	r1, ip
 800ac04:	f8d9 c000 	ldr.w	ip, [r9]
 800ac08:	0c12      	lsrs	r2, r2, #16
 800ac0a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ac0e:	fb0a c202 	mla	r2, sl, r2, ip
 800ac12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ac16:	b289      	uxth	r1, r1
 800ac18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ac1c:	4577      	cmp	r7, lr
 800ac1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac22:	f849 1b04 	str.w	r1, [r9], #4
 800ac26:	d8e3      	bhi.n	800abf0 <__multiply+0xb0>
 800ac28:	9a01      	ldr	r2, [sp, #4]
 800ac2a:	f845 c002 	str.w	ip, [r5, r2]
 800ac2e:	9a03      	ldr	r2, [sp, #12]
 800ac30:	3304      	adds	r3, #4
 800ac32:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ac36:	f1b9 0f00 	cmp.w	r9, #0
 800ac3a:	d020      	beq.n	800ac7e <__multiply+0x13e>
 800ac3c:	46ae      	mov	lr, r5
 800ac3e:	f04f 0a00 	mov.w	sl, #0
 800ac42:	6829      	ldr	r1, [r5, #0]
 800ac44:	f104 0c14 	add.w	ip, r4, #20
 800ac48:	f8bc b000 	ldrh.w	fp, [ip]
 800ac4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ac50:	b289      	uxth	r1, r1
 800ac52:	fb09 220b 	mla	r2, r9, fp, r2
 800ac56:	4492      	add	sl, r2
 800ac58:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ac5c:	f84e 1b04 	str.w	r1, [lr], #4
 800ac60:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ac64:	f8be 1000 	ldrh.w	r1, [lr]
 800ac68:	0c12      	lsrs	r2, r2, #16
 800ac6a:	fb09 1102 	mla	r1, r9, r2, r1
 800ac6e:	4567      	cmp	r7, ip
 800ac70:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ac74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ac78:	d8e6      	bhi.n	800ac48 <__multiply+0x108>
 800ac7a:	9a01      	ldr	r2, [sp, #4]
 800ac7c:	50a9      	str	r1, [r5, r2]
 800ac7e:	3504      	adds	r5, #4
 800ac80:	e79b      	b.n	800abba <__multiply+0x7a>
 800ac82:	3e01      	subs	r6, #1
 800ac84:	e79d      	b.n	800abc2 <__multiply+0x82>
 800ac86:	bf00      	nop
 800ac88:	0800c5c0 	.word	0x0800c5c0
 800ac8c:	0800c64c 	.word	0x0800c64c

0800ac90 <__pow5mult>:
 800ac90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac94:	4615      	mov	r5, r2
 800ac96:	f012 0203 	ands.w	r2, r2, #3
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	460f      	mov	r7, r1
 800ac9e:	d007      	beq.n	800acb0 <__pow5mult+0x20>
 800aca0:	4c25      	ldr	r4, [pc, #148]	; (800ad38 <__pow5mult+0xa8>)
 800aca2:	3a01      	subs	r2, #1
 800aca4:	2300      	movs	r3, #0
 800aca6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800acaa:	f7ff fe55 	bl	800a958 <__multadd>
 800acae:	4607      	mov	r7, r0
 800acb0:	10ad      	asrs	r5, r5, #2
 800acb2:	d03d      	beq.n	800ad30 <__pow5mult+0xa0>
 800acb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800acb6:	b97c      	cbnz	r4, 800acd8 <__pow5mult+0x48>
 800acb8:	2010      	movs	r0, #16
 800acba:	f7ff fdb5 	bl	800a828 <malloc>
 800acbe:	4602      	mov	r2, r0
 800acc0:	6270      	str	r0, [r6, #36]	; 0x24
 800acc2:	b928      	cbnz	r0, 800acd0 <__pow5mult+0x40>
 800acc4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800acc8:	4b1c      	ldr	r3, [pc, #112]	; (800ad3c <__pow5mult+0xac>)
 800acca:	481d      	ldr	r0, [pc, #116]	; (800ad40 <__pow5mult+0xb0>)
 800accc:	f000 fd1e 	bl	800b70c <__assert_func>
 800acd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800acd4:	6004      	str	r4, [r0, #0]
 800acd6:	60c4      	str	r4, [r0, #12]
 800acd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800acdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ace0:	b94c      	cbnz	r4, 800acf6 <__pow5mult+0x66>
 800ace2:	f240 2171 	movw	r1, #625	; 0x271
 800ace6:	4630      	mov	r0, r6
 800ace8:	f7ff ff14 	bl	800ab14 <__i2b>
 800acec:	2300      	movs	r3, #0
 800acee:	4604      	mov	r4, r0
 800acf0:	f8c8 0008 	str.w	r0, [r8, #8]
 800acf4:	6003      	str	r3, [r0, #0]
 800acf6:	f04f 0900 	mov.w	r9, #0
 800acfa:	07eb      	lsls	r3, r5, #31
 800acfc:	d50a      	bpl.n	800ad14 <__pow5mult+0x84>
 800acfe:	4639      	mov	r1, r7
 800ad00:	4622      	mov	r2, r4
 800ad02:	4630      	mov	r0, r6
 800ad04:	f7ff ff1c 	bl	800ab40 <__multiply>
 800ad08:	4680      	mov	r8, r0
 800ad0a:	4639      	mov	r1, r7
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	f7ff fe01 	bl	800a914 <_Bfree>
 800ad12:	4647      	mov	r7, r8
 800ad14:	106d      	asrs	r5, r5, #1
 800ad16:	d00b      	beq.n	800ad30 <__pow5mult+0xa0>
 800ad18:	6820      	ldr	r0, [r4, #0]
 800ad1a:	b938      	cbnz	r0, 800ad2c <__pow5mult+0x9c>
 800ad1c:	4622      	mov	r2, r4
 800ad1e:	4621      	mov	r1, r4
 800ad20:	4630      	mov	r0, r6
 800ad22:	f7ff ff0d 	bl	800ab40 <__multiply>
 800ad26:	6020      	str	r0, [r4, #0]
 800ad28:	f8c0 9000 	str.w	r9, [r0]
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	e7e4      	b.n	800acfa <__pow5mult+0x6a>
 800ad30:	4638      	mov	r0, r7
 800ad32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad36:	bf00      	nop
 800ad38:	0800c798 	.word	0x0800c798
 800ad3c:	0800c54e 	.word	0x0800c54e
 800ad40:	0800c64c 	.word	0x0800c64c

0800ad44 <__lshift>:
 800ad44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad48:	460c      	mov	r4, r1
 800ad4a:	4607      	mov	r7, r0
 800ad4c:	4691      	mov	r9, r2
 800ad4e:	6923      	ldr	r3, [r4, #16]
 800ad50:	6849      	ldr	r1, [r1, #4]
 800ad52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad56:	68a3      	ldr	r3, [r4, #8]
 800ad58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad5c:	f108 0601 	add.w	r6, r8, #1
 800ad60:	42b3      	cmp	r3, r6
 800ad62:	db0b      	blt.n	800ad7c <__lshift+0x38>
 800ad64:	4638      	mov	r0, r7
 800ad66:	f7ff fd95 	bl	800a894 <_Balloc>
 800ad6a:	4605      	mov	r5, r0
 800ad6c:	b948      	cbnz	r0, 800ad82 <__lshift+0x3e>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ad74:	4b29      	ldr	r3, [pc, #164]	; (800ae1c <__lshift+0xd8>)
 800ad76:	482a      	ldr	r0, [pc, #168]	; (800ae20 <__lshift+0xdc>)
 800ad78:	f000 fcc8 	bl	800b70c <__assert_func>
 800ad7c:	3101      	adds	r1, #1
 800ad7e:	005b      	lsls	r3, r3, #1
 800ad80:	e7ee      	b.n	800ad60 <__lshift+0x1c>
 800ad82:	2300      	movs	r3, #0
 800ad84:	f100 0114 	add.w	r1, r0, #20
 800ad88:	f100 0210 	add.w	r2, r0, #16
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	4553      	cmp	r3, sl
 800ad90:	db37      	blt.n	800ae02 <__lshift+0xbe>
 800ad92:	6920      	ldr	r0, [r4, #16]
 800ad94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad98:	f104 0314 	add.w	r3, r4, #20
 800ad9c:	f019 091f 	ands.w	r9, r9, #31
 800ada0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ada4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ada8:	d02f      	beq.n	800ae0a <__lshift+0xc6>
 800adaa:	468a      	mov	sl, r1
 800adac:	f04f 0c00 	mov.w	ip, #0
 800adb0:	f1c9 0e20 	rsb	lr, r9, #32
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	fa02 f209 	lsl.w	r2, r2, r9
 800adba:	ea42 020c 	orr.w	r2, r2, ip
 800adbe:	f84a 2b04 	str.w	r2, [sl], #4
 800adc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800adc6:	4298      	cmp	r0, r3
 800adc8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800adcc:	d8f2      	bhi.n	800adb4 <__lshift+0x70>
 800adce:	1b03      	subs	r3, r0, r4
 800add0:	3b15      	subs	r3, #21
 800add2:	f023 0303 	bic.w	r3, r3, #3
 800add6:	3304      	adds	r3, #4
 800add8:	f104 0215 	add.w	r2, r4, #21
 800addc:	4290      	cmp	r0, r2
 800adde:	bf38      	it	cc
 800ade0:	2304      	movcc	r3, #4
 800ade2:	f841 c003 	str.w	ip, [r1, r3]
 800ade6:	f1bc 0f00 	cmp.w	ip, #0
 800adea:	d001      	beq.n	800adf0 <__lshift+0xac>
 800adec:	f108 0602 	add.w	r6, r8, #2
 800adf0:	3e01      	subs	r6, #1
 800adf2:	4638      	mov	r0, r7
 800adf4:	4621      	mov	r1, r4
 800adf6:	612e      	str	r6, [r5, #16]
 800adf8:	f7ff fd8c 	bl	800a914 <_Bfree>
 800adfc:	4628      	mov	r0, r5
 800adfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae02:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae06:	3301      	adds	r3, #1
 800ae08:	e7c1      	b.n	800ad8e <__lshift+0x4a>
 800ae0a:	3904      	subs	r1, #4
 800ae0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae10:	4298      	cmp	r0, r3
 800ae12:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae16:	d8f9      	bhi.n	800ae0c <__lshift+0xc8>
 800ae18:	e7ea      	b.n	800adf0 <__lshift+0xac>
 800ae1a:	bf00      	nop
 800ae1c:	0800c5c0 	.word	0x0800c5c0
 800ae20:	0800c64c 	.word	0x0800c64c

0800ae24 <__mcmp>:
 800ae24:	4603      	mov	r3, r0
 800ae26:	690a      	ldr	r2, [r1, #16]
 800ae28:	6900      	ldr	r0, [r0, #16]
 800ae2a:	b530      	push	{r4, r5, lr}
 800ae2c:	1a80      	subs	r0, r0, r2
 800ae2e:	d10d      	bne.n	800ae4c <__mcmp+0x28>
 800ae30:	3314      	adds	r3, #20
 800ae32:	3114      	adds	r1, #20
 800ae34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ae38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ae3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae44:	4295      	cmp	r5, r2
 800ae46:	d002      	beq.n	800ae4e <__mcmp+0x2a>
 800ae48:	d304      	bcc.n	800ae54 <__mcmp+0x30>
 800ae4a:	2001      	movs	r0, #1
 800ae4c:	bd30      	pop	{r4, r5, pc}
 800ae4e:	42a3      	cmp	r3, r4
 800ae50:	d3f4      	bcc.n	800ae3c <__mcmp+0x18>
 800ae52:	e7fb      	b.n	800ae4c <__mcmp+0x28>
 800ae54:	f04f 30ff 	mov.w	r0, #4294967295
 800ae58:	e7f8      	b.n	800ae4c <__mcmp+0x28>
	...

0800ae5c <__mdiff>:
 800ae5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae60:	460d      	mov	r5, r1
 800ae62:	4607      	mov	r7, r0
 800ae64:	4611      	mov	r1, r2
 800ae66:	4628      	mov	r0, r5
 800ae68:	4614      	mov	r4, r2
 800ae6a:	f7ff ffdb 	bl	800ae24 <__mcmp>
 800ae6e:	1e06      	subs	r6, r0, #0
 800ae70:	d111      	bne.n	800ae96 <__mdiff+0x3a>
 800ae72:	4631      	mov	r1, r6
 800ae74:	4638      	mov	r0, r7
 800ae76:	f7ff fd0d 	bl	800a894 <_Balloc>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	b928      	cbnz	r0, 800ae8a <__mdiff+0x2e>
 800ae7e:	f240 2132 	movw	r1, #562	; 0x232
 800ae82:	4b3a      	ldr	r3, [pc, #232]	; (800af6c <__mdiff+0x110>)
 800ae84:	483a      	ldr	r0, [pc, #232]	; (800af70 <__mdiff+0x114>)
 800ae86:	f000 fc41 	bl	800b70c <__assert_func>
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ae90:	4610      	mov	r0, r2
 800ae92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae96:	bfa4      	itt	ge
 800ae98:	4623      	movge	r3, r4
 800ae9a:	462c      	movge	r4, r5
 800ae9c:	4638      	mov	r0, r7
 800ae9e:	6861      	ldr	r1, [r4, #4]
 800aea0:	bfa6      	itte	ge
 800aea2:	461d      	movge	r5, r3
 800aea4:	2600      	movge	r6, #0
 800aea6:	2601      	movlt	r6, #1
 800aea8:	f7ff fcf4 	bl	800a894 <_Balloc>
 800aeac:	4602      	mov	r2, r0
 800aeae:	b918      	cbnz	r0, 800aeb8 <__mdiff+0x5c>
 800aeb0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aeb4:	4b2d      	ldr	r3, [pc, #180]	; (800af6c <__mdiff+0x110>)
 800aeb6:	e7e5      	b.n	800ae84 <__mdiff+0x28>
 800aeb8:	f102 0814 	add.w	r8, r2, #20
 800aebc:	46c2      	mov	sl, r8
 800aebe:	f04f 0c00 	mov.w	ip, #0
 800aec2:	6927      	ldr	r7, [r4, #16]
 800aec4:	60c6      	str	r6, [r0, #12]
 800aec6:	692e      	ldr	r6, [r5, #16]
 800aec8:	f104 0014 	add.w	r0, r4, #20
 800aecc:	f105 0914 	add.w	r9, r5, #20
 800aed0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800aed4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aed8:	3410      	adds	r4, #16
 800aeda:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800aede:	f859 3b04 	ldr.w	r3, [r9], #4
 800aee2:	fa1f f18b 	uxth.w	r1, fp
 800aee6:	448c      	add	ip, r1
 800aee8:	b299      	uxth	r1, r3
 800aeea:	0c1b      	lsrs	r3, r3, #16
 800aeec:	ebac 0101 	sub.w	r1, ip, r1
 800aef0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aef4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800aef8:	b289      	uxth	r1, r1
 800aefa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800aefe:	454e      	cmp	r6, r9
 800af00:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800af04:	f84a 3b04 	str.w	r3, [sl], #4
 800af08:	d8e7      	bhi.n	800aeda <__mdiff+0x7e>
 800af0a:	1b73      	subs	r3, r6, r5
 800af0c:	3b15      	subs	r3, #21
 800af0e:	f023 0303 	bic.w	r3, r3, #3
 800af12:	3515      	adds	r5, #21
 800af14:	3304      	adds	r3, #4
 800af16:	42ae      	cmp	r6, r5
 800af18:	bf38      	it	cc
 800af1a:	2304      	movcc	r3, #4
 800af1c:	4418      	add	r0, r3
 800af1e:	4443      	add	r3, r8
 800af20:	461e      	mov	r6, r3
 800af22:	4605      	mov	r5, r0
 800af24:	4575      	cmp	r5, lr
 800af26:	d30e      	bcc.n	800af46 <__mdiff+0xea>
 800af28:	f10e 0103 	add.w	r1, lr, #3
 800af2c:	1a09      	subs	r1, r1, r0
 800af2e:	f021 0103 	bic.w	r1, r1, #3
 800af32:	3803      	subs	r0, #3
 800af34:	4586      	cmp	lr, r0
 800af36:	bf38      	it	cc
 800af38:	2100      	movcc	r1, #0
 800af3a:	4419      	add	r1, r3
 800af3c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800af40:	b18b      	cbz	r3, 800af66 <__mdiff+0x10a>
 800af42:	6117      	str	r7, [r2, #16]
 800af44:	e7a4      	b.n	800ae90 <__mdiff+0x34>
 800af46:	f855 8b04 	ldr.w	r8, [r5], #4
 800af4a:	fa1f f188 	uxth.w	r1, r8
 800af4e:	4461      	add	r1, ip
 800af50:	140c      	asrs	r4, r1, #16
 800af52:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800af56:	b289      	uxth	r1, r1
 800af58:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800af5c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800af60:	f846 1b04 	str.w	r1, [r6], #4
 800af64:	e7de      	b.n	800af24 <__mdiff+0xc8>
 800af66:	3f01      	subs	r7, #1
 800af68:	e7e8      	b.n	800af3c <__mdiff+0xe0>
 800af6a:	bf00      	nop
 800af6c:	0800c5c0 	.word	0x0800c5c0
 800af70:	0800c64c 	.word	0x0800c64c

0800af74 <__ulp>:
 800af74:	4b11      	ldr	r3, [pc, #68]	; (800afbc <__ulp+0x48>)
 800af76:	400b      	ands	r3, r1
 800af78:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	dd02      	ble.n	800af86 <__ulp+0x12>
 800af80:	2000      	movs	r0, #0
 800af82:	4619      	mov	r1, r3
 800af84:	4770      	bx	lr
 800af86:	425b      	negs	r3, r3
 800af88:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800af8c:	f04f 0000 	mov.w	r0, #0
 800af90:	f04f 0100 	mov.w	r1, #0
 800af94:	ea4f 5223 	mov.w	r2, r3, asr #20
 800af98:	da04      	bge.n	800afa4 <__ulp+0x30>
 800af9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800af9e:	fa43 f102 	asr.w	r1, r3, r2
 800afa2:	4770      	bx	lr
 800afa4:	f1a2 0314 	sub.w	r3, r2, #20
 800afa8:	2b1e      	cmp	r3, #30
 800afaa:	bfd6      	itet	le
 800afac:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800afb0:	2301      	movgt	r3, #1
 800afb2:	fa22 f303 	lsrle.w	r3, r2, r3
 800afb6:	4618      	mov	r0, r3
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	7ff00000 	.word	0x7ff00000

0800afc0 <__b2d>:
 800afc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afc4:	6907      	ldr	r7, [r0, #16]
 800afc6:	f100 0914 	add.w	r9, r0, #20
 800afca:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800afce:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800afd2:	f1a7 0804 	sub.w	r8, r7, #4
 800afd6:	4630      	mov	r0, r6
 800afd8:	f7ff fd4e 	bl	800aa78 <__hi0bits>
 800afdc:	f1c0 0320 	rsb	r3, r0, #32
 800afe0:	280a      	cmp	r0, #10
 800afe2:	600b      	str	r3, [r1, #0]
 800afe4:	491f      	ldr	r1, [pc, #124]	; (800b064 <__b2d+0xa4>)
 800afe6:	dc17      	bgt.n	800b018 <__b2d+0x58>
 800afe8:	45c1      	cmp	r9, r8
 800afea:	bf28      	it	cs
 800afec:	2200      	movcs	r2, #0
 800afee:	f1c0 0c0b 	rsb	ip, r0, #11
 800aff2:	fa26 f30c 	lsr.w	r3, r6, ip
 800aff6:	bf38      	it	cc
 800aff8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800affc:	ea43 0501 	orr.w	r5, r3, r1
 800b000:	f100 0315 	add.w	r3, r0, #21
 800b004:	fa06 f303 	lsl.w	r3, r6, r3
 800b008:	fa22 f20c 	lsr.w	r2, r2, ip
 800b00c:	ea43 0402 	orr.w	r4, r3, r2
 800b010:	4620      	mov	r0, r4
 800b012:	4629      	mov	r1, r5
 800b014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b018:	45c1      	cmp	r9, r8
 800b01a:	bf2e      	itee	cs
 800b01c:	2200      	movcs	r2, #0
 800b01e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b022:	f1a7 0808 	subcc.w	r8, r7, #8
 800b026:	f1b0 030b 	subs.w	r3, r0, #11
 800b02a:	d016      	beq.n	800b05a <__b2d+0x9a>
 800b02c:	f1c3 0720 	rsb	r7, r3, #32
 800b030:	fa22 f107 	lsr.w	r1, r2, r7
 800b034:	45c8      	cmp	r8, r9
 800b036:	fa06 f603 	lsl.w	r6, r6, r3
 800b03a:	ea46 0601 	orr.w	r6, r6, r1
 800b03e:	bf94      	ite	ls
 800b040:	2100      	movls	r1, #0
 800b042:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b046:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b04a:	fa02 f003 	lsl.w	r0, r2, r3
 800b04e:	40f9      	lsrs	r1, r7
 800b050:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b054:	ea40 0401 	orr.w	r4, r0, r1
 800b058:	e7da      	b.n	800b010 <__b2d+0x50>
 800b05a:	4614      	mov	r4, r2
 800b05c:	ea46 0501 	orr.w	r5, r6, r1
 800b060:	e7d6      	b.n	800b010 <__b2d+0x50>
 800b062:	bf00      	nop
 800b064:	3ff00000 	.word	0x3ff00000

0800b068 <__d2b>:
 800b068:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b06c:	2101      	movs	r1, #1
 800b06e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b072:	4690      	mov	r8, r2
 800b074:	461d      	mov	r5, r3
 800b076:	f7ff fc0d 	bl	800a894 <_Balloc>
 800b07a:	4604      	mov	r4, r0
 800b07c:	b930      	cbnz	r0, 800b08c <__d2b+0x24>
 800b07e:	4602      	mov	r2, r0
 800b080:	f240 310a 	movw	r1, #778	; 0x30a
 800b084:	4b24      	ldr	r3, [pc, #144]	; (800b118 <__d2b+0xb0>)
 800b086:	4825      	ldr	r0, [pc, #148]	; (800b11c <__d2b+0xb4>)
 800b088:	f000 fb40 	bl	800b70c <__assert_func>
 800b08c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b090:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b094:	bb2d      	cbnz	r5, 800b0e2 <__d2b+0x7a>
 800b096:	9301      	str	r3, [sp, #4]
 800b098:	f1b8 0300 	subs.w	r3, r8, #0
 800b09c:	d026      	beq.n	800b0ec <__d2b+0x84>
 800b09e:	4668      	mov	r0, sp
 800b0a0:	9300      	str	r3, [sp, #0]
 800b0a2:	f7ff fd09 	bl	800aab8 <__lo0bits>
 800b0a6:	9900      	ldr	r1, [sp, #0]
 800b0a8:	b1f0      	cbz	r0, 800b0e8 <__d2b+0x80>
 800b0aa:	9a01      	ldr	r2, [sp, #4]
 800b0ac:	f1c0 0320 	rsb	r3, r0, #32
 800b0b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b4:	430b      	orrs	r3, r1
 800b0b6:	40c2      	lsrs	r2, r0
 800b0b8:	6163      	str	r3, [r4, #20]
 800b0ba:	9201      	str	r2, [sp, #4]
 800b0bc:	9b01      	ldr	r3, [sp, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	bf14      	ite	ne
 800b0c2:	2102      	movne	r1, #2
 800b0c4:	2101      	moveq	r1, #1
 800b0c6:	61a3      	str	r3, [r4, #24]
 800b0c8:	6121      	str	r1, [r4, #16]
 800b0ca:	b1c5      	cbz	r5, 800b0fe <__d2b+0x96>
 800b0cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b0d0:	4405      	add	r5, r0
 800b0d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b0d6:	603d      	str	r5, [r7, #0]
 800b0d8:	6030      	str	r0, [r6, #0]
 800b0da:	4620      	mov	r0, r4
 800b0dc:	b002      	add	sp, #8
 800b0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0e6:	e7d6      	b.n	800b096 <__d2b+0x2e>
 800b0e8:	6161      	str	r1, [r4, #20]
 800b0ea:	e7e7      	b.n	800b0bc <__d2b+0x54>
 800b0ec:	a801      	add	r0, sp, #4
 800b0ee:	f7ff fce3 	bl	800aab8 <__lo0bits>
 800b0f2:	2101      	movs	r1, #1
 800b0f4:	9b01      	ldr	r3, [sp, #4]
 800b0f6:	6121      	str	r1, [r4, #16]
 800b0f8:	6163      	str	r3, [r4, #20]
 800b0fa:	3020      	adds	r0, #32
 800b0fc:	e7e5      	b.n	800b0ca <__d2b+0x62>
 800b0fe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b102:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b106:	6038      	str	r0, [r7, #0]
 800b108:	6918      	ldr	r0, [r3, #16]
 800b10a:	f7ff fcb5 	bl	800aa78 <__hi0bits>
 800b10e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b112:	6031      	str	r1, [r6, #0]
 800b114:	e7e1      	b.n	800b0da <__d2b+0x72>
 800b116:	bf00      	nop
 800b118:	0800c5c0 	.word	0x0800c5c0
 800b11c:	0800c64c 	.word	0x0800c64c

0800b120 <__ratio>:
 800b120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b124:	4688      	mov	r8, r1
 800b126:	4669      	mov	r1, sp
 800b128:	4681      	mov	r9, r0
 800b12a:	f7ff ff49 	bl	800afc0 <__b2d>
 800b12e:	460f      	mov	r7, r1
 800b130:	4604      	mov	r4, r0
 800b132:	460d      	mov	r5, r1
 800b134:	4640      	mov	r0, r8
 800b136:	a901      	add	r1, sp, #4
 800b138:	f7ff ff42 	bl	800afc0 <__b2d>
 800b13c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b140:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b144:	468b      	mov	fp, r1
 800b146:	eba3 0c02 	sub.w	ip, r3, r2
 800b14a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b14e:	1a9b      	subs	r3, r3, r2
 800b150:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b154:	2b00      	cmp	r3, #0
 800b156:	bfd5      	itete	le
 800b158:	460a      	movle	r2, r1
 800b15a:	462a      	movgt	r2, r5
 800b15c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b160:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b164:	bfd8      	it	le
 800b166:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b16a:	465b      	mov	r3, fp
 800b16c:	4602      	mov	r2, r0
 800b16e:	4639      	mov	r1, r7
 800b170:	4620      	mov	r0, r4
 800b172:	f7f5 fbfb 	bl	800096c <__aeabi_ddiv>
 800b176:	b003      	add	sp, #12
 800b178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b17c <__copybits>:
 800b17c:	3901      	subs	r1, #1
 800b17e:	b570      	push	{r4, r5, r6, lr}
 800b180:	1149      	asrs	r1, r1, #5
 800b182:	6914      	ldr	r4, [r2, #16]
 800b184:	3101      	adds	r1, #1
 800b186:	f102 0314 	add.w	r3, r2, #20
 800b18a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b18e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b192:	1f05      	subs	r5, r0, #4
 800b194:	42a3      	cmp	r3, r4
 800b196:	d30c      	bcc.n	800b1b2 <__copybits+0x36>
 800b198:	1aa3      	subs	r3, r4, r2
 800b19a:	3b11      	subs	r3, #17
 800b19c:	f023 0303 	bic.w	r3, r3, #3
 800b1a0:	3211      	adds	r2, #17
 800b1a2:	42a2      	cmp	r2, r4
 800b1a4:	bf88      	it	hi
 800b1a6:	2300      	movhi	r3, #0
 800b1a8:	4418      	add	r0, r3
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	4288      	cmp	r0, r1
 800b1ae:	d305      	bcc.n	800b1bc <__copybits+0x40>
 800b1b0:	bd70      	pop	{r4, r5, r6, pc}
 800b1b2:	f853 6b04 	ldr.w	r6, [r3], #4
 800b1b6:	f845 6f04 	str.w	r6, [r5, #4]!
 800b1ba:	e7eb      	b.n	800b194 <__copybits+0x18>
 800b1bc:	f840 3b04 	str.w	r3, [r0], #4
 800b1c0:	e7f4      	b.n	800b1ac <__copybits+0x30>

0800b1c2 <__any_on>:
 800b1c2:	f100 0214 	add.w	r2, r0, #20
 800b1c6:	6900      	ldr	r0, [r0, #16]
 800b1c8:	114b      	asrs	r3, r1, #5
 800b1ca:	4298      	cmp	r0, r3
 800b1cc:	b510      	push	{r4, lr}
 800b1ce:	db11      	blt.n	800b1f4 <__any_on+0x32>
 800b1d0:	dd0a      	ble.n	800b1e8 <__any_on+0x26>
 800b1d2:	f011 011f 	ands.w	r1, r1, #31
 800b1d6:	d007      	beq.n	800b1e8 <__any_on+0x26>
 800b1d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b1dc:	fa24 f001 	lsr.w	r0, r4, r1
 800b1e0:	fa00 f101 	lsl.w	r1, r0, r1
 800b1e4:	428c      	cmp	r4, r1
 800b1e6:	d10b      	bne.n	800b200 <__any_on+0x3e>
 800b1e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d803      	bhi.n	800b1f8 <__any_on+0x36>
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	bd10      	pop	{r4, pc}
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	e7f7      	b.n	800b1e8 <__any_on+0x26>
 800b1f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b1fc:	2900      	cmp	r1, #0
 800b1fe:	d0f5      	beq.n	800b1ec <__any_on+0x2a>
 800b200:	2001      	movs	r0, #1
 800b202:	e7f6      	b.n	800b1f2 <__any_on+0x30>

0800b204 <_calloc_r>:
 800b204:	b570      	push	{r4, r5, r6, lr}
 800b206:	fba1 5402 	umull	r5, r4, r1, r2
 800b20a:	b934      	cbnz	r4, 800b21a <_calloc_r+0x16>
 800b20c:	4629      	mov	r1, r5
 800b20e:	f000 f875 	bl	800b2fc <_malloc_r>
 800b212:	4606      	mov	r6, r0
 800b214:	b928      	cbnz	r0, 800b222 <_calloc_r+0x1e>
 800b216:	4630      	mov	r0, r6
 800b218:	bd70      	pop	{r4, r5, r6, pc}
 800b21a:	220c      	movs	r2, #12
 800b21c:	2600      	movs	r6, #0
 800b21e:	6002      	str	r2, [r0, #0]
 800b220:	e7f9      	b.n	800b216 <_calloc_r+0x12>
 800b222:	462a      	mov	r2, r5
 800b224:	4621      	mov	r1, r4
 800b226:	f7fc fbf1 	bl	8007a0c <memset>
 800b22a:	e7f4      	b.n	800b216 <_calloc_r+0x12>

0800b22c <_free_r>:
 800b22c:	b538      	push	{r3, r4, r5, lr}
 800b22e:	4605      	mov	r5, r0
 800b230:	2900      	cmp	r1, #0
 800b232:	d040      	beq.n	800b2b6 <_free_r+0x8a>
 800b234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b238:	1f0c      	subs	r4, r1, #4
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	bfb8      	it	lt
 800b23e:	18e4      	addlt	r4, r4, r3
 800b240:	f000 faae 	bl	800b7a0 <__malloc_lock>
 800b244:	4a1c      	ldr	r2, [pc, #112]	; (800b2b8 <_free_r+0x8c>)
 800b246:	6813      	ldr	r3, [r2, #0]
 800b248:	b933      	cbnz	r3, 800b258 <_free_r+0x2c>
 800b24a:	6063      	str	r3, [r4, #4]
 800b24c:	6014      	str	r4, [r2, #0]
 800b24e:	4628      	mov	r0, r5
 800b250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b254:	f000 baaa 	b.w	800b7ac <__malloc_unlock>
 800b258:	42a3      	cmp	r3, r4
 800b25a:	d908      	bls.n	800b26e <_free_r+0x42>
 800b25c:	6820      	ldr	r0, [r4, #0]
 800b25e:	1821      	adds	r1, r4, r0
 800b260:	428b      	cmp	r3, r1
 800b262:	bf01      	itttt	eq
 800b264:	6819      	ldreq	r1, [r3, #0]
 800b266:	685b      	ldreq	r3, [r3, #4]
 800b268:	1809      	addeq	r1, r1, r0
 800b26a:	6021      	streq	r1, [r4, #0]
 800b26c:	e7ed      	b.n	800b24a <_free_r+0x1e>
 800b26e:	461a      	mov	r2, r3
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	b10b      	cbz	r3, 800b278 <_free_r+0x4c>
 800b274:	42a3      	cmp	r3, r4
 800b276:	d9fa      	bls.n	800b26e <_free_r+0x42>
 800b278:	6811      	ldr	r1, [r2, #0]
 800b27a:	1850      	adds	r0, r2, r1
 800b27c:	42a0      	cmp	r0, r4
 800b27e:	d10b      	bne.n	800b298 <_free_r+0x6c>
 800b280:	6820      	ldr	r0, [r4, #0]
 800b282:	4401      	add	r1, r0
 800b284:	1850      	adds	r0, r2, r1
 800b286:	4283      	cmp	r3, r0
 800b288:	6011      	str	r1, [r2, #0]
 800b28a:	d1e0      	bne.n	800b24e <_free_r+0x22>
 800b28c:	6818      	ldr	r0, [r3, #0]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	4401      	add	r1, r0
 800b292:	6011      	str	r1, [r2, #0]
 800b294:	6053      	str	r3, [r2, #4]
 800b296:	e7da      	b.n	800b24e <_free_r+0x22>
 800b298:	d902      	bls.n	800b2a0 <_free_r+0x74>
 800b29a:	230c      	movs	r3, #12
 800b29c:	602b      	str	r3, [r5, #0]
 800b29e:	e7d6      	b.n	800b24e <_free_r+0x22>
 800b2a0:	6820      	ldr	r0, [r4, #0]
 800b2a2:	1821      	adds	r1, r4, r0
 800b2a4:	428b      	cmp	r3, r1
 800b2a6:	bf01      	itttt	eq
 800b2a8:	6819      	ldreq	r1, [r3, #0]
 800b2aa:	685b      	ldreq	r3, [r3, #4]
 800b2ac:	1809      	addeq	r1, r1, r0
 800b2ae:	6021      	streq	r1, [r4, #0]
 800b2b0:	6063      	str	r3, [r4, #4]
 800b2b2:	6054      	str	r4, [r2, #4]
 800b2b4:	e7cb      	b.n	800b24e <_free_r+0x22>
 800b2b6:	bd38      	pop	{r3, r4, r5, pc}
 800b2b8:	200003bc 	.word	0x200003bc

0800b2bc <sbrk_aligned>:
 800b2bc:	b570      	push	{r4, r5, r6, lr}
 800b2be:	4e0e      	ldr	r6, [pc, #56]	; (800b2f8 <sbrk_aligned+0x3c>)
 800b2c0:	460c      	mov	r4, r1
 800b2c2:	6831      	ldr	r1, [r6, #0]
 800b2c4:	4605      	mov	r5, r0
 800b2c6:	b911      	cbnz	r1, 800b2ce <sbrk_aligned+0x12>
 800b2c8:	f000 f9ee 	bl	800b6a8 <_sbrk_r>
 800b2cc:	6030      	str	r0, [r6, #0]
 800b2ce:	4621      	mov	r1, r4
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	f000 f9e9 	bl	800b6a8 <_sbrk_r>
 800b2d6:	1c43      	adds	r3, r0, #1
 800b2d8:	d00a      	beq.n	800b2f0 <sbrk_aligned+0x34>
 800b2da:	1cc4      	adds	r4, r0, #3
 800b2dc:	f024 0403 	bic.w	r4, r4, #3
 800b2e0:	42a0      	cmp	r0, r4
 800b2e2:	d007      	beq.n	800b2f4 <sbrk_aligned+0x38>
 800b2e4:	1a21      	subs	r1, r4, r0
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	f000 f9de 	bl	800b6a8 <_sbrk_r>
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	d101      	bne.n	800b2f4 <sbrk_aligned+0x38>
 800b2f0:	f04f 34ff 	mov.w	r4, #4294967295
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	bd70      	pop	{r4, r5, r6, pc}
 800b2f8:	200003c0 	.word	0x200003c0

0800b2fc <_malloc_r>:
 800b2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b300:	1ccd      	adds	r5, r1, #3
 800b302:	f025 0503 	bic.w	r5, r5, #3
 800b306:	3508      	adds	r5, #8
 800b308:	2d0c      	cmp	r5, #12
 800b30a:	bf38      	it	cc
 800b30c:	250c      	movcc	r5, #12
 800b30e:	2d00      	cmp	r5, #0
 800b310:	4607      	mov	r7, r0
 800b312:	db01      	blt.n	800b318 <_malloc_r+0x1c>
 800b314:	42a9      	cmp	r1, r5
 800b316:	d905      	bls.n	800b324 <_malloc_r+0x28>
 800b318:	230c      	movs	r3, #12
 800b31a:	2600      	movs	r6, #0
 800b31c:	603b      	str	r3, [r7, #0]
 800b31e:	4630      	mov	r0, r6
 800b320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b324:	4e2e      	ldr	r6, [pc, #184]	; (800b3e0 <_malloc_r+0xe4>)
 800b326:	f000 fa3b 	bl	800b7a0 <__malloc_lock>
 800b32a:	6833      	ldr	r3, [r6, #0]
 800b32c:	461c      	mov	r4, r3
 800b32e:	bb34      	cbnz	r4, 800b37e <_malloc_r+0x82>
 800b330:	4629      	mov	r1, r5
 800b332:	4638      	mov	r0, r7
 800b334:	f7ff ffc2 	bl	800b2bc <sbrk_aligned>
 800b338:	1c43      	adds	r3, r0, #1
 800b33a:	4604      	mov	r4, r0
 800b33c:	d14d      	bne.n	800b3da <_malloc_r+0xde>
 800b33e:	6834      	ldr	r4, [r6, #0]
 800b340:	4626      	mov	r6, r4
 800b342:	2e00      	cmp	r6, #0
 800b344:	d140      	bne.n	800b3c8 <_malloc_r+0xcc>
 800b346:	6823      	ldr	r3, [r4, #0]
 800b348:	4631      	mov	r1, r6
 800b34a:	4638      	mov	r0, r7
 800b34c:	eb04 0803 	add.w	r8, r4, r3
 800b350:	f000 f9aa 	bl	800b6a8 <_sbrk_r>
 800b354:	4580      	cmp	r8, r0
 800b356:	d13a      	bne.n	800b3ce <_malloc_r+0xd2>
 800b358:	6821      	ldr	r1, [r4, #0]
 800b35a:	3503      	adds	r5, #3
 800b35c:	1a6d      	subs	r5, r5, r1
 800b35e:	f025 0503 	bic.w	r5, r5, #3
 800b362:	3508      	adds	r5, #8
 800b364:	2d0c      	cmp	r5, #12
 800b366:	bf38      	it	cc
 800b368:	250c      	movcc	r5, #12
 800b36a:	4638      	mov	r0, r7
 800b36c:	4629      	mov	r1, r5
 800b36e:	f7ff ffa5 	bl	800b2bc <sbrk_aligned>
 800b372:	3001      	adds	r0, #1
 800b374:	d02b      	beq.n	800b3ce <_malloc_r+0xd2>
 800b376:	6823      	ldr	r3, [r4, #0]
 800b378:	442b      	add	r3, r5
 800b37a:	6023      	str	r3, [r4, #0]
 800b37c:	e00e      	b.n	800b39c <_malloc_r+0xa0>
 800b37e:	6822      	ldr	r2, [r4, #0]
 800b380:	1b52      	subs	r2, r2, r5
 800b382:	d41e      	bmi.n	800b3c2 <_malloc_r+0xc6>
 800b384:	2a0b      	cmp	r2, #11
 800b386:	d916      	bls.n	800b3b6 <_malloc_r+0xba>
 800b388:	1961      	adds	r1, r4, r5
 800b38a:	42a3      	cmp	r3, r4
 800b38c:	6025      	str	r5, [r4, #0]
 800b38e:	bf18      	it	ne
 800b390:	6059      	strne	r1, [r3, #4]
 800b392:	6863      	ldr	r3, [r4, #4]
 800b394:	bf08      	it	eq
 800b396:	6031      	streq	r1, [r6, #0]
 800b398:	5162      	str	r2, [r4, r5]
 800b39a:	604b      	str	r3, [r1, #4]
 800b39c:	4638      	mov	r0, r7
 800b39e:	f104 060b 	add.w	r6, r4, #11
 800b3a2:	f000 fa03 	bl	800b7ac <__malloc_unlock>
 800b3a6:	f026 0607 	bic.w	r6, r6, #7
 800b3aa:	1d23      	adds	r3, r4, #4
 800b3ac:	1af2      	subs	r2, r6, r3
 800b3ae:	d0b6      	beq.n	800b31e <_malloc_r+0x22>
 800b3b0:	1b9b      	subs	r3, r3, r6
 800b3b2:	50a3      	str	r3, [r4, r2]
 800b3b4:	e7b3      	b.n	800b31e <_malloc_r+0x22>
 800b3b6:	6862      	ldr	r2, [r4, #4]
 800b3b8:	42a3      	cmp	r3, r4
 800b3ba:	bf0c      	ite	eq
 800b3bc:	6032      	streq	r2, [r6, #0]
 800b3be:	605a      	strne	r2, [r3, #4]
 800b3c0:	e7ec      	b.n	800b39c <_malloc_r+0xa0>
 800b3c2:	4623      	mov	r3, r4
 800b3c4:	6864      	ldr	r4, [r4, #4]
 800b3c6:	e7b2      	b.n	800b32e <_malloc_r+0x32>
 800b3c8:	4634      	mov	r4, r6
 800b3ca:	6876      	ldr	r6, [r6, #4]
 800b3cc:	e7b9      	b.n	800b342 <_malloc_r+0x46>
 800b3ce:	230c      	movs	r3, #12
 800b3d0:	4638      	mov	r0, r7
 800b3d2:	603b      	str	r3, [r7, #0]
 800b3d4:	f000 f9ea 	bl	800b7ac <__malloc_unlock>
 800b3d8:	e7a1      	b.n	800b31e <_malloc_r+0x22>
 800b3da:	6025      	str	r5, [r4, #0]
 800b3dc:	e7de      	b.n	800b39c <_malloc_r+0xa0>
 800b3de:	bf00      	nop
 800b3e0:	200003bc 	.word	0x200003bc

0800b3e4 <__ssputs_r>:
 800b3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3e8:	688e      	ldr	r6, [r1, #8]
 800b3ea:	4682      	mov	sl, r0
 800b3ec:	429e      	cmp	r6, r3
 800b3ee:	460c      	mov	r4, r1
 800b3f0:	4690      	mov	r8, r2
 800b3f2:	461f      	mov	r7, r3
 800b3f4:	d838      	bhi.n	800b468 <__ssputs_r+0x84>
 800b3f6:	898a      	ldrh	r2, [r1, #12]
 800b3f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3fc:	d032      	beq.n	800b464 <__ssputs_r+0x80>
 800b3fe:	6825      	ldr	r5, [r4, #0]
 800b400:	6909      	ldr	r1, [r1, #16]
 800b402:	3301      	adds	r3, #1
 800b404:	eba5 0901 	sub.w	r9, r5, r1
 800b408:	6965      	ldr	r5, [r4, #20]
 800b40a:	444b      	add	r3, r9
 800b40c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b410:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b414:	106d      	asrs	r5, r5, #1
 800b416:	429d      	cmp	r5, r3
 800b418:	bf38      	it	cc
 800b41a:	461d      	movcc	r5, r3
 800b41c:	0553      	lsls	r3, r2, #21
 800b41e:	d531      	bpl.n	800b484 <__ssputs_r+0xa0>
 800b420:	4629      	mov	r1, r5
 800b422:	f7ff ff6b 	bl	800b2fc <_malloc_r>
 800b426:	4606      	mov	r6, r0
 800b428:	b950      	cbnz	r0, 800b440 <__ssputs_r+0x5c>
 800b42a:	230c      	movs	r3, #12
 800b42c:	f04f 30ff 	mov.w	r0, #4294967295
 800b430:	f8ca 3000 	str.w	r3, [sl]
 800b434:	89a3      	ldrh	r3, [r4, #12]
 800b436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b43a:	81a3      	strh	r3, [r4, #12]
 800b43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b440:	464a      	mov	r2, r9
 800b442:	6921      	ldr	r1, [r4, #16]
 800b444:	f7ff fa18 	bl	800a878 <memcpy>
 800b448:	89a3      	ldrh	r3, [r4, #12]
 800b44a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b44e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b452:	81a3      	strh	r3, [r4, #12]
 800b454:	6126      	str	r6, [r4, #16]
 800b456:	444e      	add	r6, r9
 800b458:	6026      	str	r6, [r4, #0]
 800b45a:	463e      	mov	r6, r7
 800b45c:	6165      	str	r5, [r4, #20]
 800b45e:	eba5 0509 	sub.w	r5, r5, r9
 800b462:	60a5      	str	r5, [r4, #8]
 800b464:	42be      	cmp	r6, r7
 800b466:	d900      	bls.n	800b46a <__ssputs_r+0x86>
 800b468:	463e      	mov	r6, r7
 800b46a:	4632      	mov	r2, r6
 800b46c:	4641      	mov	r1, r8
 800b46e:	6820      	ldr	r0, [r4, #0]
 800b470:	f000 f97c 	bl	800b76c <memmove>
 800b474:	68a3      	ldr	r3, [r4, #8]
 800b476:	2000      	movs	r0, #0
 800b478:	1b9b      	subs	r3, r3, r6
 800b47a:	60a3      	str	r3, [r4, #8]
 800b47c:	6823      	ldr	r3, [r4, #0]
 800b47e:	4433      	add	r3, r6
 800b480:	6023      	str	r3, [r4, #0]
 800b482:	e7db      	b.n	800b43c <__ssputs_r+0x58>
 800b484:	462a      	mov	r2, r5
 800b486:	f000 f997 	bl	800b7b8 <_realloc_r>
 800b48a:	4606      	mov	r6, r0
 800b48c:	2800      	cmp	r0, #0
 800b48e:	d1e1      	bne.n	800b454 <__ssputs_r+0x70>
 800b490:	4650      	mov	r0, sl
 800b492:	6921      	ldr	r1, [r4, #16]
 800b494:	f7ff feca 	bl	800b22c <_free_r>
 800b498:	e7c7      	b.n	800b42a <__ssputs_r+0x46>
	...

0800b49c <_svfiprintf_r>:
 800b49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a0:	4698      	mov	r8, r3
 800b4a2:	898b      	ldrh	r3, [r1, #12]
 800b4a4:	4607      	mov	r7, r0
 800b4a6:	061b      	lsls	r3, r3, #24
 800b4a8:	460d      	mov	r5, r1
 800b4aa:	4614      	mov	r4, r2
 800b4ac:	b09d      	sub	sp, #116	; 0x74
 800b4ae:	d50e      	bpl.n	800b4ce <_svfiprintf_r+0x32>
 800b4b0:	690b      	ldr	r3, [r1, #16]
 800b4b2:	b963      	cbnz	r3, 800b4ce <_svfiprintf_r+0x32>
 800b4b4:	2140      	movs	r1, #64	; 0x40
 800b4b6:	f7ff ff21 	bl	800b2fc <_malloc_r>
 800b4ba:	6028      	str	r0, [r5, #0]
 800b4bc:	6128      	str	r0, [r5, #16]
 800b4be:	b920      	cbnz	r0, 800b4ca <_svfiprintf_r+0x2e>
 800b4c0:	230c      	movs	r3, #12
 800b4c2:	603b      	str	r3, [r7, #0]
 800b4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c8:	e0d1      	b.n	800b66e <_svfiprintf_r+0x1d2>
 800b4ca:	2340      	movs	r3, #64	; 0x40
 800b4cc:	616b      	str	r3, [r5, #20]
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b4d2:	2320      	movs	r3, #32
 800b4d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4d8:	2330      	movs	r3, #48	; 0x30
 800b4da:	f04f 0901 	mov.w	r9, #1
 800b4de:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b688 <_svfiprintf_r+0x1ec>
 800b4e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4ea:	4623      	mov	r3, r4
 800b4ec:	469a      	mov	sl, r3
 800b4ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4f2:	b10a      	cbz	r2, 800b4f8 <_svfiprintf_r+0x5c>
 800b4f4:	2a25      	cmp	r2, #37	; 0x25
 800b4f6:	d1f9      	bne.n	800b4ec <_svfiprintf_r+0x50>
 800b4f8:	ebba 0b04 	subs.w	fp, sl, r4
 800b4fc:	d00b      	beq.n	800b516 <_svfiprintf_r+0x7a>
 800b4fe:	465b      	mov	r3, fp
 800b500:	4622      	mov	r2, r4
 800b502:	4629      	mov	r1, r5
 800b504:	4638      	mov	r0, r7
 800b506:	f7ff ff6d 	bl	800b3e4 <__ssputs_r>
 800b50a:	3001      	adds	r0, #1
 800b50c:	f000 80aa 	beq.w	800b664 <_svfiprintf_r+0x1c8>
 800b510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b512:	445a      	add	r2, fp
 800b514:	9209      	str	r2, [sp, #36]	; 0x24
 800b516:	f89a 3000 	ldrb.w	r3, [sl]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	f000 80a2 	beq.w	800b664 <_svfiprintf_r+0x1c8>
 800b520:	2300      	movs	r3, #0
 800b522:	f04f 32ff 	mov.w	r2, #4294967295
 800b526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b52a:	f10a 0a01 	add.w	sl, sl, #1
 800b52e:	9304      	str	r3, [sp, #16]
 800b530:	9307      	str	r3, [sp, #28]
 800b532:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b536:	931a      	str	r3, [sp, #104]	; 0x68
 800b538:	4654      	mov	r4, sl
 800b53a:	2205      	movs	r2, #5
 800b53c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b540:	4851      	ldr	r0, [pc, #324]	; (800b688 <_svfiprintf_r+0x1ec>)
 800b542:	f7ff f98b 	bl	800a85c <memchr>
 800b546:	9a04      	ldr	r2, [sp, #16]
 800b548:	b9d8      	cbnz	r0, 800b582 <_svfiprintf_r+0xe6>
 800b54a:	06d0      	lsls	r0, r2, #27
 800b54c:	bf44      	itt	mi
 800b54e:	2320      	movmi	r3, #32
 800b550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b554:	0711      	lsls	r1, r2, #28
 800b556:	bf44      	itt	mi
 800b558:	232b      	movmi	r3, #43	; 0x2b
 800b55a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b55e:	f89a 3000 	ldrb.w	r3, [sl]
 800b562:	2b2a      	cmp	r3, #42	; 0x2a
 800b564:	d015      	beq.n	800b592 <_svfiprintf_r+0xf6>
 800b566:	4654      	mov	r4, sl
 800b568:	2000      	movs	r0, #0
 800b56a:	f04f 0c0a 	mov.w	ip, #10
 800b56e:	9a07      	ldr	r2, [sp, #28]
 800b570:	4621      	mov	r1, r4
 800b572:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b576:	3b30      	subs	r3, #48	; 0x30
 800b578:	2b09      	cmp	r3, #9
 800b57a:	d94e      	bls.n	800b61a <_svfiprintf_r+0x17e>
 800b57c:	b1b0      	cbz	r0, 800b5ac <_svfiprintf_r+0x110>
 800b57e:	9207      	str	r2, [sp, #28]
 800b580:	e014      	b.n	800b5ac <_svfiprintf_r+0x110>
 800b582:	eba0 0308 	sub.w	r3, r0, r8
 800b586:	fa09 f303 	lsl.w	r3, r9, r3
 800b58a:	4313      	orrs	r3, r2
 800b58c:	46a2      	mov	sl, r4
 800b58e:	9304      	str	r3, [sp, #16]
 800b590:	e7d2      	b.n	800b538 <_svfiprintf_r+0x9c>
 800b592:	9b03      	ldr	r3, [sp, #12]
 800b594:	1d19      	adds	r1, r3, #4
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	9103      	str	r1, [sp, #12]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	bfbb      	ittet	lt
 800b59e:	425b      	neglt	r3, r3
 800b5a0:	f042 0202 	orrlt.w	r2, r2, #2
 800b5a4:	9307      	strge	r3, [sp, #28]
 800b5a6:	9307      	strlt	r3, [sp, #28]
 800b5a8:	bfb8      	it	lt
 800b5aa:	9204      	strlt	r2, [sp, #16]
 800b5ac:	7823      	ldrb	r3, [r4, #0]
 800b5ae:	2b2e      	cmp	r3, #46	; 0x2e
 800b5b0:	d10c      	bne.n	800b5cc <_svfiprintf_r+0x130>
 800b5b2:	7863      	ldrb	r3, [r4, #1]
 800b5b4:	2b2a      	cmp	r3, #42	; 0x2a
 800b5b6:	d135      	bne.n	800b624 <_svfiprintf_r+0x188>
 800b5b8:	9b03      	ldr	r3, [sp, #12]
 800b5ba:	3402      	adds	r4, #2
 800b5bc:	1d1a      	adds	r2, r3, #4
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	9203      	str	r2, [sp, #12]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	bfb8      	it	lt
 800b5c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5ca:	9305      	str	r3, [sp, #20]
 800b5cc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b68c <_svfiprintf_r+0x1f0>
 800b5d0:	2203      	movs	r2, #3
 800b5d2:	4650      	mov	r0, sl
 800b5d4:	7821      	ldrb	r1, [r4, #0]
 800b5d6:	f7ff f941 	bl	800a85c <memchr>
 800b5da:	b140      	cbz	r0, 800b5ee <_svfiprintf_r+0x152>
 800b5dc:	2340      	movs	r3, #64	; 0x40
 800b5de:	eba0 000a 	sub.w	r0, r0, sl
 800b5e2:	fa03 f000 	lsl.w	r0, r3, r0
 800b5e6:	9b04      	ldr	r3, [sp, #16]
 800b5e8:	3401      	adds	r4, #1
 800b5ea:	4303      	orrs	r3, r0
 800b5ec:	9304      	str	r3, [sp, #16]
 800b5ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5f2:	2206      	movs	r2, #6
 800b5f4:	4826      	ldr	r0, [pc, #152]	; (800b690 <_svfiprintf_r+0x1f4>)
 800b5f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5fa:	f7ff f92f 	bl	800a85c <memchr>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	d038      	beq.n	800b674 <_svfiprintf_r+0x1d8>
 800b602:	4b24      	ldr	r3, [pc, #144]	; (800b694 <_svfiprintf_r+0x1f8>)
 800b604:	bb1b      	cbnz	r3, 800b64e <_svfiprintf_r+0x1b2>
 800b606:	9b03      	ldr	r3, [sp, #12]
 800b608:	3307      	adds	r3, #7
 800b60a:	f023 0307 	bic.w	r3, r3, #7
 800b60e:	3308      	adds	r3, #8
 800b610:	9303      	str	r3, [sp, #12]
 800b612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b614:	4433      	add	r3, r6
 800b616:	9309      	str	r3, [sp, #36]	; 0x24
 800b618:	e767      	b.n	800b4ea <_svfiprintf_r+0x4e>
 800b61a:	460c      	mov	r4, r1
 800b61c:	2001      	movs	r0, #1
 800b61e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b622:	e7a5      	b.n	800b570 <_svfiprintf_r+0xd4>
 800b624:	2300      	movs	r3, #0
 800b626:	f04f 0c0a 	mov.w	ip, #10
 800b62a:	4619      	mov	r1, r3
 800b62c:	3401      	adds	r4, #1
 800b62e:	9305      	str	r3, [sp, #20]
 800b630:	4620      	mov	r0, r4
 800b632:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b636:	3a30      	subs	r2, #48	; 0x30
 800b638:	2a09      	cmp	r2, #9
 800b63a:	d903      	bls.n	800b644 <_svfiprintf_r+0x1a8>
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d0c5      	beq.n	800b5cc <_svfiprintf_r+0x130>
 800b640:	9105      	str	r1, [sp, #20]
 800b642:	e7c3      	b.n	800b5cc <_svfiprintf_r+0x130>
 800b644:	4604      	mov	r4, r0
 800b646:	2301      	movs	r3, #1
 800b648:	fb0c 2101 	mla	r1, ip, r1, r2
 800b64c:	e7f0      	b.n	800b630 <_svfiprintf_r+0x194>
 800b64e:	ab03      	add	r3, sp, #12
 800b650:	9300      	str	r3, [sp, #0]
 800b652:	462a      	mov	r2, r5
 800b654:	4638      	mov	r0, r7
 800b656:	4b10      	ldr	r3, [pc, #64]	; (800b698 <_svfiprintf_r+0x1fc>)
 800b658:	a904      	add	r1, sp, #16
 800b65a:	f7fc fa7d 	bl	8007b58 <_printf_float>
 800b65e:	1c42      	adds	r2, r0, #1
 800b660:	4606      	mov	r6, r0
 800b662:	d1d6      	bne.n	800b612 <_svfiprintf_r+0x176>
 800b664:	89ab      	ldrh	r3, [r5, #12]
 800b666:	065b      	lsls	r3, r3, #25
 800b668:	f53f af2c 	bmi.w	800b4c4 <_svfiprintf_r+0x28>
 800b66c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b66e:	b01d      	add	sp, #116	; 0x74
 800b670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b674:	ab03      	add	r3, sp, #12
 800b676:	9300      	str	r3, [sp, #0]
 800b678:	462a      	mov	r2, r5
 800b67a:	4638      	mov	r0, r7
 800b67c:	4b06      	ldr	r3, [pc, #24]	; (800b698 <_svfiprintf_r+0x1fc>)
 800b67e:	a904      	add	r1, sp, #16
 800b680:	f7fc fd06 	bl	8008090 <_printf_i>
 800b684:	e7eb      	b.n	800b65e <_svfiprintf_r+0x1c2>
 800b686:	bf00      	nop
 800b688:	0800c7a4 	.word	0x0800c7a4
 800b68c:	0800c7aa 	.word	0x0800c7aa
 800b690:	0800c7ae 	.word	0x0800c7ae
 800b694:	08007b59 	.word	0x08007b59
 800b698:	0800b3e5 	.word	0x0800b3e5

0800b69c <nan>:
 800b69c:	2000      	movs	r0, #0
 800b69e:	4901      	ldr	r1, [pc, #4]	; (800b6a4 <nan+0x8>)
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	7ff80000 	.word	0x7ff80000

0800b6a8 <_sbrk_r>:
 800b6a8:	b538      	push	{r3, r4, r5, lr}
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	4d05      	ldr	r5, [pc, #20]	; (800b6c4 <_sbrk_r+0x1c>)
 800b6ae:	4604      	mov	r4, r0
 800b6b0:	4608      	mov	r0, r1
 800b6b2:	602b      	str	r3, [r5, #0]
 800b6b4:	f7f7 f9f6 	bl	8002aa4 <_sbrk>
 800b6b8:	1c43      	adds	r3, r0, #1
 800b6ba:	d102      	bne.n	800b6c2 <_sbrk_r+0x1a>
 800b6bc:	682b      	ldr	r3, [r5, #0]
 800b6be:	b103      	cbz	r3, 800b6c2 <_sbrk_r+0x1a>
 800b6c0:	6023      	str	r3, [r4, #0]
 800b6c2:	bd38      	pop	{r3, r4, r5, pc}
 800b6c4:	200003c4 	.word	0x200003c4

0800b6c8 <strncmp>:
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	b510      	push	{r4, lr}
 800b6cc:	b172      	cbz	r2, 800b6ec <strncmp+0x24>
 800b6ce:	3901      	subs	r1, #1
 800b6d0:	1884      	adds	r4, r0, r2
 800b6d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b6d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b6da:	4290      	cmp	r0, r2
 800b6dc:	d101      	bne.n	800b6e2 <strncmp+0x1a>
 800b6de:	42a3      	cmp	r3, r4
 800b6e0:	d101      	bne.n	800b6e6 <strncmp+0x1e>
 800b6e2:	1a80      	subs	r0, r0, r2
 800b6e4:	bd10      	pop	{r4, pc}
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	d1f3      	bne.n	800b6d2 <strncmp+0xa>
 800b6ea:	e7fa      	b.n	800b6e2 <strncmp+0x1a>
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	e7f9      	b.n	800b6e4 <strncmp+0x1c>

0800b6f0 <__ascii_wctomb>:
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	4608      	mov	r0, r1
 800b6f4:	b141      	cbz	r1, 800b708 <__ascii_wctomb+0x18>
 800b6f6:	2aff      	cmp	r2, #255	; 0xff
 800b6f8:	d904      	bls.n	800b704 <__ascii_wctomb+0x14>
 800b6fa:	228a      	movs	r2, #138	; 0x8a
 800b6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b700:	601a      	str	r2, [r3, #0]
 800b702:	4770      	bx	lr
 800b704:	2001      	movs	r0, #1
 800b706:	700a      	strb	r2, [r1, #0]
 800b708:	4770      	bx	lr
	...

0800b70c <__assert_func>:
 800b70c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b70e:	4614      	mov	r4, r2
 800b710:	461a      	mov	r2, r3
 800b712:	4b09      	ldr	r3, [pc, #36]	; (800b738 <__assert_func+0x2c>)
 800b714:	4605      	mov	r5, r0
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	68d8      	ldr	r0, [r3, #12]
 800b71a:	b14c      	cbz	r4, 800b730 <__assert_func+0x24>
 800b71c:	4b07      	ldr	r3, [pc, #28]	; (800b73c <__assert_func+0x30>)
 800b71e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b722:	9100      	str	r1, [sp, #0]
 800b724:	462b      	mov	r3, r5
 800b726:	4906      	ldr	r1, [pc, #24]	; (800b740 <__assert_func+0x34>)
 800b728:	f000 f80e 	bl	800b748 <fiprintf>
 800b72c:	f000 fa8a 	bl	800bc44 <abort>
 800b730:	4b04      	ldr	r3, [pc, #16]	; (800b744 <__assert_func+0x38>)
 800b732:	461c      	mov	r4, r3
 800b734:	e7f3      	b.n	800b71e <__assert_func+0x12>
 800b736:	bf00      	nop
 800b738:	2000000c 	.word	0x2000000c
 800b73c:	0800c7b5 	.word	0x0800c7b5
 800b740:	0800c7c2 	.word	0x0800c7c2
 800b744:	0800c7f0 	.word	0x0800c7f0

0800b748 <fiprintf>:
 800b748:	b40e      	push	{r1, r2, r3}
 800b74a:	b503      	push	{r0, r1, lr}
 800b74c:	4601      	mov	r1, r0
 800b74e:	ab03      	add	r3, sp, #12
 800b750:	4805      	ldr	r0, [pc, #20]	; (800b768 <fiprintf+0x20>)
 800b752:	f853 2b04 	ldr.w	r2, [r3], #4
 800b756:	6800      	ldr	r0, [r0, #0]
 800b758:	9301      	str	r3, [sp, #4]
 800b75a:	f000 f883 	bl	800b864 <_vfiprintf_r>
 800b75e:	b002      	add	sp, #8
 800b760:	f85d eb04 	ldr.w	lr, [sp], #4
 800b764:	b003      	add	sp, #12
 800b766:	4770      	bx	lr
 800b768:	2000000c 	.word	0x2000000c

0800b76c <memmove>:
 800b76c:	4288      	cmp	r0, r1
 800b76e:	b510      	push	{r4, lr}
 800b770:	eb01 0402 	add.w	r4, r1, r2
 800b774:	d902      	bls.n	800b77c <memmove+0x10>
 800b776:	4284      	cmp	r4, r0
 800b778:	4623      	mov	r3, r4
 800b77a:	d807      	bhi.n	800b78c <memmove+0x20>
 800b77c:	1e43      	subs	r3, r0, #1
 800b77e:	42a1      	cmp	r1, r4
 800b780:	d008      	beq.n	800b794 <memmove+0x28>
 800b782:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b786:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b78a:	e7f8      	b.n	800b77e <memmove+0x12>
 800b78c:	4601      	mov	r1, r0
 800b78e:	4402      	add	r2, r0
 800b790:	428a      	cmp	r2, r1
 800b792:	d100      	bne.n	800b796 <memmove+0x2a>
 800b794:	bd10      	pop	{r4, pc}
 800b796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b79a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b79e:	e7f7      	b.n	800b790 <memmove+0x24>

0800b7a0 <__malloc_lock>:
 800b7a0:	4801      	ldr	r0, [pc, #4]	; (800b7a8 <__malloc_lock+0x8>)
 800b7a2:	f000 bc0b 	b.w	800bfbc <__retarget_lock_acquire_recursive>
 800b7a6:	bf00      	nop
 800b7a8:	200003c8 	.word	0x200003c8

0800b7ac <__malloc_unlock>:
 800b7ac:	4801      	ldr	r0, [pc, #4]	; (800b7b4 <__malloc_unlock+0x8>)
 800b7ae:	f000 bc06 	b.w	800bfbe <__retarget_lock_release_recursive>
 800b7b2:	bf00      	nop
 800b7b4:	200003c8 	.word	0x200003c8

0800b7b8 <_realloc_r>:
 800b7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7bc:	4680      	mov	r8, r0
 800b7be:	4614      	mov	r4, r2
 800b7c0:	460e      	mov	r6, r1
 800b7c2:	b921      	cbnz	r1, 800b7ce <_realloc_r+0x16>
 800b7c4:	4611      	mov	r1, r2
 800b7c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ca:	f7ff bd97 	b.w	800b2fc <_malloc_r>
 800b7ce:	b92a      	cbnz	r2, 800b7dc <_realloc_r+0x24>
 800b7d0:	f7ff fd2c 	bl	800b22c <_free_r>
 800b7d4:	4625      	mov	r5, r4
 800b7d6:	4628      	mov	r0, r5
 800b7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7dc:	f000 fc56 	bl	800c08c <_malloc_usable_size_r>
 800b7e0:	4284      	cmp	r4, r0
 800b7e2:	4607      	mov	r7, r0
 800b7e4:	d802      	bhi.n	800b7ec <_realloc_r+0x34>
 800b7e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b7ea:	d812      	bhi.n	800b812 <_realloc_r+0x5a>
 800b7ec:	4621      	mov	r1, r4
 800b7ee:	4640      	mov	r0, r8
 800b7f0:	f7ff fd84 	bl	800b2fc <_malloc_r>
 800b7f4:	4605      	mov	r5, r0
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	d0ed      	beq.n	800b7d6 <_realloc_r+0x1e>
 800b7fa:	42bc      	cmp	r4, r7
 800b7fc:	4622      	mov	r2, r4
 800b7fe:	4631      	mov	r1, r6
 800b800:	bf28      	it	cs
 800b802:	463a      	movcs	r2, r7
 800b804:	f7ff f838 	bl	800a878 <memcpy>
 800b808:	4631      	mov	r1, r6
 800b80a:	4640      	mov	r0, r8
 800b80c:	f7ff fd0e 	bl	800b22c <_free_r>
 800b810:	e7e1      	b.n	800b7d6 <_realloc_r+0x1e>
 800b812:	4635      	mov	r5, r6
 800b814:	e7df      	b.n	800b7d6 <_realloc_r+0x1e>

0800b816 <__sfputc_r>:
 800b816:	6893      	ldr	r3, [r2, #8]
 800b818:	b410      	push	{r4}
 800b81a:	3b01      	subs	r3, #1
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	6093      	str	r3, [r2, #8]
 800b820:	da07      	bge.n	800b832 <__sfputc_r+0x1c>
 800b822:	6994      	ldr	r4, [r2, #24]
 800b824:	42a3      	cmp	r3, r4
 800b826:	db01      	blt.n	800b82c <__sfputc_r+0x16>
 800b828:	290a      	cmp	r1, #10
 800b82a:	d102      	bne.n	800b832 <__sfputc_r+0x1c>
 800b82c:	bc10      	pop	{r4}
 800b82e:	f000 b949 	b.w	800bac4 <__swbuf_r>
 800b832:	6813      	ldr	r3, [r2, #0]
 800b834:	1c58      	adds	r0, r3, #1
 800b836:	6010      	str	r0, [r2, #0]
 800b838:	7019      	strb	r1, [r3, #0]
 800b83a:	4608      	mov	r0, r1
 800b83c:	bc10      	pop	{r4}
 800b83e:	4770      	bx	lr

0800b840 <__sfputs_r>:
 800b840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b842:	4606      	mov	r6, r0
 800b844:	460f      	mov	r7, r1
 800b846:	4614      	mov	r4, r2
 800b848:	18d5      	adds	r5, r2, r3
 800b84a:	42ac      	cmp	r4, r5
 800b84c:	d101      	bne.n	800b852 <__sfputs_r+0x12>
 800b84e:	2000      	movs	r0, #0
 800b850:	e007      	b.n	800b862 <__sfputs_r+0x22>
 800b852:	463a      	mov	r2, r7
 800b854:	4630      	mov	r0, r6
 800b856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b85a:	f7ff ffdc 	bl	800b816 <__sfputc_r>
 800b85e:	1c43      	adds	r3, r0, #1
 800b860:	d1f3      	bne.n	800b84a <__sfputs_r+0xa>
 800b862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b864 <_vfiprintf_r>:
 800b864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b868:	460d      	mov	r5, r1
 800b86a:	4614      	mov	r4, r2
 800b86c:	4698      	mov	r8, r3
 800b86e:	4606      	mov	r6, r0
 800b870:	b09d      	sub	sp, #116	; 0x74
 800b872:	b118      	cbz	r0, 800b87c <_vfiprintf_r+0x18>
 800b874:	6983      	ldr	r3, [r0, #24]
 800b876:	b90b      	cbnz	r3, 800b87c <_vfiprintf_r+0x18>
 800b878:	f000 fb02 	bl	800be80 <__sinit>
 800b87c:	4b89      	ldr	r3, [pc, #548]	; (800baa4 <_vfiprintf_r+0x240>)
 800b87e:	429d      	cmp	r5, r3
 800b880:	d11b      	bne.n	800b8ba <_vfiprintf_r+0x56>
 800b882:	6875      	ldr	r5, [r6, #4]
 800b884:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b886:	07d9      	lsls	r1, r3, #31
 800b888:	d405      	bmi.n	800b896 <_vfiprintf_r+0x32>
 800b88a:	89ab      	ldrh	r3, [r5, #12]
 800b88c:	059a      	lsls	r2, r3, #22
 800b88e:	d402      	bmi.n	800b896 <_vfiprintf_r+0x32>
 800b890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b892:	f000 fb93 	bl	800bfbc <__retarget_lock_acquire_recursive>
 800b896:	89ab      	ldrh	r3, [r5, #12]
 800b898:	071b      	lsls	r3, r3, #28
 800b89a:	d501      	bpl.n	800b8a0 <_vfiprintf_r+0x3c>
 800b89c:	692b      	ldr	r3, [r5, #16]
 800b89e:	b9eb      	cbnz	r3, 800b8dc <_vfiprintf_r+0x78>
 800b8a0:	4629      	mov	r1, r5
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	f000 f960 	bl	800bb68 <__swsetup_r>
 800b8a8:	b1c0      	cbz	r0, 800b8dc <_vfiprintf_r+0x78>
 800b8aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8ac:	07dc      	lsls	r4, r3, #31
 800b8ae:	d50e      	bpl.n	800b8ce <_vfiprintf_r+0x6a>
 800b8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b4:	b01d      	add	sp, #116	; 0x74
 800b8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ba:	4b7b      	ldr	r3, [pc, #492]	; (800baa8 <_vfiprintf_r+0x244>)
 800b8bc:	429d      	cmp	r5, r3
 800b8be:	d101      	bne.n	800b8c4 <_vfiprintf_r+0x60>
 800b8c0:	68b5      	ldr	r5, [r6, #8]
 800b8c2:	e7df      	b.n	800b884 <_vfiprintf_r+0x20>
 800b8c4:	4b79      	ldr	r3, [pc, #484]	; (800baac <_vfiprintf_r+0x248>)
 800b8c6:	429d      	cmp	r5, r3
 800b8c8:	bf08      	it	eq
 800b8ca:	68f5      	ldreq	r5, [r6, #12]
 800b8cc:	e7da      	b.n	800b884 <_vfiprintf_r+0x20>
 800b8ce:	89ab      	ldrh	r3, [r5, #12]
 800b8d0:	0598      	lsls	r0, r3, #22
 800b8d2:	d4ed      	bmi.n	800b8b0 <_vfiprintf_r+0x4c>
 800b8d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8d6:	f000 fb72 	bl	800bfbe <__retarget_lock_release_recursive>
 800b8da:	e7e9      	b.n	800b8b0 <_vfiprintf_r+0x4c>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	9309      	str	r3, [sp, #36]	; 0x24
 800b8e0:	2320      	movs	r3, #32
 800b8e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8e6:	2330      	movs	r3, #48	; 0x30
 800b8e8:	f04f 0901 	mov.w	r9, #1
 800b8ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8f0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bab0 <_vfiprintf_r+0x24c>
 800b8f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8f8:	4623      	mov	r3, r4
 800b8fa:	469a      	mov	sl, r3
 800b8fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b900:	b10a      	cbz	r2, 800b906 <_vfiprintf_r+0xa2>
 800b902:	2a25      	cmp	r2, #37	; 0x25
 800b904:	d1f9      	bne.n	800b8fa <_vfiprintf_r+0x96>
 800b906:	ebba 0b04 	subs.w	fp, sl, r4
 800b90a:	d00b      	beq.n	800b924 <_vfiprintf_r+0xc0>
 800b90c:	465b      	mov	r3, fp
 800b90e:	4622      	mov	r2, r4
 800b910:	4629      	mov	r1, r5
 800b912:	4630      	mov	r0, r6
 800b914:	f7ff ff94 	bl	800b840 <__sfputs_r>
 800b918:	3001      	adds	r0, #1
 800b91a:	f000 80aa 	beq.w	800ba72 <_vfiprintf_r+0x20e>
 800b91e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b920:	445a      	add	r2, fp
 800b922:	9209      	str	r2, [sp, #36]	; 0x24
 800b924:	f89a 3000 	ldrb.w	r3, [sl]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f000 80a2 	beq.w	800ba72 <_vfiprintf_r+0x20e>
 800b92e:	2300      	movs	r3, #0
 800b930:	f04f 32ff 	mov.w	r2, #4294967295
 800b934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b938:	f10a 0a01 	add.w	sl, sl, #1
 800b93c:	9304      	str	r3, [sp, #16]
 800b93e:	9307      	str	r3, [sp, #28]
 800b940:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b944:	931a      	str	r3, [sp, #104]	; 0x68
 800b946:	4654      	mov	r4, sl
 800b948:	2205      	movs	r2, #5
 800b94a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b94e:	4858      	ldr	r0, [pc, #352]	; (800bab0 <_vfiprintf_r+0x24c>)
 800b950:	f7fe ff84 	bl	800a85c <memchr>
 800b954:	9a04      	ldr	r2, [sp, #16]
 800b956:	b9d8      	cbnz	r0, 800b990 <_vfiprintf_r+0x12c>
 800b958:	06d1      	lsls	r1, r2, #27
 800b95a:	bf44      	itt	mi
 800b95c:	2320      	movmi	r3, #32
 800b95e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b962:	0713      	lsls	r3, r2, #28
 800b964:	bf44      	itt	mi
 800b966:	232b      	movmi	r3, #43	; 0x2b
 800b968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b96c:	f89a 3000 	ldrb.w	r3, [sl]
 800b970:	2b2a      	cmp	r3, #42	; 0x2a
 800b972:	d015      	beq.n	800b9a0 <_vfiprintf_r+0x13c>
 800b974:	4654      	mov	r4, sl
 800b976:	2000      	movs	r0, #0
 800b978:	f04f 0c0a 	mov.w	ip, #10
 800b97c:	9a07      	ldr	r2, [sp, #28]
 800b97e:	4621      	mov	r1, r4
 800b980:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b984:	3b30      	subs	r3, #48	; 0x30
 800b986:	2b09      	cmp	r3, #9
 800b988:	d94e      	bls.n	800ba28 <_vfiprintf_r+0x1c4>
 800b98a:	b1b0      	cbz	r0, 800b9ba <_vfiprintf_r+0x156>
 800b98c:	9207      	str	r2, [sp, #28]
 800b98e:	e014      	b.n	800b9ba <_vfiprintf_r+0x156>
 800b990:	eba0 0308 	sub.w	r3, r0, r8
 800b994:	fa09 f303 	lsl.w	r3, r9, r3
 800b998:	4313      	orrs	r3, r2
 800b99a:	46a2      	mov	sl, r4
 800b99c:	9304      	str	r3, [sp, #16]
 800b99e:	e7d2      	b.n	800b946 <_vfiprintf_r+0xe2>
 800b9a0:	9b03      	ldr	r3, [sp, #12]
 800b9a2:	1d19      	adds	r1, r3, #4
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	9103      	str	r1, [sp, #12]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	bfbb      	ittet	lt
 800b9ac:	425b      	neglt	r3, r3
 800b9ae:	f042 0202 	orrlt.w	r2, r2, #2
 800b9b2:	9307      	strge	r3, [sp, #28]
 800b9b4:	9307      	strlt	r3, [sp, #28]
 800b9b6:	bfb8      	it	lt
 800b9b8:	9204      	strlt	r2, [sp, #16]
 800b9ba:	7823      	ldrb	r3, [r4, #0]
 800b9bc:	2b2e      	cmp	r3, #46	; 0x2e
 800b9be:	d10c      	bne.n	800b9da <_vfiprintf_r+0x176>
 800b9c0:	7863      	ldrb	r3, [r4, #1]
 800b9c2:	2b2a      	cmp	r3, #42	; 0x2a
 800b9c4:	d135      	bne.n	800ba32 <_vfiprintf_r+0x1ce>
 800b9c6:	9b03      	ldr	r3, [sp, #12]
 800b9c8:	3402      	adds	r4, #2
 800b9ca:	1d1a      	adds	r2, r3, #4
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	9203      	str	r2, [sp, #12]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	bfb8      	it	lt
 800b9d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9d8:	9305      	str	r3, [sp, #20]
 800b9da:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800bab4 <_vfiprintf_r+0x250>
 800b9de:	2203      	movs	r2, #3
 800b9e0:	4650      	mov	r0, sl
 800b9e2:	7821      	ldrb	r1, [r4, #0]
 800b9e4:	f7fe ff3a 	bl	800a85c <memchr>
 800b9e8:	b140      	cbz	r0, 800b9fc <_vfiprintf_r+0x198>
 800b9ea:	2340      	movs	r3, #64	; 0x40
 800b9ec:	eba0 000a 	sub.w	r0, r0, sl
 800b9f0:	fa03 f000 	lsl.w	r0, r3, r0
 800b9f4:	9b04      	ldr	r3, [sp, #16]
 800b9f6:	3401      	adds	r4, #1
 800b9f8:	4303      	orrs	r3, r0
 800b9fa:	9304      	str	r3, [sp, #16]
 800b9fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba00:	2206      	movs	r2, #6
 800ba02:	482d      	ldr	r0, [pc, #180]	; (800bab8 <_vfiprintf_r+0x254>)
 800ba04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba08:	f7fe ff28 	bl	800a85c <memchr>
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	d03f      	beq.n	800ba90 <_vfiprintf_r+0x22c>
 800ba10:	4b2a      	ldr	r3, [pc, #168]	; (800babc <_vfiprintf_r+0x258>)
 800ba12:	bb1b      	cbnz	r3, 800ba5c <_vfiprintf_r+0x1f8>
 800ba14:	9b03      	ldr	r3, [sp, #12]
 800ba16:	3307      	adds	r3, #7
 800ba18:	f023 0307 	bic.w	r3, r3, #7
 800ba1c:	3308      	adds	r3, #8
 800ba1e:	9303      	str	r3, [sp, #12]
 800ba20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba22:	443b      	add	r3, r7
 800ba24:	9309      	str	r3, [sp, #36]	; 0x24
 800ba26:	e767      	b.n	800b8f8 <_vfiprintf_r+0x94>
 800ba28:	460c      	mov	r4, r1
 800ba2a:	2001      	movs	r0, #1
 800ba2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba30:	e7a5      	b.n	800b97e <_vfiprintf_r+0x11a>
 800ba32:	2300      	movs	r3, #0
 800ba34:	f04f 0c0a 	mov.w	ip, #10
 800ba38:	4619      	mov	r1, r3
 800ba3a:	3401      	adds	r4, #1
 800ba3c:	9305      	str	r3, [sp, #20]
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba44:	3a30      	subs	r2, #48	; 0x30
 800ba46:	2a09      	cmp	r2, #9
 800ba48:	d903      	bls.n	800ba52 <_vfiprintf_r+0x1ee>
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d0c5      	beq.n	800b9da <_vfiprintf_r+0x176>
 800ba4e:	9105      	str	r1, [sp, #20]
 800ba50:	e7c3      	b.n	800b9da <_vfiprintf_r+0x176>
 800ba52:	4604      	mov	r4, r0
 800ba54:	2301      	movs	r3, #1
 800ba56:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba5a:	e7f0      	b.n	800ba3e <_vfiprintf_r+0x1da>
 800ba5c:	ab03      	add	r3, sp, #12
 800ba5e:	9300      	str	r3, [sp, #0]
 800ba60:	462a      	mov	r2, r5
 800ba62:	4630      	mov	r0, r6
 800ba64:	4b16      	ldr	r3, [pc, #88]	; (800bac0 <_vfiprintf_r+0x25c>)
 800ba66:	a904      	add	r1, sp, #16
 800ba68:	f7fc f876 	bl	8007b58 <_printf_float>
 800ba6c:	4607      	mov	r7, r0
 800ba6e:	1c78      	adds	r0, r7, #1
 800ba70:	d1d6      	bne.n	800ba20 <_vfiprintf_r+0x1bc>
 800ba72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba74:	07d9      	lsls	r1, r3, #31
 800ba76:	d405      	bmi.n	800ba84 <_vfiprintf_r+0x220>
 800ba78:	89ab      	ldrh	r3, [r5, #12]
 800ba7a:	059a      	lsls	r2, r3, #22
 800ba7c:	d402      	bmi.n	800ba84 <_vfiprintf_r+0x220>
 800ba7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba80:	f000 fa9d 	bl	800bfbe <__retarget_lock_release_recursive>
 800ba84:	89ab      	ldrh	r3, [r5, #12]
 800ba86:	065b      	lsls	r3, r3, #25
 800ba88:	f53f af12 	bmi.w	800b8b0 <_vfiprintf_r+0x4c>
 800ba8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba8e:	e711      	b.n	800b8b4 <_vfiprintf_r+0x50>
 800ba90:	ab03      	add	r3, sp, #12
 800ba92:	9300      	str	r3, [sp, #0]
 800ba94:	462a      	mov	r2, r5
 800ba96:	4630      	mov	r0, r6
 800ba98:	4b09      	ldr	r3, [pc, #36]	; (800bac0 <_vfiprintf_r+0x25c>)
 800ba9a:	a904      	add	r1, sp, #16
 800ba9c:	f7fc faf8 	bl	8008090 <_printf_i>
 800baa0:	e7e4      	b.n	800ba6c <_vfiprintf_r+0x208>
 800baa2:	bf00      	nop
 800baa4:	0800c814 	.word	0x0800c814
 800baa8:	0800c834 	.word	0x0800c834
 800baac:	0800c7f4 	.word	0x0800c7f4
 800bab0:	0800c7a4 	.word	0x0800c7a4
 800bab4:	0800c7aa 	.word	0x0800c7aa
 800bab8:	0800c7ae 	.word	0x0800c7ae
 800babc:	08007b59 	.word	0x08007b59
 800bac0:	0800b841 	.word	0x0800b841

0800bac4 <__swbuf_r>:
 800bac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac6:	460e      	mov	r6, r1
 800bac8:	4614      	mov	r4, r2
 800baca:	4605      	mov	r5, r0
 800bacc:	b118      	cbz	r0, 800bad6 <__swbuf_r+0x12>
 800bace:	6983      	ldr	r3, [r0, #24]
 800bad0:	b90b      	cbnz	r3, 800bad6 <__swbuf_r+0x12>
 800bad2:	f000 f9d5 	bl	800be80 <__sinit>
 800bad6:	4b21      	ldr	r3, [pc, #132]	; (800bb5c <__swbuf_r+0x98>)
 800bad8:	429c      	cmp	r4, r3
 800bada:	d12b      	bne.n	800bb34 <__swbuf_r+0x70>
 800badc:	686c      	ldr	r4, [r5, #4]
 800bade:	69a3      	ldr	r3, [r4, #24]
 800bae0:	60a3      	str	r3, [r4, #8]
 800bae2:	89a3      	ldrh	r3, [r4, #12]
 800bae4:	071a      	lsls	r2, r3, #28
 800bae6:	d52f      	bpl.n	800bb48 <__swbuf_r+0x84>
 800bae8:	6923      	ldr	r3, [r4, #16]
 800baea:	b36b      	cbz	r3, 800bb48 <__swbuf_r+0x84>
 800baec:	6923      	ldr	r3, [r4, #16]
 800baee:	6820      	ldr	r0, [r4, #0]
 800baf0:	b2f6      	uxtb	r6, r6
 800baf2:	1ac0      	subs	r0, r0, r3
 800baf4:	6963      	ldr	r3, [r4, #20]
 800baf6:	4637      	mov	r7, r6
 800baf8:	4283      	cmp	r3, r0
 800bafa:	dc04      	bgt.n	800bb06 <__swbuf_r+0x42>
 800bafc:	4621      	mov	r1, r4
 800bafe:	4628      	mov	r0, r5
 800bb00:	f000 f92a 	bl	800bd58 <_fflush_r>
 800bb04:	bb30      	cbnz	r0, 800bb54 <__swbuf_r+0x90>
 800bb06:	68a3      	ldr	r3, [r4, #8]
 800bb08:	3001      	adds	r0, #1
 800bb0a:	3b01      	subs	r3, #1
 800bb0c:	60a3      	str	r3, [r4, #8]
 800bb0e:	6823      	ldr	r3, [r4, #0]
 800bb10:	1c5a      	adds	r2, r3, #1
 800bb12:	6022      	str	r2, [r4, #0]
 800bb14:	701e      	strb	r6, [r3, #0]
 800bb16:	6963      	ldr	r3, [r4, #20]
 800bb18:	4283      	cmp	r3, r0
 800bb1a:	d004      	beq.n	800bb26 <__swbuf_r+0x62>
 800bb1c:	89a3      	ldrh	r3, [r4, #12]
 800bb1e:	07db      	lsls	r3, r3, #31
 800bb20:	d506      	bpl.n	800bb30 <__swbuf_r+0x6c>
 800bb22:	2e0a      	cmp	r6, #10
 800bb24:	d104      	bne.n	800bb30 <__swbuf_r+0x6c>
 800bb26:	4621      	mov	r1, r4
 800bb28:	4628      	mov	r0, r5
 800bb2a:	f000 f915 	bl	800bd58 <_fflush_r>
 800bb2e:	b988      	cbnz	r0, 800bb54 <__swbuf_r+0x90>
 800bb30:	4638      	mov	r0, r7
 800bb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb34:	4b0a      	ldr	r3, [pc, #40]	; (800bb60 <__swbuf_r+0x9c>)
 800bb36:	429c      	cmp	r4, r3
 800bb38:	d101      	bne.n	800bb3e <__swbuf_r+0x7a>
 800bb3a:	68ac      	ldr	r4, [r5, #8]
 800bb3c:	e7cf      	b.n	800bade <__swbuf_r+0x1a>
 800bb3e:	4b09      	ldr	r3, [pc, #36]	; (800bb64 <__swbuf_r+0xa0>)
 800bb40:	429c      	cmp	r4, r3
 800bb42:	bf08      	it	eq
 800bb44:	68ec      	ldreq	r4, [r5, #12]
 800bb46:	e7ca      	b.n	800bade <__swbuf_r+0x1a>
 800bb48:	4621      	mov	r1, r4
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	f000 f80c 	bl	800bb68 <__swsetup_r>
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d0cb      	beq.n	800baec <__swbuf_r+0x28>
 800bb54:	f04f 37ff 	mov.w	r7, #4294967295
 800bb58:	e7ea      	b.n	800bb30 <__swbuf_r+0x6c>
 800bb5a:	bf00      	nop
 800bb5c:	0800c814 	.word	0x0800c814
 800bb60:	0800c834 	.word	0x0800c834
 800bb64:	0800c7f4 	.word	0x0800c7f4

0800bb68 <__swsetup_r>:
 800bb68:	4b32      	ldr	r3, [pc, #200]	; (800bc34 <__swsetup_r+0xcc>)
 800bb6a:	b570      	push	{r4, r5, r6, lr}
 800bb6c:	681d      	ldr	r5, [r3, #0]
 800bb6e:	4606      	mov	r6, r0
 800bb70:	460c      	mov	r4, r1
 800bb72:	b125      	cbz	r5, 800bb7e <__swsetup_r+0x16>
 800bb74:	69ab      	ldr	r3, [r5, #24]
 800bb76:	b913      	cbnz	r3, 800bb7e <__swsetup_r+0x16>
 800bb78:	4628      	mov	r0, r5
 800bb7a:	f000 f981 	bl	800be80 <__sinit>
 800bb7e:	4b2e      	ldr	r3, [pc, #184]	; (800bc38 <__swsetup_r+0xd0>)
 800bb80:	429c      	cmp	r4, r3
 800bb82:	d10f      	bne.n	800bba4 <__swsetup_r+0x3c>
 800bb84:	686c      	ldr	r4, [r5, #4]
 800bb86:	89a3      	ldrh	r3, [r4, #12]
 800bb88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb8c:	0719      	lsls	r1, r3, #28
 800bb8e:	d42c      	bmi.n	800bbea <__swsetup_r+0x82>
 800bb90:	06dd      	lsls	r5, r3, #27
 800bb92:	d411      	bmi.n	800bbb8 <__swsetup_r+0x50>
 800bb94:	2309      	movs	r3, #9
 800bb96:	6033      	str	r3, [r6, #0]
 800bb98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bba0:	81a3      	strh	r3, [r4, #12]
 800bba2:	e03e      	b.n	800bc22 <__swsetup_r+0xba>
 800bba4:	4b25      	ldr	r3, [pc, #148]	; (800bc3c <__swsetup_r+0xd4>)
 800bba6:	429c      	cmp	r4, r3
 800bba8:	d101      	bne.n	800bbae <__swsetup_r+0x46>
 800bbaa:	68ac      	ldr	r4, [r5, #8]
 800bbac:	e7eb      	b.n	800bb86 <__swsetup_r+0x1e>
 800bbae:	4b24      	ldr	r3, [pc, #144]	; (800bc40 <__swsetup_r+0xd8>)
 800bbb0:	429c      	cmp	r4, r3
 800bbb2:	bf08      	it	eq
 800bbb4:	68ec      	ldreq	r4, [r5, #12]
 800bbb6:	e7e6      	b.n	800bb86 <__swsetup_r+0x1e>
 800bbb8:	0758      	lsls	r0, r3, #29
 800bbba:	d512      	bpl.n	800bbe2 <__swsetup_r+0x7a>
 800bbbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbbe:	b141      	cbz	r1, 800bbd2 <__swsetup_r+0x6a>
 800bbc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbc4:	4299      	cmp	r1, r3
 800bbc6:	d002      	beq.n	800bbce <__swsetup_r+0x66>
 800bbc8:	4630      	mov	r0, r6
 800bbca:	f7ff fb2f 	bl	800b22c <_free_r>
 800bbce:	2300      	movs	r3, #0
 800bbd0:	6363      	str	r3, [r4, #52]	; 0x34
 800bbd2:	89a3      	ldrh	r3, [r4, #12]
 800bbd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bbd8:	81a3      	strh	r3, [r4, #12]
 800bbda:	2300      	movs	r3, #0
 800bbdc:	6063      	str	r3, [r4, #4]
 800bbde:	6923      	ldr	r3, [r4, #16]
 800bbe0:	6023      	str	r3, [r4, #0]
 800bbe2:	89a3      	ldrh	r3, [r4, #12]
 800bbe4:	f043 0308 	orr.w	r3, r3, #8
 800bbe8:	81a3      	strh	r3, [r4, #12]
 800bbea:	6923      	ldr	r3, [r4, #16]
 800bbec:	b94b      	cbnz	r3, 800bc02 <__swsetup_r+0x9a>
 800bbee:	89a3      	ldrh	r3, [r4, #12]
 800bbf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bbf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbf8:	d003      	beq.n	800bc02 <__swsetup_r+0x9a>
 800bbfa:	4621      	mov	r1, r4
 800bbfc:	4630      	mov	r0, r6
 800bbfe:	f000 fa05 	bl	800c00c <__smakebuf_r>
 800bc02:	89a0      	ldrh	r0, [r4, #12]
 800bc04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc08:	f010 0301 	ands.w	r3, r0, #1
 800bc0c:	d00a      	beq.n	800bc24 <__swsetup_r+0xbc>
 800bc0e:	2300      	movs	r3, #0
 800bc10:	60a3      	str	r3, [r4, #8]
 800bc12:	6963      	ldr	r3, [r4, #20]
 800bc14:	425b      	negs	r3, r3
 800bc16:	61a3      	str	r3, [r4, #24]
 800bc18:	6923      	ldr	r3, [r4, #16]
 800bc1a:	b943      	cbnz	r3, 800bc2e <__swsetup_r+0xc6>
 800bc1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc20:	d1ba      	bne.n	800bb98 <__swsetup_r+0x30>
 800bc22:	bd70      	pop	{r4, r5, r6, pc}
 800bc24:	0781      	lsls	r1, r0, #30
 800bc26:	bf58      	it	pl
 800bc28:	6963      	ldrpl	r3, [r4, #20]
 800bc2a:	60a3      	str	r3, [r4, #8]
 800bc2c:	e7f4      	b.n	800bc18 <__swsetup_r+0xb0>
 800bc2e:	2000      	movs	r0, #0
 800bc30:	e7f7      	b.n	800bc22 <__swsetup_r+0xba>
 800bc32:	bf00      	nop
 800bc34:	2000000c 	.word	0x2000000c
 800bc38:	0800c814 	.word	0x0800c814
 800bc3c:	0800c834 	.word	0x0800c834
 800bc40:	0800c7f4 	.word	0x0800c7f4

0800bc44 <abort>:
 800bc44:	2006      	movs	r0, #6
 800bc46:	b508      	push	{r3, lr}
 800bc48:	f000 fa50 	bl	800c0ec <raise>
 800bc4c:	2001      	movs	r0, #1
 800bc4e:	f7f6 feb6 	bl	80029be <_exit>
	...

0800bc54 <__sflush_r>:
 800bc54:	898a      	ldrh	r2, [r1, #12]
 800bc56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc58:	4605      	mov	r5, r0
 800bc5a:	0710      	lsls	r0, r2, #28
 800bc5c:	460c      	mov	r4, r1
 800bc5e:	d457      	bmi.n	800bd10 <__sflush_r+0xbc>
 800bc60:	684b      	ldr	r3, [r1, #4]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	dc04      	bgt.n	800bc70 <__sflush_r+0x1c>
 800bc66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	dc01      	bgt.n	800bc70 <__sflush_r+0x1c>
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc72:	2e00      	cmp	r6, #0
 800bc74:	d0fa      	beq.n	800bc6c <__sflush_r+0x18>
 800bc76:	2300      	movs	r3, #0
 800bc78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc7c:	682f      	ldr	r7, [r5, #0]
 800bc7e:	602b      	str	r3, [r5, #0]
 800bc80:	d032      	beq.n	800bce8 <__sflush_r+0x94>
 800bc82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc84:	89a3      	ldrh	r3, [r4, #12]
 800bc86:	075a      	lsls	r2, r3, #29
 800bc88:	d505      	bpl.n	800bc96 <__sflush_r+0x42>
 800bc8a:	6863      	ldr	r3, [r4, #4]
 800bc8c:	1ac0      	subs	r0, r0, r3
 800bc8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc90:	b10b      	cbz	r3, 800bc96 <__sflush_r+0x42>
 800bc92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc94:	1ac0      	subs	r0, r0, r3
 800bc96:	2300      	movs	r3, #0
 800bc98:	4602      	mov	r2, r0
 800bc9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc9c:	4628      	mov	r0, r5
 800bc9e:	6a21      	ldr	r1, [r4, #32]
 800bca0:	47b0      	blx	r6
 800bca2:	1c43      	adds	r3, r0, #1
 800bca4:	89a3      	ldrh	r3, [r4, #12]
 800bca6:	d106      	bne.n	800bcb6 <__sflush_r+0x62>
 800bca8:	6829      	ldr	r1, [r5, #0]
 800bcaa:	291d      	cmp	r1, #29
 800bcac:	d82c      	bhi.n	800bd08 <__sflush_r+0xb4>
 800bcae:	4a29      	ldr	r2, [pc, #164]	; (800bd54 <__sflush_r+0x100>)
 800bcb0:	40ca      	lsrs	r2, r1
 800bcb2:	07d6      	lsls	r6, r2, #31
 800bcb4:	d528      	bpl.n	800bd08 <__sflush_r+0xb4>
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	6062      	str	r2, [r4, #4]
 800bcba:	6922      	ldr	r2, [r4, #16]
 800bcbc:	04d9      	lsls	r1, r3, #19
 800bcbe:	6022      	str	r2, [r4, #0]
 800bcc0:	d504      	bpl.n	800bccc <__sflush_r+0x78>
 800bcc2:	1c42      	adds	r2, r0, #1
 800bcc4:	d101      	bne.n	800bcca <__sflush_r+0x76>
 800bcc6:	682b      	ldr	r3, [r5, #0]
 800bcc8:	b903      	cbnz	r3, 800bccc <__sflush_r+0x78>
 800bcca:	6560      	str	r0, [r4, #84]	; 0x54
 800bccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcce:	602f      	str	r7, [r5, #0]
 800bcd0:	2900      	cmp	r1, #0
 800bcd2:	d0cb      	beq.n	800bc6c <__sflush_r+0x18>
 800bcd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcd8:	4299      	cmp	r1, r3
 800bcda:	d002      	beq.n	800bce2 <__sflush_r+0x8e>
 800bcdc:	4628      	mov	r0, r5
 800bcde:	f7ff faa5 	bl	800b22c <_free_r>
 800bce2:	2000      	movs	r0, #0
 800bce4:	6360      	str	r0, [r4, #52]	; 0x34
 800bce6:	e7c2      	b.n	800bc6e <__sflush_r+0x1a>
 800bce8:	6a21      	ldr	r1, [r4, #32]
 800bcea:	2301      	movs	r3, #1
 800bcec:	4628      	mov	r0, r5
 800bcee:	47b0      	blx	r6
 800bcf0:	1c41      	adds	r1, r0, #1
 800bcf2:	d1c7      	bne.n	800bc84 <__sflush_r+0x30>
 800bcf4:	682b      	ldr	r3, [r5, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d0c4      	beq.n	800bc84 <__sflush_r+0x30>
 800bcfa:	2b1d      	cmp	r3, #29
 800bcfc:	d001      	beq.n	800bd02 <__sflush_r+0xae>
 800bcfe:	2b16      	cmp	r3, #22
 800bd00:	d101      	bne.n	800bd06 <__sflush_r+0xb2>
 800bd02:	602f      	str	r7, [r5, #0]
 800bd04:	e7b2      	b.n	800bc6c <__sflush_r+0x18>
 800bd06:	89a3      	ldrh	r3, [r4, #12]
 800bd08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd0c:	81a3      	strh	r3, [r4, #12]
 800bd0e:	e7ae      	b.n	800bc6e <__sflush_r+0x1a>
 800bd10:	690f      	ldr	r7, [r1, #16]
 800bd12:	2f00      	cmp	r7, #0
 800bd14:	d0aa      	beq.n	800bc6c <__sflush_r+0x18>
 800bd16:	0793      	lsls	r3, r2, #30
 800bd18:	bf18      	it	ne
 800bd1a:	2300      	movne	r3, #0
 800bd1c:	680e      	ldr	r6, [r1, #0]
 800bd1e:	bf08      	it	eq
 800bd20:	694b      	ldreq	r3, [r1, #20]
 800bd22:	1bf6      	subs	r6, r6, r7
 800bd24:	600f      	str	r7, [r1, #0]
 800bd26:	608b      	str	r3, [r1, #8]
 800bd28:	2e00      	cmp	r6, #0
 800bd2a:	dd9f      	ble.n	800bc6c <__sflush_r+0x18>
 800bd2c:	4633      	mov	r3, r6
 800bd2e:	463a      	mov	r2, r7
 800bd30:	4628      	mov	r0, r5
 800bd32:	6a21      	ldr	r1, [r4, #32]
 800bd34:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bd38:	47e0      	blx	ip
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	dc06      	bgt.n	800bd4c <__sflush_r+0xf8>
 800bd3e:	89a3      	ldrh	r3, [r4, #12]
 800bd40:	f04f 30ff 	mov.w	r0, #4294967295
 800bd44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd48:	81a3      	strh	r3, [r4, #12]
 800bd4a:	e790      	b.n	800bc6e <__sflush_r+0x1a>
 800bd4c:	4407      	add	r7, r0
 800bd4e:	1a36      	subs	r6, r6, r0
 800bd50:	e7ea      	b.n	800bd28 <__sflush_r+0xd4>
 800bd52:	bf00      	nop
 800bd54:	20400001 	.word	0x20400001

0800bd58 <_fflush_r>:
 800bd58:	b538      	push	{r3, r4, r5, lr}
 800bd5a:	690b      	ldr	r3, [r1, #16]
 800bd5c:	4605      	mov	r5, r0
 800bd5e:	460c      	mov	r4, r1
 800bd60:	b913      	cbnz	r3, 800bd68 <_fflush_r+0x10>
 800bd62:	2500      	movs	r5, #0
 800bd64:	4628      	mov	r0, r5
 800bd66:	bd38      	pop	{r3, r4, r5, pc}
 800bd68:	b118      	cbz	r0, 800bd72 <_fflush_r+0x1a>
 800bd6a:	6983      	ldr	r3, [r0, #24]
 800bd6c:	b90b      	cbnz	r3, 800bd72 <_fflush_r+0x1a>
 800bd6e:	f000 f887 	bl	800be80 <__sinit>
 800bd72:	4b14      	ldr	r3, [pc, #80]	; (800bdc4 <_fflush_r+0x6c>)
 800bd74:	429c      	cmp	r4, r3
 800bd76:	d11b      	bne.n	800bdb0 <_fflush_r+0x58>
 800bd78:	686c      	ldr	r4, [r5, #4]
 800bd7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d0ef      	beq.n	800bd62 <_fflush_r+0xa>
 800bd82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd84:	07d0      	lsls	r0, r2, #31
 800bd86:	d404      	bmi.n	800bd92 <_fflush_r+0x3a>
 800bd88:	0599      	lsls	r1, r3, #22
 800bd8a:	d402      	bmi.n	800bd92 <_fflush_r+0x3a>
 800bd8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd8e:	f000 f915 	bl	800bfbc <__retarget_lock_acquire_recursive>
 800bd92:	4628      	mov	r0, r5
 800bd94:	4621      	mov	r1, r4
 800bd96:	f7ff ff5d 	bl	800bc54 <__sflush_r>
 800bd9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd9c:	4605      	mov	r5, r0
 800bd9e:	07da      	lsls	r2, r3, #31
 800bda0:	d4e0      	bmi.n	800bd64 <_fflush_r+0xc>
 800bda2:	89a3      	ldrh	r3, [r4, #12]
 800bda4:	059b      	lsls	r3, r3, #22
 800bda6:	d4dd      	bmi.n	800bd64 <_fflush_r+0xc>
 800bda8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdaa:	f000 f908 	bl	800bfbe <__retarget_lock_release_recursive>
 800bdae:	e7d9      	b.n	800bd64 <_fflush_r+0xc>
 800bdb0:	4b05      	ldr	r3, [pc, #20]	; (800bdc8 <_fflush_r+0x70>)
 800bdb2:	429c      	cmp	r4, r3
 800bdb4:	d101      	bne.n	800bdba <_fflush_r+0x62>
 800bdb6:	68ac      	ldr	r4, [r5, #8]
 800bdb8:	e7df      	b.n	800bd7a <_fflush_r+0x22>
 800bdba:	4b04      	ldr	r3, [pc, #16]	; (800bdcc <_fflush_r+0x74>)
 800bdbc:	429c      	cmp	r4, r3
 800bdbe:	bf08      	it	eq
 800bdc0:	68ec      	ldreq	r4, [r5, #12]
 800bdc2:	e7da      	b.n	800bd7a <_fflush_r+0x22>
 800bdc4:	0800c814 	.word	0x0800c814
 800bdc8:	0800c834 	.word	0x0800c834
 800bdcc:	0800c7f4 	.word	0x0800c7f4

0800bdd0 <std>:
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	b510      	push	{r4, lr}
 800bdd4:	4604      	mov	r4, r0
 800bdd6:	e9c0 3300 	strd	r3, r3, [r0]
 800bdda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bdde:	6083      	str	r3, [r0, #8]
 800bde0:	8181      	strh	r1, [r0, #12]
 800bde2:	6643      	str	r3, [r0, #100]	; 0x64
 800bde4:	81c2      	strh	r2, [r0, #14]
 800bde6:	6183      	str	r3, [r0, #24]
 800bde8:	4619      	mov	r1, r3
 800bdea:	2208      	movs	r2, #8
 800bdec:	305c      	adds	r0, #92	; 0x5c
 800bdee:	f7fb fe0d 	bl	8007a0c <memset>
 800bdf2:	4b05      	ldr	r3, [pc, #20]	; (800be08 <std+0x38>)
 800bdf4:	6224      	str	r4, [r4, #32]
 800bdf6:	6263      	str	r3, [r4, #36]	; 0x24
 800bdf8:	4b04      	ldr	r3, [pc, #16]	; (800be0c <std+0x3c>)
 800bdfa:	62a3      	str	r3, [r4, #40]	; 0x28
 800bdfc:	4b04      	ldr	r3, [pc, #16]	; (800be10 <std+0x40>)
 800bdfe:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be00:	4b04      	ldr	r3, [pc, #16]	; (800be14 <std+0x44>)
 800be02:	6323      	str	r3, [r4, #48]	; 0x30
 800be04:	bd10      	pop	{r4, pc}
 800be06:	bf00      	nop
 800be08:	0800c125 	.word	0x0800c125
 800be0c:	0800c147 	.word	0x0800c147
 800be10:	0800c17f 	.word	0x0800c17f
 800be14:	0800c1a3 	.word	0x0800c1a3

0800be18 <_cleanup_r>:
 800be18:	4901      	ldr	r1, [pc, #4]	; (800be20 <_cleanup_r+0x8>)
 800be1a:	f000 b8af 	b.w	800bf7c <_fwalk_reent>
 800be1e:	bf00      	nop
 800be20:	0800bd59 	.word	0x0800bd59

0800be24 <__sfmoreglue>:
 800be24:	2268      	movs	r2, #104	; 0x68
 800be26:	b570      	push	{r4, r5, r6, lr}
 800be28:	1e4d      	subs	r5, r1, #1
 800be2a:	4355      	muls	r5, r2
 800be2c:	460e      	mov	r6, r1
 800be2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be32:	f7ff fa63 	bl	800b2fc <_malloc_r>
 800be36:	4604      	mov	r4, r0
 800be38:	b140      	cbz	r0, 800be4c <__sfmoreglue+0x28>
 800be3a:	2100      	movs	r1, #0
 800be3c:	e9c0 1600 	strd	r1, r6, [r0]
 800be40:	300c      	adds	r0, #12
 800be42:	60a0      	str	r0, [r4, #8]
 800be44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800be48:	f7fb fde0 	bl	8007a0c <memset>
 800be4c:	4620      	mov	r0, r4
 800be4e:	bd70      	pop	{r4, r5, r6, pc}

0800be50 <__sfp_lock_acquire>:
 800be50:	4801      	ldr	r0, [pc, #4]	; (800be58 <__sfp_lock_acquire+0x8>)
 800be52:	f000 b8b3 	b.w	800bfbc <__retarget_lock_acquire_recursive>
 800be56:	bf00      	nop
 800be58:	200003c9 	.word	0x200003c9

0800be5c <__sfp_lock_release>:
 800be5c:	4801      	ldr	r0, [pc, #4]	; (800be64 <__sfp_lock_release+0x8>)
 800be5e:	f000 b8ae 	b.w	800bfbe <__retarget_lock_release_recursive>
 800be62:	bf00      	nop
 800be64:	200003c9 	.word	0x200003c9

0800be68 <__sinit_lock_acquire>:
 800be68:	4801      	ldr	r0, [pc, #4]	; (800be70 <__sinit_lock_acquire+0x8>)
 800be6a:	f000 b8a7 	b.w	800bfbc <__retarget_lock_acquire_recursive>
 800be6e:	bf00      	nop
 800be70:	200003ca 	.word	0x200003ca

0800be74 <__sinit_lock_release>:
 800be74:	4801      	ldr	r0, [pc, #4]	; (800be7c <__sinit_lock_release+0x8>)
 800be76:	f000 b8a2 	b.w	800bfbe <__retarget_lock_release_recursive>
 800be7a:	bf00      	nop
 800be7c:	200003ca 	.word	0x200003ca

0800be80 <__sinit>:
 800be80:	b510      	push	{r4, lr}
 800be82:	4604      	mov	r4, r0
 800be84:	f7ff fff0 	bl	800be68 <__sinit_lock_acquire>
 800be88:	69a3      	ldr	r3, [r4, #24]
 800be8a:	b11b      	cbz	r3, 800be94 <__sinit+0x14>
 800be8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be90:	f7ff bff0 	b.w	800be74 <__sinit_lock_release>
 800be94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800be98:	6523      	str	r3, [r4, #80]	; 0x50
 800be9a:	4b13      	ldr	r3, [pc, #76]	; (800bee8 <__sinit+0x68>)
 800be9c:	4a13      	ldr	r2, [pc, #76]	; (800beec <__sinit+0x6c>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	62a2      	str	r2, [r4, #40]	; 0x28
 800bea2:	42a3      	cmp	r3, r4
 800bea4:	bf08      	it	eq
 800bea6:	2301      	moveq	r3, #1
 800bea8:	4620      	mov	r0, r4
 800beaa:	bf08      	it	eq
 800beac:	61a3      	streq	r3, [r4, #24]
 800beae:	f000 f81f 	bl	800bef0 <__sfp>
 800beb2:	6060      	str	r0, [r4, #4]
 800beb4:	4620      	mov	r0, r4
 800beb6:	f000 f81b 	bl	800bef0 <__sfp>
 800beba:	60a0      	str	r0, [r4, #8]
 800bebc:	4620      	mov	r0, r4
 800bebe:	f000 f817 	bl	800bef0 <__sfp>
 800bec2:	2200      	movs	r2, #0
 800bec4:	2104      	movs	r1, #4
 800bec6:	60e0      	str	r0, [r4, #12]
 800bec8:	6860      	ldr	r0, [r4, #4]
 800beca:	f7ff ff81 	bl	800bdd0 <std>
 800bece:	2201      	movs	r2, #1
 800bed0:	2109      	movs	r1, #9
 800bed2:	68a0      	ldr	r0, [r4, #8]
 800bed4:	f7ff ff7c 	bl	800bdd0 <std>
 800bed8:	2202      	movs	r2, #2
 800beda:	2112      	movs	r1, #18
 800bedc:	68e0      	ldr	r0, [r4, #12]
 800bede:	f7ff ff77 	bl	800bdd0 <std>
 800bee2:	2301      	movs	r3, #1
 800bee4:	61a3      	str	r3, [r4, #24]
 800bee6:	e7d1      	b.n	800be8c <__sinit+0xc>
 800bee8:	0800c3ac 	.word	0x0800c3ac
 800beec:	0800be19 	.word	0x0800be19

0800bef0 <__sfp>:
 800bef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bef2:	4607      	mov	r7, r0
 800bef4:	f7ff ffac 	bl	800be50 <__sfp_lock_acquire>
 800bef8:	4b1e      	ldr	r3, [pc, #120]	; (800bf74 <__sfp+0x84>)
 800befa:	681e      	ldr	r6, [r3, #0]
 800befc:	69b3      	ldr	r3, [r6, #24]
 800befe:	b913      	cbnz	r3, 800bf06 <__sfp+0x16>
 800bf00:	4630      	mov	r0, r6
 800bf02:	f7ff ffbd 	bl	800be80 <__sinit>
 800bf06:	3648      	adds	r6, #72	; 0x48
 800bf08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	d503      	bpl.n	800bf18 <__sfp+0x28>
 800bf10:	6833      	ldr	r3, [r6, #0]
 800bf12:	b30b      	cbz	r3, 800bf58 <__sfp+0x68>
 800bf14:	6836      	ldr	r6, [r6, #0]
 800bf16:	e7f7      	b.n	800bf08 <__sfp+0x18>
 800bf18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf1c:	b9d5      	cbnz	r5, 800bf54 <__sfp+0x64>
 800bf1e:	4b16      	ldr	r3, [pc, #88]	; (800bf78 <__sfp+0x88>)
 800bf20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf24:	60e3      	str	r3, [r4, #12]
 800bf26:	6665      	str	r5, [r4, #100]	; 0x64
 800bf28:	f000 f847 	bl	800bfba <__retarget_lock_init_recursive>
 800bf2c:	f7ff ff96 	bl	800be5c <__sfp_lock_release>
 800bf30:	2208      	movs	r2, #8
 800bf32:	4629      	mov	r1, r5
 800bf34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bf38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bf3c:	6025      	str	r5, [r4, #0]
 800bf3e:	61a5      	str	r5, [r4, #24]
 800bf40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bf44:	f7fb fd62 	bl	8007a0c <memset>
 800bf48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bf4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bf50:	4620      	mov	r0, r4
 800bf52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf54:	3468      	adds	r4, #104	; 0x68
 800bf56:	e7d9      	b.n	800bf0c <__sfp+0x1c>
 800bf58:	2104      	movs	r1, #4
 800bf5a:	4638      	mov	r0, r7
 800bf5c:	f7ff ff62 	bl	800be24 <__sfmoreglue>
 800bf60:	4604      	mov	r4, r0
 800bf62:	6030      	str	r0, [r6, #0]
 800bf64:	2800      	cmp	r0, #0
 800bf66:	d1d5      	bne.n	800bf14 <__sfp+0x24>
 800bf68:	f7ff ff78 	bl	800be5c <__sfp_lock_release>
 800bf6c:	230c      	movs	r3, #12
 800bf6e:	603b      	str	r3, [r7, #0]
 800bf70:	e7ee      	b.n	800bf50 <__sfp+0x60>
 800bf72:	bf00      	nop
 800bf74:	0800c3ac 	.word	0x0800c3ac
 800bf78:	ffff0001 	.word	0xffff0001

0800bf7c <_fwalk_reent>:
 800bf7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf80:	4606      	mov	r6, r0
 800bf82:	4688      	mov	r8, r1
 800bf84:	2700      	movs	r7, #0
 800bf86:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bf8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf8e:	f1b9 0901 	subs.w	r9, r9, #1
 800bf92:	d505      	bpl.n	800bfa0 <_fwalk_reent+0x24>
 800bf94:	6824      	ldr	r4, [r4, #0]
 800bf96:	2c00      	cmp	r4, #0
 800bf98:	d1f7      	bne.n	800bf8a <_fwalk_reent+0xe>
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfa0:	89ab      	ldrh	r3, [r5, #12]
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d907      	bls.n	800bfb6 <_fwalk_reent+0x3a>
 800bfa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	d003      	beq.n	800bfb6 <_fwalk_reent+0x3a>
 800bfae:	4629      	mov	r1, r5
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	47c0      	blx	r8
 800bfb4:	4307      	orrs	r7, r0
 800bfb6:	3568      	adds	r5, #104	; 0x68
 800bfb8:	e7e9      	b.n	800bf8e <_fwalk_reent+0x12>

0800bfba <__retarget_lock_init_recursive>:
 800bfba:	4770      	bx	lr

0800bfbc <__retarget_lock_acquire_recursive>:
 800bfbc:	4770      	bx	lr

0800bfbe <__retarget_lock_release_recursive>:
 800bfbe:	4770      	bx	lr

0800bfc0 <__swhatbuf_r>:
 800bfc0:	b570      	push	{r4, r5, r6, lr}
 800bfc2:	460e      	mov	r6, r1
 800bfc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfc8:	4614      	mov	r4, r2
 800bfca:	2900      	cmp	r1, #0
 800bfcc:	461d      	mov	r5, r3
 800bfce:	b096      	sub	sp, #88	; 0x58
 800bfd0:	da08      	bge.n	800bfe4 <__swhatbuf_r+0x24>
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bfd8:	602a      	str	r2, [r5, #0]
 800bfda:	061a      	lsls	r2, r3, #24
 800bfdc:	d410      	bmi.n	800c000 <__swhatbuf_r+0x40>
 800bfde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfe2:	e00e      	b.n	800c002 <__swhatbuf_r+0x42>
 800bfe4:	466a      	mov	r2, sp
 800bfe6:	f000 f903 	bl	800c1f0 <_fstat_r>
 800bfea:	2800      	cmp	r0, #0
 800bfec:	dbf1      	blt.n	800bfd2 <__swhatbuf_r+0x12>
 800bfee:	9a01      	ldr	r2, [sp, #4]
 800bff0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bff4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bff8:	425a      	negs	r2, r3
 800bffa:	415a      	adcs	r2, r3
 800bffc:	602a      	str	r2, [r5, #0]
 800bffe:	e7ee      	b.n	800bfde <__swhatbuf_r+0x1e>
 800c000:	2340      	movs	r3, #64	; 0x40
 800c002:	2000      	movs	r0, #0
 800c004:	6023      	str	r3, [r4, #0]
 800c006:	b016      	add	sp, #88	; 0x58
 800c008:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c00c <__smakebuf_r>:
 800c00c:	898b      	ldrh	r3, [r1, #12]
 800c00e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c010:	079d      	lsls	r5, r3, #30
 800c012:	4606      	mov	r6, r0
 800c014:	460c      	mov	r4, r1
 800c016:	d507      	bpl.n	800c028 <__smakebuf_r+0x1c>
 800c018:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c01c:	6023      	str	r3, [r4, #0]
 800c01e:	6123      	str	r3, [r4, #16]
 800c020:	2301      	movs	r3, #1
 800c022:	6163      	str	r3, [r4, #20]
 800c024:	b002      	add	sp, #8
 800c026:	bd70      	pop	{r4, r5, r6, pc}
 800c028:	466a      	mov	r2, sp
 800c02a:	ab01      	add	r3, sp, #4
 800c02c:	f7ff ffc8 	bl	800bfc0 <__swhatbuf_r>
 800c030:	9900      	ldr	r1, [sp, #0]
 800c032:	4605      	mov	r5, r0
 800c034:	4630      	mov	r0, r6
 800c036:	f7ff f961 	bl	800b2fc <_malloc_r>
 800c03a:	b948      	cbnz	r0, 800c050 <__smakebuf_r+0x44>
 800c03c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c040:	059a      	lsls	r2, r3, #22
 800c042:	d4ef      	bmi.n	800c024 <__smakebuf_r+0x18>
 800c044:	f023 0303 	bic.w	r3, r3, #3
 800c048:	f043 0302 	orr.w	r3, r3, #2
 800c04c:	81a3      	strh	r3, [r4, #12]
 800c04e:	e7e3      	b.n	800c018 <__smakebuf_r+0xc>
 800c050:	4b0d      	ldr	r3, [pc, #52]	; (800c088 <__smakebuf_r+0x7c>)
 800c052:	62b3      	str	r3, [r6, #40]	; 0x28
 800c054:	89a3      	ldrh	r3, [r4, #12]
 800c056:	6020      	str	r0, [r4, #0]
 800c058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c05c:	81a3      	strh	r3, [r4, #12]
 800c05e:	9b00      	ldr	r3, [sp, #0]
 800c060:	6120      	str	r0, [r4, #16]
 800c062:	6163      	str	r3, [r4, #20]
 800c064:	9b01      	ldr	r3, [sp, #4]
 800c066:	b15b      	cbz	r3, 800c080 <__smakebuf_r+0x74>
 800c068:	4630      	mov	r0, r6
 800c06a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c06e:	f000 f8d1 	bl	800c214 <_isatty_r>
 800c072:	b128      	cbz	r0, 800c080 <__smakebuf_r+0x74>
 800c074:	89a3      	ldrh	r3, [r4, #12]
 800c076:	f023 0303 	bic.w	r3, r3, #3
 800c07a:	f043 0301 	orr.w	r3, r3, #1
 800c07e:	81a3      	strh	r3, [r4, #12]
 800c080:	89a0      	ldrh	r0, [r4, #12]
 800c082:	4305      	orrs	r5, r0
 800c084:	81a5      	strh	r5, [r4, #12]
 800c086:	e7cd      	b.n	800c024 <__smakebuf_r+0x18>
 800c088:	0800be19 	.word	0x0800be19

0800c08c <_malloc_usable_size_r>:
 800c08c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c090:	1f18      	subs	r0, r3, #4
 800c092:	2b00      	cmp	r3, #0
 800c094:	bfbc      	itt	lt
 800c096:	580b      	ldrlt	r3, [r1, r0]
 800c098:	18c0      	addlt	r0, r0, r3
 800c09a:	4770      	bx	lr

0800c09c <_raise_r>:
 800c09c:	291f      	cmp	r1, #31
 800c09e:	b538      	push	{r3, r4, r5, lr}
 800c0a0:	4604      	mov	r4, r0
 800c0a2:	460d      	mov	r5, r1
 800c0a4:	d904      	bls.n	800c0b0 <_raise_r+0x14>
 800c0a6:	2316      	movs	r3, #22
 800c0a8:	6003      	str	r3, [r0, #0]
 800c0aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ae:	bd38      	pop	{r3, r4, r5, pc}
 800c0b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c0b2:	b112      	cbz	r2, 800c0ba <_raise_r+0x1e>
 800c0b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0b8:	b94b      	cbnz	r3, 800c0ce <_raise_r+0x32>
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	f000 f830 	bl	800c120 <_getpid_r>
 800c0c0:	462a      	mov	r2, r5
 800c0c2:	4601      	mov	r1, r0
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0ca:	f000 b817 	b.w	800c0fc <_kill_r>
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d00a      	beq.n	800c0e8 <_raise_r+0x4c>
 800c0d2:	1c59      	adds	r1, r3, #1
 800c0d4:	d103      	bne.n	800c0de <_raise_r+0x42>
 800c0d6:	2316      	movs	r3, #22
 800c0d8:	6003      	str	r3, [r0, #0]
 800c0da:	2001      	movs	r0, #1
 800c0dc:	e7e7      	b.n	800c0ae <_raise_r+0x12>
 800c0de:	2400      	movs	r4, #0
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c0e6:	4798      	blx	r3
 800c0e8:	2000      	movs	r0, #0
 800c0ea:	e7e0      	b.n	800c0ae <_raise_r+0x12>

0800c0ec <raise>:
 800c0ec:	4b02      	ldr	r3, [pc, #8]	; (800c0f8 <raise+0xc>)
 800c0ee:	4601      	mov	r1, r0
 800c0f0:	6818      	ldr	r0, [r3, #0]
 800c0f2:	f7ff bfd3 	b.w	800c09c <_raise_r>
 800c0f6:	bf00      	nop
 800c0f8:	2000000c 	.word	0x2000000c

0800c0fc <_kill_r>:
 800c0fc:	b538      	push	{r3, r4, r5, lr}
 800c0fe:	2300      	movs	r3, #0
 800c100:	4d06      	ldr	r5, [pc, #24]	; (800c11c <_kill_r+0x20>)
 800c102:	4604      	mov	r4, r0
 800c104:	4608      	mov	r0, r1
 800c106:	4611      	mov	r1, r2
 800c108:	602b      	str	r3, [r5, #0]
 800c10a:	f7f6 fc48 	bl	800299e <_kill>
 800c10e:	1c43      	adds	r3, r0, #1
 800c110:	d102      	bne.n	800c118 <_kill_r+0x1c>
 800c112:	682b      	ldr	r3, [r5, #0]
 800c114:	b103      	cbz	r3, 800c118 <_kill_r+0x1c>
 800c116:	6023      	str	r3, [r4, #0]
 800c118:	bd38      	pop	{r3, r4, r5, pc}
 800c11a:	bf00      	nop
 800c11c:	200003c4 	.word	0x200003c4

0800c120 <_getpid_r>:
 800c120:	f7f6 bc36 	b.w	8002990 <_getpid>

0800c124 <__sread>:
 800c124:	b510      	push	{r4, lr}
 800c126:	460c      	mov	r4, r1
 800c128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c12c:	f000 f894 	bl	800c258 <_read_r>
 800c130:	2800      	cmp	r0, #0
 800c132:	bfab      	itete	ge
 800c134:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c136:	89a3      	ldrhlt	r3, [r4, #12]
 800c138:	181b      	addge	r3, r3, r0
 800c13a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c13e:	bfac      	ite	ge
 800c140:	6563      	strge	r3, [r4, #84]	; 0x54
 800c142:	81a3      	strhlt	r3, [r4, #12]
 800c144:	bd10      	pop	{r4, pc}

0800c146 <__swrite>:
 800c146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c14a:	461f      	mov	r7, r3
 800c14c:	898b      	ldrh	r3, [r1, #12]
 800c14e:	4605      	mov	r5, r0
 800c150:	05db      	lsls	r3, r3, #23
 800c152:	460c      	mov	r4, r1
 800c154:	4616      	mov	r6, r2
 800c156:	d505      	bpl.n	800c164 <__swrite+0x1e>
 800c158:	2302      	movs	r3, #2
 800c15a:	2200      	movs	r2, #0
 800c15c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c160:	f000 f868 	bl	800c234 <_lseek_r>
 800c164:	89a3      	ldrh	r3, [r4, #12]
 800c166:	4632      	mov	r2, r6
 800c168:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c16c:	81a3      	strh	r3, [r4, #12]
 800c16e:	4628      	mov	r0, r5
 800c170:	463b      	mov	r3, r7
 800c172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c17a:	f000 b817 	b.w	800c1ac <_write_r>

0800c17e <__sseek>:
 800c17e:	b510      	push	{r4, lr}
 800c180:	460c      	mov	r4, r1
 800c182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c186:	f000 f855 	bl	800c234 <_lseek_r>
 800c18a:	1c43      	adds	r3, r0, #1
 800c18c:	89a3      	ldrh	r3, [r4, #12]
 800c18e:	bf15      	itete	ne
 800c190:	6560      	strne	r0, [r4, #84]	; 0x54
 800c192:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c196:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c19a:	81a3      	strheq	r3, [r4, #12]
 800c19c:	bf18      	it	ne
 800c19e:	81a3      	strhne	r3, [r4, #12]
 800c1a0:	bd10      	pop	{r4, pc}

0800c1a2 <__sclose>:
 800c1a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1a6:	f000 b813 	b.w	800c1d0 <_close_r>
	...

0800c1ac <_write_r>:
 800c1ac:	b538      	push	{r3, r4, r5, lr}
 800c1ae:	4604      	mov	r4, r0
 800c1b0:	4608      	mov	r0, r1
 800c1b2:	4611      	mov	r1, r2
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	4d05      	ldr	r5, [pc, #20]	; (800c1cc <_write_r+0x20>)
 800c1b8:	602a      	str	r2, [r5, #0]
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	f7f6 fc26 	bl	8002a0c <_write>
 800c1c0:	1c43      	adds	r3, r0, #1
 800c1c2:	d102      	bne.n	800c1ca <_write_r+0x1e>
 800c1c4:	682b      	ldr	r3, [r5, #0]
 800c1c6:	b103      	cbz	r3, 800c1ca <_write_r+0x1e>
 800c1c8:	6023      	str	r3, [r4, #0]
 800c1ca:	bd38      	pop	{r3, r4, r5, pc}
 800c1cc:	200003c4 	.word	0x200003c4

0800c1d0 <_close_r>:
 800c1d0:	b538      	push	{r3, r4, r5, lr}
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	4d05      	ldr	r5, [pc, #20]	; (800c1ec <_close_r+0x1c>)
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	4608      	mov	r0, r1
 800c1da:	602b      	str	r3, [r5, #0]
 800c1dc:	f7f6 fc32 	bl	8002a44 <_close>
 800c1e0:	1c43      	adds	r3, r0, #1
 800c1e2:	d102      	bne.n	800c1ea <_close_r+0x1a>
 800c1e4:	682b      	ldr	r3, [r5, #0]
 800c1e6:	b103      	cbz	r3, 800c1ea <_close_r+0x1a>
 800c1e8:	6023      	str	r3, [r4, #0]
 800c1ea:	bd38      	pop	{r3, r4, r5, pc}
 800c1ec:	200003c4 	.word	0x200003c4

0800c1f0 <_fstat_r>:
 800c1f0:	b538      	push	{r3, r4, r5, lr}
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	4d06      	ldr	r5, [pc, #24]	; (800c210 <_fstat_r+0x20>)
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	4608      	mov	r0, r1
 800c1fa:	4611      	mov	r1, r2
 800c1fc:	602b      	str	r3, [r5, #0]
 800c1fe:	f7f6 fc2c 	bl	8002a5a <_fstat>
 800c202:	1c43      	adds	r3, r0, #1
 800c204:	d102      	bne.n	800c20c <_fstat_r+0x1c>
 800c206:	682b      	ldr	r3, [r5, #0]
 800c208:	b103      	cbz	r3, 800c20c <_fstat_r+0x1c>
 800c20a:	6023      	str	r3, [r4, #0]
 800c20c:	bd38      	pop	{r3, r4, r5, pc}
 800c20e:	bf00      	nop
 800c210:	200003c4 	.word	0x200003c4

0800c214 <_isatty_r>:
 800c214:	b538      	push	{r3, r4, r5, lr}
 800c216:	2300      	movs	r3, #0
 800c218:	4d05      	ldr	r5, [pc, #20]	; (800c230 <_isatty_r+0x1c>)
 800c21a:	4604      	mov	r4, r0
 800c21c:	4608      	mov	r0, r1
 800c21e:	602b      	str	r3, [r5, #0]
 800c220:	f7f6 fc2a 	bl	8002a78 <_isatty>
 800c224:	1c43      	adds	r3, r0, #1
 800c226:	d102      	bne.n	800c22e <_isatty_r+0x1a>
 800c228:	682b      	ldr	r3, [r5, #0]
 800c22a:	b103      	cbz	r3, 800c22e <_isatty_r+0x1a>
 800c22c:	6023      	str	r3, [r4, #0]
 800c22e:	bd38      	pop	{r3, r4, r5, pc}
 800c230:	200003c4 	.word	0x200003c4

0800c234 <_lseek_r>:
 800c234:	b538      	push	{r3, r4, r5, lr}
 800c236:	4604      	mov	r4, r0
 800c238:	4608      	mov	r0, r1
 800c23a:	4611      	mov	r1, r2
 800c23c:	2200      	movs	r2, #0
 800c23e:	4d05      	ldr	r5, [pc, #20]	; (800c254 <_lseek_r+0x20>)
 800c240:	602a      	str	r2, [r5, #0]
 800c242:	461a      	mov	r2, r3
 800c244:	f7f6 fc22 	bl	8002a8c <_lseek>
 800c248:	1c43      	adds	r3, r0, #1
 800c24a:	d102      	bne.n	800c252 <_lseek_r+0x1e>
 800c24c:	682b      	ldr	r3, [r5, #0]
 800c24e:	b103      	cbz	r3, 800c252 <_lseek_r+0x1e>
 800c250:	6023      	str	r3, [r4, #0]
 800c252:	bd38      	pop	{r3, r4, r5, pc}
 800c254:	200003c4 	.word	0x200003c4

0800c258 <_read_r>:
 800c258:	b538      	push	{r3, r4, r5, lr}
 800c25a:	4604      	mov	r4, r0
 800c25c:	4608      	mov	r0, r1
 800c25e:	4611      	mov	r1, r2
 800c260:	2200      	movs	r2, #0
 800c262:	4d05      	ldr	r5, [pc, #20]	; (800c278 <_read_r+0x20>)
 800c264:	602a      	str	r2, [r5, #0]
 800c266:	461a      	mov	r2, r3
 800c268:	f7f6 fbb3 	bl	80029d2 <_read>
 800c26c:	1c43      	adds	r3, r0, #1
 800c26e:	d102      	bne.n	800c276 <_read_r+0x1e>
 800c270:	682b      	ldr	r3, [r5, #0]
 800c272:	b103      	cbz	r3, 800c276 <_read_r+0x1e>
 800c274:	6023      	str	r3, [r4, #0]
 800c276:	bd38      	pop	{r3, r4, r5, pc}
 800c278:	200003c4 	.word	0x200003c4

0800c27c <_init>:
 800c27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c27e:	bf00      	nop
 800c280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c282:	bc08      	pop	{r3}
 800c284:	469e      	mov	lr, r3
 800c286:	4770      	bx	lr

0800c288 <_fini>:
 800c288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c28a:	bf00      	nop
 800c28c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c28e:	bc08      	pop	{r3}
 800c290:	469e      	mov	lr, r3
 800c292:	4770      	bx	lr
